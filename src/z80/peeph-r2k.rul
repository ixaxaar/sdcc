/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"\n"
"replace restart {\n"
"	ld	%1, %1\n"
"} by {\n"
"	; peephole 0 removed redundant load.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"} by {\n"
"	; peephole 1 removed dead load from %2 into %1.\n"
"} if notVolatile(%1), notUsed(%1), notVolatile(%2)\n"
"\n"
"replace restart {\n"
"	add	ix,sp\n"
"} by {\n"
"	; peephole 1a removed dead frame pointer setup.\n"
"} if notUsed('ix')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 + %3\n"
"} by {\n"
"	; peephole 2 removed dead load from %2 + %3 into %1.\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, (iy)\n"
"} by {\n"
"	ld	%1, 0 (iy)\n"
"	; peephole 3 made 0 offset explicit.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	(iy), %1\n"
"} by {\n"
"	ld	0 (iy), %1\n"
"	; peephole 4 made 0 offset explicit.\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	hl\n"
"} by {\n"
"	; peephole 5 removed dead increment of hl.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	dec	hl\n"
"} by {\n"
"	; peephole 6 removed dead decrement of hl.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (iy)\n"
"} by {\n"
"	; peephole 7 removed dead load from %2 (iy) into %1.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (ix)\n"
"} by {\n"
"	; peephole 8 removed dead load from %2 (ix) into %1.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3, %1\n"
"} by {\n"
"	; peephole 9 loaded %3 from %2 directly instead of going through %1.\n"
"	ld	%3, %2\n"
"} if canAssign(%3 %2), notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3, %4\n"
"	ld	%5, %1\n"
"} by {\n"
"	ld	%5, %2\n"
"	; peephole 10 loaded %5 from %2 directly instead of going through %1.\n"
"	ld	%3, %4\n"
"} if canAssign(%5 %2), notVolatile(%1), operandsNotRelated(%1 %4), operandsNotRelated(%1 %3), operandsNotRelated(%4 %5), notUsed(%1), notSame(%3 %4 '(hl)' '(de)' '(bc)'), notVolatile(%5)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	ld	%4, %1\n"
"} by {\n"
"	; peephole 11 loaded %2 (%3) into %4 directly instead of going through %1.\n"
"	ld	%4, %2 (%3)\n"
"} if canAssign(%4 %2 %3), notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	ld	%3 (%4), %1\n"
"} by {\n"
"	; peephole 12 loaded %2 into %3 (%4) directly instead of going through %1.\n"
"	ld	%3 (%4), %2\n"
"} if canAssign(%3 %4 %2), notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	ld	%4, %5 (%6)\n"
"	ld	%7, %1\n"
"} by {\n"
"	ld	%7, %2 (%3)\n"
"	; peephole 13 loaded %2 (%3) into %7 directly instead of going through %1.\n"
"	ld	%4, %5 (%6)\n"
"} if canAssign(%7 %2 %3), notVolatile(%1), notUsed(%1), notSame(%1 %4), notSame(%7 %4)\n"
"\n"
"replace restart {\n"
"	ld	%1, %7\n"
"	ld	%5 (%6), %4\n"
"	ld	%2 (%3), %1\n"
"} by {\n"
"	ld	%5 (%6), %4\n"
"	; peephole 14 loaded %7 into %2 (%3) directly instead of going through %1.\n"
"	ld	%2 (%3), %7\n"
"} if canAssign(%2 %3 %7), notVolatile(%1), notUsed(%1), notSame(%1 %4)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	ld	%4, %5\n"
"	ld	%7, %1\n"
"} by {\n"
"	ld	%7, %2 (%3)\n"
"	; peephole 15 loaded %2 (%3) into %7 directly instead of going through %1.\n"
"	ld	%4, %5\n"
"} if canAssign(%7 %2 %3), notVolatile(%1), notUsed(%1), notSame(%1 %5), notSame(%7 %4), notSame(%7 %5), notSame(%4 '(hl)' '(de)' '(bc)'), notSame(%5 '(hl)' '(de)' '(bc)' '(iy)')\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	a,%3 (%1)\n"
"} by {\n"
"	; peephole 16 loaded %2 into a directly instead of going through %1.\n"
"	ld	a,(#%2 + %3)\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	ld	a,(hl)\n"
"} by {\n"
"	ld	a,(#%1)\n"
"	; peephole 17 loaded a from (#%1) directly instead of using hl.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1 + %2\n"
"	ld	a,(hl)\n"
"} by {\n"
"	; peephole 18 loaded %2 into a directly instead of using hl.\n"
"	ld	a,(#%1 + %2)\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	ld	(hl),a\n"
"} by {\n"
"	ld	(#%1),a\n"
"	; peephole 19 loaded (#%1) from a directly instead of using hl.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1 + %2\n"
"	ld	(hl),a\n"
"} by {\n"
"	ld	(#%1 + %2),a\n"
"	; peephole 20 loaded (#%1) from a directly instead of using hl.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	srl	%1\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	a,%1\n"
"	; peephole 21 shifted in a instead of %1.\n"
"	srl	a\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	e, l\n"
"	ld	d, h\n"
"	ld	a, (de)\n"
"	srl	a\n"
"	ld	(de), a\n"
"} by {\n"
"	ld	e, l\n"
"	ld	d, h\n"
"	srl	(hl)\n"
"	; peephole 21a shifted in (hl) instead of a.\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	ld	%2, %3 (iy)\n"
"	srl	%2\n"
"	bit %4, %3 (iy)\n"
"} by {\n"
"	ld	hl, #%1 + %3\n"
"	; peephole 21c used hl instead of iy.\n"
"	ld	%2, (hl)\n"
"	srl %2\n"
"	bit %4, (hl)\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%1,(hl)\n"
"	ld	a,%2 (%3)\n"
"	sub	a,%1\n"
"} by {\n"
"	ld	a,%2 (%3)\n"
"	; peephole 22 used (hl) in sub directly instead of going through %1.\n"
"	sub	a,(hl)\n"
"} if notVolatile(%1), notUsed(%1)\n"
"\n"
"replace restart {\n"
"	inc	bc\n"
"	ld	l,c\n"
"	ld	h,b\n"
"} by {\n"
"	ld	l,c\n"
"	ld	h,b\n"
"	; peephole 23 incremented in hl instead of bc.\n"
"	inc	hl\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	inc	de\n"
"	ld	l,e\n"
"	ld	h,d\n"
"} by {\n"
"	ld	l,e\n"
"	ld	h,d\n"
"	; peephole 24 incremented in hl instead of de.\n"
"	inc	hl\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	ld	a,#%1\n"
"	ld	(bc),a\n"
"} by {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	ld	(hl),#%1\n"
"	; peephole 25 loaded #%1 into (hl) instead of (bc).\n"
"}\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	push	de\n"
"} by {\n"
"	; peephole 26 pushed hl directly instead of going through de.\n"
"	push	hl\n"
"} if notUsed('de'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	l,%1\n"
"	ld	h,d\n"
"	push	hl\n"
"} by {\n"
"	; peephole 27 pushed de instead of hl removing a load.\n"
"	ld	e,%1\n"
"	push	de\n"
"} if notUsed('hl'), notUsed('e')\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	push	bc\n"
"	push	de\n"
"} by {\n"
"	; peephole 28 pushed hl directly instead of going through de.\n"
"	push	bc\n"
"	push	hl\n"
"} if notUsed('de'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	l,c\n"
"	ld	h,b\n"
"	push	hl\n"
"} by {\n"
"	; peephole 29 pushed bc directly instead of going through hl.\n"
"	push	bc\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	l,%1\n"
"	ld	h,b\n"
"	push	hl\n"
"} by {\n"
"	; peephole 30 pushed bc instead of hl removing a load.\n"
"	ld	c,%1\n"
"	push	bc\n"
"} if notUsed('hl'), notUsed('c')\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	push	%1\n"
"	push	bc\n"
"} by {\n"
"	; peephole 31 pushed hl directly instead of going through bc.\n"
"	push	%1\n"
"	push	hl\n"
"} if notUsed('bc'), notSame(%1 'bc')\n"
"\n"
"replace restart {\n"
"	pop	de\n"
"	ld	l, e\n"
"	ld	h, d\n"
"} by {\n"
"	; peephole 32 popped hl directly instead of going through de.\n"
"	pop	hl\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	pop	bc\n"
"	ld	l, c\n"
"	ld	h, b\n"
"} by {\n"
"	; peephole 33 popped hl directly instead of going through bc.\n"
"	pop	hl\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	%1 (ix), %2\n"
"	ld	%3, %1 (ix)\n"
"} by {\n"
"	; peephole 34 loaded %3 from %2 instead of going through %1 (ix).\n"
"	ld	%1 (ix), %2\n"
"	ld	%3, %2\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1 (ix), a\n"
"	push	de\n"
"	ld	%2, %1 (ix)\n"
"} by {\n"
"	ld	%1 (ix), a\n"
"	push	de\n"
"	; peephole 34a loaded %2 from a instead of %1 (ix)\n"
"	ld	%2, a\n"
"}	\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,e\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; peephole 35 pushed de instead of pushing a twice.\n"
"	ld	d,a\n"
"	push	de\n"
"} if notUsed('d'), notUsed('a')\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,#%1\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; peephole 36 pushed de instead of pushing a twice.\n"
"	ld	d,a\n"
"	ld	e,#%1\n"
"	push	de\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,#%1\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; peephole 37 pushed bc instead of pushing a twice.\n"
"	ld	b,a\n"
"	ld	c,#%1\n"
"	push	bc\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	push	bc\n"
"	inc	sp\n"
"	push	de\n"
"	inc	sp\n"
"} by {\n"
"	ld	c, d\n"
"	; peephole 37a combined pushing of b and d.\n"
"	push	bc\n"
"} if notUsed('c')\n"
"\n"
"replace restart {\n"
"	push	bc\n"
"	inc	sp\n"
"	ld	a, c\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	push	bc\n"
"	ld	a, c\n"
"	; peephole 38 simplified pushing bc.\n"
"}\n"
"\n"
"replace restart {\n"
"	push	de\n"
"	inc	sp\n"
"	ld	a, #%1\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	ld	e, #%1\n"
"	push	de\n"
"	; peephole 39 simplified pushing de.\n"
"} if notUsed('e')\n"
"\n"
"replace restart {\n"
"	ld	a,#%1\n"
"	ld	d,a\n"
"} by {\n"
"	; peephole 40 loaded #%1 into d directly instead of going through a.\n"
"	ld	d,#%1\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	%2,%1\n"
"} by {\n"
"	; peephole 41 loaded %2 from a directly instead of going through %1.\n"
"	ld	%2,a\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	a,%1 (ix)\n"
"	push	af\n"
"	inc	sp\n"
"	ld	a,%2 (ix)\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	; peephole 42 pushed %1 (ix), %2(ix) through hl instead of af.\n"
"	ld	h,%1 (ix)\n"
"	ld	l,%2 (ix)\n"
"	push	hl\n"
"} if notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	c, l\n"
"	ld	b, h\n"
"	push	bc\n"
"} by {\n"
"	; peephole 43 pushed hl instead of bc.\n"
"	push	hl\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	pop	%1\n"
"	push	%1\n"
"} by {\n"
"	; peephole 44 eleminated dead pop/push pair.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	or	a,%2 (iy)\n"
"} by {\n"
"	; peephole 45 used hl instead of iy.\n"
"	ld	hl,#%1 + %2\n"
"	or	a,(hl)\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	ld	%2,%3 (iy)\n"
"} by {\n"
"	; peephole 46 used hl instead of iy.\n"
"	ld	hl,#%1 + %3\n"
"	ld	%2, (hl)\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	ld	h,%3 (iy)\n"
"} by {\n"
"	; peephole 46a used hl instead of iy.\n"
"	ld	hl,#%1 + %3\n"
"	ld	h, (hl)\n"
"} if notUsed('iy'), notUsed('l')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	ld	%2 (iy), %3\n"
"} by {\n"
"	; peephole 46b used hl instead of iy.\n"
"	ld	hl,#%1 + %2\n"
"	ld	(hl), %3\n"
"} if notUsed('iy'), notUsed('hl'), notSame(%3 'h' 'l')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	ld	%2,0 (iy)\n"
"	ld	%3,1 (iy)\n"
"} by {\n"
"	; peephole 47 used hl instead of iy.\n"
"	ld	hl,#%1\n"
"	ld	%2, (hl)\n"
"	inc	hl\n"
"	ld	%3, (hl)\n"
"} if notUsed('iy'), notUsed('hl'), operandsNotRelated(%2 'hl')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	ld	%2 (iy),%3\n"
"	ld	l,%2 (iy)\n"
"} by {\n"
"	; peephole 48 used hl instead of iy.\n"
"	ld	hl,#%1 + %2\n"
"	ld	(hl),%3\n"
"	ld	l,(hl)\n"
"} if notUsed('iy'), notUsed('h')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	ld	%2 (%3), %4\n"
"} by {\n"
"	; peephole 49 used hl instead of iy.\n"
"	ld	hl,#%1 + %2\n"
"	ld	(hl), %4\n"
"} if notUsed('iy'), notUsed('hl'), operandsNotRelated(%4 'hl')\n"
"\n"
"replace restart {\n"
"	ld	iy,#%1\n"
"	bit	%2,%3 (iy)\n"
"} by {\n"
"	; peephole 49a used hl instead of iy.\n"
"	ld	hl,#%1+%3\n"
"	bit	%2, (hl)\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	add	iy, sp\n"
"	ld	%2, %3 (iy)\n"
"} by {\n"
"	; peephole 49b used hl instead of iy.\n"
"	ld	hl, #%1+%3\n"
"	add	hl, sp\n"
"	ld	%2, (hl)\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	add	iy, sp\n"
"	ld	%2, 0 (iy)\n"
"	ld	%3, 1 (iy)\n"
"} by {\n"
"	; peephole 49c used hl instead of iy.\n"
"	ld	hl, #%1\n"
"	add	hl, sp\n"
"	ld	%2, (hl)\n"
"	inc	hl\n"
"	ld	%3, (hl)\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	add	iy, sp\n"
"	ld	l, 0 (iy)\n"
"	ld	h, 1 (iy)\n"
"} by {\n"
"	; peephole 49d used hl instead of iy.\n"
"	ld	hl, #%1\n"
"	add	hl, sp\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	ld	h, (hl)\n"
"	ld	l, a\n"
"} if notUsed('iy'), notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	add	iy, sp\n"
"	ld	0 (iy), #%2\n"
"	ld	1 (iy), #%3\n"
"} by {\n"
"	; peephole 49e used hl instead of iy.\n"
"	ld	hl, #%1\n"
"	add	hl, sp\n"
"	ld	(hl), #%2\n"
"	inc	hl\n"
"	ld	(hl), #%3\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	ld	a, 1 (iy)\n"
"	or	a, 0 (iy)\n"
"} by {\n"
"	ld	hl, #%1\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	or	a, (hl)\n"
"	; peephole 49f used hl instead of iy.\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	add	iy, sp\n"
"	ld	a, 1 (iy)\n"
"	or	a, 0 (iy)\n"
"} by {\n"
"	ld	hl, #%1\n"
"	add	hl, sp\n"
"	ld	a, (hl)\n"
"	inc	hl\n"
"	or	a, (hl)\n"
"	; peephole 49f' used hl instead of iy.\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	add	iy, sp\n"
"	bit	%2, %3 (iy)\n"
"} by {\n"
"	ld	hl, #%1+%3\n"
"	add	hl, sp\n"
"	bit	%2, (hl)\n"
"	; peephole 49g used hl instead of iy.\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	iy, #%1\n"
"	add	iy, sp\n"
"	or	a, %2 (iy)\n"
"} by {\n"
"	ld	hl, #%1+%2\n"
"	add	hl, sp\n"
"	or	a, (hl)\n"
"	; peephole 49h used hl instead of iy.\n"
"} if notUsed('iy'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%1,(hl)\n"
"	or	a,%1\n"
"} by {\n"
"	or	a,(hl)\n"
"	; peephole 50 used (hl) directly instead of going through %1.\n"
"} if notUsed(%1), notSame(%1 'a')\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	inc	bc\n"
"} by {\n"
"	; peephole 51 incremented in hl instead of bc.\n"
"	inc	hl\n"
"	ld	c,l\n"
"	ld	b,h\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	a,%1 (%2)\n"
"	bit	%3,a\n"
"} by {\n"
"	; peephole 52 tested bit of %1 (%2) directly instead of going through a.\n"
"	bit	%3,%1 (%2)\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	a,%1\n"
"	bit	%2,a\n"
"} by {\n"
"	; peephole 53 tested bit %2 of %1 directly instead of going through a.\n"
"	bit	%2,%1\n"
"} if notUsed('a'), canAssign(%1 'b')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	set	%2, a\n"
"	ld	%1, a\n"
"} by {\n"
"	; peephole 54 set bit %2 of %1 directly instead of going through a.\n"
"	set	%2, %1\n"
"	ld	a, %1\n"
"} if canAssign(%1 'b')\n"
"\n"
"replace restart {\n"
"	ld	a, %1 (%2)\n"
"	set	%3, a\n"
"	ld	%1 (%2), a\n"
"} by {\n"
"	; peephole 55 set bit %3 of %1 (%2) directly instead of going through a.\n"
"	set	%3, %1 (%2)\n"
"	ld	a, %1 (%2)\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	res	%2, a\n"
"	ld	%1, a\n"
"} by {\n"
"	; peephole 56 reset bit %2 of %1 directly instead of going through a.\n"
"	res	%2, %1\n"
"	ld	a, %1\n"
"} if canAssign(%1 'b')\n"
"\n"
"replace restart {\n"
"	ld	a, %1 (%2)\n"
"	res	%3, a\n"
"	ld	%1 (%2), a\n"
"} by {\n"
"	; peephole 57 reset bit %3 of %1 (%2) directly instead of going through a.\n"
"	res	%3, %1 (%2)\n"
"	ld	a, %1 (%2)\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	c, %1 (%2)\n"
"	ld	b, %3 (%4)\n"
"	ld	l,c\n"
"	ld	h,b\n"
"} by {\n"
"	; peephole 58 stored %1 (%2) %3 (%4) into hl directly instead of going through bc.\n"
"	ld	l, %1 (%2)\n"
"	ld	h, %3 (%4)\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	c, %1\n"
"	ld	b, %2\n"
"	ld	l,c\n"
"	ld	h,b\n"
"} by {\n"
"	; peephole 59 stored %2%1 into hl directly instead of going through bc.\n"
"	ld	l, %1\n"
"	ld	h, %2\n"
"} if notUsed('bc'), operandsNotRelated(%2 'l')\n"
"\n"
"replace restart {\n"
"	jp	NC,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	C,%2\n"
"	; peephole 60 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	C,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	NC,%2\n"
"	; peephole 61 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	NZ,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	Z,%2\n"
"	; peephole 62 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	Z,%1\n"
"	jp	%2\n"
"%1:\n"
"} by {\n"
"	jp	NZ,%2\n"
"	; peephole 63 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	jp	%6\n"
"	; peephole 64 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jp	%1,%5\n"
"} by {\n"
"	jp	%1,%6\n"
"	; peephole 65 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"%2:\n"
"%1:\n"
"} by {\n"
"   ; peephole 65a eliminated jump.\n"
"%2:\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	ld	a,#0x00\n"
"%1:\n"
"	bit	%2,a\n"
"	jp	Z,%3\n"
"} by {\n"
"	ld	a,#0x00\n"
"	jp	%3\n"
"	; peephole 65a jumped directly to %3 instead of testing a first.\n"
"%1:\n"
"	bit	%2,a\n"
"	jp	Z,%3\n"
"} if labelRefCountChange(%3 +1)\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	jp	%3\n"
"	jp	%4\n"
"} by {\n"
"	ld	%1, %2\n"
"	jp	%3\n"
"	; peephole 65b removed unreachable jump to %3.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"	jp	%3\n"
"%3:\n"
"} by {\n"
"	ld	%1, %2\n"
"%3:\n"
"	; peephole 65c removed redundant jump to %3.\n"
"} if labelRefCountChange(%3 -1)\n"
"\n"
"replace restart {\n"
"	ld	%1, #0x01\n"
"	bit	0, %1\n"
"	jp	Z, %2\n"
"} by {\n"
"	ld	%1, #0x01\n"
"	; peephole 65d removed impossible jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"	\n"
"replace restart {\n"
"	xor	a,a\n"
"	ld	a,#0x00\n"
"} by {\n"
"	xor	a,a\n"
"	; peephole 66 removed redundant load of 0 into a.\n"
"}\n"
"\n"
"replace {\n"
"	ld	e,#0x%1\n"
"	ld	d,#0x%2\n"
"} by {\n"
"	ld	de,#0x%2%1\n"
"	; peephole 67 combined constant loads into register pair.\n"
"}\n"
"\n"
"replace {\n"
"	ld	l,#0x%1\n"
"	ld	h,#0x%2\n"
"} by {\n"
"	ld	hl,#0x%2%1\n"
"	; peephole 68 combined constant loads into register pair.\n"
"}\n"
"\n"
"replace {\n"
"	ld	c,#0x%1\n"
"	ld	b,#0x%2\n"
"} by {\n"
"	ld	bc,#0x%2%1\n"
"	; peephole 69 combined constant loads into register pair.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	; peephole 70 removed redundant load from %1 into a.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	a,%1\n"
"	ld	%1,a\n"
"} by {\n"
"	ld	a,%1\n"
"	; peephole 71 removed redundant load from a into %1.\n"
"} if notVolatile(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%2\n"
"	or	a,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	or	a,%2\n"
"	; peephole 72 removed load by reordering or arguments.\n"
"} if notVolatile(%1), canAssign('b' %2)\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	or	a,a\n"
"} by {\n"
"	or	a,%1\n"
"	; peephole 73 removed redundant or after or.\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,%1 (%2)\n"
"	or	a,a\n"
"} by {\n"
"	or	a,%1 (%2)\n"
"	; peephole 74 removed redundant or after or.\n"
"}\n"
"\n"
"replace restart {\n"
"	and	a,%1\n"
"	or	a,a\n"
"} by {\n"
"	and	a,%1\n"
"	; peephole 75 removed redundant or after and.\n"
"}\n"
"\n"
"replace restart {\n"
"	xor	a,%1\n"
"	or	a,a\n"
"} by {\n"
"	xor	a,%1\n"
"	; peephole 76 removed redundant or after xor.\n"
"}\n"
"\n"
"replace restart {\n"
"	xor	a,%1 (%2)\n"
"	or	a,a\n"
"} by {\n"
"	xor	a,%1 (%2)\n"
"	; peephole 77 removed redundant or after xor.\n"
"}\n"
"\n"
"replace {\n"
"	ld	%1,%2\n"
"	ld	a,%2\n"
"} by {\n"
"	ld	a,%2\n"
"	ld	%1,a\n"
"	; peephole 78 load value in a first and use it next\n"
"} if notVolatile(%1 %2)\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"	ld	%3,%4\n"
"	ld	%2,%1\n"
"	ld	%4,%3\n"
"} by {\n"
"	ld	%1,%2\n"
"	ld	%3,%4\n"
"	; peephole 79 removed redundant load from %3%1 into %4%2\n"
"} if notVolatile(%1 %2 %3 %4)\n"
"\n"
"replace restart {\n"
"	push	de\n"
"	inc	sp\n"
"	ld	a,e\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	push	de\n"
"	; peephole 80 pushed de\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	iy,%1\n"
"	add	iy,sp\n"
"	ld	sp,iy\n"
"} by {\n"
"	ld	hl,%1\n"
"	add	hl,sp\n"
"	ld	sp,hl\n"
"	; peephole 81 fixed stack using hl instead of iy.\n"
"} if notUsed('hl'), notUsed('iy')\n"
"\n"
"replace restart {\n"
"	ld	a,%1\n"
"	sub	a,%2\n"
"	jp	%3,%4\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	a,%1\n"
"	cp	a,%2\n"
"	jp	%3,%4\n"
"	; peephole 82 removed load by replacing sub with cp\n"
"	assert	a=%1\n"
"} if notVolatile(%1), notUsedFrom(%4 'a')\n"
"\n"
"replace restart {\n"
"	assert	a=%1\n"
"	sub	a,%2\n"
"	jp	%3,%4\n"
"	ld	a,%1\n"
"} by {\n"
"	cp	a,%2\n"
"	jp	%3,%4\n"
"	; peephole 83 removed load by replacing sub with cp\n"
"	assert	a=%1\n"
"} if notUsedFrom(%4 'a')\n"
"\n"
"replace restart {\n"
"	assert	a=%1\n"
"} by {\n"
"}\n"
"\n"
"replace restart {\n"
"	sub	a,#0xFF\n"
"	jp	Z,%1\n"
"} by {\n"
"	inc	a\n"
"	; peephole 84 replaced sub a,#0xFF by inc a.\n"
"	jp	Z,%1\n"
"}\n"
"\n"
"replace restart {\n"
"	sub	a,#0xFF\n"
"	jp	NZ,%1\n"
"} by {\n"
"	inc	a\n"
"	; peephole 85 replaced sub a,#0xFF by inc a.\n"
"	jp	NZ,%1\n"
"}\n"
"\n"
"replace restart {\n"
"	rlca\n"
"	ld	a,#0x00\n"
"	rla\n"
"} by {\n"
"	rlca\n"
"	and	a,#0x01\n"
"	; peephole 86 replaced zero load, rla by and since rlca writes the same value to carry bit and least significant bit.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,%2\n"
"	push	%1\n"
"	pop	%4\n"
"	ld	%1,%3\n"
"} by {\n"
"	ld	%4,%2\n"
"	; peephole 87 moved %2 directly into de instead of going through %1.\n"
"	ld	%1,%3\n"
"}\n"
"\n"
"replace restart {\n"
"	add	a,#0x00\n"
"	ld	%2,a\n"
"	ld	a,%3\n"
"	adc	a,%4\n"
"} by {\n"
"	; peephole 88 removed lower part of multibyte addition.\n"
"	ld	%2,a\n"
"	ld	a,%3\n"
"	add	a,%4\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, l\n"
"	add	a, #0x%1\n"
"	ld	e, a\n"
"	ld	a, h\n"
"	adc	a, #0x%2\n"
"	ld	d, a\n"
"} by {\n"
"	ld	de, #0x%2%1\n"
"	add	hl, de\n"
"	; peephole 89 used 16-bit addition.\n"
"	ld	e, l\n"
"	ld	d, h\n"
"	ld	a, h\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	a, l\n"
"	add	a, #0x%1\n"
"	ld	c, a\n"
"	ld	a, h\n"
"	adc	a, #0x%2\n"
"	ld	b, a\n"
"} by {\n"
"	ld	bc, #0x%2%1\n"
"	add	hl,bc\n"
"	; peephole 90 used 16-bit addition.\n"
"	ld	c, l\n"
"	ld	b, h\n"
"	ld	a, h\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%2\n"
"	add	a,%1\n"
"} by {\n"
"	; peephole 91 removed loads by exploiting commutativity of addition.\n"
"	add	a,%2\n"
"} if notVolatile(%1), notUsed(%1), canAssign('b' %2)\n"
"\n"
"replace restart {\n"
"	ld	%1 (ix),a\n"
"	ld	a,#%2\n"
"	add	a,%1 (ix)\n"
"} by {\n"
"	ld	%1 (ix),a\n"
"	; peephole 92 removed loads by exploiting commutativity of addition.\n"
"	add	a,#%2\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	ld	a,(hl)\n"
"	inc	a\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	ld	(hl),a\n"
"} by {\n"
"	ld	l,%1 (ix)\n"
"	ld	h,%2 (ix)\n"
"	inc	(hl)\n"
"	; peephole 93 incremented in (hl) instead of going through a.\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	%1, %2 (%3)\n"
"	inc	%1\n"
"	ld	%2 (%3), %1\n"
"} by {\n"
"	inc	%2 (%3)\n"
"	ld	%1, %2 (%3)\n"
"	; peephole 93a incremented in %2 (%3) instead of going through %1.\n"
"} if notSame(%3 'sp')\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	ld	a,%2\n"
"	add	a,%1\n"
"} by {\n"
"	ld	%1, a\n"
"	; peephole 94 removed load by exploiting commutativity of addition.\n"
"	add	a,%2\n"
"} if notSame(%2 '(bc)' '(de)'), canAssign('b' %2)\n"
"\n"
"replace restart {\n"
"	ld	c,l\n"
"	ld	b,h\n"
"	ld	hl,#%1\n"
"	add	hl,bc\n"
"} by {\n"
"	; peephole 95 removed loads by exploiting commutativity of addition.\n"
"	ld	bc,#%1\n"
"	add	hl,bc\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	add	hl,%2\n"
"	ld	bc,#%4\n"
"	add	hl,bc\n"
"} by {\n"
"	; peephole 96 removed loads by exploiting commutativity of addition.\n"
"	ld	hl,#%1 + %4\n"
"	add	hl,%2\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	ld	c,e\n"
"	ld	b,d\n"
"	ld	hl,#%1\n"
"	add	hl,bc\n"
"} by {\n"
"	; peephole 97 removed loads by exploiting commutativity of addition.\n"
"	ld	hl,#%1\n"
"	add	hl,de\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; peephole 98 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	and	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	and	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; peephole 99 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,#0x00\n"
"} by {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	%3,a\n"
"	; peephole 100 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	a\n"
"	jp	NZ,%1\n"
"	ld	%2,#0x00\n"
"} by {\n"
"	inc	a\n"
"	jp	NZ,%1\n"
"	ld	%2,a\n"
"	; peephole 101 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	ld	%2,#0x00\n"
"} by {\n"
"	dec	a\n"
"	jp	NZ,%1\n"
"	ld	%2,a\n"
"	; peephole 102 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	ld	a,%3\n"
"	or	a,a\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	or	a,%3\n"
"	; peephole 103 shortened or using a (which has just been tested to be #0x00).\n"
"} if canAssign('b' %3)\n"
"\n"
"replace restart {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	ld	a,%3\n"
"	or	a,a\n"
"} by {\n"
"	sub	a,%1\n"
"	jp	NZ,%2\n"
"	or	a,%3\n"
"	; peephole 104 shortened or using a (which has just been tested to be #0x00).\n"
"} if canAssign('b' %3)\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	push	%3\n"
"	ld	%4,#0x00\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	push	%3\n"
"	ld	%4,a\n"
"	; peephole 105 replaced constant #0x00 by a (which has just been tested to be #0x00).\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	(hl),#0x00\n"
"	inc	hl\n"
"	ld	(hl),#0x00\n"
"} by {\n"
"	xor	a, a\n"
"	; peephole 106 cached zero in a.\n"
"	ld	(hl), a\n"
"	inc	hl\n"
"	ld	(hl), a\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	add	hl,%2\n"
"	inc	hl\n"
"} by {\n"
"	ld	hl,#%1+1\n"
"	add	hl,%2\n"
"	; peephole 107 moved increment of hl to constant.\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	hl\n"
"	ld	%1,#%2\n"
"	add	hl,%1\n"
"} by {\n"
"	ld	%1,#%2+1\n"
"	add	hl,%1\n"
"	; peephole 108 moved increment of hl to constant.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	dec	hl\n"
"	ld	%1,#%2\n"
"	add	hl,%1\n"
"} by {\n"
"	ld	%1,#%2-1\n"
"	add	hl,%1\n"
"	; peephole 109 moved decrement of hl to constant.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	inc	hl\n"
"	inc	hl\n"
"	inc	hl\n"
"	ld	hl, (hl)\n"
"} by {\n"
"	; peephole 109a moved increment of hl to offset.\n"
"	ld	hl, 3 (hl)\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	hl\n"
"	inc	hl\n"
"	ld	hl, (hl)\n"
"} by {\n"
"	; peephole 109b moved increment of hl to offset.\n"
"	ld	hl, 2 (hl)\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	hl\n"
"	ld	hl, (hl)\n"
"} by {\n"
"	; peephole 109c moved increment of hl to offset.\n"
"	ld	hl, 1 (hl)\n"
"}\n"
"\n"
"replace restart {\n"
"	inc	iy\n"
"	ld	%1, %2 (iy)\n"
"} by {\n"
"	ld	%1, %2+1 (iy)\n"
"	; peephole 110 moved increment of iy to offset.\n"
"} if notUsed('iy')\n"
"\n"
"replace restart {\n"
"	push	hl\n"
"	pop	iy\n"
"	pop	hl\n"
"	inc	iy\n"
"} by {\n"
"	inc	hl\n"
"	push	hl\n"
"	pop	iy\n"
"	pop	hl\n"
"	; peephole 111 incremented in hl instead of iy.\n"
"}\n"
"\n"
"replace restart {\n"
"	push	hl\n"
"	pop	iy\n"
"	inc	iy\n"
"} by {\n"
"	inc	hl\n"
"	push	hl\n"
"	pop	iy\n"
"	; peephole 111a incremented in hl instead of iy.\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	hl,%1\n"
"	add	hl,%2\n"
"	push	hl\n"
"	pop	iy\n"
"} by {\n"
"	ld	iy,%1\n"
"	add	iy,%2\n"
"	; peephole 111b added in iy instead of hl.\n"
"} if notUsed('hl'), notSame(%2 'hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	sp,%1\n"
"} by {\n"
"	; peephole 112 removed redundant pop af.\n"
"	ld	sp,%1\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	inc	sp\n"
"	ld	sp,%1\n"
"} by {\n"
"	; peephole 113 removed redundant inc sp.\n"
"	ld	sp,%1\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	call	%1\n"
"	ret\n"
"} by {\n"
"	jp	%1\n"
"	; peephole 114 replaced call at end of function by jump (tail call optimization).\n"
"}\n"
"\n"
"replace restart {\n"
"	call	%1\n"
"	pop	ix\n"
"	ret\n"
"} by {\n"
"	pop	ix\n"
"	jp	%1\n"
"	; peephole115 replaced call at end of function by jump moving call beyond pop ix (tail call optimization).\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	%3,%4\n"
"	ld	%1,#%2\n"
"} by {\n"
"	ld	%1,#%2\n"
"	ld	%3,%4\n"
"	; peephole 116 removed load of #%2 into %1 since it's still there.\n"
"} if notVolatile(%1), operandsNotRelated(%3 %1)\n"
"\n"
"replace restart {\n"
"	ld	hl,#%1\n"
"	ld	de,#%1\n"
"} by {\n"
"	; peephole 117 used #%1 from hl for load into de.\n"
"	ld	hl,#%1\n"
"	ld	e,l\n"
"	ld	d,h\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1 (ix),l\n"
"	ld	%2 (ix),h\n"
"	ld	%3,%1 (ix)\n"
"	ld	%4,%2 (ix)\n"
"} by {	\n"
"	ld	%1 (ix),l\n"
"	ld	%2 (ix),h\n"
"	; peephole 118 used hl instead of %2 (ix), %1 (ix) to load %4%3.\n"
"	ld	%3,l\n"
"	ld	%4,h\n"
"} if operandsNotRelated('h' %3)\n"
"\n"
"replace restart {\n"
"	ld	%1, a\n"
"	ld	a, %2 (%3)\n"
"	adc	a, #%4\n"
"	ld	%6, %1\n"
"} by {\n"
"	ld	%6, a\n"
"	ld	a, %2 (%3)\n"
"	adc	a, #%4\n"
"	; peephole 119 loaded %6 from a directly instead of going through %1.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	%1, a\n"
"	ld	a, %2 (%3)\n"
"	adc	a, #%4\n"
"	ld	%5, a\n"
"	ld	%6, %1\n"
"} by {\n"
"	ld	%6, a\n"
"	ld	a, %2 (%3)\n"
"	adc	a, #%4\n"
"	ld	%5, a\n"
"	; peephole 120 loaded %6 from a directly instead of going through %1.\n"
"} if notUsed(%1), notSame(%5 %1), notSame(%5 '(hl)' '(de)' '(bc)'), notSame(%5 %6), notSame(%6 '(hl)' '(de)' '(bc)'), notSame(%5 'a'), notSame(%6 'a')\n"
"\n"
"replace restart {\n"
"	ld	%1, a\n"
"	ld	a, #%2\n"
"	adc	a, #%3\n"
"	ld	%5, a\n"
"	ld	%6, %1\n"
"} by {\n"
"	ld	%6, a\n"
"	ld	a, #%2\n"
"	adc	a, #%3\n"
"	ld	%5, a\n"
"	; peephole 121 loaded %6 from a directly instead of going through %1.\n"
"} if notUsed(%1), notSame(%5 %1), notSame(%5 %6 '(hl)' '(de)' '(bc)'), notSame(%6 'a')\n"
"\n"
"replace restart {\n"
"	ld	hl, #%1\n"
"	add	hl, %2\n"
"	ex	de, hl\n"
"	ld	hl, #%3\n"
"	add	hl, de\n"
"} by {\n"
"	ld	hl, #%1+%3\n"
"	add	hl, %2\n"
"	; peephole 122 removed addition and loads exploiting commutativity of addition.\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	ld	%1,l\n"
"	ld	%2,h\n"
"	ex	de,hl\n"
"	ld	(hl),%1\n"
"	inc	hl\n"
"	ld	(hl),%2\n"
"} by {\n"
"	ld	%1,l\n"
"	ex	de,hl\n"
"	; peephole 122a used de instead of going through %1%2.\n"
"	ld	(hl),e\n"
"	inc	hl\n"
"	ld	(hl),d\n"
"} if notUsed(%2), notSame(%1 'l' 'h' 'e' 'd'), notSame(%2 'l' 'h' 'e' 'd')\n"
"	\n"
"replace restart {\n"
"	ld	e, l\n"
"	ld	d, h\n"
"	ld	hl, #0x0001\n"
"	add	hl, de\n"
"} by {\n"
"	ld	e, l\n"
"	ld	d, h\n"
"	inc	hl\n"
"	; peephole 123 replaced addition by increment.\n"
"}\n"
"\n"
"replace restart {	\n"
"	ld      sp,hl\n"
"	ld      hl,#0x0002\n"
"	add     hl,sp\n"
"} by {\n"
"	ld	sp, hl\n"
"	inc	hl\n"
"	inc	hl\n"
"	; peephole 124 replaced addition by increment.\n"
"}\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	ld	hl, #%1\n"
"	add	hl, de\n"
"} by {\n"
"	; peephole 125 removed ex exploiting commutativity of addition.\n"
"	ld	de, #%1\n"
"	add	hl, de\n"
"} if notUsed('de')\n"
"\n"
"replace restart {\n"
"	ex	de, hl\n"
"	push	bc\n"
"	ex	de, hl\n"
"} by {\n"
"	push	bc\n"
"	; peephole 126 canceled subsequent ex de, hl.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	hl, #%1\n"
"	add	hl, %2\n"
"	ex	de, hl\n"
"	inc	de\n"
"} by {\n"
"	ld	hl, #%1+1\n"
"	; peephole 127 moved increment to constant.\n"
"	add	hl, %2\n"
"	ex	de, hl\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	a,#0x01\n"
"	jp	%1\n"
"%2:\n"
"	xor	a,a\n"
"%1:\n"
"	sub	a,#0x01\n"
"	ld	a,#0x00\n"
"	rla\n"
"} by {\n"
"	xor	a,a\n"
"	jp	%1\n"
"%2:\n"
"	ld	a,#0x01\n"
"%1:\n"
"	; peephole 128 removed negation.\n"
"} if labelRefCount(%1 1)\n"
"\n"
"replace restart {\n"
"	and	a,#0x01\n"
"	sub	a,#0x01\n"
"	ld	a,#0x00\n"
"	rla\n"
"} by {\n"
"	and	a,#0x01\n"
"	xor	a,#0x01\n"
"	; peephole 129 used xor for negation.\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,a\n"
"	sub	a,#%1\n"
"} by {\n"
"	; peephole 130 removed redundant or.\n"
"	sub	a,#%1\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a,#0x00\n"
"	rla\n"
"	sub	a,#0x01\n"
"	ld	a,#0x00\n"
"	rla\n"
"} by {\n"
"	ld	a,#0x00\n"
"	ccf\n"
"	; peephole 131 moved negation from bit 0 to carry flag.\n"
"	rla\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, #<(%1)\n"
"	add	a, l\n"
"	ld	l, a\n"
"	ld	a, #>(%1)\n"
"	adc	a, h\n"
"	ld	h, a\n"
"	push	bc\n"
"} by {\n"
"	push	bc\n"
"	ld	bc, #%1\n"
"	add	hl, bc\n"
"	; peephole 132 used 16 bit addition by moving push bc\n"
"	ld	a, h\n"
"} if notUsed('bc')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	push	hl\n"
"} by {\n"
"	; peephole 133 used ex to move hl onto the stack.\n"
"	ld	0(sp),hl\n"
"} if notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	hl, #%1\n"
"	push	hl\n"
"} by {\n"
"	ld	hl, #%1\n"
"	; peephole 134 used 0(sp) to move hl onto the stack.\n"
"	ld	0(sp),hl\n"
"} if notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	inc	sp\n"
"	ld	hl,#%1\n"
"	push	hl\n"
"} by {\n"
"	inc	sp\n"
"	ld	hl,#%1\n"
"	; peephole 135 used 0(sp) to move #%1 onto the stack.\n"
"	ld	0(sp),hl\n"
"} if notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	a,#%1\n"
"	push	af\n"
"	inc	sp\n"
"} by {\n"
"	ld	h,#%1\n"
"	ld	0(sp),hl\n"
"	; peephole 136 used 0(sp) to move #%1 onto the stack.\n"
"	inc	sp\n"
"} if notUsed('a'), notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	%1,#%2\n"
"	ld	%3 (%1),a\n"
"%4:\n"
"	ld	%1,%5\n"
"} by {\n"
"	ld	(#%2 + %3),a\n"
"	; peephole 137 directly used #%2 instead of going through %1 using indirect addressing.\n"
"%4:\n"
"	ld	%1,%5\n"
"}\n"
"\n"
"replace restart {\n"
"	pop	af\n"
"	ld	%1,#%2\n"
"	ld	%3 (%1),%4\n"
"	ld	%1,#%5\n"
"} by {\n"
"	ld	a,%4\n"
"	ld	(#%2 + %3),a\n"
"	; peephole 138 used #%2 directly instead of going through %1 using indirect addressing.\n"
"	pop	af\n"
"	ld	%1,#%5\n"
"} if notSame(%3 'a')\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	bit	%2,%1\n"
"} by {\n"
"	bit	%2,a\n"
"	; peephole 139 tested bit %2 of a directly instead of going through %1.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	sbc	a,%1\n"
"	bit	7,a\n"
"	jp	Z,%2\n"
"} by {\n"
"	sbc	a,%1\n"
"	jp	P,%2\n"
"	; peephole 140 used sign flag instead of testing bit 7.\n"
"}\n"
"\n"
"replace restart {\n"
"	sbc	a,%1\n"
"	bit	7,a\n"
"	jp	NZ,%2\n"
"} by {\n"
"	sbc	a,%1\n"
"	jp	M,%2\n"
"	; peephole 141 used sign flag instead of testing bit 7.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	%1,a\n"
"	or	a,a\n"
"	jp	%3,%4\n"
"	ld	a,%1\n"
"} by {\n"
"	ld	%1,a\n"
"	or	a,a\n"
"	jp	%3,%4\n"
"	; peephole 142 used value still in a instead of reloading from %1.\n"
"}\n"
"\n"
"replace {\n"
"	jp	%5\n"
"	ret\n"
"} by {\n"
"	jp	%5\n"
"	; peephole 143 removed unused ret.\n"
"}\n"
"\n"
"replace {\n"
"	jp	%5\n"
"	ld	sp,ix\n"
"	pop	ix\n"
"	ret\n"
"} by {\n"
"	jp	%5\n"
"	; peephole 144 removed unused ret.\n"
"}\n"
"\n"
"replace restart {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	xor	a,a\n"
"	jp	%3\n"
"} by {\n"
"	or	a,%1\n"
"	jp	NZ,%2\n"
"	; peephole 145 removed redundant zeroing of a (which has just been tested to be #0x00).\n"
"	jp	%3\n"
"}\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	ld	d,h\n"
"	ld	e,l\n"
"} by {\n"
"	; peephole 146 used ex to load hl into de.\n"
"	ex	de,hl\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	e,l\n"
"	ld	d,h\n"
"} by {\n"
"	; peephole 147 used ex to load hl into de.\n"
"	ex	de,hl\n"
"} if notUsed('hl')\n"
"\n"
"replace restart {\n"
"	ld	l,e\n"
"	ld	h,d\n"
"} by {\n"
"	; peephole 148 used ex to load de into hl.\n"
"	ex	de,hl\n"
"} if notUsed('de')\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"%1:\n"
"} by {\n"
"	; peephole 149 removed unused label %1.\n"
"} if labelRefCount(%1 0)\n"
"\n"
"barrier\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"%2:\n"
"} by {\n"
"	; peephole 150-3 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"%2:\n"
"} by {\n"
"	; peephole 150-3' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"%2:\n"
"} by {\n"
"	; peephole 150-4 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"%2:\n"
"} by {\n"
"	; peephole 150-4' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"%2:\n"
"} by {\n"
"	; peephole 150-5 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"%2:\n"
"} by {\n"
"	; peephole 150-5' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"%2:\n"
"} by {\n"
"	; peephole 150-6 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"%2:\n"
"} by {\n"
"	; peephole 150-6' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"	jp	%11\n"
"%2:\n"
"} by {\n"
"	; peephole 150-7 removed addition using short jumps in jump-table.\n"
"	pop	de\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"	jr	%11\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	hl,de\n"
"	jp	(hl)\n"
"%1:\n"
"	jp	%5\n"
"	jp	%6\n"
"	jp	%7\n"
"	jp	%8\n"
"	jp	%9\n"
"	jp	%10\n"
"	jp	%11\n"
"%2:\n"
"} by {\n"
"	; peephole 150-7' removed addition using short jumps in jump-table.\n"
"	jp	(hl)\n"
"%1:\n"
"	jr	%5\n"
"	jr	%6\n"
"	jr	%7\n"
"	jr	%8\n"
"	jr	%9\n"
"	jr	%10\n"
"	jr	%11\n"
"%2:\n"
"} if labelJTInRange\n"
"\n"
"barrier\n"
"\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	ret\n"
"	; peephole 151 replaced jump by return.\n"
"} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1,%5\n"
"} by {\n"
"	ret	%1\n"
"	; peephole 152 replaced jump by return.\n"
"} if labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	jp	%5\n"
"} by {\n"
"	jr	%5\n"
"	; peephole 153 changed absolute to relative unconditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
"replace {\n"
"	jp	Z,%5\n"
"} by {\n"
"	jr	Z,%5\n"
"	; peephole 154 changed absolute to relative conditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
"replace {\n"
"	jp	NZ,%5\n"
"} by {\n"
"	jr	NZ,%5\n"
"	; peephole 155 changed absolute to relative conditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
"replace {\n"
"	jp	C,%5\n"
"} by {\n"
"	jr	C,%5\n"
"	; peephole 156 changed absolute to relative conditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
"replace {\n"
"	jp	NC,%5\n"
"} by {\n"
"	jr	NC,%5\n"
"	; peephole 157 changed absolute to relative conditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
