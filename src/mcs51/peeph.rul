/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"replace {\n"
"	xch	a,%1\n"
"	xch	a,%1\n"
"} by {\n"
"	;	Peephole 2.a	removed redundant xch xch\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,#0x00\n"
"	mov	a,#0x00\n"
"} by {\n"
"	;	Peephole 3.a	changed mov to clr\n"
"	clr	a\n"
"	mov	%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,#0x00\n"
"	clr	a\n"
"} by {\n"
"	;	Peephole 3.b	changed mov to clr\n"
"	clr	a\n"
"	mov	%1,a\n"
"}\n"
"\n"
"replace restart {\n"
"	mov	%1,#0x00\n"
"	mov	%2,#0x00\n"
"	mov	a,%3\n"
"} by {\n"
"	;	Peephole 3.c	changed mov to clr\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	a,%3\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	clr	a\n"
"} by {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	;	Peephole 3.d	removed redundant clr\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	clr	a\n"
"} by {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	;	Peephole 3.e	removed redundant clr\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	mov	%4,a\n"
"	clr	a\n"
"} by {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	mov	%4,a\n"
"	;	Peephole 3.f	removed redundant clr\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	mov	%4,a\n"
"	mov	%5,a\n"
"	clr	a\n"
"} by {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	mov	%4,a\n"
"	mov	%5,a\n"
"	;	Peephole 3.g	removed redundant clr\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,#0x00\n"
"} by {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	;	Peephole 3.h	changed mov %3,#0x00 to ...,a\n"
"	mov	%3,a\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	mov	%4,#0x00\n"
"} by {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	;	Peephole 3.i	changed mov %4,#0x00 to ...,a\n"
"	mov	%4,a\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	mov	%4,a\n"
"	mov	%5,#0x00\n"
"} by {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	mov	%4,a\n"
"	;	Peephole 3.j	changed mov %5,#0x00 to ...,a\n"
"	mov	%5,a\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	%1,a\n"
"	mov	%2,a\n"
"	mov	%3,a\n"
"	mov	%4,a\n"
"	mov	%5,a\n"
"	mov	%6,#0x00\n"
"} by {\n"
"	clr a\n"
"	mov %1,a\n"
"	mov %2,a\n"
"	mov %3,a\n"
"	mov %4,a\n"
"	mov %5,a\n"
"	;	Peephole 3.k	changed mov %6,#0x00 to ...,a\n"
"	mov %6,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	mov	dptr,#%2\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	%1,a\n"
"	mov	dptr,#%2\n"
"	;	Peephole 100	removed redundant mov\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	;	Peephole 101.a	removed redundant moves\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	;	Peephole 101.b	removed redundant moves\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	;	Peephole 101.c	removed redundant mov\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	%1,%2\n"
"	ljmp	%3\n"
"%4:\n"
"	mov	%1,%5\n"
"%3:\n"
"	mov	dpl,%1\n"
"%7:\n"
"	mov	sp,_bp\n"
"	pop	_bp\n"
"} by {\n"
"	;	Peephole 102	removed redundant mov to %1\n"
"	mov	dpl,%2\n"
"	ljmp	%3\n"
"%4:\n"
"	mov	dpl,%5\n"
"%3:\n"
"%7:\n"
"	mov	sp,_bp\n"
"	pop	_bp\n"
"} if notVolatile(%1), labelRefCount(%3 1)\n"
"\n"
"replace {\n"
"	mov	%1,%2\n"
"	ljmp	%3\n"
"%4:\n"
"	mov	a%1,%5\n"
"%3:\n"
"	mov	dpl,%1\n"
"%7:\n"
"	mov	sp,_bp\n"
"	pop	_bp\n"
"} by {\n"
"	;	Peephole 103	removed redundant mov to %1\n"
"	mov	dpl,%2\n"
"	ljmp	%3\n"
"%4:\n"
"	mov	dpl,%5\n"
"%3:\n"
"%7:\n"
"	mov	sp,_bp\n"
"	pop	_bp\n"
"} if labelRefCount(%3 1)\n"
"\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	mov	a,%1\n"
"} by {\n"
"	mov	%1,a\n"
"	;	Peephole 105.a	removed redundant mov\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	@dptr,a\n"
"	;	Peephole 105.b  removed redundant movx\n"
"} if notVolatile %1\n"
"\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	clr	c\n"
"	mov	a,%1\n"
"} by {\n"
"	mov	%1,a\n"
"	clr	c\n"
"	;	Peephole 106	removed redundant mov\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	ljmp	%1\n"
"%1:\n"
"} by {\n"
"	;	Peephole 107	removed redundant ljmp\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jc	%1\n"
"	ljmp	%5\n"
"%1:\n"
"} by {\n"
"	;	Peephole 108.a	removed ljmp by inverse jump logic\n"
"	jnc	%5\n"
"%1:\n"
"} if labelInRange(%5), labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jz	%1\n"
"	ljmp	%5\n"
"%1:\n"
"} by {\n"
"	;	Peephole 108.b	removed ljmp by inverse jump logic\n"
"	jnz	%5\n"
"%1:\n"
"} if labelInRange(%5), labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"	ljmp	%5\n"
"%1:\n"
"} by {\n"
"	;	Peephole 108.c	removed ljmp by inverse jump logic\n"
"	jz	%5\n"
"%1:\n"
"} if labelInRange(%5), labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jb	%1,%2\n"
"	ljmp	%5\n"
"%2:\n"
"} by {\n"
"	;	Peephole 108.d	removed ljmp by inverse jump logic\n"
"	jnb	%1,%5\n"
"%2:\n"
"} if labelInRange(%5), labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	jnb	%1,%2\n"
"	ljmp	%5\n"
"%2:\n"
"} by {\n"
"	;	Peephole 108.e	removed ljmp by inverse jump logic\n"
"	jb	%1,%5\n"
"%2:\n"
"} if labelInRange(%5), labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	ljmp	%5\n"
"%1:\n"
"} by {\n"
"	;	Peephole 112.b	changed ljmp to sjmp\n"
"	sjmp	%5\n"
"%1:\n"
"} if labelInRange(%5)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cpl	a\n"
"%3:\n"
"	rrc	a\n"
"	mov	%4,c\n"
"} by {\n"
"	;	Peephole 113.a	optimized misc sequence\n"
"	clr	%4\n"
"	cjne	%1,%2,%3\n"
"	setb	%4\n"
"%3:\n"
"} if labelRefCount %3 1\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	cpl	a\n"
"%3:\n"
"	rrc	a\n"
"	mov	%4,c\n"
"} by {\n"
"	;	Peephole 113.b	optimized misc sequence\n"
"	clr	%4\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	setb	%4\n"
"%3:\n"
"} if labelRefCount %3 2\n"
"\n"
"replace {\n"
"	mov	r%2,dph\n"
"	mov	a,dpl\n"
"	mov	dptr,#%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,r%2\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	inc	dptr\n"
"	movx	a,@dptr\n"
"} by {\n"
"	mov	r%2,dph\n"
"	mov	a,dpl\n"
"	mov	dptr,#%1\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	;	Peephole 114.a	optimized 16-bit parameter passing\n"
"	xch	a,r%2\n"
"	movx	@dptr,a\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	mov	r%2,dpl\n"
"	mov	r%3,dph\n"
"	mov	r%4,b\n"
"	mov	r%5,a\n"
"	mov	dptr,#%1\n"
"	mov	a,r%2\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,r%3\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,r%4\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,r%5\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	inc	dptr\n"
"	movx	a,@dptr\n"
"	mov	r%3,a\n"
"	inc	dptr\n"
"	movx	a,@dptr\n"
"	mov	r%4,a\n"
"	inc	dptr\n"
"	movx	a,@dptr\n"
"	mov	r%5,a\n"
"} by {\n"
"	mov	r%2,dpl\n"
"	mov	r%3,dph\n"
"	mov	r%4,b\n"
"	mov	r%5,a\n"
"	mov	dptr,#%1\n"
"	mov	a,r%2\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,r%3\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,r%4\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	mov	a,r%5\n"
"	movx	@dptr,a\n"
";	Peephole 114.b	optimized 32-bit parameter passing\n"
"} if notVolatile(%1)\n"
"\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cpl	a\n"
"%3:\n"
"	jnz	%4\n"
"} by {\n"
"	;	Peephole 115.a	jump optimization (acc not set)\n"
"	cjne	%1,%2,%3\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelRefCount %3 1\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	cjne	%1,#0x00,%2\n"
"	sjmp	%3\n"
"%2:\n"
"} by {\n"
"	mov	%1,a\n"
"	;	Peephole 115.b	jump optimization\n"
"	jz	%3\n"
"%2:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	cpl	a\n"
"%3:\n"
"	jnz	%4\n"
"} by {\n"
"	;	Peephole 115.c	jump optimization (acc not set)\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelRefCount %3 2\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	cjne	%11,%12,%3\n"
"	cpl	a\n"
"%3:\n"
"	jnz %4\n"
"} by {\n"
"	;	Peephole 115.d	jump optimization (acc not set)\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	cjne	%11,%12,%3\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelRefCount %3 3\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	cjne	%11,%12,%3\n"
"	cjne	%13,%14,%3\n"
"	cpl	a\n"
"%3:\n"
"	jnz	%4\n"
"} by {\n"
"	;	Peephole 115.e	jump optimization (acc not set)\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	cjne	%11,%12,%3\n"
"	cjne	%13,%14,%3\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelRefCount %3 4\n"
"\n"
"replace {\n"
"	mov	a,#0x01\n"
"	cjne	%1,%2,%3\n"
"	clr	a\n"
"%3:\n"
"	jnz	%4\n"
"} by {\n"
"	;	Peephole 115.f	jump optimization (acc not set)\n"
"	cjne	%1,%2,%4\n"
"%3:\n"
"} if labelRefCount(%3 1), labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	mov	a,#0x01\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	clr	a\n"
"%3:\n"
"	jnz	%4\n"
"} by {\n"
"	;	Peephole 115.g	jump optimization (acc not set)\n"
"	cjne	%1,%2,%4\n"
"	cjne	%10,%11,%4\n"
"%3:\n"
"} if labelRefCount(%3 2), labelRefCountChange(%3 -2), labelRefCountChange(%4 1)\n"
"\n"
"replace {\n"
"	mov	a,#0x01\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	cjne	%12,%13,%3\n"
"	clr	a\n"
"%3:\n"
"	jnz  %4\n"
"} by {\n"
"	;	Peephole 115.h	jump optimization (acc not set)\n"
"	cjne	%1,%2,%4\n"
"	cjne	%10,%11,%4\n"
"	cjne	%12,%13,%4\n"
"%3:\n"
"} if labelRefCount(%3 3), labelRefCountChange(%3 -3), labelRefCountChange(%4 2)\n"
"\n"
"replace {\n"
"	mov	a,#0x01\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	cjne	%12,%13,%3\n"
"	cjne	%14,%15,%3\n"
"	clr	a\n"
"%3:\n"
"	jnz	%4\n"
"} by {\n"
"	;	Peephole 115.i	jump optimization (acc not set)\n"
"	cjne	%1,%2,%4\n"
"	cjne	%10,%11,%4\n"
"	cjne	%12,%13,%4\n"
"	cjne	%14,%15,%4\n"
"%3:\n"
"} if labelRefCount(%3 4), labelRefCountChange(%3 -4), labelRefCountChange(%4 3)\n"
"\n"
"replace {\n"
"	mov	a,#0x01\n"
"	cjne	%1,%2,%3\n"
"	clr	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 115.j	jump optimization (acc not set)\n"
"	cjne	%1,%2,%3\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelRefCount %3 1\n"
"\n"
"replace {\n"
"	mov	a,#0x01\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	clr	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 115.k	jump optimization (acc not set)\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelRefCount %3 2\n"
"\n"
"replace {\n"
"	mov	a,#0x01\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	cjne	%12,%13,%3\n"
"	clr	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 115.l	jump optimization (acc not set)\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	cjne	%12,%13,%3\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelRefCount %3 3\n"
"\n"
"replace {\n"
"	mov	a,#0x01\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	cjne	%12,%13,%3\n"
"	cjne	%14,%15,%3\n"
"	clr	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 115.m	jump optimization (acc not set)\n"
"	cjne	%1,%2,%3\n"
"	cjne	%10,%11,%3\n"
"	cjne	%12,%13,%3\n"
"	cjne	%14,%15,%3\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelRefCount %3 4\n"
"\n"
"replace {\n"
"	push	psw\n"
"	mov	psw,%1\n"
"	push	_bp\n"
"	mov	_bp,%2\n"
"%3:\n"
"	mov	%2,_bp\n"
"	pop	_bp\n"
"	pop	psw\n"
"	ret\n"
"} by {\n"
"	;	Peephole 127	removed misc sequence\n"
"	ret\n"
"} if labelRefCount %3 0\n"
"\n"
"replace {\n"
"	clr	a\n"
"	rlc	a\n"
"	jz	%1\n"
"} by {\n"
"	;	Peephole 128	jump optimization\n"
"	jnc	%1\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	rlc	a\n"
"	jnz	%0\n"
"} by {\n"
"	;	Peephole 129.a	jump optimization\n"
"        jc	%0\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	rlc	a\n"
"        pop	%1\n"
"	jnz	%0\n"
"} by {\n"
"	;	Peephole 129.b	optimized condition\n"
"        pop	%1\n"
"        jc	%0\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	clr	a\n"
"	rlc	a\n"
"        pop	%1\n"
"        pop	%2\n"
"	jnz	%0\n"
"} by {\n"
"	;	Peephole 129.c	optimized condition\n"
"        pop	%1\n"
"        pop	%2\n"
"        jc	%0\n"
"} if notVolatile %1 %2\n"
"\n"
"replace {\n"
"	clr	a\n"
"	rlc	a\n"
"        pop	%1\n"
"        pop	%2\n"
"        pop	%3\n"
"	jnz	%0\n"
"} by {\n"
"	;	Peephole 129.d	optimized condition\n"
"        pop	%1\n"
"        pop	%2\n"
"        pop	%3\n"
"        jc	%0\n"
"} if notVolatile %1 %2 %3\n"
"\n"
"replace {\n"
"	mov	r%1,@r%2\n"
"} by {\n"
"	;	Peephole 130	changed target address mode r%1 to ar%1\n"
"	mov	ar%1,@r%2\n"
"}\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	subb	a,#0x01\n"
"	mov	%2,a\n"
"	mov	%1,%2\n"
"} by {\n"
"	;	Peephole 131	optimized decrement (not caring for c)\n"
"	dec	%1\n"
"	mov	%2,%1\n"
"}\n"
"\n"
"replace {\n"
"	clr	c\n"
"	mov	a,#%1\n"
"	subb	a,%2\n"
"	mov	%3,c\n"
"} by {\n"
"	;	Peephole 132.a	optimized genCmpGt by inverse logic (acc differs)\n"
"	mov	a,%2\n"
"	add	a,#0xff - %1\n"
"	mov	%3,c\n"
"} if operandsLiteral(%1)\n"
"\n"
"replace {\n"
"	clr	c\n"
"	mov	a,#%1\n"
"	subb	a,%2\n"
"	jnc	%5\n"
"} by {\n"
"	;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)\n"
"	mov	a,%2\n"
"	add	a,#0xff - %1\n"
"	jnc	%5\n"
"} if operandsLiteral(%1)\n"
"\n"
"replace {\n"
"	clr	c\n"
"	mov	a,#%1\n"
"	subb	a,%2\n"
"	jc	%5\n"
"} by {\n"
"	;	Peephole 132.c	optimized genCmpGt by inverse logic (acc differs)\n"
"	mov	a,%2\n"
"	add	a,#0xff - %1\n"
"	jc	%5\n"
"} if operandsLiteral(%1)\n"
"\n"
"\n"
"replace {\n"
"	clr	c\n"
"	mov	a,%1\n"
"	subb	a,#%2\n"
"	jnc	%5\n"
"} by {\n"
"	;	Peephole 132.e	optimized genCmpLt by inverse logic (carry differs)\n"
"	mov	a,#0x100 - %2\n"
"	add	a,%1\n"
"	jc	%5\n"
"} if operandsNotRelated('0x00' %2), operandsLiteral(%2)\n"
"\n"
"replace {\n"
"	clr	c\n"
"	mov	a,%1\n"
"	subb	a,#%2\n"
"	jc	%5\n"
"} by {\n"
"	;	Peephole 132.f	optimized genCmpLt by inverse logic (carry differs)\n"
"	mov	a,#0x100 - %2\n"
"	add	a,%1\n"
"	jnc	%5\n"
"} if operandsNotRelated('0x00' %2), operandsLiteral(%2)\n"
"\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	mov	ar%3,@r%1\n"
"	inc	r%3\n"
"	mov	r%4,%2\n"
"	mov	@r%4,ar%3\n"
"} by {\n"
"	mov	r%1,%2\n"
"	;	Peephole 133	removed redundant moves\n"
"	inc	@r%1\n"
"	mov	ar%3,@r%1\n"
"} if notVolatile\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	mov	ar%3,@r%1\n"
"	dec	r%3\n"
"	mov	r%4,%2\n"
"	mov	@r%4,ar%3\n"
"} by {\n"
"	mov	r%1,%2\n"
"	;	Peephole 134	removed redundant moves\n"
"	dec	@r%1\n"
"	mov	ar%3,@r%1\n"
"} if notVolatile\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	a,r%2\n"
"	orl	a,r%1\n"
"} by {\n"
"	mov	r%1,a\n"
"	;	Peephole 135	removed redundant mov\n"
"	orl	a,r%2\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	mov	dpl,%2\n"
"	mov	dph,%3\n"
"	mov	a,%1\n"
"} by {\n"
"	mov	%1,a\n"
"	mov	dpl,%2\n"
"	mov	dph,%3\n"
"	;	Peephole 136	removed redundant mov\n"
"} if notVolatile %1\n"
"\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	anl	ar%1,%2\n"
"	mov	a,r%1\n"
"} by {\n"
"	;	Peephole 139.a	removed redundant mov\n"
"	anl	a,%2\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	orl	ar%1,%2\n"
"	mov	a,r%1\n"
"} by {\n"
"	;	Peephole 139.b	removed redundant mov\n"
"	orl	a,%2\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	xrl	ar%1,%2\n"
"	mov	a,r%1\n"
"} by {\n"
"	;	Peephole 139.c	removed redundant mov\n"
"	xrl	a,%2\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	ar%1,@%2\n"
"	mov	a,r%1\n"
"	add	a,acc\n"
"	mov	r%1,a\n"
"} by {\n"
"	;	Peephole 140	removed redundant mov\n"
"	mov	a,@%2\n"
"	add	a,@%2\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	r%2,ar%1\n"
"	mov	ar%1,@r%2\n"
"} by {\n"
"	;	Peephole 142	removed redundant mov\n"
"	mov	r%2,a\n"
"	mov	ar%1,@r%2\n"
"}\n"
"\n"
"replace {\n"
"	rlc	a\n"
"	mov	acc.0,c\n"
"} by {\n"
"	;	Peephole 143.a	converted rlc to rl\n"
"	rl	a\n"
"}\n"
"\n"
"replace {\n"
"	rrc	a\n"
"	mov	acc.7,c\n"
"} by {\n"
"	;	Peephole 143.b	converted rrc to rc\n"
"	rr	a\n"
"}\n"
"\n"
"replace {\n"
"	clr	c\n"
"	addc	a,%1\n"
"} by {\n"
"	;	Peephole 145.a	changed to add without carry\n"
"	add	a,%1\n"
"}\n"
"\n"
"replace {\n"
"	clr	c\n"
"	mov	a,%1\n"
"	addc	a,%2\n"
"} by {\n"
"	;	Peephole 145.b	changed to add without carry\n"
"	mov	a,%1\n"
"	add	a,%2\n"
"}\n"
"\n"
"replace {\n"
"	orl	r%1,a\n"
"} by {\n"
"	;	Peephole 147.a	changed target address mode r%1 to ar%1\n"
"	orl	ar%1,a\n"
"}\n"
"\n"
"replace {\n"
"	anl	r%1,a\n"
"} by {\n"
"	;	Peephole 147.b	changed target address mode r%1 to ar%1\n"
"	anl	ar%1,a\n"
"}\n"
"\n"
"replace {\n"
"	xrl	r%1,a\n"
"} by {\n"
"	;	Peephole 147.c	changed target address mode r%1 to ar%1\n"
"	xrl	ar%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	dpl,r%1\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.a	removed misc moves via dpl before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	r%2,dph\n"
"	mov	dpl,r%1\n"
"	mov	dph,r%2\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.b	removed misc moves via dph, dpl before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	r%2,dph\n"
"	mov	dpl,r%1\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.c	removed misc moves via dph, dpl before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	r%2,dph\n"
"	mov	r%3,b\n"
"	mov	dpl,r%1\n"
"	mov	dph,r%2\n"
"	mov	b,r%3\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.d	removed misc moves via dph, dpl, b before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	r%2,dph\n"
"	mov	r%3,b\n"
"	mov	dpl,r%1\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.e	removed misc moves via dph, dpl, b before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	r%2,dph\n"
"	mov	r%3,b\n"
"	mov	dpl,r%1\n"
"	mov	dph,r%2\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.f	removed misc moves via dph, dpl, b before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	r%2,dph\n"
"	mov	r%3,b\n"
"	mov	r%4,a\n"
"	mov	dpl,r%1\n"
"	mov	dph,r%2\n"
"	mov	b,r%3\n"
"	mov	a,r%4\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.g	removed misc moves via dph, dpl, b, a before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	r%2,dph\n"
"	mov	r%3,b\n"
"	mov	r%4,a\n"
"	mov	dpl,r%1\n"
"	mov	dph,r%2\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.h	removed misc moves via dph, dpl, b, a before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	r%2,dph\n"
"	mov	r%3,b\n"
"	mov	r%4,a\n"
"	mov	dpl,r%1\n"
"%9:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 150.i	removed misc moves via dph, dpl, b, a before return\n"
"%9:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,#%2\n"
"	xrl	%1,#0x80\n"
"} by {\n"
"	;	Peephole 159	avoided xrl during execution\n"
"	mov	%1,#(%2 ^ 0x80)\n"
"}\n"
"\n"
"replace {\n"
"	jnc	%1\n"
"	sjmp	%2\n"
"%1:\n"
"} by {\n"
"	;	Peephole 160.a	removed sjmp by inverse jump logic\n"
"	jc	%2\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jc	%1\n"
"	sjmp	%2\n"
"%1:\n"
"} by {\n"
"	;	Peephole 160.b	removed sjmp by inverse jump logic\n"
"	jnc	%2\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"	sjmp	%2\n"
"%1:\n"
"} by {\n"
"	;	Peephole 160.c	removed sjmp by inverse jump logic\n"
"	jz	%2\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jz	%1\n"
"	sjmp	%2\n"
"%1:\n"
"} by {\n"
"	;	Peephole 160.d	removed sjmp by inverse jump logic\n"
"	jnz	%2\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jnb	%3,%1\n"
"	sjmp	%2\n"
"%1:\n"
"} by {\n"
"	;	Peephole 160.e	removed sjmp by inverse jump logic\n"
"	jb	%3,%2\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jb	%3,%1\n"
"	sjmp	%2\n"
"%1:\n"
"} by {\n"
"	;	Peephole 160.f	removed sjmp by inverse jump logic\n"
"	jnb	%3,%2\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	mov	%1,%2\n"
"	mov	%3,%1\n"
"	mov	%2,%1\n"
"} by {\n"
"	mov	%1,%2\n"
"	mov	%3,%1\n"
"	;	Peephole 166	removed redundant mov\n"
"} if notVolatile %1 %2\n"
"\n"
"replace {\n"
"	mov	c,%1\n"
"	cpl	c\n"
"	mov	%1,c\n"
"} by {\n"
"	;	Peephole 167	removed redundant bit moves (c not set to %1)\n"
"	cpl	%1\n"
"}\n"
"\n"
"replace {\n"
"	jnb	%1,%2\n"
"	sjmp	%3\n"
"%2:\n"
"} by {\n"
"	;	Peephole 168	jump optimization\n"
"	jb	%1,%3\n"
"%2:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	jb	%1,%2\n"
"	sjmp	%3\n"
"%2:\n"
"} by {\n"
"	;	Peephole 169	jump optimization\n"
"	jnb	%1,%3\n"
"%2:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cpl	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 170	jump optimization\n"
"	cjne	%1,%2,%4\n"
"%3:\n"
"} if labelRefCount(%3 1), labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	cpl	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 171	jump optimization\n"
"	cjne	%1,%2,%4\n"
"	cjne	%9,%10,%4\n"
"%3:\n"
"} if labelRefCount(%3 2), labelRefCountChange(%3 -2), labelRefCountChange(%4 1)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	cjne	%11,%12,%3\n"
"	cpl	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 172	jump optimization\n"
"	cjne	%1,%2,%4\n"
"	cjne	%9,%10,%4\n"
"	cjne	%11,%12,%4\n"
"%3:\n"
"} if labelRefCount(%3 3), labelRefCountChange(%3 -3), labelRefCountChange(%4 2)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	cjne	%9,%10,%3\n"
"	cjne	%11,%12,%3\n"
"	cjne	%13,%14,%3\n"
"	cpl	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 173	jump optimization\n"
"	cjne	%1,%2,%4\n"
"	cjne	%9,%10,%4\n"
"	cjne	%11,%12,%4\n"
"	cjne	%13,%14,%4\n"
"%3:\n"
"} if labelRefCount(%3 4), labelRefCountChange(%3 -4), labelRefCountChange(%4 3)\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	clr	c\n"
"	mov	a,r%1\n"
"	subb	a,#0x01\n"
"	mov	%2,a\n"
"} by {\n"
"	mov	r%1,%2\n"
"	;	Peephole 174.a	optimized decrement (acc not set to %2, flags undefined)\n"
"	dec	%2\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	mov	a,r%1\n"
"	add	a,#0x01\n"
"	mov	%2,a\n"
"} by {\n"
"	mov	r%1,%2\n"
"	;	Peephole 174.b	optimized increment (acc not set to %2, flags undefined)\n"
"	inc	%2\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,@r%2\n"
"	inc	%1\n"
"	mov	@r%2,%1\n"
"} by {\n"
"	;	Peephole 174.c	optimized increment, removed redundant mov\n"
"	inc	@r%2\n"
"	mov	%1,@r%2\n"
"} if notVolatile\n"
"\n"
"replace {\n"
"	mov  %1,%2\n"
"	mov  %2,%1\n"
"} by {\n"
"	mov  %1,%2\n"
"	;	Peephole 177.a	removed redundant mov\n"
"} if notVolatile %1 %2\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	a,ar%1\n"
"} by {\n"
"	mov	r%1,a\n"
"	;	Peephole 177.b	removed redundant mov\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,%2\n"
"	mov	%1,%3\n"
"} by {\n"
"	;	Peephole 177.c	removed redundant mov\n"
"	mov	%1,%3\n"
"} if notVolatile(%1 %2),operandsNotRelated(%1 %3)\n"
"\n"
"replace restart {\n"
"	mov	%1,%2\n"
"	mov	%3,%4\n"
"	mov	%2,%1\n"
"} by {\n"
"	mov	%1,%2\n"
"	mov	%3,%4\n"
"	;	Peephole 177.d	removed redundant mov\n"
"} if notVolatile(%1 %2),operandsNotRelated(%1 %2 %3)\n"
"\n"
"replace {\n"
"	mov	%1,%2\n"
"	mov	a%1,%3\n"
"} by {\n"
"	;	peephole 177.e	removed redundant mov %1,%2\n"
"	mov	a%1,%3\n"
"} if notVolatile(%2), operandsNotRelated(%1 %3)\n"
"\n"
"replace {\n"
"	mov	ar%1,%2\n"
"	mov	r%1,%3\n"
"} by {\n"
"	;	peephole 177.f	removed redundant mov\n"
"	mov	r%1,%3\n"
"} if notVolatile %2\n"
"\n"
"replace {\n"
"	mov	%1,%2\n"
"	mov	a,%1\n"
"} by {\n"
"	;	peephole 177.g	optimized mov sequence\n"
"	mov	a,%2\n"
"	mov	%1,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	%1,%2\n"
"	mov	a,%2\n"
"} by {\n"
"	;	peephole 177.h	optimized mov sequence\n"
"	mov	a,%2\n"
"	mov	%1,a\n"
"} if notVolatile %2\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	ar%2,r%1\n"
"} by {\n"
"	mov	r%1,a\n"
"	;	peephole 177.i	optimized mov sequence\n"
"	mov	r%2,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	mov	ar%3,r%1\n"
"	mov	r%1,%4\n"
"} by {\n"
"	;	peephole 177.j	optimized mov sequence\n"
"	mov	r%3,%2\n"
"	mov	r%1,%4\n"
"}\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	mov	b,a\n"
"	mov	a,%2\n"
"} by {\n"
"	;	Peephole 178	removed redundant mov\n"
"	mov	b,%1\n"
"	mov	a,%2\n"
"}\n"
"\n"
"replace {\n"
"	mov	b,#0x00\n"
"	mov	a,#0x00\n"
"} by {\n"
"	;	Peephole 179	changed mov to clr\n"
"	clr	a\n"
"	mov	b,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	mov	a,%2\n"
"	movx	@dptr,a\n"
"	mov	dptr,%1\n"
"} by {\n"
"	mov	dptr,%1\n"
"	mov	a,%2\n"
"	movx	@dptr,a\n"
"	;	Peephole 180.a	removed redundant mov to dptr\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	mov	a,%2\n"
"	movx	@dptr,a\n"
"	mov	a,%3\n"
"	movx	@dptr,a\n"
"	mov	dptr,%1\n"
"} by {\n"
"	mov	dptr,%1\n"
"	mov	a,%2\n"
"	movx	@dptr,a\n"
"	mov	a,%3\n"
"	movx	@dptr,a\n"
"	;	Peephole 180.b	removed redundant mov to dptr\n"
"}\n"
"\n"
"replace {\n"
"	mov	a,#0x00\n"
"} by {\n"
"	;	Peephole 181	changed mov to clr\n"
"	clr	a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dpl,#%1\n"
"	mov	dph,#(%1 >> 8)\n"
"} by {\n"
"	;	Peephole 182.a	used 16 bit load of DPTR\n"
"	mov	dptr,#%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	dpl,#0x%1\n"
"	mov	dph,#0x%2\n"
"} by {\n"
"	;	Peephole 182.b	used 16 bit load of dptr\n"
"	mov	dptr,#0x%2%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	dpl,#%1\n"
"	mov	dph,#%2\n"
"} by {\n"
"	;	Peephole 182.c	used 16 bit load of dptr\n"
"	mov	dptr,#(((%2)<<8) + %1)\n"
"}\n"
"\n"
"replace {\n"
"	mov	dpl,#%1\n"
"	clr	a\n"
"	mov	dph,a\n"
"} by {\n"
"	;	Peephole 182.d	used 16 bit load of dptr\n"
"	mov	dptr,#(%1&0x00ff)\n"
"	clr	a\n"
"}\n"
"\n"
"replace {\n"
"	anl	%1,#%2\n"
"	anl	%1,#%3\n"
"} by {\n"
"	;	Peephole 183.a	avoided anl during execution\n"
"	anl	%1,#(%2&%3)\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	orl	%1,#%2\n"
"	orl	%1,#%3\n"
"} by {\n"
"	;	Peephole 183.b	avoided orl during execution\n"
"	orl	%1,#(%2|%3)\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	cpl	a\n"
"	mov	%1,a\n"
"} by {\n"
"	;	Peephole 184	removed redundant mov\n"
"	cpl	a\n"
"	mov	%1,a\n"
"} if notVolatile %1\n"
"\n"
"\n"
"replace restart {\n"
"	add	a,#%1\n"
"	mov	dpl,a\n"
"	clr	a\n"
"	addc	a,#(%1 >> 8)\n"
"	mov	dph,a\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"	mov	%2,a\n"
"	inc	dptr\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"	mov	%3,a\n"
"	inc	dptr\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"	mov	%4,a\n"
"	inc	dptr\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"} by {\n"
"	;	Peephole 186.a	optimized movc sequence\n"
"	mov	b,a\n"
"	mov	dptr,#%1\n"
"	movc	a,@a+dptr\n"
"	mov	%2,a\n"
"	inc	dptr\n"
"	mov	a,b\n"
"	movc	a,@a+dptr\n"
"	mov	%3,a\n"
"	inc	dptr\n"
"	mov	a,b\n"
"	movc	a,@a+dptr\n"
"	mov	%4,a\n"
"	inc	dptr\n"
"	mov	a,b\n"
"	movc	a,@a+dptr\n"
"}\n"
"\n"
"replace restart {\n"
"	add	a,#%1\n"
"	mov	dpl,a\n"
"	clr	a\n"
"	addc	a,#(%1 >> 8)\n"
"	mov	dph,a\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"	mov	%2,a\n"
"	inc	dptr\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"	mov	%3,a\n"
"	inc	dptr\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"} by {\n"
"	;	Peephole 186.b	optimized movc sequence\n"
"	mov	b,a\n"
"	mov	dptr,#%1\n"
"	movc	a,@a+dptr\n"
"	mov	%2,a\n"
"	inc	dptr\n"
"	mov	a,b\n"
"	movc	a,@a+dptr\n"
"	mov	%3,a\n"
"	inc	dptr\n"
"	mov	a,b\n"
"	movc	a,@a+dptr\n"
"}\n"
"\n"
"replace restart {\n"
"	add	a,#%1\n"
"	mov	dpl,a\n"
"	clr	a\n"
"	addc	a,#(%1 >> 8)\n"
"	mov	dph,a\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"	mov	%2,a\n"
"	inc	dptr\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"} by {\n"
"	;	Peephole 186.c	optimized movc sequence\n"
"	mov	%2,a\n"
"	mov	dptr,#%1\n"
"	movc	a,@a+dptr\n"
"	xch	a,%2\n"
"	inc	dptr\n"
"	movc	a,@a+dptr\n"
"}\n"
"\n"
"replace {\n"
"	add	a,#%1\n"
"	mov	dpl,a\n"
"	clr	a\n"
"	addc	a,#(%1 >> 8)\n"
"	mov	dph,a\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"} by {\n"
"	;	Peephole 186.d	optimized movc sequence\n"
"	mov	dptr,#%1\n"
"	movc	a,@a+dptr\n"
"}\n"
"\n"
"replace {\n"
"	mov	b,#0x02\n"
"	mul	ab\n"
"	add	a,#%2\n"
"	mov	dpl,a\n"
"	mov	a,#(%2 >> 8)\n"
"	addc	a,b\n"
"	mov	dph,a\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"	mov	%3,a\n"
"	mov	a,#0x01\n"
"	movc	a,@a+dptr\n"
"} by {\n"
"	;	Peephole 186.e	optimized movc sequence (b, dptr differ)\n"
"	add	a,acc\n"
"	mov	b,a\n"
"	mov	dptr,#%2\n"
"	jnc	.+3\n"
"	inc	dph\n"
"	movc	a,@a+dptr\n"
"	mov	%3,a\n"
"	mov	a,b\n"
"	inc	a\n"
"	movc	a,@a+dptr\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	anl	ar%1,#%3\n"
"	mov	a,r%1\n"
"} by {\n"
"	;	Peephole 187	used a instead of ar%1 for anl\n"
"	mov	a,%2\n"
"	anl	a,#%3\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	mov	dptr,%2\n"
"	movc	a,@a+dptr\n"
"	mov	%1,a\n"
"} by {\n"
"	;	Peephole 188	removed redundant mov\n"
"	mov	dptr,%2\n"
"	movc	a,@a+dptr\n"
"	mov	%1,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	anl	a,#0x0f\n"
"	mov	%1,a\n"
"	mov	a,#0x0f\n"
"	anl	a,%1\n"
"} by {\n"
"	anl	a,#0x0f\n"
"	mov	%1,a\n"
"	;	Peephole 189	removed redundant mov and anl\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	lcall	__gptrput\n"
"	mov	a,%1\n"
"} by {\n"
"	mov	a,%1\n"
"	lcall	__gptrput\n"
"	;	Peephole 190	removed redundant mov\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	mov	dpl,%2\n"
"	mov	dph,%3\n"
"	mov	b,%4\n"
"	mov	a,%1\n"
"} by {\n"
"	mov	%1,a\n"
"	mov	dpl,%2\n"
"	mov	dph,%3\n"
"	mov	b,%4\n"
"	;	Peephole 191	removed redundant mov\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	@r%2,ar%1\n"
"} by {\n"
"	mov	r%1,a\n"
"	;	Peephole 192.a	used a instead of ar%1 as source\n"
"	mov	@r%2,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	ar%1,@r%2\n"
"	mov	a,r%1\n"
"} by {\n"
"	;	Peephole 192.b	used a instead of ar%1 as destination\n"
"	mov	a,@r%2\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	jnz	%3\n"
"	mov	a,%4\n"
"	jnz	%3\n"
"	mov	a,%9\n"
"	jnz	%3\n"
"	mov	a,%12\n"
"	cjne	%13,%14,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 193.a	optimized misc jump sequence\n"
"	jnz	%8\n"
"	mov	a,%4\n"
"	jnz	%8\n"
"	mov	a,%9\n"
"	jnz	%8\n"
"	mov	a,%12\n"
"	cjne	%13,%14,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 4), labelRefCountChange(%3 -4), labelRefCountChange(%8 3)\n"
"\n"
"replace {\n"
"	cjne	%1,%2,%3\n"
"	mov	a,%4\n"
"	cjne	%5,%6,%3\n"
"	mov	a,%9\n"
"	cjne	%10,%11,%3\n"
"	mov	a,%12\n"
"	cjne	%13,%14,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 193.b	optimized misc jump sequence\n"
"	cjne	%1,%2,%8\n"
"	mov	a,%4\n"
"	cjne	%5,%6,%8\n"
"	mov	a,%9\n"
"	cjne	%10,%11,%8\n"
"	mov	a,%12\n"
"	cjne	%13,%14,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 4), labelRefCountChange(%3 -4), labelRefCountChange(%8 3)\n"
"\n"
"replace {\n"
"	cjne	@%1,%2,%3\n"
"	inc	%1\n"
"	cjne	@%1,%6,%3\n"
"	inc	%1\n"
"	cjne	@%1,%11,%3\n"
"	inc	%1\n"
"	cjne	@%1,%14,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 193.c	optimized misc jump sequence\n"
"	cjne	@%1,%2,%8\n"
"	inc	%1\n"
"	cjne	@%1,%6,%8\n"
"	inc	%1\n"
"	cjne	@%1,%11,%8\n"
"	inc	%1\n"
"	cjne	@%1,%14,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 4), labelRefCountChange(%3 -4), labelRefCountChange(%8 3)\n"
"\n"
"replace {\n"
"	cjne	%1,%2,%3\n"
"	cjne	%5,%6,%3\n"
"	cjne	%10,%11,%3\n"
"	cjne	%13,%14,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 194	optimized misc jump sequence\n"
"	cjne	%1,%2,%8\n"
"	cjne	%5,%6,%8\n"
"	cjne	%10,%11,%8\n"
"	cjne	%13,%14,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 4), labelRefCountChange(%3 -4), labelRefCountChange(%8 3)\n"
"\n"
"replace {\n"
"	jnz	%3\n"
"	mov	a,%4\n"
"	jnz	%3\n"
"	mov	a,%9\n"
"	cjne	%10,%11,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 195.a	optimized misc jump sequence\n"
"	jnz	%8\n"
"	mov	a,%4\n"
"	jnz	%8\n"
"	mov	a,%9\n"
"	cjne	%10,%11,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 3), labelRefCountChange(%3 -3), labelRefCountChange(%8 2)\n"
"\n"
"replace {\n"
"	cjne	%1,%2,%3\n"
"	mov	a,%4\n"
"	cjne	%5,%6,%3\n"
"	mov	a,%9\n"
"	cjne	%10,%11,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 195.b	optimized misc jump sequence\n"
"	cjne	%1,%2,%8\n"
"	mov	a,%4\n"
"	cjne	%5,%6,%8\n"
"	mov	a,%9\n"
"	cjne	%10,%11,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 3), labelRefCountChange(%3 -3), labelRefCountChange(%8 2)\n"
"\n"
"replace {\n"
"	cjne	@%1,%2,%3\n"
"	inc	%1\n"
"	cjne	@%1,%6,%3\n"
"	inc	%1\n"
"	cjne	@%1,%11,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 195.c	optimized misc jump sequence\n"
"	cjne	@%1,%2,%8\n"
"	inc	%1\n"
"	cjne	@%1,%6,%8\n"
"	inc	%1\n"
"	cjne	@%1,%11,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 3), labelRefCountChange(%3 -3), labelRefCountChange(%8 2)\n"
"\n"
"replace {\n"
"	cjne	%1,%2,%3\n"
"	cjne	%5,%6,%3\n"
"	cjne	%10,%11,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 196	optimized misc jump sequence\n"
"	cjne	%1,%2,%8\n"
"	cjne	%5,%6,%8\n"
"	cjne	%10,%11,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 3), labelRefCountChange(%3 -3), labelRefCountChange(%8 2)\n"
"\n"
"replace {\n"
"	jnz	%3\n"
"	mov	a,%4\n"
"	cjne	%5,%6,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 197.a	optimized misc jump sequence\n"
"	jnz	%8\n"
"	mov	a,%4\n"
"	cjne	%5,%6,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 2), labelRefCountChange(%3 -2), labelRefCountChange(%8 1)\n"
"\n"
"replace {\n"
"	cjne	%1,%2,%3\n"
"	mov	a,%4\n"
"	cjne	%5,%6,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 197.b	optimized misc jump sequence\n"
"	cjne	%1,%2,%8\n"
"	mov	a,%4\n"
"	cjne	%5,%6,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 2), labelRefCountChange(%3 -2), labelRefCountChange(%8 1)\n"
"\n"
"replace {\n"
"	cjne	 @%1,%2,%3\n"
"	inc	%1\n"
"	cjne	@%1,%6,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 197.c	optimized misc jump sequence\n"
"	cjne	@%1,%2,%8\n"
"	inc	%1\n"
"	cjne	@%1,%6,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 2), labelRefCountChange(%3 -2), labelRefCountChange(%8 1)\n"
"\n"
"replace {\n"
"	cjne	%1,%2,%3\n"
"	cjne	%5,%6,%3\n"
"	sjmp	%7\n"
"%3:\n"
"	sjmp	%8\n"
"} by {\n"
"	;	Peephole 198.a	optimized misc jump sequence\n"
"	cjne	%1,%2,%8\n"
"	cjne	%5,%6,%8\n"
"	sjmp	%7\n"
"%3:\n"
"} if labelInRange(%8), labelRefCount(%3 2), labelRefCountChange(%3 -2), labelRefCountChange(%8 1)\n"
"\n"
"replace {\n"
"	cjne	%1,%2,%3\n"
"	sjmp	%4\n"
"%3:\n"
"	sjmp	%5\n"
"} by {\n"
"	;	Peephole 198.b	optimized misc jump sequence\n"
"	cjne	%1,%2,%5\n"
"	sjmp	%4\n"
"%3:\n"
"} if labelInRange(%5), labelRefCount(%3 1), labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	sjmp	%1\n"
"%1:\n"
"} by {\n"
"	;	Peephole 200.a	removed redundant sjmp\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	sjmp	%1\n"
"%2:\n"
"%1:\n"
"} by {\n"
"	;	Peephole 200.b	removed redundant sjmp\n"
"%2:\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	push	acc\n"
"	mov	dptr,%1\n"
"	pop	acc\n"
"} by {\n"
"	;	Peephole 202	removed redundant push pop\n"
"	mov	dptr,%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,_spx\n"
"	lcall	%2\n"
"	mov	r%1,_spx\n"
"} by {\n"
"	;	Peephole 203	removed mov  r%1,_spx\n"
"	lcall	%2\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	add	a,acc\n"
"	mov	%1,a\n"
"} by {\n"
"	;	Peephole 204	removed redundant mov\n"
"	add	a,acc\n"
"	mov	%1,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	djnz	%1,%2\n"
"	sjmp	%3\n"
"%2:\n"
"	sjmp	%4\n"
"%3:\n"
"} by {\n"
"	;	Peephole 205	optimized misc jump sequence\n"
"	djnz	%1,%4\n"
"%2:\n"
"%3:\n"
"} if labelRefCount(%2 1), labelRefCountChange(%2 -1), labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	mov	%1,%1\n"
"} by {\n"
"	;	Peephole 206	removed redundant mov %1,%1\n"
"} if notVolatile %1\n"
"\n"
"\n"
"replace {\n"
"	push	acc\n"
"	mov	r%1,_bp\n"
"	pop	acc\n"
"} by {\n"
"	;	Peephole 208	removed redundant push pop\n"
"	mov	r%1,_bp\n"
"}\n"
"\n"
"\n"
"replace {\n"
"	mov	dptr,#((((%1 >> 8)) <<8) + %1)\n"
"} by {\n"
"	;	Peephole 210	simplified expression\n"
"	mov	dptr,#%1\n"
"}\n"
"\n"
"replace {\n"
"	push	%1\n"
"	pop	%1\n"
"} by {\n"
"	;	Peephole 211	removed redundant push %1 pop %1\n"
"}\n"
"\n"
"\n"
"replace {\n"
"	mov	%1,#(( %2 >> 8 ) ^ 0x80)\n"
"} by {\n"
"	;	Peephole 213.a	inserted fix\n"
"	mov	%1,#(%2 >> 8)\n"
"	xrl	%1,#0x80\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,#(( %2 + %3 >> 8 ) ^ 0x80)\n"
"} by {\n"
"	;	Peephole 213.b	inserted fix\n"
"	mov	%1,#((%2 + %3) >> 8)\n"
"	xrl	%1,#0x80\n"
"}\n"
"\n"
"\n"
"replace	 {\n"
"	mov	%1,a\n"
"	mov	a,%2\n"
"	add	a,%1\n"
"} by {\n"
"	mov	%1,a\n"
"	;	Peephole 214.a	removed redundant mov\n"
"	add	a,%2\n"
"} if notSame(%1 %2)\n"
"\n"
"replace {\n"
"	mov	%1,a\n"
"	add	a,%2\n"
"	mov	%1,a\n"
"} by {\n"
"	;	Peephole 214.b	removed redundant mov\n"
"	add	a,%2\n"
"	mov	%1,a\n"
"} if notSame(%1 %2)\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	clr	a\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"	dec	r%1\n"
"	mov	@r%1,a\n"
"} by {\n"
"	mov	r%1,%2\n"
"	clr	a\n"
"	;	Peephole 216.a	simplified clear (2 bytes)\n"
"	mov	@r%1,a\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	clr	a\n"
"	inc	r%1\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"	dec	r%1\n"
"	mov	@r%1,a\n"
"	dec	r%1\n"
"	mov	@r%1,a\n"
"} by {\n"
"	mov	r%1,%2\n"
"	clr	a\n"
"	;	Peephole 216.b	simplified clear (3 bytes)\n"
"	mov	@r%1,a\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	clr	a\n"
"	inc	r%1\n"
"	inc	r%1\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"	dec	r%1\n"
"	mov	@r%1,a\n"
"	dec	r%1\n"
"	mov	@r%1,a\n"
"	dec	r%1\n"
"	mov	@r%1,a\n"
"} by {\n"
"	mov	r%1,%2\n"
"	clr	a\n"
"	;	Peephole 216.c	simplified clear (4 bytes)\n"
"	mov	@r%1,a\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"	inc	r%1\n"
"	mov	@r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	movx	@dptr,a\n"
"	mov	dptr,%1\n"
"	clr	a\n"
"	movx	@dptr,a\n"
"} by {\n"
"	;	Peephole 219.a	removed redundant clear\n"
"	clr	a\n"
"	movx	@dptr,a\n"
"	mov	dptr,%1\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	movx	@dptr,a\n"
"	mov	dptr,%1\n"
"	movx	@dptr,a\n"
"	mov	dptr,%2\n"
"	clr	a\n"
"	movx	@dptr,a\n"
"} by {\n"
"	clr	a\n"
"	movx	@dptr,a\n"
"	mov	dptr,%1\n"
"	movx	@dptr,a\n"
"	mov	dptr,%2\n"
"	;	Peephole 219.b	removed redundant clear\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dps,#0x00\n"
"	mov	dps,#0x01\n"
"} by {\n"
"	;	Peephole 220.a	removed bogus DPS set\n"
"	mov	dps,#0x01\n"
"}\n"
"\n"
"replace {\n"
"	mov	dps,#0x01\n"
"	mov	dps,#0x00\n"
"} by {\n"
"	;	Peephole 220.b	removed bogus DPS set\n"
"	mov	dps,#0x00\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1 + %2,(%2 + %1)\n"
"} by {\n"
"	;	Peephole 221.a	remove redundant mov\n"
"} if notVolatile\n"
"\n"
"replace {\n"
"	mov	(%1 + %2 + %3),((%2 + %1) + %3)\n"
"} by {\n"
"	;	Peephole 221.b	remove redundant mov\n"
"} if notVolatile\n"
"\n"
"replace {\n"
"	dec	r%1\n"
"	inc	r%1\n"
"} by {\n"
"	;	Peephole 222	removed dec/inc pair\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,dpl\n"
"	mov	%2,dph\n"
"	mov	dpl,%1\n"
"	mov	dph,%2\n"
"} by {\n"
"	mov	%1,dpl\n"
"	mov	%2,dph\n"
"	;	Peephole 223.a	removed redundant dph/dpl moves\n"
"} if notVolatile %1 %2\n"
"\n"
"replace {\n"
"	mov	%1,dpl\n"
"	mov	(%1 + 1),dph\n"
"	mov	dpl,%1\n"
"	mov	dph,(%1 + 1)\n"
"} by {\n"
"	mov	%1,dpl\n"
"	mov	(%1 + 1),dph\n"
"	;	Peephole 223.b	removed redundant dph/dpl moves\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	mov	dpl,%2\n"
"	mov	dph,%3\n"
"	mov	b,%4\n"
"	mov	a,%1\n"
"} by {\n"
"	mov	a,%1\n"
"	movx	@dptr,a\n"
"	mov	dpl,%2\n"
"	mov	dph,%3\n"
"	mov	b,%4\n"
"	;	Peephole 225	removed redundant move to acc\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	clr	a\n"
"	movx	@%1,a\n"
"	inc	%1\n"
"	clr	a\n"
"} by {\n"
"	clr	a\n"
"	movx	@%1,a\n"
"	inc	%1\n"
"	;	Peephole 226.a	removed unnecessary clr\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	movx	@%1,a\n"
"	inc	%1\n"
"	movx	@%1,a\n"
"	inc	%1\n"
"	clr	a\n"
"} by {\n"
"	clr	a\n"
"	movx	@%1,a\n"
"	inc	%1\n"
"	movx	@%1,a\n"
"	inc	%1\n"
"	;	Peephole 226.b	removed unnecessary clr\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	clr	a\n"
"	inc	dptr\n"
"	inc	dptr\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	lcall	__decdptr\n"
"	movx	@dptr,a\n"
"	lcall	__decdptr\n"
"	movx	@dptr,a\n"
"	lcall	__decdptr\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	clr	a\n"
"	;	Peephole 227.a	replaced inefficient 32 bit clear\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	clr	a\n"
"	inc	dptr\n"
"	inc	dptr\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	lcall	__decdptr\n"
"	movx	@dptr,a\n"
"	lcall	__decdptr\n"
"	movx	@dptr,a\n"
"	lcall	__decdptr\n"
"	mov	a,#%2\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	;	Peephole 227.b	replaced inefficient 32 constant\n"
"	mov	a,#%2\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	clr	a\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	clr	a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	lcall	__decdptr\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	clr	a\n"
"	;	Peephole 227.c	replaced inefficient 16 bit clear\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	clr	a\n"
"	inc	dptr\n"
"	movx	@dptr,a\n"
"	lcall	__decdptr\n"
"	mov	a,#%2\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	;	Peephole 227.d	replaced inefficient 16 bit constant\n"
"	mov	a,#%2\n"
"	movx	@dptr,a\n"
"	inc	dptr\n"
"	clr	a\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	mov	dptr,#%2\n"
"} by {\n"
"	;	Peephole 227.e	removed redundant mov to dptr\n"
"	mov	dptr,#%2\n"
"}\n"
"\n"
"replace {\n"
"	movx	a,@dptr\n"
"} by {\n"
"	;	Peephole 232	using movc to read xdata (--xram-movc)\n"
"	clr	a\n"
"	movc	a,@a+dptr\n"
"} if xramMovcOption\n"
"\n"
"replace {\n"
"	lcall	_gptrget\n"
"} by {\n"
"	;	Peephole 233	using _gptrgetc instead of _gptrget (--xram-movc)\n"
"	lcall	_gptrgetc\n"
"} if xramMovcOption\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	dpl,r%1\n"
"%2:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 234.a	loading dpl directly from a(ccumulator), r%1 not set\n"
"	mov	dpl,a\n"
"%2:\n"
"	ret\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	dpl,r%2\n"
"	mov	dph,r%1\n"
"%3:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 234.b	loading dph directly from a(ccumulator), r%1 not set\n"
"	mov	dpl,r%2\n"
"	mov	dph,a\n"
"%3:\n"
"	ret\n"
"}\n"
"\n"
"\n"
"replace {\n"
"	add	a,ar%1\n"
"} by {\n"
"	;	Peephole 236.a	used r%1 instead of ar%1\n"
"	add	a,r%1\n"
"}\n"
"\n"
"replace {\n"
"	addc	a,ar%1\n"
"} by {\n"
"	;	Peephole 236.b	used r%1 instead of ar%1\n"
"	addc	a,r%1\n"
"}\n"
"\n"
"replace {\n"
"	anl	a,ar%1\n"
"} by {\n"
"	;	Peephole 236.c	used r%1 instead of ar%1\n"
"	anl	a,r%1\n"
"}\n"
"\n"
"replace {\n"
"	dec	ar%1\n"
"} by {\n"
"	;	Peephole 236.d	used r%1 instead of ar%1\n"
"	dec	r%1\n"
"}\n"
"\n"
"replace {\n"
"	djnz	ar%1,%2\n"
"} by {\n"
"	;	Peephole 236.e	used r%1 instead of ar%1\n"
"	djnz	r%1,%2\n"
"}\n"
"\n"
"replace {\n"
"	inc	ar%1\n"
"} by {\n"
"	;	Peephole 236.f	used r%1 instead of ar%1\n"
"	inc	r%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	a,ar%1\n"
"} by {\n"
"	;	Peephole 236.g	used r%1 instead of ar%1\n"
"	mov	a,r%1\n"
"}\n"
"\n"
"replace {\n"
"	mov	ar%1,#%2\n"
"} by {\n"
"	;	Peephole 236.h	used r%1 instead of ar%1\n"
"	mov	r%1,#%2\n"
"}\n"
"\n"
"replace {\n"
"	mov	ar%1,a\n"
"} by {\n"
"	;	Peephole 236.i	used r%1 instead of ar%1\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	ar%1,ar%2\n"
"} by {\n"
"	;	Peephole 236.j	used r%1 instead of ar%1\n"
"	mov	r%1,ar%2\n"
"}\n"
"\n"
"replace {\n"
"	orl	a,ar%1\n"
"} by {\n"
"	;	Peephole 236.k	used r%1 instead of ar%1\n"
"	orl	a,r%1\n"
"}\n"
"\n"
"replace {\n"
"	subb	a,ar%1\n"
"} by {\n"
"	;	Peephole 236.l	used r%1 instead of ar%1\n"
"	subb	a,r%1\n"
"}\n"
"\n"
"replace {\n"
"	xch	a,ar%1\n"
"} by {\n"
"	;	Peephole 236.m	used r%1 instead of ar%1\n"
"	xch	a,r%1\n"
"}\n"
"\n"
"replace {\n"
"	xrl	a,ar%1\n"
"} by {\n"
"	;	Peephole 236.n	used r%1 instead of ar%1\n"
"	xrl	a,r%1\n"
"}\n"
"\n"
"\n"
"\n"
"replace {\n"
"	mov	%1,%9\n"
"	mov	%2,%10\n"
"	mov	%3,%11\n"
"	mov	%4,%12\n"
"\n"
"	mov	%5,%13\n"
"	mov	%6,%14\n"
"	mov	%7,%15\n"
"	mov	%8,%16\n"
"\n"
"	mov	%9,%1\n"
"	mov	%10,%2\n"
"	mov	%11,%3\n"
"	mov	%12,%4\n"
"} by {\n"
"	mov	%1,%9\n"
"	mov	%2,%10\n"
"	mov	%3,%11\n"
"	mov	%4,%12\n"
"\n"
"	mov	%5,%13\n"
"	mov	%6,%14\n"
"	mov	%7,%15\n"
"	mov	%8,%16\n"
"	;	Peephole 238.a	removed 4 redundant moves\n"
"} if notSame(%1 %2 %3 %4 %5 %6 %7 %8), notVolatile(%1 %2 %3 %4 %9 %10 %11 %12)\n"
"\n"
"replace {\n"
"	mov	%1,%5\n"
"	mov	%2,%6\n"
"	mov	%3,%7\n"
"	mov	%4,%8\n"
"\n"
"	mov	%5,%1\n"
"	mov	%6,%2\n"
"	mov	%7,%3\n"
"} by {\n"
"	mov	%1,%5\n"
"	mov	%2,%6\n"
"	mov	%3,%7\n"
"	mov	%4,%8\n"
"	;	Peephole 238.b	removed 3 redundant moves\n"
"} if notSame(%1 %2 %3 %4 %5 %6 %7), notVolatile(%1 %2 %3 %5 %6 %7)\n"
"\n"
"replace {\n"
"	mov	%1,%5\n"
"	mov	%2,%6\n"
"\n"
"	mov	%3,%7\n"
"	mov	%4,%8\n"
"\n"
"	mov	%5,%1\n"
"	mov	%6,%2\n"
"} by {\n"
"	mov	%1,%5\n"
"	mov	%2,%6\n"
"\n"
"	mov	%3,%7\n"
"	mov	%4,%8\n"
"	;	Peephole 238.c	removed 2 redundant moves\n"
"} if notSame(%1 %2 %3 %4), notVolatile(%1 %2 %5 %6)\n"
"\n"
"replace {\n"
"	mov	%1,%4\n"
"	mov	%2,%5\n"
"	mov	%3,%6\n"
"\n"
"	mov	%4,%1\n"
"	mov	%5,%2\n"
"	mov	%6,%3\n"
"} by {\n"
"	mov	%1,%4\n"
"	mov	%2,%5\n"
"	mov	%3,%6\n"
"	;	Peephole 238.d	removed 3 redundant moves\n"
"} if notSame(%1 %2 %3 %4 %5 %6), notVolatile(%1 %2 %3 %4 %5 %6)\n"
"\n"
"replace {\n"
"	mov	r%1,acc\n"
"} by {\n"
"	;	Peephole 239	used a instead of acc\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace restart {\n"
"	mov	a,%1\n"
"	addc	a,#0x00\n"
"} by {\n"
"	;	Peephole 240	use clr instead of addc a,#0\n"
"	clr	a\n"
"	addc	a,%1\n"
"}\n"
"\n"
"replace {\n"
"	cjne	r%2,#%3,%0\n"
"	cjne	r%4,#%5,%0\n"
"	cjne	r%6,#%7,%0\n"
"	cjne	r%8,#%9,%0\n"
"	mov	a,#0x01\n"
"	sjmp	%1\n"
"%0:\n"
"	clr	a\n"
"%1:\n"
"} by {\n"
"	;	Peephole 241.a	optimized compare\n"
"	clr	a\n"
"	cjne	r%2,#%3,%0\n"
"	cjne	r%4,#%5,%0\n"
"	cjne	r%6,#%7,%0\n"
"	cjne	r%8,#%9,%0\n"
"	inc	a\n"
"%0:\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	cjne	r%2,#%3,%0\n"
"	cjne	r%4,#%5,%0\n"
"	cjne	r%6,#%7,%0\n"
"	mov	a,#0x01\n"
"	sjmp	%1\n"
"%0:\n"
"	clr	a\n"
"%1:\n"
"} by {\n"
"	;	Peephole 241.b	optimized compare\n"
"	clr	a\n"
"	cjne	r%2,#%3,%0\n"
"	cjne	r%4,#%5,%0\n"
"	cjne	r%6,#%7,%0\n"
"	inc	a\n"
"%0:\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	cjne	r%2,#%3,%0\n"
"	cjne	r%4,#%5,%0\n"
"	mov	a,#0x01\n"
"	sjmp	%1\n"
"%0:\n"
"	clr	a\n"
"%1:\n"
"} by {\n"
"	;	Peephole 241.c	optimized compare\n"
"	clr	a\n"
"	cjne	r%2,#%3,%0\n"
"	cjne	r%4,#%5,%0\n"
"	inc	a\n"
"%0:\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	cjne	r%2,#%3,%0\n"
"	mov	a,#0x01\n"
"	sjmp	%1\n"
"%0:\n"
"	clr	a\n"
"%1:\n"
"} by {\n"
"	;	Peephole 241.d	optimized compare\n"
"	clr	a\n"
"	cjne	r%2,#%3,%0\n"
"	inc	a\n"
"%0:\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	cjne	@r%0,#%3,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%4,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%5,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%6,%1\n"
"	mov	a,#0x01\n"
"	sjmp	%2\n"
"%1:\n"
"	clr	a\n"
"%2:\n"
"} by {\n"
"	;	Peephole 241.e	optimized compare\n"
"	clr	a\n"
"	cjne	@r%0,#%3,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%4,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%5,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%6,%1\n"
"	inc	a\n"
"%1:\n"
"%2:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	cjne	@r%0,#%3,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%4,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%5,%1\n"
"	mov	a,#0x01\n"
"	sjmp	%2\n"
"%1:\n"
"	clr	a\n"
"%2:\n"
"} by {\n"
"	;	Peephole 241.f	optimized compare\n"
"	clr	a\n"
"	cjne	@r%0,#%3,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%4,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%5,%1\n"
"	inc	a\n"
"%1:\n"
"%2:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	cjne	@r%0,#%3,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%4,%1\n"
"	mov	a,#0x01\n"
"	sjmp	%2\n"
"%1:\n"
"	clr	a\n"
"%2:\n"
"} by {\n"
"	;	Peephole 241.g	optimized compare\n"
"	clr	a\n"
"	cjne	@r%0,#%3,%1\n"
"	inc	r%0\n"
"	cjne	@r%0,#%4,%1\n"
"	inc	a\n"
"%1:\n"
"%2:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	cjne	@r%0,#%3,%1\n"
"	mov	a,#0x01\n"
"	sjmp	%2\n"
"%1:\n"
"	clr	a\n"
"%2:\n"
"} by {\n"
"	;	Peephole 241.h	optimized compare\n"
"	clr	a\n"
"	cjne	@r%0,#%3,%1\n"
"	inc	a\n"
"%1:\n"
"%2:\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"	mov	%2,%3\n"
"%1:\n"
"	jz	%4\n"
"} by {\n"
"	jnz	%1\n"
"	mov	%2,%3\n"
"	;	Peephole 242.a	avoided branch jnz to jz\n"
"	jz	%4\n"
"%1:\n"
"} if labelRefCount %1 1\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"	mov	%2,%3\n"
"	orl	a,%5\n"
"%1:\n"
"	jz	%4\n"
"} by {\n"
"	jnz	%1\n"
"	mov	%2,%3\n"
"	orl	a,%5\n"
"	;	Peephole 242.b	avoided branch jnz to jz\n"
"	jz	%4\n"
"%1:\n"
"} if labelRefCount %1 1\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"	mov	%2,%3\n"
"	orl	a,%5\n"
"	orl	a,%6\n"
"	orl	a,%7\n"
"%1:\n"
"	jz	%4\n"
"} by {\n"
"	jnz	%1\n"
"	mov	%2,%3\n"
"	orl	a,%5\n"
"	orl	a,%6\n"
"	orl	a,%7\n"
"	;	Peephole 242.c	avoided branch jnz to jz\n"
"	jz	%4\n"
"%1:\n"
"} if labelRefCount %1 1\n"
"\n"
"replace {\n"
"	cjne	%1,%2,%3\n"
"	inc	%4\n"
"%3:\n"
"	sjmp	%5\n"
"} by {\n"
"	;	Peephole 243	avoided branch to sjmp\n"
"	cjne	%1,%2,%5\n"
"	inc	%4\n"
"%3:\n"
"	sjmp	%5\n"
"} if labelInRange(%5), labelRefCountChange(%3 -1), labelRefCountChange(%5 1)\n"
"\n"
"replace {\n"
"	mov	r%1,dpl\n"
"	mov	a,r%1\n"
"} by {\n"
"	;	Peephole 244.a	moving first to a instead of r%1\n"
"	mov	a,dpl\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,dph\n"
"	mov	a,r%1\n"
"} by {\n"
"	;	Peephole 244.b	moving first to a instead of r%1\n"
"	mov	a,dph\n"
"	mov	r%1,a\n"
"}\n"
"\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	dpl,r%1\n"
"} by {\n"
"	mov	r%1,a\n"
"	;	Peephole 244.c	loading dpl from a instead of r%1\n"
"	mov	dpl,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	r%1,a\n"
"	mov	dph,r%1\n"
"} by {\n"
"	mov	r%1,a\n"
"	;	Peephole 244.d	loading dph from a instead of r%1\n"
"	mov	dph,a\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	rlc	a\n"
"	mov	r%1,a\n"
"	cjne	a,#0x01,%2\n"
"%2:\n"
"	clr	a\n"
"	rlc	a\n"
"	mov	r%1,a\n"
"} by {\n"
"	;	Peephole 245	optimized complement (r%1 and acc set needed?)\n"
"	cpl	c\n"
"	clr	a\n"
"	rlc	a\n"
"	mov	r%1,a\n"
"} if labelRefCount(%2 1), labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	rlc	a\n"
"	mov	r%1,a\n"
"	cjne	a,#0x01,%2\n"
"%2:\n"
"	clr	a\n"
"	rlc	a\n"
"	mov	r%1,a\n"
"	jz	%3\n"
"} by {\n"
"	;	Peephole 245.a	optimized conditional jump (r%1 and acc not set!)\n"
"	jc	%3\n"
"} if labelRefCount(%2 1), labelRefCountChange(%2 -1)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	rlc	a\n"
"	mov	r%1,a\n"
"	cjne	a,#0x01,%2\n"
"%2:\n"
"	clr	a\n"
"	rlc	a\n"
"	mov	r%1,a\n"
"	jnz	%3\n"
"} by {\n"
"	;	Peephole 245.b	optimized conditional jump (r%1 and acc not set!)\n"
"	jnc	%3\n"
"} if labelRefCount(%2 1), labelRefCountChange(%2 -1)\n"
"\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%2\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%3\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 246.a	combined clr/clr\n"
"	anl	a,#%2&%3\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%2\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%3\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 246.b	combined set/set\n"
"	orl	a,#%2|%3\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%2\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%3\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%2\n"
"	;	Peephole 246.c	combined set/clr\n"
"	anl	a,#%3\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%2\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%3\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%2\n"
"	;	Peephole 246.d	combined clr/set\n"
"	orl	a,#%3\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%2\n"
"	anl	a,#%3\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%2\n"
"	;	Peephole 246.e	combined set/clr/clr\n"
"	anl	a,#%3&%4\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%2\n"
"	anl	a,#%3\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%2\n"
"	anl	a,#%3\n"
"	;	Peephole 246.f	combined set/clr/set\n"
"	orl	a,#%4\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%2\n"
"	orl	a,#%3\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%2\n"
"	orl	a,#%3\n"
"	;	Peephole 246.g	combined clr/set/clr\n"
"	anl	a,#%4\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%2\n"
"	orl	a,#%3\n"
"	movx	@dptr,a\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	orl	a,#%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,#%1\n"
"	movx	a,@dptr\n"
"	anl	a,#%2\n"
"	;	Peephole 246.h	combined clr/set/set\n"
"	orl	a,#%3|%4\n"
"	movx	@dptr,a\n"
"} if notVolatile %1\n"
"\n"
"\n"
"replace {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%2\n"
"	mov	@r%5,a\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%3\n"
"	mov	@r%5,a\n"
"} by {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	;	Peephole 247.a	combined clr/clr\n"
"	anl	a,#%2&%3\n"
"	mov	@r%5,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%2\n"
"	mov	@r%5,a\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%3\n"
"	mov	@r%5,a\n"
"} by {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	;	Peephole 247.b	combined set/set\n"
"	orl	a,#%2|%3\n"
"	mov	@r%5,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%2\n"
"	mov	@r%5,a\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%3\n"
"	mov	@r%5,a\n"
"} by {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%2\n"
"	;	Peephole 247.c	combined set/clr\n"
"	anl	a,#%3\n"
"	mov	@r%5,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%2\n"
"	mov	@r%5,a\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%3\n"
"	mov	@r%5,a\n"
"} by {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%2\n"
"	;	Peephole 247.d	combined clr/set\n"
"	orl	a,#%3\n"
"	mov	@r%5,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%2\n"
"	anl	a,#%3\n"
"	mov	@r%5,a\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%4\n"
"	mov	@r%5,a\n"
"} by {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%2\n"
"	;	Peephole 247.e	combined set/clr/clr\n"
"	anl	a,#%3&%4\n"
"	mov	@r%5,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%2\n"
"	anl	a,#%3\n"
"	mov	@r%5,a\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%4\n"
"	mov	@r%5,a\n"
"} by {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	orl	a,#%2\n"
"	anl	a,#%3\n"
"	;	Peephole 247.f	combined set/clr/set\n"
"	orl	a,#%4\n"
"	mov	@r%5,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%2\n"
"	orl	a,#%3\n"
"	mov	@r%5,a\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%4\n"
"	mov	@r%5,a\n"
"} by {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%2\n"
"	orl	a,#%3\n"
"	;	Peephole 247.g	combined clr/set/clr\n"
"	anl	a,#%4\n"
"	mov	@r%5,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%2\n"
"	orl	a,#%3\n"
"	mov	@r%5,a\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%4\n"
"	orl	a,#%4\n"
"	mov	@r%5,a\n"
"} by {\n"
"	mov	r%5,#%1\n"
"	mov	a,@r%5\n"
"	anl	a,#%2\n"
"	;	Peephole 247.h	combined clr/set/set\n"
"	orl	a,#%3|%4\n"
"	mov	@r%5,a\n"
"} if notVolatile %1\n"
"\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	mov	dptr,%1\n"
"	mov	a,%3\n"
"	orl	a,r%2\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	;	Peephole 248.a	optimized or to xdata\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	mov	dptr,%1\n"
"	mov	a,%3\n"
"	anl	a,r%2\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	;	Peephole 248.b	optimized and to xdata\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	mov	dptr,%1\n"
"	mov	a,%3\n"
"	xrl	a,r%2\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	;	Peephole 248.c	optimized xor to xdata\n"
"	xrl	a,%3\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	anl	a,%4\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	orl	a,%5\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 248.d	optimized or/and/or to volatile xdata\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	anl	a,%4\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	orl	a,%5\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	orl	a,%4\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	anl	a,%5\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 248.e	optimized and/or/and to volatile xdata\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	orl	a,%4\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	anl	a,%5\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	anl	a,%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 248.f	optimized or/and to volatile xdata\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	anl	a,%4\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	orl	a,%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 248.g	optimized and/or to volatile xdata\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	orl	a,%4\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	xrl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	xrl	a,%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 248.h	optimized xor/xor to volatile xdata\n"
"	xrl	a,%3\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	xrl	a,%4\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	anl	a,%4\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	orl	a,%5\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"	;	Peephole 248.i	optimized or/and/or to xdata bitfield\n"
"	movx	a,@dptr\n"
"	anl	a,%4\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	orl	a,%5\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	orl	a,%4\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	anl	a,%5\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"	;	Peephole 248.j	optimized and/or/and to xdata bitfield\n"
"	movx	a,@dptr\n"
"	orl	a,%4\n"
"	movx	@dptr,a\n"
"	movx	a,@dptr\n"
"	anl	a,%5\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	anl	a,%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	orl	a,%3\n"
"	movx	@dptr,a\n"
"	;	Peephole 248.k	optimized or/and to xdata bitfield\n"
"	movx	a,@dptr\n"
"	anl	a,%4\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	orl	a,%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	anl	a,%3\n"
"	movx	@dptr,a\n"
"	;	Peephole 248.l	optimized and/or to xdata bitfield\n"
"	movx	a,@dptr\n"
"	orl	a,%4\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	xrl	a,%3\n"
"	movx	@dptr,a\n"
"\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	xrl	a,%4\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	xrl	a,%3\n"
"	movx	@dptr,a\n"
"	;	Peephole 248.m	optimized xor/xor to xdata bitfield\n"
"	movx	a,@dptr\n"
"	xrl	a,%4\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	orl	ar%2,%3\n"
"	mov	dptr,%1\n"
"	mov	a,r%2\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 248.n	optimized or to xdata array\n"
"	orl	a,%3\n"
"	mov	r%2,a\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	anl	ar%2,%3\n"
"	mov	dptr,%1\n"
"	mov	a,r%2\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 248.o	optimized and to xdata array\n"
"	anl	a,%3\n"
"	mov	r%2,a\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	mov	r%2,a\n"
"	xrl	ar%2,%3\n"
"	mov	dptr,%1\n"
"	mov	a,r%2\n"
"	movx	@dptr,a\n"
"} by {\n"
"	mov	dptr,%1\n"
"	movx	a,@dptr\n"
"	;	Peephole 248.p	optimized xor to xdata array\n"
"	xrl	a,%3\n"
"	mov	r%2,a\n"
"	movx	@dptr,a\n"
"}\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"%1:\n"
"} by {\n"
"	;	Peephole 249.a	 jump optimization\n"
"} if labelRefCount(%1 1), labelRefCountChange(%1 -1)\n"
"\n"
"replace {\n"
"	jz	%1\n"
"%1:\n"
"} by {\n"
"	;	Peephole 249.b	 jump optimization\n"
"} if labelRefCount(%1 1), labelRefCountChange(%1 -1)\n"
"\n"
"\n"
"replace {\n"
"	jnb	%1,%2\n"
"%3:\n"
"	clr	%1\n"
"} by {\n"
"	;	Peephole 250.a	using atomic test and clear\n"
"	jbc	%1,%3\n"
"	sjmp	%2\n"
"%3:\n"
"} if labelRefCount(%3 0), labelRefCountChange(%3 1)\n"
"\n"
"replace {\n"
"	jb	%1,%2\n"
"	ljmp	%3\n"
"%2:\n"
"	clr	%1\n"
"} by {\n"
"	;	Peephole 250.b	using atomic test and clear\n"
"	jbc	%1,%2\n"
"	ljmp	%3\n"
"%2:\n"
"} if labelRefCount %2 1\n"
"\n"
"\n"
"replace {\n"
"	ljmp	%5\n"
"} by {\n"
"	;	Peephole 251.a	replaced ljmp %5 to ret with ret\n"
"	ret\n"
"} if optimizeReturn(), labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	sjmp	%5\n"
"} by {\n"
"	;	Peephole 251.b	replaced sjmp %5 to ret with ret\n"
"	ret\n"
"} if optimizeReturn(), labelIsReturnOnly(%5), labelRefCountChange(%5 -1)\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"	mov	a,(%2 + 1)\n"
"	xch	a,r%1\n"
"	add	a,acc\n"
"	xch	a,r%1\n"
"	rlc	a\n"
"	mov	r%3,a\n"
"} by {\n"
"	;	Peephole 252	optimized left shift\n"
"	mov	a,%2\n"
"	add	a,acc\n"
"	mov	r%1,a\n"
"	mov	a,(%2 + 1)\n"
"	rlc	a\n"
"	mov	r%3,a\n"
"}\n"
"\n"
"replace {\n"
"	dec	%1\n"
"	cjne	%1,#0x00,%2\n"
"} by {\n"
"	;	Peephole 253.a	optimized decrement with compare\n"
"	djnz	%1,%2\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	dec	%1\n"
"	mov	a,%1\n"
"	jnz	%2\n"
"} by {\n"
"	;	Peephole 253.b	optimized decrement with compare\n"
"	djnz	%1,%2\n"
"} if notVolatile(%1), operandsNotRelated(%1 '@r0' '@r1')\n"
"\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	add	a,acc\n"
"} by {\n"
"	mov	a,%1\n"
"	;	Peephole 254	optimized left shift\n"
"	add	a,%1\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	clr	c\n"
"	mov	a,#%1\n"
"	subb	a,%2\n"
"	jc	%3\n"
"%4:\n"
"	mov	a,%2\n"
"	add	a,%2\n"
"	add	a,%2\n"
"	mov	dptr,%5\n"
"	jmp	@a+dptr\n"
"} by {\n"
"	;	Peephole 255	optimized jump table index calculation\n"
"	mov	a,%2\n"
"	cjne	a,#(%1+0x01),.+1\n"
"	jnc	%3\n"
"%4:\n"
"	add	a,%2\n"
"	add	a,%2\n"
"	mov	dptr,%5\n"
"	jmp	@a+dptr\n"
"}\n"
"\n"
"replace {\n"
"	jc	%1\n"
"%2:\n"
"	clr	c\n"
"} by {\n"
"	jc	%1\n"
"%2:\n"
"	;	Peephole 256.a	removed redundant clr c\n"
"} if labelRefCount %2 0\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"%2:\n"
"	clr	a\n"
"} by {\n"
"	jnz	%1\n"
"%2:\n"
"	;	Peephole 256.b	removed redundant clr a\n"
"} if labelRefCount %2 0\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"%2:\n"
"	mov	%3,#0x00\n"
"} by {\n"
"	jnz	%1\n"
"%2:\n"
"	;	Peephole 256.c	loading %3 with zero from a\n"
"	mov	%3,a\n"
"} if labelRefCount %2 0\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"%2:\n"
"	mov	%4,%5\n"
"	mov	%3,#0x00\n"
"} by {\n"
"	jnz	%1\n"
"%2:\n"
"	mov	%4,%5\n"
"	;	Peephole 256.d	loading %3 with zero from a\n"
"	mov	%3,a\n"
"} if labelRefCount(%2 0),operandsNotRelated('a' %4)\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"%2:\n"
"	mov	%4,%5\n"
"	mov	%6,%7\n"
"	mov	%3,#0x00\n"
"} by {\n"
"	jnz	%1\n"
"%2:\n"
"	mov	%4,%5\n"
"	mov	%6,%7\n"
"	;	Peephole 256.e	loading %3 with zero from a\n"
"	mov	%3,a\n"
"} if labelRefCount(%2 0),operandsNotRelated('a' %4 %6)\n"
"\n"
"replace {\n"
"	jnz	%1\n"
"%2:\n"
"	mov	%4,%5\n"
"	mov	%6,%7\n"
"	mov	%8,%9\n"
"	mov	%3,#0x00\n"
"} by {\n"
"	jnz	%1\n"
"%2:\n"
"	mov	%4,%5\n"
"	mov	%6,%7\n"
"	mov	%8,%9\n"
"	;	Peephole 256.f	loading %2 with zero from a\n"
"	mov	%3,a\n"
"} if labelRefCount(%2 0),operandsNotRelated('a' %4 %6 %8)\n"
"\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	add	a,%1\n"
"	mov	%1,a\n"
"	jnb	%2,%3\n"
"%4:\n"
"	orl	%1,#0x01\n"
"%3:\n"
"} by {\n"
"	mov	a,%1\n"
"	;	Peephole 258.a	optimized bitbanging\n"
"	mov	c,%2\n"
"	addc	a,%1\n"
"	mov	%1,a\n"
"%4:\n"
"%3:\n"
"} if notVolatile(%1), labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	mov	a,r%1\n"
"	add	a,r%1\n"
"	mov	r%1,a\n"
"	jnb	%2,%3\n"
"%4:\n"
"	orl	ar%1,#0x01\n"
"%3:\n"
"} by {\n"
"	mov	a,r%1\n"
"	;	Peephole 258.b	optimized bitbanging\n"
"	mov	c,%2\n"
"	addc	a,r%1\n"
"	mov	r%1,a\n"
"%4:\n"
"%3:\n"
"} if labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	clr	c\n"
"	rrc	a\n"
"	mov	%1,a\n"
"	jnb	%2,%3\n"
"%4:\n"
"	orl	%1,#0x80\n"
"%3:\n"
"} by {\n"
"	mov	a,%1\n"
"	;	Peephole 258.c	optimized bitbanging\n"
"	mov	c,%2\n"
"	rrc	a\n"
"	mov	%1,a\n"
"%4:\n"
"%3:\n"
"} if notVolatile(%1), labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	mov	a,r%1\n"
"	clr	c\n"
"	rrc	a\n"
"	mov	r%1,a\n"
"	jnb	%2,%3\n"
"%4:\n"
"	orl	ar%1,#0x80\n"
"%3:\n"
"} by {\n"
"	mov	a,r%1\n"
"	;	Peephole 258.d	optimized bitbanging\n"
"	mov	c,%2\n"
"	rrc	a\n"
"	mov	r%1,a\n"
"%4:\n"
"%3:\n"
"} if labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	rlc	a\n"
"	mov	%2,c\n"
"	mov	a,%1\n"
"	add	a,%1\n"
"	mov	%1,a\n"
"} by {\n"
"	mov	a,%1\n"
"	;	Peephole 258.e	optimized bitbanging\n"
"	add	a,%1\n"
"	mov	%2,c\n"
"	mov	%1,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	rrc	a\n"
"	mov	%2,c\n"
"	mov	a,%1\n"
"	clr	c\n"
"	rrc	a\n"
"	mov	%1,a\n"
"} by {\n"
"	mov	a,%1\n"
"	;	Peephole 258.f	optimized bitbanging\n"
"	clr	c\n"
"	rrc	a\n"
"	mov	%2,c\n"
"	mov	%1,a\n"
"} if notVolatile %1\n"
"\n"
"replace {\n"
"	sjmp	%1\n"
"%2:\n"
"	ret\n"
"} by {\n"
"	sjmp	%1\n"
"	;	Peephole 259.a	removed redundant label %2 and ret\n"
"	;\n"
"} if optimizeReturn(), labelRefCount(%2 0)\n"
"\n"
"replace {\n"
"	ljmp	%1\n"
"%2:\n"
"	ret\n"
"} by {\n"
"	ljmp	%1\n"
"	;	Peephole 259.b	removed redundant label %2 and ret\n"
"	;\n"
"} if optimizeReturn(), labelRefCount(%2 0)\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.a	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.b	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.c	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.d	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.e	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"\n"
"	ljmp	%13\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.f	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"\n"
"	sjmp	%13\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"\n"
"	ljmp	%13\n"
"	ljmp	%14\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.g	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"\n"
"	sjmp	%13\n"
"	sjmp	%14\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"\n"
"	ljmp	%13\n"
"	ljmp	%14\n"
"	ljmp	%15\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.h	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"\n"
"	sjmp	%13\n"
"	sjmp	%14\n"
"	sjmp	%15\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"\n"
"	ljmp	%13\n"
"	ljmp	%14\n"
"	ljmp	%15\n"
"	ljmp	%16\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.i	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"\n"
"	sjmp	%13\n"
"	sjmp	%14\n"
"	sjmp	%15\n"
"	sjmp	%16\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"\n"
"	ljmp	%13\n"
"	ljmp	%14\n"
"	ljmp	%15\n"
"	ljmp	%16\n"
"	ljmp	%17\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.j	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"\n"
"	sjmp	%13\n"
"	sjmp	%14\n"
"	sjmp	%15\n"
"	sjmp	%16\n"
"	sjmp	%17\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"\n"
"	ljmp	%13\n"
"	ljmp	%14\n"
"	ljmp	%15\n"
"	ljmp	%16\n"
"	ljmp	%17\n"
"	ljmp	%18\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.k	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"\n"
"	sjmp	%13\n"
"	sjmp	%14\n"
"	sjmp	%15\n"
"	sjmp	%16\n"
"	sjmp	%17\n"
"	sjmp	%18\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"\n"
"	ljmp	%13\n"
"	ljmp	%14\n"
"	ljmp	%15\n"
"	ljmp	%16\n"
"	ljmp	%17\n"
"	ljmp	%18\n"
"	ljmp	%19\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.l	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"\n"
"	sjmp	%13\n"
"	sjmp	%14\n"
"	sjmp	%15\n"
"	sjmp	%16\n"
"	sjmp	%17\n"
"	sjmp	%18\n"
"	sjmp	%19\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	add	a,%1\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	ljmp	%5\n"
"	ljmp	%6\n"
"	ljmp	%7\n"
"	ljmp	%8\n"
"	ljmp	%9\n"
"	ljmp	%10\n"
"	ljmp	%11\n"
"	ljmp	%12\n"
"\n"
"	ljmp	%13\n"
"	ljmp	%14\n"
"	ljmp	%15\n"
"	ljmp	%16\n"
"	ljmp	%17\n"
"	ljmp	%18\n"
"	ljmp	%19\n"
"	ljmp	%20\n"
"%3:\n"
"} by {\n"
"	;	Peephole 260.m	used sjmp in jumptable\n"
"	mov	dptr,#%2\n"
"	jmp	@a+dptr\n"
"%2:\n"
"	sjmp	%5\n"
"	sjmp	%6\n"
"	sjmp	%7\n"
"	sjmp	%8\n"
"	sjmp	%9\n"
"	sjmp	%10\n"
"	sjmp	%11\n"
"	sjmp	%12\n"
"\n"
"	sjmp	%13\n"
"	sjmp	%14\n"
"	sjmp	%15\n"
"	sjmp	%16\n"
"	sjmp	%17\n"
"	sjmp	%18\n"
"	sjmp	%19\n"
"	sjmp	%20\n"
"%3:\n"
"} if labelJTInRange\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	rlc	a\n"
"	mov	%1,a\n"
"	mov	a,%2\n"
"	rlc	a\n"
"	mov	%2,a\n"
"	mov	a,%1\n"
"	mov	acc.0,c\n"
"	mov	%1,a\n"
"} by {\n"
"	mov	a,%1\n"
"	rlc	a\n"
"	;	Peephole 261.a	optimized left rol\n"
"	xch	a,%2\n"
"	rlc	a\n"
"	xch	a,%2\n"
"	mov	acc.0,c\n"
"	mov	%1,a\n"
"}\n"
"\n"
"replace {\n"
"	mov	a,%1\n"
"	rrc	a\n"
"	mov	%1,a\n"
"	mov	a,%2\n"
"	rrc	a\n"
"	mov	%2,a\n"
"	mov	a,%1\n"
"	mov	acc.7,c\n"
"	mov	%1,a\n"
"} by {\n"
"	mov	a,%1\n"
"	rrc	a\n"
"	;	Peephole 261.b	optimized right rol\n"
"	xch	a,%2\n"
"	rrc	a\n"
"	xch	a,%2\n"
"	mov	acc.7,c\n"
"	mov	%1,a\n"
"}\n"
"\n"
"replace {\n"
"	cpl	c\n"
"	cpl	c\n"
"} by {\n"
"	;	Peephole 262	removed redundant cpl c\n"
"}\n"
"\n"
"replace {\n"
"	mov	%1,#%2\n"
"	inc	%1\n"
"	inc	%1\n"
"	inc	%1\n"
"} by {\n"
"	;	Peephole 263.a	optimized loading const\n"
"	mov	%1,#(%2 + 3)\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	mov	%1,#%2\n"
"	inc	%1\n"
"	inc	%1\n"
"} by {\n"
"	;	Peephole 263.b	optimized loading const\n"
"	mov	%1,#(%2 + 2)\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	mov	%1,#%2\n"
"	inc	%1\n"
"} by {\n"
"	;	Peephole 263.c	optimized loading const\n"
"	mov	%1,#(%2 + 1)\n"
"} if notVolatile(%1)\n"
"\n"
"\n"
"replace {\n"
"	clr	a\n"
"	cjne	%1,%2,%3\n"
"	inc	a\n"
"%3:\n"
"	jz	%4\n"
"} by {\n"
"	;	Peephole 264	jump optimization (acc not set)\n"
"	cjne	%1,%2,%4\n"
"%3:\n"
"} if labelRefCount(%3 1), labelRefCountChange(%3 -1)\n"
"\n"
"\n"
"replace {\n"
"	mov	%1,c\n"
"	cpl	%1\n"
"} by {\n"
"	;	Peephole 265	optimized mov/cpl sequence (carry differs)\n"
"	cpl	c\n"
"	mov	%1,c\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	mov	%1,c\n"
"	jb	%1,%2\n"
"} by {\n"
"	;	Peephole 266.a	optimized mov/jump sequence\n"
"	mov	%1,c\n"
"        jc	%2\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	mov	%1,c\n"
"	jnb	%1,%2\n"
"} by {\n"
"	;	Peephole 266.b	optimized mov/jump sequence\n"
"	mov	%1,c\n"
"        jnc	%2\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	jnc	%1\n"
"	setb	%2\n"
"	sjmp	%3\n"
"%1:\n"
"	clr	%2\n"
"%3:\n"
"} by {\n"
"	;	Peephole 267.a	optimized mov bit sequence\n"
"	mov	%2,c\n"
"%1:\n"
"%3:\n"
"} if labelRefCount(%1 1), labelRefCountChange(%1 -1), labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	jc	%1\n"
"	clr	%2\n"
"	sjmp	%3\n"
"%1:\n"
"	setb	%2\n"
"%3:\n"
"} by {\n"
"	;	Peephole 267.b	optimized mov bit sequence\n"
"	mov	%2,c\n"
"%1:\n"
"%3:\n"
"} if labelRefCount(%1 1), labelRefCountChange(%1 -1), labelRefCountChange(%3 -1)\n"
"\n"
"replace {\n"
"	mov	%1,c\n"
"	mov	%1,c\n"
"} by {\n"
"	;	Peephole 268	removed redundant mov\n"
"	mov	%1,c\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	mov	%1,c\n"
"	mov	c,%1\n"
"} by {\n"
"	;	Peephole 269	removed redundant mov\n"
"	mov	%1,c\n"
"} if notVolatile(%1)\n"
"\n"
"\n"
"replace {\n"
"	jz	%1\n"
"	mov	%2,%4\n"
"	sjmp	%3\n"
"%1:\n"
"	mov	%2,#0x00\n"
"%3:\n"
"} by {\n"
"	jz	%1\n"
"	;	Peephole 271	optimized ternary operation (acc different)\n"
"	mov	a,%4\n"
"%1:\n"
"	mov	%2,a\n"
"%3:\n"
"} if operandsNotRelated('a' 'dptr' %2), labelRefCount(%1 1), labelRefCountChange(%3 -1)\n"
"\n"
"\n"
"replace {\n"
"	clr	a\n"
"	swap	a\n"
"} by {\n"
"	clr	a\n"
"	;	Peephole 272.a	removed swap operation on zero\n"
"}\n"
"\n"
"replace {\n"
"	clr	a\n"
"	anl	a,%1\n"
"} by {\n"
"	clr	a\n"
"	;	Peephole 272.b	removed anl operation on zero\n"
"} if notVolatile(%1)\n"
"\n"
"replace {\n"
"	clr	a\n"
"	mov	c,acc.0\n"
"} by {\n"
"	clr	a\n"
"	;	Peephole 272.c	clearing carry directly\n"
"	clr	c\n"
"}\n"
"\n"
"\n"
"replace restart {\n"
"	pop	ar%1\n"
"} by {\n"
"	;	Peephole 300	pop ar%1 removed\n"
"} if deadMove(%1)\n"
"\n"
"replace {\n"
"	mov	r%1,%2\n"
"} by {\n"
"	;	Peephole 301	mov r%1,%2 removed\n"
"} if notVolatile(%2), deadMove(%1)\n"
"\n"
"\n"
"replace {\n"
"	lcall	%1\n"
"	ret\n"
"} by {\n"
"	;	Peephole 400.a	replaced lcall/ret with ljmp\n"
"	ljmp	%1\n"
"} if optimizeReturn(), notSame(%1 '_longjmp')\n"
"\n"
"replace {\n"
"	lcall	%1\n"
"%2:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 400.b	replaced lcall/ret with ljmp\n"
"	ljmp	%1\n"
"	;\n"
"} if optimizeReturn(), notSame(%1 '_longjmp'), labelRefCount(%2 0)\n"
"\n"
"replace {\n"
"	lcall	%1\n"
"%2:\n"
"	ret\n"
"} by {\n"
"	;	Peephole 400.c	replaced lcall with ljmp\n"
"	ljmp	%1\n"
"%2:\n"
"	ret\n"
"} if optimizeReturn(), notSame(%1 '_longjmp')\n"
"\n"
"replace {\n"
"	lcall	%1\n"
"} by {\n"
"	;	Peephole 401.a	replaced lcall with acall\n"
"	acall	%1\n"
"} if useAcallAjmp\n"
"\n"
"replace {\n"
"	ljmp	%1\n"
"} by {\n"
"	;	Peephole 401.b	replaced ljmp with ajmp\n"
"	ajmp	%1\n"
"} if useAcallAjmp\n"
"\n"
"\n"
"replace{\n"
"%1:\n"
"} by {\n"
"	;	Peephole 500	removed redundant label %1\n"
"} if labelRefCount(%1 0)\n"
