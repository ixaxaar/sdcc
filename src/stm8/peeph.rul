/* Generated file, DO NOT Edit!  */
/* To Make changes to rules edit */
/* <port>/peeph.def instead.     */
"\n"
"replace restart {\n"
"	ld	%1, %2\n"
"} by {\n"
"	; peephole 0 removed dead load.\n"
"} if notVolatile(%1), notVolatile(%2), notUsed(%1)\n"
"\n"
"\n"
"replace restart {\n"
"	pop	%1\n"
"	push	%1\n"
"} by {\n"
"	; peephole 2 removed dead pop / push pair.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	popw	%1\n"
"	pushw	%1\n"
"} by {\n"
"	; peephole 3 removed dead popw / pushw pair.\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	addw	%1, #%2\n"
"	ldw	(%1), a\n"
"} by {\n"
"	; peephole 3a moved addition of offset into storage instruction\n"
"	ldw	(%2, %1), a\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	addw	%1, #%2\n"
"	ldw	(%1), %3\n"
"} by {\n"
"	; peephole 3b moved addition of offset into storage instruction\n"
"	ldw	(%2, %1), %3\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	addw	%1, #%2\n"
"	ld	a, %4\n"
"	ld	(%1), a\n"
"} by {\n"
"	; peephole 3c moved addition of offset into storage instruction\n"
"	ld	a, %4\n"
"	ld	(%2, %1), a\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	addw	%1, #%2\n"
"	ldw	%3, %4\n"
"	ldw	(%1), %3\n"
"} by {\n"
"	; peephole 3d moved addition of offset into storage instruction\n"
"	ldw	%3, %4\n"
"	ldw	(%2, %1), %3\n"
"} if notUsed(%1)\n"
"\n"
"replace restart {\n"
"	ld	a, (%1, y)\n"
"	push	a\n"
"	ld	a, (%2, x)\n"
"	ld	(%3, sp), a\n"
"	pop	a\n"
"} by {\n"
"	ld	a, (%2, x)\n"
"	ld	(%3, sp), a\n"
"	ld	a, (%1, y)\n"
"	; peephole 4 changed order of memory accesses to avoid pushing a.\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, (%1, y)\n"
"	push	a\n"
"	ld	a, (x)\n"
"	ld	(%3, sp), a\n"
"	pop	a\n"
"} by {\n"
"	ld	a, (x)\n"
"	ld	(%3, sp), a\n"
"	ld	a, (%1, y)\n"
"	; peephole 5 changed order of memory accesses to avoid pushing a.\n"
"}\n"
"\n"
"replace restart {\n"
"	ldw	%1, (%2, sp)\n"
"	ld	a, (%1)\n"
"	%3	a\n"
"	ldw	%1, (%2, sp)\n"
"} by {\n"
"	ldw	%1, (%2, sp)\n"
"	ld	a, (%1)\n"
"	%3	a\n"
"	; peephole 6 removed redundant load from (%2, sp) into %1.\n"
"} if notSame(%3 'push' 'pop')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	%2	a\n"
"	ld	%1, a\n"
"} by {\n"
"	%2	%1\n"
"	; peephole 7 applied %2 on %1 instead of a.\n"
"} if notUsed('a'), notSame(%2 'push' 'pop'), notSame(%1 'xl' 'xh' 'yl' 'yh')\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	tst	a\n"
"} by {\n"
"	tst	%1\n"
"	; peephole 8 tested in %1 instead of a.\n"
"} if notUsed('a'), notSame(%1 'xl' 'xh' 'yl' 'yh')\n"
"\n"
"replace restart {\n"
"	ld	a, (x)\n"
"	or	a, #0x80\n"
"	ld	(x), a\n"
"} by {\n"
"	rlc	(x)\n"
"	scf\n"
"	rrc	(x)\n"
"	; peephole 9 set msb in carry instead of a.\n"
"} if notUsed('a')\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	jp	%6\n"
"	; peephole j1 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"%1:\n"
"} by {\n"
"%1:\n"
"	; peephole j1a removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"%2:\n"
"%1:\n"
"} by {\n"
"%2:\n"
"%1:\n"
"	; peephole j1b removed redundant jump.\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"	jp	%2\n"
"} by {\n"
"	jp	%1\n"
"	; peephole j2a removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jra	%1\n"
"	jp	%2\n"
"} by {\n"
"	jra	%1\n"
"	; peephole j2b removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jp	%1\n"
"	jra	%2\n"
"} by {\n"
"	jp	%1\n"
"	; peephole jc2 removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"replace restart {\n"
"	jra	%1\n"
"	jra	%2\n"
"} by {\n"
"	jra	%1\n"
"	; peephole j2d removed unreachable jump to %2.\n"
"} if labelRefCountChange(%2 -1)\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	btjt	%1, #0, %2\n"
"} by {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	; peephole j3 jumped by carry bit instead of testing bit explicitly.\n"
"	jrc %2\n"
"}\n"
"\n"
"replace restart {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	btjf	%1, #0, %2\n"
"} by {\n"
"	ld	a, %1\n"
"	srl	a\n"
"	; peephole j4 jumped by carry bit instead of testing bit explicitly.\n"
"	jrnc %2\n"
"}\n"
"\n"
"replace restart {\n"
"	jp	%5\n"
"} by {\n"
"	jra	%5\n"
"	; peephole j5 changed absolute to relative unconditional jump.\n"
"} if labelInRange(%5)\n"
"\n"
"replace restart {\n"
"	jrc	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrnc	%5\n"
"	; peephole j6 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jreq	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrne	%5\n"
"	; peephole j7 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrmi	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrpl	%5\n"
"	; peephole j8 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrnc	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrc	%5\n"
"	; peephole j9 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrne	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jreq	%5\n"
"	; peephole j10 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrpl	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrmi	%5\n"
"	; peephole j11 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsge	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrslt	%5\n"
"	; peephole j12 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsgt	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrsle	%5\n"
"	; peephole j13 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrsle	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrsgt	%5\n"
"	; peephole j14 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrslt	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrsge	%5\n"
"	; peephole j15 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrugt	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrule	%5\n"
"	; peephole j16 removed jra by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrule	%1\n"
"	jra	%5\n"
"%1:\n"
"} by {\n"
"	jrugt	%5\n"
"	; peephole j17 removed jp by using inverse jump logic\n"
"%1:\n"
"} if labelRefCountChange(%1 -1)\n"
"\n"
"replace restart {\n"
"	jrc	%5\n"
"} by {\n"
"	jrc	%6\n"
"	; peephole j18 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jreq	%5\n"
"} by {\n"
"	jreq	%6\n"
"	; peephole j19 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrmi	%5\n"
"} by {\n"
"	jrmi	%6\n"
"	; peephole j20 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrnc	%5\n"
"} by {\n"
"	jrnc	%6\n"
"	; peephole j21 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrne	%5\n"
"} by {\n"
"	jrne	%6\n"
"	; peephole j22 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrpl	%5\n"
"} by {\n"
"	jrpl	%6\n"
"	; peephole j23 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrge	%5\n"
"} by {\n"
"	jrge	%6\n"
"	; peephole j24 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrgt	%5\n"
"} by {\n"
"	jrgt	%6\n"
"	; peephole j25 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrle	%5\n"
"} by {\n"
"	jrle	%6\n"
"	; peephole j26 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrlt	%5\n"
"} by {\n"
"	jrlt	%6\n"
"	; peephole j27 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrugt	%5\n"
"} by {\n"
"	jrugt	%6\n"
"	; peephole j28 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"	jrule	%5\n"
"} by {\n"
"	jrule	%6\n"
"	; peephole j29 jumped to %6 directly instead of via %5.\n"
"} if labelIsUncondJump(), notSame(%5 %6), labelInRange(%6), labelRefCountChange(%5 -1), labelRefCountChange(%6 +1)\n"
"\n"
"replace restart {\n"
"%1:\n"
"} by {\n"
"	; peephole j18 removed unused label %1.\n"
"} if labelRefCount(%1 0)\n"
"\n"
"barrier\n"
"\n"
"replace restart {\n"
"	call	%1\n"
"	ret\n"
"} by {\n"
"	jp	%1\n"
"	; peephole j19 replaced call at end of function by jump (tail call optimization).\n"
"}\n"
"\n"
