                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:54 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sprintf
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __print_format
                                     13 	.globl _vsprintf_PARM_3
                                     14 	.globl _vsprintf_PARM_2
                                     15 	.globl _vsprintf
                                     16 	.globl _sprintf
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; internal ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DSEG    (DATA)
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable items in internal ram 
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
      000000                         56 _vsprintf_PARM_2:
      000000                         57 	.ds 3
      000003                         58 _vsprintf_PARM_3:
      000003                         59 	.ds 1
      000004                         60 _vsprintf_buf_1_14:
      000004                         61 	.ds 3
                                     62 ;--------------------------------------------------------
                                     63 ; external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XSEG    (XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; absolute external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XABS    (ABS,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; external initialized ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XISEG   (XDATA)
                                     74 	.area HOME    (CODE)
                                     75 	.area GSINIT0 (CODE)
                                     76 	.area GSINIT1 (CODE)
                                     77 	.area GSINIT2 (CODE)
                                     78 	.area GSINIT3 (CODE)
                                     79 	.area GSINIT4 (CODE)
                                     80 	.area GSINIT5 (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 	.area GSFINAL (CODE)
                                     83 	.area CSEG    (CODE)
                                     84 ;--------------------------------------------------------
                                     85 ; global & static initialisations
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; Home
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area HOME    (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; code
                                     98 ;--------------------------------------------------------
                                     99 	.area CSEG    (CODE)
                                    100 ;------------------------------------------------------------
                                    101 ;Allocation info for local variables in function 'put_char_to_string'
                                    102 ;------------------------------------------------------------
                                    103 ;p                         Allocated to stack - _bp -5
                                    104 ;c                         Allocated to stack - _bp +1
                                    105 ;buf                       Allocated to stack - _bp +2
                                    106 ;------------------------------------------------------------
                                    107 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                                    108 ;	-----------------------------------------
                                    109 ;	 function put_char_to_string
                                    110 ;	-----------------------------------------
      000000                        111 _put_char_to_string:
                           000007   112 	ar7 = 0x07
                           000006   113 	ar6 = 0x06
                           000005   114 	ar5 = 0x05
                           000004   115 	ar4 = 0x04
                           000003   116 	ar3 = 0x03
                           000002   117 	ar2 = 0x02
                           000001   118 	ar1 = 0x01
                           000000   119 	ar0 = 0x00
      000000 C0*00            [24]  120 	push	_bp
      000002 85 81*00         [24]  121 	mov	_bp,sp
      000005 C0 82            [24]  122 	push	dpl
      000007 05 81            [12]  123 	inc	sp
      000009 05 81            [12]  124 	inc	sp
      00000B 05 81            [12]  125 	inc	sp
                                    126 ;	sprintf.c:36: char **buf = (char **)p;
      00000D E5*00            [12]  127 	mov	a,_bp
      00000F 24 FB            [12]  128 	add	a,#0xfb
      000011 F8               [12]  129 	mov	r0,a
      000012 A9*00            [24]  130 	mov	r1,_bp
      000014 09               [12]  131 	inc	r1
      000015 09               [12]  132 	inc	r1
      000016 E6               [12]  133 	mov	a,@r0
      000017 F7               [12]  134 	mov	@r1,a
      000018 08               [12]  135 	inc	r0
      000019 09               [12]  136 	inc	r1
      00001A E6               [12]  137 	mov	a,@r0
      00001B F7               [12]  138 	mov	@r1,a
      00001C 08               [12]  139 	inc	r0
      00001D 09               [12]  140 	inc	r1
      00001E E6               [12]  141 	mov	a,@r0
      00001F F7               [12]  142 	mov	@r1,a
                                    143 ;	sprintf.c:37: *(*buf)++ = c;
      000020 A8*00            [24]  144 	mov	r0,_bp
      000022 08               [12]  145 	inc	r0
      000023 08               [12]  146 	inc	r0
      000024 86 82            [24]  147 	mov	dpl,@r0
      000026 08               [12]  148 	inc	r0
      000027 86 83            [24]  149 	mov	dph,@r0
      000029 08               [12]  150 	inc	r0
      00002A 86 F0            [24]  151 	mov	b,@r0
      00002C 12r00r00         [24]  152 	lcall	__gptrget
      00002F FA               [12]  153 	mov	r2,a
      000030 A3               [24]  154 	inc	dptr
      000031 12r00r00         [24]  155 	lcall	__gptrget
      000034 FB               [12]  156 	mov	r3,a
      000035 A3               [24]  157 	inc	dptr
      000036 12r00r00         [24]  158 	lcall	__gptrget
      000039 FF               [12]  159 	mov	r7,a
      00003A 74 01            [12]  160 	mov	a,#0x01
      00003C 2A               [12]  161 	add	a,r2
      00003D FC               [12]  162 	mov	r4,a
      00003E E4               [12]  163 	clr	a
      00003F 3B               [12]  164 	addc	a,r3
      000040 FD               [12]  165 	mov	r5,a
      000041 8F 06            [24]  166 	mov	ar6,r7
      000043 A8*00            [24]  167 	mov	r0,_bp
      000045 08               [12]  168 	inc	r0
      000046 08               [12]  169 	inc	r0
      000047 86 82            [24]  170 	mov	dpl,@r0
      000049 08               [12]  171 	inc	r0
      00004A 86 83            [24]  172 	mov	dph,@r0
      00004C 08               [12]  173 	inc	r0
      00004D 86 F0            [24]  174 	mov	b,@r0
      00004F EC               [12]  175 	mov	a,r4
      000050 12r00r00         [24]  176 	lcall	__gptrput
      000053 A3               [24]  177 	inc	dptr
      000054 ED               [12]  178 	mov	a,r5
      000055 12r00r00         [24]  179 	lcall	__gptrput
      000058 A3               [24]  180 	inc	dptr
      000059 EE               [12]  181 	mov	a,r6
      00005A 12r00r00         [24]  182 	lcall	__gptrput
      00005D 8A 82            [24]  183 	mov	dpl,r2
      00005F 8B 83            [24]  184 	mov	dph,r3
      000061 8F F0            [24]  185 	mov	b,r7
      000063 A8*00            [24]  186 	mov	r0,_bp
      000065 08               [12]  187 	inc	r0
      000066 E6               [12]  188 	mov	a,@r0
      000067 12r00r00         [24]  189 	lcall	__gptrput
      00006A 85*00 81         [24]  190 	mov	sp,_bp
      00006D D0*00            [24]  191 	pop	_bp
      00006F 22               [24]  192 	ret
                                    193 ;------------------------------------------------------------
                                    194 ;Allocation info for local variables in function 'vsprintf'
                                    195 ;------------------------------------------------------------
                                    196 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                                    197 ;	-----------------------------------------
                                    198 ;	 function vsprintf
                                    199 ;	-----------------------------------------
      000070                        200 _vsprintf:
      000070 AF F0            [24]  201 	mov	r7,b
      000072 AE 83            [24]  202 	mov	r6,dph
      000074 E5 82            [12]  203 	mov	a,dpl
      000076 78r04            [12]  204 	mov	r0,#_vsprintf_buf_1_14
      000078 F2               [24]  205 	movx	@r0,a
      000079 08               [12]  206 	inc	r0
      00007A EE               [12]  207 	mov	a,r6
      00007B F2               [24]  208 	movx	@r0,a
      00007C 08               [12]  209 	inc	r0
      00007D EF               [12]  210 	mov	a,r7
      00007E F2               [24]  211 	movx	@r0,a
                                    212 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
      00007F 78r00            [12]  213 	mov	r0,#__print_format_PARM_2
      000081 74r04            [12]  214 	mov	a,#_vsprintf_buf_1_14
      000083 F2               [24]  215 	movx	@r0,a
      000084 08               [12]  216 	inc	r0
      000085 E4               [12]  217 	clr	a
      000086 F2               [24]  218 	movx	@r0,a
      000087 08               [12]  219 	inc	r0
      000088 74 60            [12]  220 	mov	a,#0x60
      00008A F2               [24]  221 	movx	@r0,a
      00008B 78r00            [12]  222 	mov	r0,#_vsprintf_PARM_2
      00008D 79r00            [12]  223 	mov	r1,#__print_format_PARM_3
      00008F E2               [24]  224 	movx	a,@r0
      000090 F3               [24]  225 	movx	@r1,a
      000091 08               [12]  226 	inc	r0
      000092 E2               [24]  227 	movx	a,@r0
      000093 09               [12]  228 	inc	r1
      000094 F3               [24]  229 	movx	@r1,a
      000095 08               [12]  230 	inc	r0
      000096 E2               [24]  231 	movx	a,@r0
      000097 09               [12]  232 	inc	r1
      000098 F3               [24]  233 	movx	@r1,a
      000099 78r03            [12]  234 	mov	r0,#_vsprintf_PARM_3
      00009B 79r00            [12]  235 	mov	r1,#__print_format_PARM_4
      00009D E2               [24]  236 	movx	a,@r0
      00009E F3               [24]  237 	movx	@r1,a
      00009F 90r00r00         [24]  238 	mov	dptr,#_put_char_to_string
      0000A2 12r00r00         [24]  239 	lcall	__print_format
      0000A5 AE 82            [24]  240 	mov	r6,dpl
      0000A7 AF 83            [24]  241 	mov	r7,dph
                                    242 ;	sprintf.c:45: *buf = 0;
      0000A9 78r04            [12]  243 	mov	r0,#_vsprintf_buf_1_14
      0000AB E2               [24]  244 	movx	a,@r0
      0000AC FB               [12]  245 	mov	r3,a
      0000AD 08               [12]  246 	inc	r0
      0000AE E2               [24]  247 	movx	a,@r0
      0000AF FC               [12]  248 	mov	r4,a
      0000B0 08               [12]  249 	inc	r0
      0000B1 E2               [24]  250 	movx	a,@r0
      0000B2 FD               [12]  251 	mov	r5,a
      0000B3 8B 82            [24]  252 	mov	dpl,r3
      0000B5 8C 83            [24]  253 	mov	dph,r4
      0000B7 8D F0            [24]  254 	mov	b,r5
      0000B9 E4               [12]  255 	clr	a
      0000BA 12r00r00         [24]  256 	lcall	__gptrput
                                    257 ;	sprintf.c:46: return i;
      0000BD 8E 82            [24]  258 	mov	dpl,r6
      0000BF 8F 83            [24]  259 	mov	dph,r7
      0000C1 22               [24]  260 	ret
                                    261 ;------------------------------------------------------------
                                    262 ;Allocation info for local variables in function 'sprintf'
                                    263 ;------------------------------------------------------------
                                    264 ;buf                       Allocated to stack - _bp -5
                                    265 ;format                    Allocated to stack - _bp -8
                                    266 ;arg                       Allocated to registers 
                                    267 ;i                         Allocated to registers r6 r7 
                                    268 ;------------------------------------------------------------
                                    269 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                                    270 ;	-----------------------------------------
                                    271 ;	 function sprintf
                                    272 ;	-----------------------------------------
      0000C2                        273 _sprintf:
      0000C2 C0*00            [24]  274 	push	_bp
      0000C4 85 81*00         [24]  275 	mov	_bp,sp
                                    276 ;	sprintf.c:55: va_start (arg, format);
      0000C7 E5*00            [12]  277 	mov	a,_bp
      0000C9 24 F8            [12]  278 	add	a,#0xF8
      0000CB 78r00            [12]  279 	mov	r0,#__print_format_PARM_4
      0000CD F2               [24]  280 	movx	@r0,a
                                    281 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
      0000CE E5*00            [12]  282 	mov	a,_bp
      0000D0 24 FB            [12]  283 	add	a,#0xFB
      0000D2 78r00            [12]  284 	mov	r0,#__print_format_PARM_2
      0000D4 F2               [24]  285 	movx	@r0,a
      0000D5 08               [12]  286 	inc	r0
      0000D6 E4               [12]  287 	clr	a
      0000D7 F2               [24]  288 	movx	@r0,a
      0000D8 08               [12]  289 	inc	r0
      0000D9 74 40            [12]  290 	mov	a,#0x40
      0000DB F2               [24]  291 	movx	@r0,a
      0000DC E5*00            [12]  292 	mov	a,_bp
      0000DE 24 F8            [12]  293 	add	a,#0xf8
      0000E0 F8               [12]  294 	mov	r0,a
      0000E1 79r00            [12]  295 	mov	r1,#__print_format_PARM_3
      0000E3 E6               [12]  296 	mov	a,@r0
      0000E4 F3               [24]  297 	movx	@r1,a
      0000E5 08               [12]  298 	inc	r0
      0000E6 09               [12]  299 	inc	r1
      0000E7 E6               [12]  300 	mov	a,@r0
      0000E8 F3               [24]  301 	movx	@r1,a
      0000E9 08               [12]  302 	inc	r0
      0000EA 09               [12]  303 	inc	r1
      0000EB E6               [12]  304 	mov	a,@r0
      0000EC F3               [24]  305 	movx	@r1,a
      0000ED 90r00r00         [24]  306 	mov	dptr,#_put_char_to_string
      0000F0 12r00r00         [24]  307 	lcall	__print_format
      0000F3 AE 82            [24]  308 	mov	r6,dpl
      0000F5 AF 83            [24]  309 	mov	r7,dph
                                    310 ;	sprintf.c:57: *buf = 0;
      0000F7 E5*00            [12]  311 	mov	a,_bp
      0000F9 24 FB            [12]  312 	add	a,#0xfb
      0000FB F8               [12]  313 	mov	r0,a
      0000FC 86 03            [24]  314 	mov	ar3,@r0
      0000FE 08               [12]  315 	inc	r0
      0000FF 86 04            [24]  316 	mov	ar4,@r0
      000101 08               [12]  317 	inc	r0
      000102 86 05            [24]  318 	mov	ar5,@r0
      000104 8B 82            [24]  319 	mov	dpl,r3
      000106 8C 83            [24]  320 	mov	dph,r4
      000108 8D F0            [24]  321 	mov	b,r5
      00010A E4               [12]  322 	clr	a
      00010B 12r00r00         [24]  323 	lcall	__gptrput
                                    324 ;	sprintf.c:60: return i;
      00010E 8E 82            [24]  325 	mov	dpl,r6
      000110 8F 83            [24]  326 	mov	dph,r7
      000112 D0*00            [24]  327 	pop	_bp
      000114 22               [24]  328 	ret
                                    329 	.area CSEG    (CODE)
                                    330 	.area CONST   (CODE)
                                    331 	.area XINIT   (CODE)
                                    332 	.area CABS    (ABS,CODE)
