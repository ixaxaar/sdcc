                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:53 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _strstr
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strstr_PARM_2
                                     13 	.globl _strstr
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 	.area	OSEG    (OVR,DATA)
      000000                         37 _strstr_sloc0_1_0:
      000000                         38 	.ds 3
      000003                         39 _strstr_sloc1_1_0:
      000003                         40 	.ds 1
      000004                         41 _strstr_sloc2_1_0:
      000004                         42 	.ds 1
      000005                         43 _strstr_sloc3_1_0:
      000005                         44 	.ds 2
                                     45 ;--------------------------------------------------------
                                     46 ; indirectly addressable internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area ISEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; absolute internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area IABS    (ABS,DATA)
                                     53 	.area IABS    (ABS,DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; bit data
                                     56 ;--------------------------------------------------------
                                     57 	.area BSEG    (BIT)
                                     58 ;--------------------------------------------------------
                                     59 ; paged external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area PSEG    (PAG,XDATA)
      000000                         62 _strstr_PARM_2:
      000000                         63 	.ds 3
      000003                         64 _strstr_cp_1_22:
      000003                         65 	.ds 3
      000006                         66 _strstr_s2_1_22:
      000006                         67 	.ds 3
                                     68 ;--------------------------------------------------------
                                     69 ; external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XSEG    (XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; absolute external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XABS    (ABS,XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; external initialized ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XISEG   (XDATA)
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT0 (CODE)
                                     82 	.area GSINIT1 (CODE)
                                     83 	.area GSINIT2 (CODE)
                                     84 	.area GSINIT3 (CODE)
                                     85 	.area GSINIT4 (CODE)
                                     86 	.area GSINIT5 (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area CSEG    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function 'strstr'
                                    108 ;------------------------------------------------------------
                                    109 ;sloc0                     Allocated with name '_strstr_sloc0_1_0'
                                    110 ;sloc1                     Allocated with name '_strstr_sloc1_1_0'
                                    111 ;sloc2                     Allocated with name '_strstr_sloc2_1_0'
                                    112 ;sloc3                     Allocated with name '_strstr_sloc3_1_0'
                                    113 ;------------------------------------------------------------
                                    114 ;	_strstr.c:31: char * strstr (
                                    115 ;	-----------------------------------------
                                    116 ;	 function strstr
                                    117 ;	-----------------------------------------
      000000                        118 _strstr:
                           000007   119 	ar7 = 0x07
                           000006   120 	ar6 = 0x06
                           000005   121 	ar5 = 0x05
                           000004   122 	ar4 = 0x04
                           000003   123 	ar3 = 0x03
                           000002   124 	ar2 = 0x02
                           000001   125 	ar1 = 0x01
                           000000   126 	ar0 = 0x00
      000000 AD 82            [24]  127 	mov	r5,dpl
      000002 AE 83            [24]  128 	mov	r6,dph
      000004 AF F0            [24]  129 	mov	r7,b
                                    130 ;	_strstr.c:36: const char * cp = str1;
      000006 78r03            [12]  131 	mov	r0,#_strstr_cp_1_22
      000008 ED               [12]  132 	mov	a,r5
      000009 F2               [24]  133 	movx	@r0,a
      00000A 08               [12]  134 	inc	r0
      00000B EE               [12]  135 	mov	a,r6
      00000C F2               [24]  136 	movx	@r0,a
      00000D 08               [12]  137 	inc	r0
      00000E EF               [12]  138 	mov	a,r7
      00000F F2               [24]  139 	movx	@r0,a
                                    140 ;	_strstr.c:40: if ( !*str2 )
      000010 78r00            [12]  141 	mov	r0,#_strstr_PARM_2
      000012 79r06            [12]  142 	mov	r1,#_strstr_s2_1_22
      000014 E2               [24]  143 	movx	a,@r0
      000015 F3               [24]  144 	movx	@r1,a
      000016 08               [12]  145 	inc	r0
      000017 E2               [24]  146 	movx	a,@r0
      000018 09               [12]  147 	inc	r1
      000019 F3               [24]  148 	movx	@r1,a
      00001A 08               [12]  149 	inc	r0
      00001B E2               [24]  150 	movx	a,@r0
      00001C 09               [12]  151 	inc	r1
      00001D F3               [24]  152 	movx	@r1,a
      00001E 78r06            [12]  153 	mov	r0,#_strstr_s2_1_22
      000020 E2               [24]  154 	movx	a,@r0
      000021 F5 82            [12]  155 	mov	dpl,a
      000023 08               [12]  156 	inc	r0
      000024 E2               [24]  157 	movx	a,@r0
      000025 F5 83            [12]  158 	mov	dph,a
      000027 08               [12]  159 	inc	r0
      000028 E2               [24]  160 	movx	a,@r0
      000029 F5 F0            [12]  161 	mov	b,a
      00002B 12r00r00         [24]  162 	lcall	__gptrget
      00002E 70 07            [24]  163 	jnz	00122$
                                    164 ;	_strstr.c:41: return str1;
      000030 8D 82            [24]  165 	mov	dpl,r5
      000032 8E 83            [24]  166 	mov	dph,r6
      000034 8F F0            [24]  167 	mov	b,r7
      000036 22               [24]  168 	ret
                                    169 ;	_strstr.c:43: while (*cp)
      000037                        170 00122$:
      000037                        171 00110$:
      000037 8D 82            [24]  172 	mov	dpl,r5
      000039 8E 83            [24]  173 	mov	dph,r6
      00003B 8F F0            [24]  174 	mov	b,r7
      00003D 12r00r00         [24]  175 	lcall	__gptrget
      000040 70 03            [24]  176 	jnz	00141$
      000042 02r00rD3         [24]  177 	ljmp	00112$
      000045                        178 00141$:
                                    179 ;	_strstr.c:46: s2 = str2;
      000045 78r06            [12]  180 	mov	r0,#_strstr_s2_1_22
      000047 E2               [24]  181 	movx	a,@r0
      000048 FA               [12]  182 	mov	r2,a
      000049 08               [12]  183 	inc	r0
      00004A E2               [24]  184 	movx	a,@r0
      00004B FB               [12]  185 	mov	r3,a
      00004C 08               [12]  186 	inc	r0
      00004D E2               [24]  187 	movx	a,@r0
      00004E FC               [12]  188 	mov	r4,a
                                    189 ;	_strstr.c:48: while ( *s1 && *s2 && !(*s1-*s2) )
      00004F 8D*00            [24]  190 	mov	_strstr_sloc0_1_0,r5
      000051 8E*01            [24]  191 	mov	(_strstr_sloc0_1_0 + 1),r6
      000053 8F*02            [24]  192 	mov	(_strstr_sloc0_1_0 + 2),r7
      000055                        193 00105$:
      000055 85*00 82         [24]  194 	mov	dpl,_strstr_sloc0_1_0
      000058 85*01 83         [24]  195 	mov	dph,(_strstr_sloc0_1_0 + 1)
      00005B 85*02 F0         [24]  196 	mov	b,(_strstr_sloc0_1_0 + 2)
      00005E 12r00r00         [24]  197 	lcall	__gptrget
      000061 F5*03            [12]  198 	mov	_strstr_sloc1_1_0,a
      000063 60 43            [24]  199 	jz	00107$
      000065 8A 82            [24]  200 	mov	dpl,r2
      000067 8B 83            [24]  201 	mov	dph,r3
      000069 8C F0            [24]  202 	mov	b,r4
      00006B 12r00r00         [24]  203 	lcall	__gptrget
      00006E F5*04            [12]  204 	mov	_strstr_sloc2_1_0,a
      000070 60 36            [24]  205 	jz	00107$
      000072 C0 05            [24]  206 	push	ar5
      000074 C0 06            [24]  207 	push	ar6
      000076 C0 07            [24]  208 	push	ar7
      000078 E5*03            [12]  209 	mov	a,_strstr_sloc1_1_0
      00007A F5*05            [12]  210 	mov	_strstr_sloc3_1_0,a
      00007C 33               [12]  211 	rlc	a
      00007D 95 E0            [12]  212 	subb	a,acc
      00007F F5*06            [12]  213 	mov	(_strstr_sloc3_1_0 + 1),a
      000081 E5*04            [12]  214 	mov	a,_strstr_sloc2_1_0
      000083 FD               [12]  215 	mov	r5,a
      000084 33               [12]  216 	rlc	a
      000085 95 E0            [12]  217 	subb	a,acc
      000087 FF               [12]  218 	mov	r7,a
      000088 E5*05            [12]  219 	mov	a,_strstr_sloc3_1_0
      00008A C3               [12]  220 	clr	c
      00008B 9D               [12]  221 	subb	a,r5
      00008C FD               [12]  222 	mov	r5,a
      00008D E5*06            [12]  223 	mov	a,(_strstr_sloc3_1_0 + 1)
      00008F 9F               [12]  224 	subb	a,r7
      000090 4D               [12]  225 	orl	a,r5
      000091 D0 07            [24]  226 	pop	ar7
      000093 D0 06            [24]  227 	pop	ar6
      000095 D0 05            [24]  228 	pop	ar5
      000097 70 0F            [24]  229 	jnz	00107$
                                    230 ;	_strstr.c:49: s1++, s2++;
      000099 05*00            [12]  231 	inc	_strstr_sloc0_1_0
      00009B E4               [12]  232 	clr	a
      00009C B5*00 02         [24]  233 	cjne	a,_strstr_sloc0_1_0,00145$
      00009F 05*01            [12]  234 	inc	(_strstr_sloc0_1_0 + 1)
      0000A1                        235 00145$:
      0000A1 0A               [12]  236 	inc	r2
      0000A2 BA 00 B0         [24]  237 	cjne	r2,#0x00,00105$
      0000A5 0B               [12]  238 	inc	r3
      0000A6 80 AD            [24]  239 	sjmp	00105$
      0000A8                        240 00107$:
                                    241 ;	_strstr.c:51: if (!*s2)
      0000A8 8A 82            [24]  242 	mov	dpl,r2
      0000AA 8B 83            [24]  243 	mov	dph,r3
      0000AC 8C F0            [24]  244 	mov	b,r4
      0000AE 12r00r00         [24]  245 	lcall	__gptrget
      0000B1 70 0E            [24]  246 	jnz	00109$
                                    247 ;	_strstr.c:52: return( (char*)cp );
      0000B3 78r03            [12]  248 	mov	r0,#_strstr_cp_1_22
      0000B5 E2               [24]  249 	movx	a,@r0
      0000B6 F5 82            [12]  250 	mov	dpl,a
      0000B8 08               [12]  251 	inc	r0
      0000B9 E2               [24]  252 	movx	a,@r0
      0000BA F5 83            [12]  253 	mov	dph,a
      0000BC 08               [12]  254 	inc	r0
      0000BD E2               [24]  255 	movx	a,@r0
      0000BE F5 F0            [12]  256 	mov	b,a
      0000C0 22               [24]  257 	ret
      0000C1                        258 00109$:
                                    259 ;	_strstr.c:54: cp++;
      0000C1 0D               [12]  260 	inc	r5
      0000C2 BD 00 01         [24]  261 	cjne	r5,#0x00,00148$
      0000C5 0E               [12]  262 	inc	r6
      0000C6                        263 00148$:
      0000C6 78r03            [12]  264 	mov	r0,#_strstr_cp_1_22
      0000C8 ED               [12]  265 	mov	a,r5
      0000C9 F2               [24]  266 	movx	@r0,a
      0000CA 08               [12]  267 	inc	r0
      0000CB EE               [12]  268 	mov	a,r6
      0000CC F2               [24]  269 	movx	@r0,a
      0000CD 08               [12]  270 	inc	r0
      0000CE EF               [12]  271 	mov	a,r7
      0000CF F2               [24]  272 	movx	@r0,a
      0000D0 02r00r37         [24]  273 	ljmp	00110$
      0000D3                        274 00112$:
                                    275 ;	_strstr.c:57: return (NULL) ;
      0000D3 90 00 00         [24]  276 	mov	dptr,#0x0000
      0000D6 75 F0 00         [24]  277 	mov	b,#0x00
      0000D9 22               [24]  278 	ret
                                    279 	.area CSEG    (CODE)
                                    280 	.area CONST   (CODE)
                                    281 	.area XINIT   (CODE)
                                    282 	.area CABS    (ABS,CODE)
