                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:54 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module gets
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _gets
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram 
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; external initialized ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'gets'
                                     94 ;------------------------------------------------------------
                                     95 ;	gets.c:32: gets (char *s)
                                     96 ;	-----------------------------------------
                                     97 ;	 function gets
                                     98 ;	-----------------------------------------
      000000                         99 _gets:
                           000007   100 	ar7 = 0x07
                           000006   101 	ar6 = 0x06
                           000005   102 	ar5 = 0x05
                           000004   103 	ar4 = 0x04
                           000003   104 	ar3 = 0x03
                           000002   105 	ar2 = 0x02
                           000001   106 	ar1 = 0x01
                           000000   107 	ar0 = 0x00
      000000 AD 82            [24]  108 	mov	r5,dpl
      000002 AE 83            [24]  109 	mov	r6,dph
      000004 AF F0            [24]  110 	mov	r7,b
                                    111 ;	gets.c:35: unsigned int count = 0;
      000006 7B 00            [12]  112 	mov	r3,#0x00
      000008 7C 00            [12]  113 	mov	r4,#0x00
                                    114 ;	gets.c:37: while (1)
      00000A                        115 00109$:
                                    116 ;	gets.c:39: c = getchar ();
      00000A C0 07            [24]  117 	push	ar7
      00000C C0 06            [24]  118 	push	ar6
      00000E C0 05            [24]  119 	push	ar5
      000010 C0 04            [24]  120 	push	ar4
      000012 C0 03            [24]  121 	push	ar3
      000014 12r00r00         [24]  122 	lcall	_getchar
      000017 AA 82            [24]  123 	mov	r2,dpl
      000019 D0 03            [24]  124 	pop	ar3
      00001B D0 04            [24]  125 	pop	ar4
      00001D D0 05            [24]  126 	pop	ar5
      00001F D0 06            [24]  127 	pop	ar6
      000021 D0 07            [24]  128 	pop	ar7
                                    129 ;	gets.c:40: switch(c)
      000023 BA 08 02         [24]  130 	cjne	r2,#0x08,00128$
      000026 80 0A            [24]  131 	sjmp	00101$
      000028                        132 00128$:
      000028 BA 0A 02         [24]  133 	cjne	r2,#0x0A,00129$
      00002B 80 3B            [24]  134 	sjmp	00105$
      00002D                        135 00129$:
                                    136 ;	gets.c:42: case '\b': /* backspace */
      00002D BA 0D 61         [24]  137 	cjne	r2,#0x0D,00106$
      000030 80 36            [24]  138 	sjmp	00105$
      000032                        139 00101$:
                                    140 ;	gets.c:43: if (count)
      000032 EB               [12]  141 	mov	a,r3
      000033 4C               [12]  142 	orl	a,r4
      000034 60 D4            [24]  143 	jz	00109$
                                    144 ;	gets.c:45: putchar ('\b');
      000036 75 82 08         [24]  145 	mov	dpl,#0x08
      000039 C0 07            [24]  146 	push	ar7
      00003B C0 06            [24]  147 	push	ar6
      00003D C0 05            [24]  148 	push	ar5
      00003F C0 04            [24]  149 	push	ar4
      000041 C0 03            [24]  150 	push	ar3
      000043 12r00r00         [24]  151 	lcall	_putchar
                                    152 ;	gets.c:46: putchar (' ');
      000046 75 82 20         [24]  153 	mov	dpl,#0x20
      000049 12r00r00         [24]  154 	lcall	_putchar
                                    155 ;	gets.c:47: putchar ('\b');
      00004C 75 82 08         [24]  156 	mov	dpl,#0x08
      00004F 12r00r00         [24]  157 	lcall	_putchar
      000052 D0 03            [24]  158 	pop	ar3
      000054 D0 04            [24]  159 	pop	ar4
      000056 D0 05            [24]  160 	pop	ar5
      000058 D0 06            [24]  161 	pop	ar6
      00005A D0 07            [24]  162 	pop	ar7
                                    163 ;	gets.c:48: --s;
      00005C 1D               [12]  164 	dec	r5
      00005D BD FF 01         [24]  165 	cjne	r5,#0xFF,00132$
      000060 1E               [12]  166 	dec	r6
      000061                        167 00132$:
                                    168 ;	gets.c:49: --count;
      000061 1B               [12]  169 	dec	r3
      000062 BB FF 01         [24]  170 	cjne	r3,#0xFF,00133$
      000065 1C               [12]  171 	dec	r4
      000066                        172 00133$:
                                    173 ;	gets.c:51: break;
                                    174 ;	gets.c:54: case '\r': /* CR or LF */
      000066 80 A2            [24]  175 	sjmp	00109$
      000068                        176 00105$:
                                    177 ;	gets.c:55: putchar ('\r');
      000068 75 82 0D         [24]  178 	mov	dpl,#0x0D
      00006B C0 07            [24]  179 	push	ar7
      00006D C0 06            [24]  180 	push	ar6
      00006F C0 05            [24]  181 	push	ar5
      000071 12r00r00         [24]  182 	lcall	_putchar
                                    183 ;	gets.c:56: putchar ('\n');
      000074 75 82 0A         [24]  184 	mov	dpl,#0x0A
      000077 12r00r00         [24]  185 	lcall	_putchar
      00007A D0 05            [24]  186 	pop	ar5
      00007C D0 06            [24]  187 	pop	ar6
      00007E D0 07            [24]  188 	pop	ar7
                                    189 ;	gets.c:57: *s = 0;
      000080 8D 82            [24]  190 	mov	dpl,r5
      000082 8E 83            [24]  191 	mov	dph,r6
      000084 8F F0            [24]  192 	mov	b,r7
      000086 E4               [12]  193 	clr	a
      000087 12r00r00         [24]  194 	lcall	__gptrput
                                    195 ;	gets.c:58: return s;
      00008A 8D 82            [24]  196 	mov	dpl,r5
      00008C 8E 83            [24]  197 	mov	dph,r6
      00008E 8F F0            [24]  198 	mov	b,r7
                                    199 ;	gets.c:60: default:
      000090 22               [24]  200 	ret
      000091                        201 00106$:
                                    202 ;	gets.c:61: *s++ = c;
      000091 8D 82            [24]  203 	mov	dpl,r5
      000093 8E 83            [24]  204 	mov	dph,r6
      000095 8F F0            [24]  205 	mov	b,r7
      000097 EA               [12]  206 	mov	a,r2
      000098 12r00r00         [24]  207 	lcall	__gptrput
      00009B A3               [24]  208 	inc	dptr
      00009C AD 82            [24]  209 	mov	r5,dpl
      00009E AE 83            [24]  210 	mov	r6,dph
                                    211 ;	gets.c:62: ++count;
      0000A0 0B               [12]  212 	inc	r3
      0000A1 BB 00 01         [24]  213 	cjne	r3,#0x00,00134$
      0000A4 0C               [12]  214 	inc	r4
      0000A5                        215 00134$:
                                    216 ;	gets.c:63: putchar (c);
      0000A5 8A 82            [24]  217 	mov	dpl,r2
      0000A7 C0 07            [24]  218 	push	ar7
      0000A9 C0 06            [24]  219 	push	ar6
      0000AB C0 05            [24]  220 	push	ar5
      0000AD C0 04            [24]  221 	push	ar4
      0000AF C0 03            [24]  222 	push	ar3
      0000B1 12r00r00         [24]  223 	lcall	_putchar
      0000B4 D0 03            [24]  224 	pop	ar3
      0000B6 D0 04            [24]  225 	pop	ar4
      0000B8 D0 05            [24]  226 	pop	ar5
      0000BA D0 06            [24]  227 	pop	ar6
      0000BC D0 07            [24]  228 	pop	ar7
                                    229 ;	gets.c:65: }
      0000BE 02r00r0A         [24]  230 	ljmp	00109$
                                    231 	.area CSEG    (CODE)
                                    232 	.area CONST   (CODE)
                                    233 	.area XINIT   (CODE)
                                    234 	.area CABS    (ABS,CODE)
