                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:54 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _malloc
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_first_memheader
                                     13 	.globl _malloc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
      000000                         53 __sdcc_first_memheader::
      000000                         54 	.ds 2
      000002                         55 _malloc_size_1_8:
      000002                         56 	.ds 2
      000004                         57 _malloc_current_header_1_9:
      000004                         58 	.ds 2
                                     59 ;--------------------------------------------------------
                                     60 ; external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area XSEG    (XDATA)
                                     63 ;--------------------------------------------------------
                                     64 ; absolute external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area XABS    (ABS,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external initialized ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XISEG   (XDATA)
                                     71 	.area HOME    (CODE)
                                     72 	.area GSINIT0 (CODE)
                                     73 	.area GSINIT1 (CODE)
                                     74 	.area GSINIT2 (CODE)
                                     75 	.area GSINIT3 (CODE)
                                     76 	.area GSINIT4 (CODE)
                                     77 	.area GSINIT5 (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area CSEG    (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; global & static initialisations
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 ;	_malloc.c:161: MEMHEADER __xdata * _sdcc_first_memheader = NULL;
      000000 78r00            [12]   89 	mov	r0,#__sdcc_first_memheader
      000002 E4               [12]   90 	clr	a
      000003 F2               [24]   91 	movx	@r0,a
      000004 08               [12]   92 	inc	r0
      000005 F2               [24]   93 	movx	@r0,a
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'init_dynamic_memory'
                                    105 ;------------------------------------------------------------
                                    106 ;	_malloc.c:166: static void init_dynamic_memory(void)
                                    107 ;	-----------------------------------------
                                    108 ;	 function init_dynamic_memory
                                    109 ;	-----------------------------------------
      000000                        110 _init_dynamic_memory:
                           000007   111 	ar7 = 0x07
                           000006   112 	ar6 = 0x06
                           000005   113 	ar5 = 0x05
                           000004   114 	ar4 = 0x04
                           000003   115 	ar3 = 0x03
                           000002   116 	ar2 = 0x02
                           000001   117 	ar1 = 0x01
                           000000   118 	ar0 = 0x00
                                    119 ;	_malloc.c:168: char __xdata * heap = (char __xdata *)_sdcc_heap;
      000000 7Er00            [12]  120 	mov	r6,#__sdcc_heap
      000002 7Fs00            [12]  121 	mov	r7,#(__sdcc_heap >> 8)
                                    122 ;	_malloc.c:169: unsigned int size = _sdcc_heap_size;
      000004 90r00r00         [24]  123 	mov	dptr,#__sdcc_heap_size
      000007 E4               [12]  124 	clr	a
      000008 93               [24]  125 	movc	a,@a+dptr
      000009 FC               [12]  126 	mov	r4,a
      00000A 74 01            [12]  127 	mov	a,#0x01
      00000C 93               [24]  128 	movc	a,@a+dptr
      00000D FD               [12]  129 	mov	r5,a
                                    130 ;	_malloc.c:171: if ( !heap ) //Reserved memory starts at 0x0000 but that's NULL...
      00000E EE               [12]  131 	mov	a,r6
      00000F 4F               [12]  132 	orl	a,r7
      000010 70 0A            [24]  133 	jnz	00102$
                                    134 ;	_malloc.c:173: heap++;
      000012 0E               [12]  135 	inc	r6
      000013 BE 00 01         [24]  136 	cjne	r6,#0x00,00109$
      000016 0F               [12]  137 	inc	r7
      000017                        138 00109$:
                                    139 ;	_malloc.c:174: size--;
      000017 1C               [12]  140 	dec	r4
      000018 BC FF 01         [24]  141 	cjne	r4,#0xFF,00110$
      00001B 1D               [12]  142 	dec	r5
      00001C                        143 00110$:
      00001C                        144 00102$:
                                    145 ;	_malloc.c:176: _sdcc_first_memheader = (MEMHEADER __xdata * ) heap;
      00001C 8E 02            [24]  146 	mov	ar2,r6
      00001E 8F 03            [24]  147 	mov	ar3,r7
      000020 78r00            [12]  148 	mov	r0,#__sdcc_first_memheader
      000022 EA               [12]  149 	mov	a,r2
      000023 F2               [24]  150 	movx	@r0,a
      000024 08               [12]  151 	inc	r0
      000025 EB               [12]  152 	mov	a,r3
      000026 F2               [24]  153 	movx	@r0,a
                                    154 ;	_malloc.c:178: _sdcc_first_memheader->next = (MEMHEADER __xdata * )(heap + size - sizeof(MEMHEADER __xdata *));
      000027 EC               [12]  155 	mov	a,r4
      000028 2E               [12]  156 	add	a,r6
      000029 FE               [12]  157 	mov	r6,a
      00002A ED               [12]  158 	mov	a,r5
      00002B 3F               [12]  159 	addc	a,r7
      00002C FF               [12]  160 	mov	r7,a
      00002D EE               [12]  161 	mov	a,r6
      00002E 24 FE            [12]  162 	add	a,#0xFE
      000030 FE               [12]  163 	mov	r6,a
      000031 EF               [12]  164 	mov	a,r7
      000032 34 FF            [12]  165 	addc	a,#0xFF
      000034 FF               [12]  166 	mov	r7,a
      000035 8A 82            [24]  167 	mov	dpl,r2
      000037 8B 83            [24]  168 	mov	dph,r3
      000039 EE               [12]  169 	mov	a,r6
      00003A F0               [24]  170 	movx	@dptr,a
      00003B EF               [12]  171 	mov	a,r7
      00003C A3               [24]  172 	inc	dptr
      00003D F0               [24]  173 	movx	@dptr,a
                                    174 ;	_malloc.c:179: _sdcc_first_memheader->next->next = (MEMHEADER __xdata * ) NULL; //And mark it as last
      00003E 8E 82            [24]  175 	mov	dpl,r6
      000040 8F 83            [24]  176 	mov	dph,r7
      000042 E4               [12]  177 	clr	a
      000043 F0               [24]  178 	movx	@dptr,a
      000044 A3               [24]  179 	inc	dptr
      000045 F0               [24]  180 	movx	@dptr,a
                                    181 ;	_malloc.c:180: _sdcc_first_memheader->len        = 0;    //Empty and ready.
      000046 8A 82            [24]  182 	mov	dpl,r2
      000048 8B 83            [24]  183 	mov	dph,r3
      00004A A3               [24]  184 	inc	dptr
      00004B A3               [24]  185 	inc	dptr
      00004C F0               [24]  186 	movx	@dptr,a
      00004D A3               [24]  187 	inc	dptr
      00004E F0               [24]  188 	movx	@dptr,a
      00004F 22               [24]  189 	ret
                                    190 ;------------------------------------------------------------
                                    191 ;Allocation info for local variables in function 'malloc'
                                    192 ;------------------------------------------------------------
                                    193 ;	_malloc.c:183: void __xdata * malloc (unsigned int size)
                                    194 ;	-----------------------------------------
                                    195 ;	 function malloc
                                    196 ;	-----------------------------------------
      000050                        197 _malloc:
      000050 AF 83            [24]  198 	mov	r7,dph
      000052 E5 82            [12]  199 	mov	a,dpl
      000054 78r02            [12]  200 	mov	r0,#_malloc_size_1_8
      000056 F2               [24]  201 	movx	@r0,a
      000057 08               [12]  202 	inc	r0
      000058 EF               [12]  203 	mov	a,r7
      000059 F2               [24]  204 	movx	@r0,a
                                    205 ;	_malloc.c:189: if (size>(0xFFFF-HEADER_SIZE))
      00005A 78r02            [12]  206 	mov	r0,#_malloc_size_1_8
      00005C C3               [12]  207 	clr	c
      00005D E2               [24]  208 	movx	a,@r0
      00005E F5 F0            [12]  209 	mov	b,a
      000060 74 FB            [12]  210 	mov	a,#0xFB
      000062 95 F0            [12]  211 	subb	a,b
      000064 08               [12]  212 	inc	r0
      000065 E2               [24]  213 	movx	a,@r0
      000066 F5 F0            [12]  214 	mov	b,a
      000068 74 FF            [12]  215 	mov	a,#0xFF
      00006A 95 F0            [12]  216 	subb	a,b
      00006C 50 04            [24]  217 	jnc	00102$
                                    218 ;	_malloc.c:190: return (void __xdata *) NULL; //To prevent overflow in next line
      00006E 90 00 00         [24]  219 	mov	dptr,#0x0000
      000071 22               [24]  220 	ret
      000072                        221 00102$:
                                    222 ;	_malloc.c:191: size += HEADER_SIZE; //We need a memory for header too
      000072 78r02            [12]  223 	mov	r0,#_malloc_size_1_8
      000074 E2               [24]  224 	movx	a,@r0
      000075 24 04            [12]  225 	add	a,#0x04
      000077 F2               [24]  226 	movx	@r0,a
      000078 08               [12]  227 	inc	r0
      000079 E2               [24]  228 	movx	a,@r0
      00007A 34 00            [12]  229 	addc	a,#0x00
      00007C F2               [24]  230 	movx	@r0,a
                                    231 ;	_malloc.c:193: if (!_sdcc_first_memheader)
      00007D 78r00            [12]  232 	mov	r0,#__sdcc_first_memheader
      00007F E2               [24]  233 	movx	a,@r0
      000080 F5 F0            [12]  234 	mov	b,a
      000082 08               [12]  235 	inc	r0
      000083 E2               [24]  236 	movx	a,@r0
      000084 45 F0            [12]  237 	orl	a,b
      000086 70 03            [24]  238 	jnz	00104$
                                    239 ;	_malloc.c:194: init_dynamic_memory();
      000088 12r00r00         [24]  240 	lcall	_init_dynamic_memory
      00008B                        241 00104$:
                                    242 ;	_malloc.c:196: current_header = _sdcc_first_memheader;
      00008B 78r00            [12]  243 	mov	r0,#__sdcc_first_memheader
      00008D 79r04            [12]  244 	mov	r1,#_malloc_current_header_1_9
      00008F E2               [24]  245 	movx	a,@r0
      000090 F3               [24]  246 	movx	@r1,a
      000091 08               [12]  247 	inc	r0
      000092 E2               [24]  248 	movx	a,@r0
      000093 09               [12]  249 	inc	r1
      000094 F3               [24]  250 	movx	@r1,a
                                    251 ;	_malloc.c:199: while (1)
      000095                        252 00110$:
                                    253 ;	_malloc.c:209: if ((((unsigned int)current_header->next) -
      000095 78r04            [12]  254 	mov	r0,#_malloc_current_header_1_9
      000097 E2               [24]  255 	movx	a,@r0
      000098 F5 82            [12]  256 	mov	dpl,a
      00009A 08               [12]  257 	inc	r0
      00009B E2               [24]  258 	movx	a,@r0
      00009C F5 83            [12]  259 	mov	dph,a
      00009E E0               [24]  260 	movx	a,@dptr
      00009F FA               [12]  261 	mov	r2,a
      0000A0 A3               [24]  262 	inc	dptr
      0000A1 E0               [24]  263 	movx	a,@dptr
      0000A2 FB               [12]  264 	mov	r3,a
      0000A3 8A 06            [24]  265 	mov	ar6,r2
      0000A5 8B 07            [24]  266 	mov	ar7,r3
                                    267 ;	_malloc.c:210: ((unsigned int)current_header) -
      0000A7 78r04            [12]  268 	mov	r0,#_malloc_current_header_1_9
      0000A9 E2               [24]  269 	movx	a,@r0
      0000AA FC               [12]  270 	mov	r4,a
      0000AB 08               [12]  271 	inc	r0
      0000AC E2               [24]  272 	movx	a,@r0
      0000AD FD               [12]  273 	mov	r5,a
      0000AE EE               [12]  274 	mov	a,r6
      0000AF C3               [12]  275 	clr	c
      0000B0 9C               [12]  276 	subb	a,r4
      0000B1 FE               [12]  277 	mov	r6,a
      0000B2 EF               [12]  278 	mov	a,r7
      0000B3 9D               [12]  279 	subb	a,r5
      0000B4 FF               [12]  280 	mov	r7,a
                                    281 ;	_malloc.c:211: current_header->len) >= size)
      0000B5 78r04            [12]  282 	mov	r0,#_malloc_current_header_1_9
      0000B7 E2               [24]  283 	movx	a,@r0
      0000B8 24 02            [12]  284 	add	a,#0x02
      0000BA F5 82            [12]  285 	mov	dpl,a
      0000BC 08               [12]  286 	inc	r0
      0000BD E2               [24]  287 	movx	a,@r0
      0000BE 34 00            [12]  288 	addc	a,#0x00
      0000C0 F5 83            [12]  289 	mov	dph,a
      0000C2 E0               [24]  290 	movx	a,@dptr
      0000C3 FC               [12]  291 	mov	r4,a
      0000C4 A3               [24]  292 	inc	dptr
      0000C5 E0               [24]  293 	movx	a,@dptr
      0000C6 FD               [12]  294 	mov	r5,a
      0000C7 EE               [12]  295 	mov	a,r6
      0000C8 C3               [12]  296 	clr	c
      0000C9 9C               [12]  297 	subb	a,r4
      0000CA FE               [12]  298 	mov	r6,a
      0000CB EF               [12]  299 	mov	a,r7
      0000CC 9D               [12]  300 	subb	a,r5
      0000CD FF               [12]  301 	mov	r7,a
      0000CE 78r02            [12]  302 	mov	r0,#_malloc_size_1_8
      0000D0 C3               [12]  303 	clr	c
      0000D1 E2               [24]  304 	movx	a,@r0
      0000D2 F5 F0            [12]  305 	mov	b,a
      0000D4 EE               [12]  306 	mov	a,r6
      0000D5 95 F0            [12]  307 	subb	a,b
      0000D7 08               [12]  308 	inc	r0
      0000D8 E2               [24]  309 	movx	a,@r0
      0000D9 F5 F0            [12]  310 	mov	b,a
      0000DB EF               [12]  311 	mov	a,r7
      0000DC 95 F0            [12]  312 	subb	a,b
      0000DE 40 0D            [24]  313 	jc	00106$
                                    314 ;	_malloc.c:213: ret = current_header->mem;
      0000E0 78r04            [12]  315 	mov	r0,#_malloc_current_header_1_9
      0000E2 E2               [24]  316 	movx	a,@r0
      0000E3 24 04            [12]  317 	add	a,#0x04
      0000E5 FE               [12]  318 	mov	r6,a
      0000E6 08               [12]  319 	inc	r0
      0000E7 E2               [24]  320 	movx	a,@r0
      0000E8 34 00            [12]  321 	addc	a,#0x00
      0000EA FF               [12]  322 	mov	r7,a
                                    323 ;	_malloc.c:214: break;
      0000EB 80 1A            [24]  324 	sjmp	00111$
      0000ED                        325 00106$:
                                    326 ;	_malloc.c:216: current_header = current_header->next;    //else try next
      0000ED 78r04            [12]  327 	mov	r0,#_malloc_current_header_1_9
      0000EF EA               [12]  328 	mov	a,r2
      0000F0 F2               [24]  329 	movx	@r0,a
      0000F1 08               [12]  330 	inc	r0
      0000F2 EB               [12]  331 	mov	a,r3
      0000F3 F2               [24]  332 	movx	@r0,a
                                    333 ;	_malloc.c:217: if (!current_header->next)
      0000F4 78r04            [12]  334 	mov	r0,#_malloc_current_header_1_9
      0000F6 E2               [24]  335 	movx	a,@r0
      0000F7 F5 82            [12]  336 	mov	dpl,a
      0000F9 08               [12]  337 	inc	r0
      0000FA E2               [24]  338 	movx	a,@r0
      0000FB F5 83            [12]  339 	mov	dph,a
      0000FD E0               [24]  340 	movx	a,@dptr
      0000FE FC               [12]  341 	mov	r4,a
      0000FF A3               [24]  342 	inc	dptr
      000100 E0               [24]  343 	movx	a,@dptr
      000101 FD               [12]  344 	mov	r5,a
      000102 4C               [12]  345 	orl	a,r4
                                    346 ;	_malloc.c:219: ret = (void __xdata *) NULL;
      000103 70 90            [24]  347 	jnz	00110$
      000105 FE               [12]  348 	mov	r6,a
      000106 FF               [12]  349 	mov	r7,a
                                    350 ;	_malloc.c:220: break;
      000107                        351 00111$:
                                    352 ;	_malloc.c:223: if (ret)
      000107 EE               [12]  353 	mov	a,r6
      000108 4F               [12]  354 	orl	a,r7
      000109 60 70            [24]  355 	jz	00116$
                                    356 ;	_malloc.c:225: if (!current_header->len)
      00010B 78r04            [12]  357 	mov	r0,#_malloc_current_header_1_9
      00010D E2               [24]  358 	movx	a,@r0
      00010E 24 02            [12]  359 	add	a,#0x02
      000110 FC               [12]  360 	mov	r4,a
      000111 08               [12]  361 	inc	r0
      000112 E2               [24]  362 	movx	a,@r0
      000113 34 00            [12]  363 	addc	a,#0x00
      000115 FD               [12]  364 	mov	r5,a
      000116 8C 82            [24]  365 	mov	dpl,r4
      000118 8D 83            [24]  366 	mov	dph,r5
      00011A E0               [24]  367 	movx	a,@dptr
      00011B FA               [12]  368 	mov	r2,a
      00011C A3               [24]  369 	inc	dptr
      00011D E0               [24]  370 	movx	a,@dptr
      00011E FB               [12]  371 	mov	r3,a
      00011F 4A               [12]  372 	orl	a,r2
      000120 70 0E            [24]  373 	jnz	00113$
                                    374 ;	_malloc.c:227: current_header->len = size; //for first allocation
      000122 8C 82            [24]  375 	mov	dpl,r4
      000124 8D 83            [24]  376 	mov	dph,r5
      000126 78r02            [12]  377 	mov	r0,#_malloc_size_1_8
      000128 E2               [24]  378 	movx	a,@r0
      000129 F0               [24]  379 	movx	@dptr,a
      00012A 08               [12]  380 	inc	r0
      00012B E2               [24]  381 	movx	a,@r0
      00012C A3               [24]  382 	inc	dptr
      00012D F0               [24]  383 	movx	@dptr,a
      00012E 80 4B            [24]  384 	sjmp	00116$
      000130                        385 00113$:
                                    386 ;	_malloc.c:231: new_header = (MEMHEADER __xdata * )((char __xdata *)current_header + current_header->len);
      000130 78r04            [12]  387 	mov	r0,#_malloc_current_header_1_9
      000132 E2               [24]  388 	movx	a,@r0
      000133 FC               [12]  389 	mov	r4,a
      000134 08               [12]  390 	inc	r0
      000135 E2               [24]  391 	movx	a,@r0
      000136 FD               [12]  392 	mov	r5,a
      000137 EA               [12]  393 	mov	a,r2
      000138 2C               [12]  394 	add	a,r4
      000139 FA               [12]  395 	mov	r2,a
      00013A EB               [12]  396 	mov	a,r3
      00013B 3D               [12]  397 	addc	a,r5
      00013C FB               [12]  398 	mov	r3,a
                                    399 ;	_malloc.c:232: new_header->next = current_header->next; //and plug it into the chain
      00013D 78r04            [12]  400 	mov	r0,#_malloc_current_header_1_9
      00013F E2               [24]  401 	movx	a,@r0
      000140 F5 82            [12]  402 	mov	dpl,a
      000142 08               [12]  403 	inc	r0
      000143 E2               [24]  404 	movx	a,@r0
      000144 F5 83            [12]  405 	mov	dph,a
      000146 E0               [24]  406 	movx	a,@dptr
      000147 FC               [12]  407 	mov	r4,a
      000148 A3               [24]  408 	inc	dptr
      000149 E0               [24]  409 	movx	a,@dptr
      00014A FD               [12]  410 	mov	r5,a
      00014B 8A 82            [24]  411 	mov	dpl,r2
      00014D 8B 83            [24]  412 	mov	dph,r3
      00014F EC               [12]  413 	mov	a,r4
      000150 F0               [24]  414 	movx	@dptr,a
      000151 ED               [12]  415 	mov	a,r5
      000152 A3               [24]  416 	inc	dptr
      000153 F0               [24]  417 	movx	@dptr,a
                                    418 ;	_malloc.c:233: current_header->next  = new_header;
      000154 78r04            [12]  419 	mov	r0,#_malloc_current_header_1_9
      000156 E2               [24]  420 	movx	a,@r0
      000157 F5 82            [12]  421 	mov	dpl,a
      000159 08               [12]  422 	inc	r0
      00015A E2               [24]  423 	movx	a,@r0
      00015B F5 83            [12]  424 	mov	dph,a
      00015D EA               [12]  425 	mov	a,r2
      00015E F0               [24]  426 	movx	@dptr,a
      00015F EB               [12]  427 	mov	a,r3
      000160 A3               [24]  428 	inc	dptr
      000161 F0               [24]  429 	movx	@dptr,a
                                    430 ;	_malloc.c:234: new_header->len  = size; //mark as used
      000162 8A 82            [24]  431 	mov	dpl,r2
      000164 8B 83            [24]  432 	mov	dph,r3
      000166 A3               [24]  433 	inc	dptr
      000167 A3               [24]  434 	inc	dptr
      000168 78r02            [12]  435 	mov	r0,#_malloc_size_1_8
      00016A E2               [24]  436 	movx	a,@r0
      00016B F0               [24]  437 	movx	@dptr,a
      00016C 08               [12]  438 	inc	r0
      00016D E2               [24]  439 	movx	a,@r0
      00016E A3               [24]  440 	inc	dptr
      00016F F0               [24]  441 	movx	@dptr,a
                                    442 ;	_malloc.c:235: ret = new_header->mem;
      000170 74 04            [12]  443 	mov	a,#0x04
      000172 2A               [12]  444 	add	a,r2
      000173 FA               [12]  445 	mov	r2,a
      000174 E4               [12]  446 	clr	a
      000175 3B               [12]  447 	addc	a,r3
      000176 FB               [12]  448 	mov	r3,a
      000177 8A 06            [24]  449 	mov	ar6,r2
      000179 8B 07            [24]  450 	mov	ar7,r3
      00017B                        451 00116$:
                                    452 ;	_malloc.c:239: return ret;
      00017B 8E 82            [24]  453 	mov	dpl,r6
      00017D 8F 83            [24]  454 	mov	dph,r7
      00017F 22               [24]  455 	ret
                                    456 	.area CSEG    (CODE)
                                    457 	.area CONST   (CODE)
                                    458 	.area XINIT   (CODE)
                                    459 	.area CABS    (ABS,CODE)
