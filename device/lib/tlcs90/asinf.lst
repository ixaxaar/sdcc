                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                              4 ; This file was generated Wed Nov 27 12:28:21 2013
                              5 ;--------------------------------------------------------
                              6 	.module asinf
                              7 	.optsdcc -mtlcs90
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _asincosf
                             13 	.globl _asinf
                             14 ;--------------------------------------------------------
                             15 ; ram data
                             16 ;--------------------------------------------------------
                             17 	.area _DATA
                             18 ;--------------------------------------------------------
                             19 ; ram data
                             20 ;--------------------------------------------------------
                             21 	.area _INITIALIZED
                             22 ;--------------------------------------------------------
                             23 ; absolute external ram data
                             24 ;--------------------------------------------------------
                             25 	.area _DABS (ABS)
                             26 ;--------------------------------------------------------
                             27 ; global & static initialisations
                             28 ;--------------------------------------------------------
                             29 	.area _HOME
                             30 	.area _GSINIT
                             31 	.area _GSFINAL
                             32 	.area _GSINIT
                             33 ;--------------------------------------------------------
                             34 ; Home
                             35 ;--------------------------------------------------------
                             36 	.area _HOME
                             37 	.area _HOME
                             38 ;--------------------------------------------------------
                             39 ; code
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 ;../asinf.c:36: float asinf(const float x) _FLOAT_FUNC_REENTRANT
                             43 ;	---------------------------------
                             44 ; Function asinf
                             45 ; ---------------------------------
   0000                      46 _asinf_start::
   0000                      47 _asinf:
                             48 ;../asinf.c:38: if (x == 1.0) return  HALF_PI;
   0000 3A 80 3F      [13]   49 	ld	hl,#0x3F80
   0003 52            [ 4]   50 	push	hl
   0004 3A 00 00      [13]   51 	ld	hl,#0x0000
   0007 52            [ 4]   52 	push	hl
   0008 F2 08 4A      [10]   53 	ld	hl, 8 (sp)
   000B 52            [ 4]   54 	push	hl
   000C F2 08 4A      [10]   55 	ld	hl, 8 (sp)
   000F 52            [ 4]   56 	push	hl
   0010 1Cr00r00      [ 4]   57 	call	___fseq
   0013 16 08 00      [ 7]   58 	add	sp, #8
   0016 25            [ 4]   59 	ld	a,l
   0017 FE 66         [ 7]   60 	or	a, a
   0019 C6 07         [ 7]   61 	jr	Z,00108$
   001B 3A DB 0F      [13]   62 	ld	hl,#0x0FDB
   001E 39 C9 3F      [11]   63 	ld	de,#0x3FC9
   0021 1E            [ 7]   64 	ret
   0022                      65 00108$:
                             66 ;../asinf.c:39: else if (x ==-1.0) return -HALF_PI;
   0022 3A 80 BF      [13]   67 	ld	hl,#0xBF80
   0025 52            [ 4]   68 	push	hl
   0026 3A 00 00      [13]   69 	ld	hl,#0x0000
   0029 52            [ 4]   70 	push	hl
   002A F2 08 4A      [10]   71 	ld	hl, 8 (sp)
   002D 52            [ 4]   72 	push	hl
   002E F2 08 4A      [10]   73 	ld	hl, 8 (sp)
   0031 52            [ 4]   74 	push	hl
   0032 1Cr00r00      [ 4]   75 	call	___fseq
   0035 16 08 00      [ 7]   76 	add	sp, #8
   0038 25            [ 4]   77 	ld	a,l
   0039 FE 66         [ 7]   78 	or	a, a
   003B C6 07         [ 7]   79 	jr	Z,00105$
   003D 3A DB 0F      [13]   80 	ld	hl,#0x0FDB
   0040 39 C9 BF      [11]   81 	ld	de,#0xBFC9
   0043 1E            [ 7]   82 	ret
   0044                      83 00105$:
                             84 ;../asinf.c:40: else if (x == 0.0) return 0.0;
   0044 3D 02 00      [ 4]   85 	ld	iy,#2
   0047 FE 15         [ 7]   86 	add	iy,sp
   0049 F1 03 2E      [10]   87 	ld	a,3 (iy)
   004C FE B7         [ 7]   88 	res	7, a
   004E F1 02 66      [10]   89 	or	a, 2 (iy)
   0051 F1 01 66      [10]   90 	or	a, 1 (iy)
   0054 E5 66         [11]   91 	or	a,0 (iy)
   0056 CE 08         [ 7]   92 	jr	NZ,00102$
   0058 3A 00 00      [13]   93 	ld	hl,#0x0000
   005B FD 33                94 	ld	e,l
   005D FC 32         [17]   95 	ld	d,h
   005F 1E            [ 7]   96 	ret
   0060                      97 00102$:
                             98 ;../asinf.c:41: else               return asincosf(x, false);
   0060 FE 65         [ 7]   99 	xor	a, a
   0062 56            [ 7]  100 	push	af
   0063 96            [ 7]  101 	inc	sp
   0064 F2 05 4A      [10]  102 	ld	hl, 5 (sp)
   0067 52            [ 4]  103 	push	hl
   0068 F2 05 4A      [10]  104 	ld	hl, 5 (sp)
   006B 52            [ 4]  105 	push	hl
   006C 1Cr00r00      [ 4]  106 	call	_asincosf
   006F 16 05 00      [ 7]  107 	add	sp, #5
   0072 1E            [ 7]  108 	ret
   0073                     109 _asinf_end::
                            110 	.area _CODE
                            111 	.area _INITIALIZER
                            112 	.area _CABS (ABS)
