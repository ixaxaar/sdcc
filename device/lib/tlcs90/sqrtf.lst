                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                              4 ; This file was generated Wed Nov 27 12:28:21 2013
                              5 ;--------------------------------------------------------
                              6 	.module sqrtf
                              7 	.optsdcc -mtlcs90
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _ldexpf
                             13 	.globl _frexpf
                             14 	.globl _sqrtf
                             15 ;--------------------------------------------------------
                             16 ; ram data
                             17 ;--------------------------------------------------------
                             18 	.area _DATA
                             19 ;--------------------------------------------------------
                             20 ; ram data
                             21 ;--------------------------------------------------------
                             22 	.area _INITIALIZED
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area _DABS (ABS)
                             27 ;--------------------------------------------------------
                             28 ; global & static initialisations
                             29 ;--------------------------------------------------------
                             30 	.area _HOME
                             31 	.area _GSINIT
                             32 	.area _GSFINAL
                             33 	.area _GSINIT
                             34 ;--------------------------------------------------------
                             35 ; Home
                             36 ;--------------------------------------------------------
                             37 	.area _HOME
                             38 	.area _HOME
                             39 ;--------------------------------------------------------
                             40 ; code
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 ;../sqrtf.c:37: float sqrtf(const float x) _FLOAT_FUNC_REENTRANT
                             44 ;	---------------------------------
                             45 ; Function sqrtf
                             46 ; ---------------------------------
   0000                      47 _sqrtf_start::
   0000                      48 _sqrtf:
   0000 54            [ 4]   49 	push	ix
   0001 3C 00 00      [ 4]   50 	ld	ix,#0
   0004 FE 14         [ 7]   51 	add	ix,sp
   0006 16 F6 FF      [ 7]   52 	add	sp, #-10
                             53 ;../sqrtf.c:42: if (x==0.0) return x;
   0009 F0 07 2E      [11]   54 	ld	a,7 (ix)
   000C FE B7         [ 7]   55 	res	7, a
   000E F0 06 66      [11]   56 	or	a, 6 (ix)
   0011 F0 05 66      [11]   57 	or	a, 5 (ix)
   0014 F0 04 66      [11]   58 	or	a,4 (ix)
   0017 CE 0F         [ 7]   59 	jr	NZ,00107$
   0019 F0 04 2D      [11]   60 	ld	l,4 (ix)
   001C F0 05 2C      [11]   61 	ld	h,5 (ix)
   001F F0 06 2B      [11]   62 	ld	e,6 (ix)
   0022 F0 07 2A      [11]   63 	ld	d,7 (ix)
   0025 1Ar6Dr01      [ 7]   64 	jp	00111$
   0028                      65 00107$:
                             66 ;../sqrtf.c:43: else if (x==1.0) return 1.0;
   0028 3A 80 3F      [13]   67 	ld	hl,#0x3F80
   002B 52            [ 4]   68 	push	hl
   002C 3A 00 00      [13]   69 	ld	hl,#0x0000
   002F 52            [ 4]   70 	push	hl
   0030 F2 14 4A      [10]   71 	ld	hl, 20 (sp)
   0033 52            [ 4]   72 	push	hl
   0034 F2 14 4A      [10]   73 	ld	hl, 20 (sp)
   0037 52            [ 4]   74 	push	hl
   0038 1Cr00r00      [ 4]   75 	call	___fseq
   003B 16 08 00      [ 7]   76 	add	sp, #8
   003E 25            [ 4]   77 	ld	a,l
   003F FE 66         [ 7]   78 	or	a, a
   0041 C6 09         [ 7]   79 	jr	Z,00104$
   0043 3A 00 00      [13]   80 	ld	hl,#0x0000
   0046 39 80 3F      [11]   81 	ld	de,#0x3F80
   0049 1Ar6Dr01      [ 7]   82 	jp	00111$
   004C                      83 00104$:
                             84 ;../sqrtf.c:44: else if (x<0.0)
   004C 3A 00 00      [13]   85 	ld	hl,#0x0000
   004F 52            [ 4]   86 	push	hl
   0050 3A 00 00      [13]   87 	ld	hl,#0x0000
   0053 52            [ 4]   88 	push	hl
   0054 F2 14 4A      [10]   89 	ld	hl, 20 (sp)
   0057 52            [ 4]   90 	push	hl
   0058 F2 14 4A      [10]   91 	ld	hl, 20 (sp)
   005B 52            [ 4]   92 	push	hl
   005C 1Cr00r00      [ 4]   93 	call	___fslt
   005F 16 08 00      [ 7]   94 	add	sp, #8
   0062 25            [ 4]   95 	ld	a,l
   0063 FE 66         [ 7]   96 	or	a, a
   0065 C6 16         [ 7]   97 	jr	Z,00108$
                             98 ;../sqrtf.c:46: errno=EDOM;
   0067 3Ar00r00      [13]   99 	ld	hl,#_errno + 0
   006A EA 37 21      [10]  100 	ld	(hl), #0x21
   006D 3Ar01r00      [13]  101 	ld	hl,#_errno + 1
   0070 EA 37 00      [10]  102 	ld	(hl), #0x00
                            103 ;../sqrtf.c:47: return 0.0;
   0073 3A 00 00      [13]  104 	ld	hl,#0x0000
   0076 FD 33               105 	ld	e,l
   0078 FC 32         [17]  106 	ld	d,h
   007A 1Ar6Dr01      [ 7]  107 	jp	00111$
   007D                     108 00108$:
                            109 ;../sqrtf.c:49: f=frexpf(x, &n);
   007D 3A 00 00      [13]  110 	ld	hl,#0x0000
   0080 FE 70         [ 7]  111 	add	hl,sp
   0082 52            [ 4]  112 	push	hl
   0083 F2 12 4A      [10]  113 	ld	hl, 18 (sp)
   0086 52            [ 4]  114 	push	hl
   0087 F2 12 4A      [10]  115 	ld	hl, 18 (sp)
   008A 52            [ 4]  116 	push	hl
   008B 1Cr00r00      [ 4]  117 	call	_frexpf
   008E 16 06 00      [ 7]  118 	add	sp, #6
   0091 F4 F8 25      [17]  119 	ld	-8 (ix),l
   0094 F4 F9 24      [17]  120 	ld	-7 (ix),h
   0097 F4 FA 23      [17]  121 	ld	-6 (ix),e
   009A F4 FB 22      [17]  122 	ld	-5 (ix),d
                            123 ;../sqrtf.c:50: y=0.41731+0.59016*f; /*Educated guess*/
   009D F2 04 4A      [10]  124 	ld	hl, 4 (sp)
   00A0 52            [ 4]  125 	push	hl
   00A1 F2 04 4A      [10]  126 	ld	hl, 4 (sp)
   00A4 52            [ 4]  127 	push	hl
   00A5 3A 17 3F      [13]  128 	ld	hl,#0x3F17
   00A8 52            [ 4]  129 	push	hl
   00A9 3A BA 14      [13]  130 	ld	hl,#0x14BA
   00AC 52            [ 4]  131 	push	hl
   00AD 1Cr00r00      [ 4]  132 	call	___fsmul
   00B0 16 08 00      [ 7]  133 	add	sp, #8
   00B3 FD 31               134 	ld	c,l
   00B5 FC 30         [17]  135 	ld	b,h
   00B7 3A D5 3E      [13]  136 	ld	hl,#0x3ED5
   00BA 52            [ 4]  137 	push	hl
   00BB 3A A8 A9      [13]  138 	ld	hl,#0xA9A8
   00BE 52            [ 4]  139 	push	hl
   00BF 51            [ 4]  140 	push	de
   00C0 50            [ 4]  141 	push	bc
   00C1 1Cr00r00      [ 4]  142 	call	___fsadd
   00C4 16 08 00      [ 7]  143 	add	sp, #8
   00C7 F4 FC 25      [17]  144 	ld	-4 (ix),l
   00CA F4 FD 24      [17]  145 	ld	-3 (ix),h
   00CD F4 FE 23      [17]  146 	ld	-2 (ix),e
   00D0 F4 FF 22      [17]  147 	ld	-1 (ix),d
                            148 ;../sqrtf.c:52: y+=f/y;
   00D3 F2 08 4A      [10]  149 	ld	hl, 8 (sp)
   00D6 52            [ 4]  150 	push	hl
   00D7 F2 08 4A      [10]  151 	ld	hl, 8 (sp)
   00DA 52            [ 4]  152 	push	hl
   00DB F2 08 4A      [10]  153 	ld	hl, 8 (sp)
   00DE 52            [ 4]  154 	push	hl
   00DF F2 08 4A      [10]  155 	ld	hl, 8 (sp)
   00E2 52            [ 4]  156 	push	hl
   00E3 1Cr00r00      [ 4]  157 	call	___fsdiv
   00E6 16 08 00      [ 7]  158 	add	sp, #8
   00E9 08            [ 4]  159 	ex	de, hl
   00EA 52            [ 4]  160 	push	hl
   00EB 51            [ 4]  161 	push	de
   00EC F2 0C 4A      [10]  162 	ld	hl, 12 (sp)
   00EF 52            [ 4]  163 	push	hl
   00F0 F2 0C 4A      [10]  164 	ld	hl, 12 (sp)
   00F3 52            [ 4]  165 	push	hl
   00F4 1Cr00r00      [ 4]  166 	call	___fsadd
   00F7 16 08 00      [ 7]  167 	add	sp, #8
   00FA 08            [ 4]  168 	ex	de, hl
                            169 ;../sqrtf.c:53: y=ldexpf(y, -2) + f/y; /*Faster version of 0.25 * y + f/y*/
   00FB 52            [ 4]  170 	push	hl
   00FC 51            [ 4]  171 	push	de
   00FD 38 FE FF      [12]  172 	ld	bc,#0xFFFE
   0100 50            [ 4]  173 	push	bc
   0101 52            [ 4]  174 	push	hl
   0102 51            [ 4]  175 	push	de
   0103 1Cr00r00      [ 4]  176 	call	_ldexpf
   0106 16 06 00      [ 7]  177 	add	sp, #6
   0109 F4 FF 22      [17]  178 	ld	-1 (ix),d
   010C F4 FE 23      [17]  179 	ld	-2 (ix),e
   010F F4 FD 24      [17]  180 	ld	-3 (ix),h
   0112 F4 FC 25      [17]  181 	ld	-4 (ix),l
   0115 F2 08 4A      [10]  182 	ld	hl, 8 (sp)
   0118 52            [ 4]  183 	push	hl
   0119 F2 08 4A      [10]  184 	ld	hl, 8 (sp)
   011C 52            [ 4]  185 	push	hl
   011D 1Cr00r00      [ 4]  186 	call	___fsdiv
   0120 16 08 00      [ 7]  187 	add	sp, #8
   0123 08            [ 4]  188 	ex	de, hl
   0124 52            [ 4]  189 	push	hl
   0125 51            [ 4]  190 	push	de
   0126 F2 0C 4A      [10]  191 	ld	hl, 12 (sp)
   0129 52            [ 4]  192 	push	hl
   012A F2 0C 4A      [10]  193 	ld	hl, 12 (sp)
   012D 52            [ 4]  194 	push	hl
   012E 1Cr00r00      [ 4]  195 	call	___fsadd
   0131 16 08 00      [ 7]  196 	add	sp, #8
   0134 FD 31               197 	ld	c,l
   0136 FC 30         [17]  198 	ld	b,h
                            199 ;../sqrtf.c:55: if (n&1)
   0138 F0 F6 A8      [11]  200 	bit	0, -10 (ix)
   013B C6 1C         [ 7]  201 	jr	Z,00110$
                            202 ;../sqrtf.c:57: y*=0.7071067812;
   013D 51            [ 4]  203 	push	de
   013E 50            [ 4]  204 	push	bc
   013F 3A 35 3F      [13]  205 	ld	hl,#0x3F35
   0142 52            [ 4]  206 	push	hl
   0143 3A F3 04      [13]  207 	ld	hl,#0x04F3
   0146 52            [ 4]  208 	push	hl
   0147 1Cr00r00      [ 4]  209 	call	___fsmul
   014A 16 08 00      [ 7]  210 	add	sp, #8
   014D FD 31               211 	ld	c,l
   014F FC 30         [17]  212 	ld	b,h
                            213 ;../sqrtf.c:58: ++n;
   0151 F0 F6 87      [11]  214 	inc	-10 (ix)
   0154 CE 03         [ 7]  215 	jr	NZ,00135$
   0156 F0 F7 87      [11]  216 	inc	-9 (ix)
   0159                     217 00135$:
   0159                     218 00110$:
                            219 ;../sqrtf.c:60: return ldexpf(y, n/2);
   0159 5A            [ 4]  220 	pop	hl
   015A 52            [ 4]  221 	push	hl
   015B FC AF         [17]  222 	bit	7, h
   015D C6 01         [ 7]  223 	jr	Z,00113$
   015F 92            [ 4]  224 	inc	hl
   0160                     225 00113$:
   0160 FC A5         [17]  226 	sra	h
   0162 FD A3               227 	rr	l
   0164 52            [ 4]  228 	push	hl
   0165 51            [ 4]  229 	push	de
   0166 50            [ 4]  230 	push	bc
   0167 1Cr00r00      [ 4]  231 	call	_ldexpf
   016A 16 06 00      [ 7]  232 	add	sp, #6
   016D                     233 00111$:
   016D FC 3E         [17]  234 	ld	sp, ix
   016F 5C            [ 4]  235 	pop	ix
   0170 1E            [ 7]  236 	ret
   0171                     237 _sqrtf_end::
                            238 	.area _CODE
                            239 	.area _INITIALIZER
                            240 	.area _CABS (ABS)
