                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                              4 ; This file was generated Wed Nov 27 12:28:20 2013
                              5 ;--------------------------------------------------------
                              6 	.module powf
                              7 	.optsdcc -mtlcs90
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _logf
                             13 	.globl _expf
                             14 	.globl _powf
                             15 ;--------------------------------------------------------
                             16 ; ram data
                             17 ;--------------------------------------------------------
                             18 	.area _DATA
                             19 ;--------------------------------------------------------
                             20 ; ram data
                             21 ;--------------------------------------------------------
                             22 	.area _INITIALIZED
                             23 ;--------------------------------------------------------
                             24 ; absolute external ram data
                             25 ;--------------------------------------------------------
                             26 	.area _DABS (ABS)
                             27 ;--------------------------------------------------------
                             28 ; global & static initialisations
                             29 ;--------------------------------------------------------
                             30 	.area _HOME
                             31 	.area _GSINIT
                             32 	.area _GSFINAL
                             33 	.area _GSINIT
                             34 ;--------------------------------------------------------
                             35 ; Home
                             36 ;--------------------------------------------------------
                             37 	.area _HOME
                             38 	.area _HOME
                             39 ;--------------------------------------------------------
                             40 ; code
                             41 ;--------------------------------------------------------
                             42 	.area _CODE
                             43 ;../powf.c:35: float powf(const float x, const float y)
                             44 ;	---------------------------------
                             45 ; Function powf
                             46 ; ---------------------------------
   0000                      47 _powf_start::
   0000                      48 _powf:
   0000 54            [ 4]   49 	push	ix
   0001 3C 00 00      [ 4]   50 	ld	ix,#0
   0004 FE 14         [ 7]   51 	add	ix,sp
                             52 ;../powf.c:37: if(y == 0.0) return 1.0;
   0006 F0 0B 2E      [11]   53 	ld	a,11 (ix)
   0009 FE B7         [ 7]   54 	res	7, a
   000B F0 0A 66      [11]   55 	or	a, 10 (ix)
   000E F0 09 66      [11]   56 	or	a, 9 (ix)
   0011 F0 08 66      [11]   57 	or	a,8 (ix)
   0014 CE 09         [ 7]   58 	jr	NZ,00102$
   0016 3A 00 00      [13]   59 	ld	hl,#0x0000
   0019 39 80 3F      [11]   60 	ld	de,#0x3F80
   001C 1Ar97r00      [ 7]   61 	jp	00107$
   001F                      62 00102$:
                             63 ;../powf.c:38: if(y==1.0) return x;
   001F 3A 80 3F      [13]   64 	ld	hl,#0x3F80
   0022 52            [ 4]   65 	push	hl
   0023 3A 00 00      [13]   66 	ld	hl,#0x0000
   0026 52            [ 4]   67 	push	hl
   0027 F2 0E 4A      [10]   68 	ld	hl, 14 (sp)
   002A 52            [ 4]   69 	push	hl
   002B F2 0E 4A      [10]   70 	ld	hl, 14 (sp)
   002E 52            [ 4]   71 	push	hl
   002F 1Cr00r00      [ 4]   72 	call	___fseq
   0032 16 08 00      [ 7]   73 	add	sp, #8
   0035 25            [ 4]   74 	ld	a,l
   0036 FE 66         [ 7]   75 	or	a, a
   0038 C6 0F         [ 7]   76 	jr	Z,00104$
   003A F0 04 2D      [11]   77 	ld	l,4 (ix)
   003D F0 05 2C      [11]   78 	ld	h,5 (ix)
   0040 F0 06 2B      [11]   79 	ld	e,6 (ix)
   0043 F0 07 2A      [11]   80 	ld	d,7 (ix)
   0046 1Ar97r00      [ 7]   81 	jp	00107$
   0049                      82 00104$:
                             83 ;../powf.c:39: if(x <= 0.0) return 0.0;
   0049 3A 00 00      [13]   84 	ld	hl,#0x0000
   004C 52            [ 4]   85 	push	hl
   004D 3A 00 00      [13]   86 	ld	hl,#0x0000
   0050 52            [ 4]   87 	push	hl
   0051 F2 0A 4A      [10]   88 	ld	hl, 10 (sp)
   0054 52            [ 4]   89 	push	hl
   0055 F2 0A 4A      [10]   90 	ld	hl, 10 (sp)
   0058 52            [ 4]   91 	push	hl
   0059 1Cr00r00      [ 4]   92 	call	___fsgt
   005C 16 08 00      [ 7]   93 	add	sp, #8
   005F 25            [ 4]   94 	ld	a,l
   0060 FE 66         [ 7]   95 	or	a, a
   0062 CE 09         [ 7]   96 	jr	NZ,00106$
   0064 3A 00 00      [13]   97 	ld	hl,#0x0000
   0067 FD 33                98 	ld	e,l
   0069 FC 32         [17]   99 	ld	d,h
   006B C8 2A         [11]  100 	jr	00107$
   006D                     101 00106$:
                            102 ;../powf.c:40: return expf(logf(x) * y);
   006D F2 06 4A      [10]  103 	ld	hl, 6 (sp)
   0070 52            [ 4]  104 	push	hl
   0071 F2 06 4A      [10]  105 	ld	hl, 6 (sp)
   0074 52            [ 4]  106 	push	hl
   0075 1Cr00r00      [ 4]  107 	call	_logf
   0078 16 04 00      [ 7]  108 	add	sp, #4
   007B FD 31               109 	ld	c,l
   007D FC 30         [17]  110 	ld	b,h
   007F F2 0A 4A      [10]  111 	ld	hl, 10 (sp)
   0082 52            [ 4]  112 	push	hl
   0083 F2 0A 4A      [10]  113 	ld	hl, 10 (sp)
   0086 52            [ 4]  114 	push	hl
   0087 51            [ 4]  115 	push	de
   0088 50            [ 4]  116 	push	bc
   0089 1Cr00r00      [ 4]  117 	call	___fsmul
   008C 16 08 00      [ 7]  118 	add	sp, #8
   008F 51            [ 4]  119 	push	de
   0090 52            [ 4]  120 	push	hl
   0091 1Cr00r00      [ 4]  121 	call	_expf
   0094 16 04 00      [ 7]  122 	add	sp, #4
   0097                     123 00107$:
   0097 5C            [ 4]  124 	pop	ix
   0098 1E            [ 7]  125 	ret
   0099                     126 _powf_end::
                            127 	.area _CODE
                            128 	.area _INITIALIZER
                            129 	.area _CABS (ABS)
