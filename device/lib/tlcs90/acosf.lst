                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                              4 ; This file was generated Wed Nov 27 12:28:21 2013
                              5 ;--------------------------------------------------------
                              6 	.module acosf
                              7 	.optsdcc -mtlcs90
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _asincosf
                             13 	.globl _acosf
                             14 ;--------------------------------------------------------
                             15 ; ram data
                             16 ;--------------------------------------------------------
                             17 	.area _DATA
                             18 ;--------------------------------------------------------
                             19 ; ram data
                             20 ;--------------------------------------------------------
                             21 	.area _INITIALIZED
                             22 ;--------------------------------------------------------
                             23 ; absolute external ram data
                             24 ;--------------------------------------------------------
                             25 	.area _DABS (ABS)
                             26 ;--------------------------------------------------------
                             27 ; global & static initialisations
                             28 ;--------------------------------------------------------
                             29 	.area _HOME
                             30 	.area _GSINIT
                             31 	.area _GSFINAL
                             32 	.area _GSINIT
                             33 ;--------------------------------------------------------
                             34 ; Home
                             35 ;--------------------------------------------------------
                             36 	.area _HOME
                             37 	.area _HOME
                             38 ;--------------------------------------------------------
                             39 ; code
                             40 ;--------------------------------------------------------
                             41 	.area _CODE
                             42 ;../acosf.c:36: float acosf(const float x) _FLOAT_FUNC_REENTRANT
                             43 ;	---------------------------------
                             44 ; Function acosf
                             45 ; ---------------------------------
   0000                      46 _acosf_start::
   0000                      47 _acosf:
                             48 ;../acosf.c:38: if (x == 1.0) return 0.0;
   0000 3A 80 3F      [13]   49 	ld	hl,#0x3F80
   0003 52            [ 4]   50 	push	hl
   0004 3A 00 00      [13]   51 	ld	hl,#0x0000
   0007 52            [ 4]   52 	push	hl
   0008 F2 08 4A      [10]   53 	ld	hl, 8 (sp)
   000B 52            [ 4]   54 	push	hl
   000C F2 08 4A      [10]   55 	ld	hl, 8 (sp)
   000F 52            [ 4]   56 	push	hl
   0010 1Cr00r00      [ 4]   57 	call	___fseq
   0013 16 08 00      [ 7]   58 	add	sp, #8
   0016 25            [ 4]   59 	ld	a,l
   0017 FE 66         [ 7]   60 	or	a, a
   0019 C6 08         [ 7]   61 	jr	Z,00108$
   001B 3A 00 00      [13]   62 	ld	hl,#0x0000
   001E FD 33                63 	ld	e,l
   0020 FC 32         [17]   64 	ld	d,h
   0022 1E            [ 7]   65 	ret
   0023                      66 00108$:
                             67 ;../acosf.c:39: else if (x ==-1.0) return PI;
   0023 3A 80 BF      [13]   68 	ld	hl,#0xBF80
   0026 52            [ 4]   69 	push	hl
   0027 3A 00 00      [13]   70 	ld	hl,#0x0000
   002A 52            [ 4]   71 	push	hl
   002B F2 08 4A      [10]   72 	ld	hl, 8 (sp)
   002E 52            [ 4]   73 	push	hl
   002F F2 08 4A      [10]   74 	ld	hl, 8 (sp)
   0032 52            [ 4]   75 	push	hl
   0033 1Cr00r00      [ 4]   76 	call	___fseq
   0036 16 08 00      [ 7]   77 	add	sp, #8
   0039 25            [ 4]   78 	ld	a,l
   003A FE 66         [ 7]   79 	or	a, a
   003C C6 07         [ 7]   80 	jr	Z,00105$
   003E 3A DB 0F      [13]   81 	ld	hl,#0x0FDB
   0041 39 49 40      [11]   82 	ld	de,#0x4049
   0044 1E            [ 7]   83 	ret
   0045                      84 00105$:
                             85 ;../acosf.c:40: else if (x == 0.0) return HALF_PI;
   0045 3D 02 00      [ 4]   86 	ld	iy,#2
   0048 FE 15         [ 7]   87 	add	iy,sp
   004A F1 03 2E      [10]   88 	ld	a,3 (iy)
   004D FE B7         [ 7]   89 	res	7, a
   004F F1 02 66      [10]   90 	or	a, 2 (iy)
   0052 F1 01 66      [10]   91 	or	a, 1 (iy)
   0055 E5 66         [11]   92 	or	a,0 (iy)
   0057 CE 07         [ 7]   93 	jr	NZ,00102$
   0059 3A DB 0F      [13]   94 	ld	hl,#0x0FDB
   005C 39 C9 3F      [11]   95 	ld	de,#0x3FC9
   005F 1E            [ 7]   96 	ret
   0060                      97 00102$:
                             98 ;../acosf.c:41: else               return asincosf(x, true);
   0060 36 01         [10]   99 	ld	a,#0x01
   0062 56            [ 7]  100 	push	af
   0063 96            [ 7]  101 	inc	sp
   0064 F2 05 4A      [10]  102 	ld	hl, 5 (sp)
   0067 52            [ 4]  103 	push	hl
   0068 F2 05 4A      [10]  104 	ld	hl, 5 (sp)
   006B 52            [ 4]  105 	push	hl
   006C 1Cr00r00      [ 4]  106 	call	_asincosf
   006F 16 05 00      [ 7]  107 	add	sp, #5
   0072 1E            [ 7]  108 	ret
   0073                     109 _acosf_end::
                            110 	.area _CODE
                            111 	.area _INITIALIZER
                            112 	.area _CABS (ABS)
