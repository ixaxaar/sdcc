                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:15 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module time
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl ___day
                                     13 	.globl ___month
                                     14 	.globl _RtcRead
                                     15 	.globl _sprintf
                                     16 	.globl _time
                                     17 	.globl _asctime
                                     18 	.globl _ctime
                                     19 	.globl _localtime
                                     20 	.globl _gmtime
                                     21 	.globl _mktime
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; special function bits
                                     29 ;--------------------------------------------------------
                                     30 	.area RSEG    (ABS,DATA)
      000000                         31 	.org 0x0000
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable register banks
                                     34 ;--------------------------------------------------------
                                     35 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         36 	.ds 8
                                     37 ;--------------------------------------------------------
                                     38 ; internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DSEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; overlayable items in internal ram 
                                     43 ;--------------------------------------------------------
                                     44 ;--------------------------------------------------------
                                     45 ; indirectly addressable internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area ISEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; absolute internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area IABS    (ABS,DATA)
                                     52 	.area IABS    (ABS,DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; bit data
                                     55 ;--------------------------------------------------------
                                     56 	.area BSEG    (BIT)
                                     57 ;--------------------------------------------------------
                                     58 ; paged external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area PSEG    (PAG,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XSEG    (XDATA)
      000000                         65 _ascTimeBuffer:
      000000                         66 	.ds 32
      000020                         67 _lastTime:
      000020                         68 	.ds 12
                                     69 ;--------------------------------------------------------
                                     70 ; absolute external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XABS    (ABS,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; external initialized ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XISEG   (XDATA)
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT0 (CODE)
                                     79 	.area GSINIT1 (CODE)
                                     80 	.area GSINIT2 (CODE)
                                     81 	.area GSINIT3 (CODE)
                                     82 	.area GSINIT4 (CODE)
                                     83 	.area GSINIT5 (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area CSEG    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'RtcRead'
                                    105 ;------------------------------------------------------------
                                    106 ;timeptr                   Allocated to registers 
                                    107 ;------------------------------------------------------------
                                    108 ;	time.c:42: unsigned char RtcRead(struct tm *timeptr) {
                                    109 ;	-----------------------------------------
                                    110 ;	 function RtcRead
                                    111 ;	-----------------------------------------
      000000                        112 _RtcRead:
                           000007   113 	ar7 = 0x07
                           000006   114 	ar6 = 0x06
                           000005   115 	ar5 = 0x05
                           000004   116 	ar4 = 0x04
                           000003   117 	ar3 = 0x03
                           000002   118 	ar2 = 0x02
                           000001   119 	ar1 = 0x01
                           000000   120 	ar0 = 0x00
                                    121 ;	time.c:45: return 0;
      000000 75 82 00         [24]  122 	mov	dpl,#0x00
      000003 02r00r00         [24]  123 	ljmp	__sdcc_banked_ret
                                    124 ;------------------------------------------------------------
                                    125 ;Allocation info for local variables in function 'time'
                                    126 ;------------------------------------------------------------
                                    127 ;timeptr                   Allocated to stack - _bp +1
                                    128 ;now                       Allocated to stack - _bp +8
                                    129 ;t                         Allocated to stack - _bp +4
                                    130 ;------------------------------------------------------------
                                    131 ;	time.c:50: time_t time(time_t *timeptr) {
                                    132 ;	-----------------------------------------
                                    133 ;	 function time
                                    134 ;	-----------------------------------------
      000006                        135 _time:
      000006 C0*00            [24]  136 	push	_bp
      000008 85 81*00         [24]  137 	mov	_bp,sp
      00000B C0 82            [24]  138 	push	dpl
      00000D C0 83            [24]  139 	push	dph
      00000F C0 F0            [24]  140 	push	b
      000011 E5 81            [12]  141 	mov	a,sp
      000013 24 10            [12]  142 	add	a,#0x10
      000015 F5 81            [12]  143 	mov	sp,a
                                    144 ;	time.c:52: time_t t=-1;
      000017 E5*00            [12]  145 	mov	a,_bp
      000019 24 04            [12]  146 	add	a,#0x04
      00001B F8               [12]  147 	mov	r0,a
      00001C 74 FF            [12]  148 	mov	a,#0xFF
      00001E F6               [12]  149 	mov	@r0,a
      00001F 08               [12]  150 	inc	r0
      000020 F6               [12]  151 	mov	@r0,a
      000021 08               [12]  152 	inc	r0
      000022 F6               [12]  153 	mov	@r0,a
      000023 08               [12]  154 	inc	r0
      000024 F6               [12]  155 	mov	@r0,a
                                    156 ;	time.c:54: if (RtcRead(&now)) {
      000025 E5*00            [12]  157 	mov	a,_bp
      000027 24 08            [12]  158 	add	a,#0x08
      000029 FE               [12]  159 	mov	r6,a
      00002A FC               [12]  160 	mov	r4,a
      00002B 7D 00            [12]  161 	mov	r5,#0x00
      00002D 7F 40            [12]  162 	mov	r7,#0x40
      00002F 8C 82            [24]  163 	mov	dpl,r4
      000031 8D 83            [24]  164 	mov	dph,r5
      000033 8F F0            [24]  165 	mov	b,r7
      000035 C0 06            [24]  166 	push	ar6
      000037 78r00            [12]  167 	mov	r0,#_RtcRead
      000039 79s00            [12]  168 	mov	r1,#(_RtcRead >> 8)
      00003B 7As00            [12]  169 	mov	r2,#(_RtcRead >> 16)
      00003D 12r00r00         [24]  170 	lcall	__sdcc_banked_call
      000040 E5 82            [12]  171 	mov	a,dpl
      000042 D0 06            [24]  172 	pop	ar6
      000044 60 2A            [24]  173 	jz	00102$
                                    174 ;	time.c:55: t=mktime(&now);
      000046 7F 00            [12]  175 	mov	r7,#0x00
      000048 7D 40            [12]  176 	mov	r5,#0x40
      00004A 8E 82            [24]  177 	mov	dpl,r6
      00004C 8F 83            [24]  178 	mov	dph,r7
      00004E 8D F0            [24]  179 	mov	b,r5
      000050 78r81            [12]  180 	mov	r0,#_mktime
      000052 79s06            [12]  181 	mov	r1,#(_mktime >> 8)
      000054 7As00            [12]  182 	mov	r2,#(_mktime >> 16)
      000056 12r00r00         [24]  183 	lcall	__sdcc_banked_call
      000059 AC 82            [24]  184 	mov	r4,dpl
      00005B AD 83            [24]  185 	mov	r5,dph
      00005D AE F0            [24]  186 	mov	r6,b
      00005F FF               [12]  187 	mov	r7,a
      000060 E5*00            [12]  188 	mov	a,_bp
      000062 24 04            [12]  189 	add	a,#0x04
      000064 F8               [12]  190 	mov	r0,a
      000065 A6 04            [24]  191 	mov	@r0,ar4
      000067 08               [12]  192 	inc	r0
      000068 A6 05            [24]  193 	mov	@r0,ar5
      00006A 08               [12]  194 	inc	r0
      00006B A6 06            [24]  195 	mov	@r0,ar6
      00006D 08               [12]  196 	inc	r0
      00006E A6 07            [24]  197 	mov	@r0,ar7
      000070                        198 00102$:
                                    199 ;	time.c:57: if (timeptr) {
      000070 A8*00            [24]  200 	mov	r0,_bp
      000072 08               [12]  201 	inc	r0
      000073 E6               [12]  202 	mov	a,@r0
      000074 08               [12]  203 	inc	r0
      000075 46               [12]  204 	orl	a,@r0
      000076 60 26            [24]  205 	jz	00104$
                                    206 ;	time.c:58: *timeptr=t;
      000078 A8*00            [24]  207 	mov	r0,_bp
      00007A 08               [12]  208 	inc	r0
      00007B 86 82            [24]  209 	mov	dpl,@r0
      00007D 08               [12]  210 	inc	r0
      00007E 86 83            [24]  211 	mov	dph,@r0
      000080 08               [12]  212 	inc	r0
      000081 86 F0            [24]  213 	mov	b,@r0
      000083 E5*00            [12]  214 	mov	a,_bp
      000085 24 04            [12]  215 	add	a,#0x04
      000087 F9               [12]  216 	mov	r1,a
      000088 E7               [12]  217 	mov	a,@r1
      000089 12r00r00         [24]  218 	lcall	__gptrput
      00008C A3               [24]  219 	inc	dptr
      00008D 09               [12]  220 	inc	r1
      00008E E7               [12]  221 	mov	a,@r1
      00008F 12r00r00         [24]  222 	lcall	__gptrput
      000092 A3               [24]  223 	inc	dptr
      000093 09               [12]  224 	inc	r1
      000094 E7               [12]  225 	mov	a,@r1
      000095 12r00r00         [24]  226 	lcall	__gptrput
      000098 A3               [24]  227 	inc	dptr
      000099 09               [12]  228 	inc	r1
      00009A E7               [12]  229 	mov	a,@r1
      00009B 12r00r00         [24]  230 	lcall	__gptrput
      00009E                        231 00104$:
                                    232 ;	time.c:60: return t;
      00009E E5*00            [12]  233 	mov	a,_bp
      0000A0 24 04            [12]  234 	add	a,#0x04
      0000A2 F8               [12]  235 	mov	r0,a
      0000A3 86 82            [24]  236 	mov	dpl,@r0
      0000A5 08               [12]  237 	inc	r0
      0000A6 86 83            [24]  238 	mov	dph,@r0
      0000A8 08               [12]  239 	inc	r0
      0000A9 86 F0            [24]  240 	mov	b,@r0
      0000AB 08               [12]  241 	inc	r0
      0000AC E6               [12]  242 	mov	a,@r0
      0000AD 85*00 81         [24]  243 	mov	sp,_bp
      0000B0 D0*00            [24]  244 	pop	_bp
      0000B2 02r00r00         [24]  245 	ljmp	__sdcc_banked_ret
                                    246 ;------------------------------------------------------------
                                    247 ;Allocation info for local variables in function 'CheckTime'
                                    248 ;------------------------------------------------------------
                                    249 ;timeptr                   Allocated to registers r5 r6 r7 
                                    250 ;------------------------------------------------------------
                                    251 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                                    252 ;	-----------------------------------------
                                    253 ;	 function CheckTime
                                    254 ;	-----------------------------------------
      0000B5                        255 _CheckTime:
                                    256 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      0000B5 AD 82            [24]  257 	mov	r5,dpl
      0000B7 AE 83            [24]  258 	mov	r6,dph
      0000B9 AF F0            [24]  259 	mov	r7,b
      0000BB 12r00r00         [24]  260 	lcall	__gptrget
      0000BE FC               [12]  261 	mov  r4,a
      0000BF 24 C4            [12]  262 	add	a,#0xff - 0x3B
      0000C1 50 0B            [24]  263 	jnc	00102$
      0000C3 8D 82            [24]  264 	mov	dpl,r5
      0000C5 8E 83            [24]  265 	mov	dph,r6
      0000C7 8F F0            [24]  266 	mov	b,r7
      0000C9 74 3B            [12]  267 	mov	a,#0x3B
      0000CB 12r00r00         [24]  268 	lcall	__gptrput
      0000CE                        269 00102$:
                                    270 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      0000CE 74 01            [12]  271 	mov	a,#0x01
      0000D0 2D               [12]  272 	add	a,r5
      0000D1 FA               [12]  273 	mov	r2,a
      0000D2 E4               [12]  274 	clr	a
      0000D3 3E               [12]  275 	addc	a,r6
      0000D4 FB               [12]  276 	mov	r3,a
      0000D5 8F 04            [24]  277 	mov	ar4,r7
      0000D7 8A 82            [24]  278 	mov	dpl,r2
      0000D9 8B 83            [24]  279 	mov	dph,r3
      0000DB 8C F0            [24]  280 	mov	b,r4
      0000DD 12r00r00         [24]  281 	lcall	__gptrget
      0000E0 F9               [12]  282 	mov  r1,a
      0000E1 24 C4            [12]  283 	add	a,#0xff - 0x3B
      0000E3 50 0B            [24]  284 	jnc	00104$
      0000E5 8A 82            [24]  285 	mov	dpl,r2
      0000E7 8B 83            [24]  286 	mov	dph,r3
      0000E9 8C F0            [24]  287 	mov	b,r4
      0000EB 74 3B            [12]  288 	mov	a,#0x3B
      0000ED 12r00r00         [24]  289 	lcall	__gptrput
      0000F0                        290 00104$:
                                    291 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      0000F0 74 02            [12]  292 	mov	a,#0x02
      0000F2 2D               [12]  293 	add	a,r5
      0000F3 FA               [12]  294 	mov	r2,a
      0000F4 E4               [12]  295 	clr	a
      0000F5 3E               [12]  296 	addc	a,r6
      0000F6 FB               [12]  297 	mov	r3,a
      0000F7 8F 04            [24]  298 	mov	ar4,r7
      0000F9 8A 82            [24]  299 	mov	dpl,r2
      0000FB 8B 83            [24]  300 	mov	dph,r3
      0000FD 8C F0            [24]  301 	mov	b,r4
      0000FF 12r00r00         [24]  302 	lcall	__gptrget
      000102 F9               [12]  303 	mov  r1,a
      000103 24 E8            [12]  304 	add	a,#0xff - 0x17
      000105 50 0B            [24]  305 	jnc	00106$
      000107 8A 82            [24]  306 	mov	dpl,r2
      000109 8B 83            [24]  307 	mov	dph,r3
      00010B 8C F0            [24]  308 	mov	b,r4
      00010D 74 17            [12]  309 	mov	a,#0x17
      00010F 12r00r00         [24]  310 	lcall	__gptrput
      000112                        311 00106$:
                                    312 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      000112 74 07            [12]  313 	mov	a,#0x07
      000114 2D               [12]  314 	add	a,r5
      000115 FA               [12]  315 	mov	r2,a
      000116 E4               [12]  316 	clr	a
      000117 3E               [12]  317 	addc	a,r6
      000118 FB               [12]  318 	mov	r3,a
      000119 8F 04            [24]  319 	mov	ar4,r7
      00011B 8A 82            [24]  320 	mov	dpl,r2
      00011D 8B 83            [24]  321 	mov	dph,r3
      00011F 8C F0            [24]  322 	mov	b,r4
      000121 12r00r00         [24]  323 	lcall	__gptrget
      000124 F9               [12]  324 	mov  r1,a
      000125 24 F9            [12]  325 	add	a,#0xff - 0x06
      000127 50 0B            [24]  326 	jnc	00108$
      000129 8A 82            [24]  327 	mov	dpl,r2
      00012B 8B 83            [24]  328 	mov	dph,r3
      00012D 8C F0            [24]  329 	mov	b,r4
      00012F 74 06            [12]  330 	mov	a,#0x06
      000131 12r00r00         [24]  331 	lcall	__gptrput
      000134                        332 00108$:
                                    333 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      000134 74 03            [12]  334 	mov	a,#0x03
      000136 2D               [12]  335 	add	a,r5
      000137 FA               [12]  336 	mov	r2,a
      000138 E4               [12]  337 	clr	a
      000139 3E               [12]  338 	addc	a,r6
      00013A FB               [12]  339 	mov	r3,a
      00013B 8F 04            [24]  340 	mov	ar4,r7
      00013D 8A 82            [24]  341 	mov	dpl,r2
      00013F 8B 83            [24]  342 	mov	dph,r3
      000141 8C F0            [24]  343 	mov	b,r4
      000143 12r00r00         [24]  344 	lcall	__gptrget
      000146 F9               [12]  345 	mov	r1,a
      000147 B9 01 00         [24]  346 	cjne	r1,#0x01,00148$
      00014A                        347 00148$:
      00014A 50 0D            [24]  348 	jnc	00112$
      00014C 8A 82            [24]  349 	mov	dpl,r2
      00014E 8B 83            [24]  350 	mov	dph,r3
      000150 8C F0            [24]  351 	mov	b,r4
      000152 74 01            [12]  352 	mov	a,#0x01
      000154 12r00r00         [24]  353 	lcall	__gptrput
      000157 80 10            [24]  354 	sjmp	00113$
      000159                        355 00112$:
                                    356 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000159 E9               [12]  357 	mov	a,r1
      00015A 24 E0            [12]  358 	add	a,#0xff - 0x1F
      00015C 50 0B            [24]  359 	jnc	00113$
      00015E 8A 82            [24]  360 	mov	dpl,r2
      000160 8B 83            [24]  361 	mov	dph,r3
      000162 8C F0            [24]  362 	mov	b,r4
      000164 74 1F            [12]  363 	mov	a,#0x1F
      000166 12r00r00         [24]  364 	lcall	__gptrput
      000169                        365 00113$:
                                    366 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      000169 74 04            [12]  367 	mov	a,#0x04
      00016B 2D               [12]  368 	add	a,r5
      00016C FA               [12]  369 	mov	r2,a
      00016D E4               [12]  370 	clr	a
      00016E 3E               [12]  371 	addc	a,r6
      00016F FB               [12]  372 	mov	r3,a
      000170 8F 04            [24]  373 	mov	ar4,r7
      000172 8A 82            [24]  374 	mov	dpl,r2
      000174 8B 83            [24]  375 	mov	dph,r3
      000176 8C F0            [24]  376 	mov	b,r4
      000178 12r00r00         [24]  377 	lcall	__gptrget
      00017B F9               [12]  378 	mov  r1,a
      00017C 24 F4            [12]  379 	add	a,#0xff - 0x0B
      00017E 50 0B            [24]  380 	jnc	00115$
      000180 8A 82            [24]  381 	mov	dpl,r2
      000182 8B 83            [24]  382 	mov	dph,r3
      000184 8C F0            [24]  383 	mov	b,r4
      000186 74 0B            [12]  384 	mov	a,#0x0B
      000188 12r00r00         [24]  385 	lcall	__gptrput
      00018B                        386 00115$:
                                    387 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      00018B 74 05            [12]  388 	mov	a,#0x05
      00018D 2D               [12]  389 	add	a,r5
      00018E FD               [12]  390 	mov	r5,a
      00018F E4               [12]  391 	clr	a
      000190 3E               [12]  392 	addc	a,r6
      000191 FE               [12]  393 	mov	r6,a
      000192 8D 82            [24]  394 	mov	dpl,r5
      000194 8E 83            [24]  395 	mov	dph,r6
      000196 8F F0            [24]  396 	mov	b,r7
      000198 12r00r00         [24]  397 	lcall	__gptrget
      00019B FB               [12]  398 	mov	r3,a
      00019C A3               [24]  399 	inc	dptr
      00019D 12r00r00         [24]  400 	lcall	__gptrget
      0001A0 FC               [12]  401 	mov	r4,a
      0001A1 30 E7 0E         [24]  402 	jnb	acc.7,00118$
      0001A4 8D 82            [24]  403 	mov	dpl,r5
      0001A6 8E 83            [24]  404 	mov	dph,r6
      0001A8 8F F0            [24]  405 	mov	b,r7
      0001AA E4               [12]  406 	clr	a
      0001AB 12r00r00         [24]  407 	lcall	__gptrput
      0001AE A3               [24]  408 	inc	dptr
      0001AF 12r00r00         [24]  409 	lcall	__gptrput
      0001B2                        410 00118$:
      0001B2 02r00r00         [24]  411 	ljmp	__sdcc_banked_ret
                                    412 ;------------------------------------------------------------
                                    413 ;Allocation info for local variables in function 'asctime'
                                    414 ;------------------------------------------------------------
                                    415 ;timeptr                   Allocated to stack - _bp +1
                                    416 ;sloc0                     Allocated to stack - _bp +4
                                    417 ;sloc1                     Allocated to stack - _bp +6
                                    418 ;sloc2                     Allocated to stack - _bp +9
                                    419 ;sloc3                     Allocated to stack - _bp +9
                                    420 ;sloc4                     Allocated to stack - _bp +11
                                    421 ;sloc5                     Allocated to stack - _bp +13
                                    422 ;------------------------------------------------------------
                                    423 ;	time.c:95: char *asctime(struct tm *timeptr) {
                                    424 ;	-----------------------------------------
                                    425 ;	 function asctime
                                    426 ;	-----------------------------------------
      0001B5                        427 _asctime:
      0001B5 C0*00            [24]  428 	push	_bp
      0001B7 85 81*00         [24]  429 	mov	_bp,sp
      0001BA C0 82            [24]  430 	push	dpl
      0001BC C0 83            [24]  431 	push	dph
      0001BE C0 F0            [24]  432 	push	b
      0001C0 E5 81            [12]  433 	mov	a,sp
      0001C2 24 0C            [12]  434 	add	a,#0x0C
      0001C4 F5 81            [12]  435 	mov	sp,a
                                    436 ;	time.c:96: CheckTime(timeptr);
      0001C6 A8*00            [24]  437 	mov	r0,_bp
      0001C8 08               [12]  438 	inc	r0
      0001C9 86 82            [24]  439 	mov	dpl,@r0
      0001CB 08               [12]  440 	inc	r0
      0001CC 86 83            [24]  441 	mov	dph,@r0
      0001CE 08               [12]  442 	inc	r0
      0001CF 86 F0            [24]  443 	mov	b,@r0
      0001D1 78rB5            [12]  444 	mov	r0,#_CheckTime
      0001D3 79s00            [12]  445 	mov	r1,#(_CheckTime >> 8)
      0001D5 7As00            [12]  446 	mov	r2,#(_CheckTime >> 16)
      0001D7 12r00r00         [24]  447 	lcall	__sdcc_banked_call
                                    448 ;	time.c:100: timeptr->tm_year+1900);
      0001DA A8*00            [24]  449 	mov	r0,_bp
      0001DC 08               [12]  450 	inc	r0
      0001DD 74 05            [12]  451 	mov	a,#0x05
      0001DF 26               [12]  452 	add	a,@r0
      0001E0 FA               [12]  453 	mov	r2,a
      0001E1 E4               [12]  454 	clr	a
      0001E2 08               [12]  455 	inc	r0
      0001E3 36               [12]  456 	addc	a,@r0
      0001E4 FB               [12]  457 	mov	r3,a
      0001E5 08               [12]  458 	inc	r0
      0001E6 86 04            [24]  459 	mov	ar4,@r0
      0001E8 8A 82            [24]  460 	mov	dpl,r2
      0001EA 8B 83            [24]  461 	mov	dph,r3
      0001EC 8C F0            [24]  462 	mov	b,r4
      0001EE 12r00r00         [24]  463 	lcall	__gptrget
      0001F1 FA               [12]  464 	mov	r2,a
      0001F2 A3               [24]  465 	inc	dptr
      0001F3 12r00r00         [24]  466 	lcall	__gptrget
      0001F6 FB               [12]  467 	mov	r3,a
      0001F7 74 6C            [12]  468 	mov	a,#0x6C
      0001F9 2A               [12]  469 	add	a,r2
      0001FA FF               [12]  470 	mov	r7,a
      0001FB 74 07            [12]  471 	mov	a,#0x07
      0001FD 3B               [12]  472 	addc	a,r3
      0001FE FE               [12]  473 	mov	r6,a
                                    474 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0001FF A8*00            [24]  475 	mov	r0,_bp
      000201 08               [12]  476 	inc	r0
      000202 86 82            [24]  477 	mov	dpl,@r0
      000204 08               [12]  478 	inc	r0
      000205 86 83            [24]  479 	mov	dph,@r0
      000207 08               [12]  480 	inc	r0
      000208 86 F0            [24]  481 	mov	b,@r0
      00020A 12r00r00         [24]  482 	lcall	__gptrget
      00020D FC               [12]  483 	mov	r4,a
      00020E E5*00            [12]  484 	mov	a,_bp
      000210 24 04            [12]  485 	add	a,#0x04
      000212 F8               [12]  486 	mov	r0,a
      000213 A6 04            [24]  487 	mov	@r0,ar4
      000215 08               [12]  488 	inc	r0
      000216 76 00            [12]  489 	mov	@r0,#0x00
      000218 A8*00            [24]  490 	mov	r0,_bp
      00021A 08               [12]  491 	inc	r0
      00021B 74 01            [12]  492 	mov	a,#0x01
      00021D 26               [12]  493 	add	a,@r0
      00021E FD               [12]  494 	mov	r5,a
      00021F E4               [12]  495 	clr	a
      000220 08               [12]  496 	inc	r0
      000221 36               [12]  497 	addc	a,@r0
      000222 FC               [12]  498 	mov	r4,a
      000223 08               [12]  499 	inc	r0
      000224 86 03            [24]  500 	mov	ar3,@r0
      000226 8D 82            [24]  501 	mov	dpl,r5
      000228 8C 83            [24]  502 	mov	dph,r4
      00022A 8B F0            [24]  503 	mov	b,r3
      00022C 12r00r00         [24]  504 	lcall	__gptrget
      00022F FD               [12]  505 	mov	r5,a
      000230 E5*00            [12]  506 	mov	a,_bp
      000232 24 06            [12]  507 	add	a,#0x06
      000234 F8               [12]  508 	mov	r0,a
      000235 A6 05            [24]  509 	mov	@r0,ar5
      000237 08               [12]  510 	inc	r0
      000238 76 00            [12]  511 	mov	@r0,#0x00
      00023A A8*00            [24]  512 	mov	r0,_bp
      00023C 08               [12]  513 	inc	r0
      00023D 74 02            [12]  514 	mov	a,#0x02
      00023F 26               [12]  515 	add	a,@r0
      000240 FB               [12]  516 	mov	r3,a
      000241 E4               [12]  517 	clr	a
      000242 08               [12]  518 	inc	r0
      000243 36               [12]  519 	addc	a,@r0
      000244 FC               [12]  520 	mov	r4,a
      000245 08               [12]  521 	inc	r0
      000246 86 05            [24]  522 	mov	ar5,@r0
      000248 8B 82            [24]  523 	mov	dpl,r3
      00024A 8C 83            [24]  524 	mov	dph,r4
      00024C 8D F0            [24]  525 	mov	b,r5
      00024E 12r00r00         [24]  526 	lcall	__gptrget
      000251 FB               [12]  527 	mov	r3,a
      000252 E5*00            [12]  528 	mov	a,_bp
      000254 24 09            [12]  529 	add	a,#0x09
      000256 F8               [12]  530 	mov	r0,a
      000257 A6 03            [24]  531 	mov	@r0,ar3
      000259 08               [12]  532 	inc	r0
      00025A 76 00            [12]  533 	mov	@r0,#0x00
                                    534 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      00025C A8*00            [24]  535 	mov	r0,_bp
      00025E 08               [12]  536 	inc	r0
      00025F 74 03            [12]  537 	mov	a,#0x03
      000261 26               [12]  538 	add	a,@r0
      000262 FA               [12]  539 	mov	r2,a
      000263 E4               [12]  540 	clr	a
      000264 08               [12]  541 	inc	r0
      000265 36               [12]  542 	addc	a,@r0
      000266 FC               [12]  543 	mov	r4,a
      000267 08               [12]  544 	inc	r0
      000268 86 05            [24]  545 	mov	ar5,@r0
      00026A 8A 82            [24]  546 	mov	dpl,r2
      00026C 8C 83            [24]  547 	mov	dph,r4
      00026E 8D F0            [24]  548 	mov	b,r5
      000270 12r00r00         [24]  549 	lcall	__gptrget
      000273 FA               [12]  550 	mov	r2,a
      000274 E5*00            [12]  551 	mov	a,_bp
      000276 24 0B            [12]  552 	add	a,#0x0b
      000278 F8               [12]  553 	mov	r0,a
      000279 A6 02            [24]  554 	mov	@r0,ar2
      00027B 08               [12]  555 	inc	r0
      00027C 76 00            [12]  556 	mov	@r0,#0x00
      00027E A8*00            [24]  557 	mov	r0,_bp
      000280 08               [12]  558 	inc	r0
      000281 74 04            [12]  559 	mov	a,#0x04
      000283 26               [12]  560 	add	a,@r0
      000284 FB               [12]  561 	mov	r3,a
      000285 E4               [12]  562 	clr	a
      000286 08               [12]  563 	inc	r0
      000287 36               [12]  564 	addc	a,@r0
      000288 FC               [12]  565 	mov	r4,a
      000289 08               [12]  566 	inc	r0
      00028A 86 05            [24]  567 	mov	ar5,@r0
      00028C 8B 82            [24]  568 	mov	dpl,r3
      00028E 8C 83            [24]  569 	mov	dph,r4
      000290 8D F0            [24]  570 	mov	b,r5
      000292 12r00r00         [24]  571 	lcall	__gptrget
      000295 75 F0 02         [24]  572 	mov	b,#0x02
      000298 A4               [48]  573 	mul	ab
      000299 24r0C            [12]  574 	add	a,#___month
      00029B F5 82            [12]  575 	mov	dpl,a
      00029D 74s00            [12]  576 	mov	a,#(___month >> 8)
      00029F 35 F0            [12]  577 	addc	a,b
      0002A1 F5 83            [12]  578 	mov	dph,a
      0002A3 E4               [12]  579 	clr	a
      0002A4 93               [24]  580 	movc	a,@a+dptr
      0002A5 FC               [12]  581 	mov	r4,a
      0002A6 A3               [24]  582 	inc	dptr
      0002A7 E4               [12]  583 	clr	a
      0002A8 93               [24]  584 	movc	a,@a+dptr
      0002A9 FD               [12]  585 	mov	r5,a
      0002AA E5*00            [12]  586 	mov	a,_bp
      0002AC 24 0D            [12]  587 	add	a,#0x0d
      0002AE F8               [12]  588 	mov	r0,a
      0002AF A6 04            [24]  589 	mov	@r0,ar4
      0002B1 08               [12]  590 	inc	r0
      0002B2 A6 05            [24]  591 	mov	@r0,ar5
      0002B4 08               [12]  592 	inc	r0
      0002B5 76 80            [12]  593 	mov	@r0,#0x80
      0002B7 A8*00            [24]  594 	mov	r0,_bp
      0002B9 08               [12]  595 	inc	r0
      0002BA 74 07            [12]  596 	mov	a,#0x07
      0002BC 26               [12]  597 	add	a,@r0
      0002BD FA               [12]  598 	mov	r2,a
      0002BE E4               [12]  599 	clr	a
      0002BF 08               [12]  600 	inc	r0
      0002C0 36               [12]  601 	addc	a,@r0
      0002C1 FC               [12]  602 	mov	r4,a
      0002C2 08               [12]  603 	inc	r0
      0002C3 86 05            [24]  604 	mov	ar5,@r0
      0002C5 8A 82            [24]  605 	mov	dpl,r2
      0002C7 8C 83            [24]  606 	mov	dph,r4
      0002C9 8D F0            [24]  607 	mov	b,r5
      0002CB 12r00r00         [24]  608 	lcall	__gptrget
      0002CE 75 F0 02         [24]  609 	mov	b,#0x02
      0002D1 A4               [48]  610 	mul	ab
      0002D2 24r24            [12]  611 	add	a,#___day
      0002D4 F5 82            [12]  612 	mov	dpl,a
      0002D6 74s00            [12]  613 	mov	a,#(___day >> 8)
      0002D8 35 F0            [12]  614 	addc	a,b
      0002DA F5 83            [12]  615 	mov	dph,a
      0002DC E4               [12]  616 	clr	a
      0002DD 93               [24]  617 	movc	a,@a+dptr
      0002DE FC               [12]  618 	mov	r4,a
      0002DF A3               [24]  619 	inc	dptr
      0002E0 E4               [12]  620 	clr	a
      0002E1 93               [24]  621 	movc	a,@a+dptr
      0002E2 FD               [12]  622 	mov	r5,a
      0002E3 7B 80            [12]  623 	mov	r3,#0x80
                                    624 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      0002E5 C0 07            [24]  625 	push	ar7
      0002E7 C0 06            [24]  626 	push	ar6
      0002E9 E5*00            [12]  627 	mov	a,_bp
      0002EB 24 04            [12]  628 	add	a,#0x04
      0002ED F8               [12]  629 	mov	r0,a
      0002EE E6               [12]  630 	mov	a,@r0
      0002EF C0 E0            [24]  631 	push	acc
      0002F1 08               [12]  632 	inc	r0
      0002F2 E6               [12]  633 	mov	a,@r0
      0002F3 C0 E0            [24]  634 	push	acc
      0002F5 E5*00            [12]  635 	mov	a,_bp
      0002F7 24 06            [12]  636 	add	a,#0x06
      0002F9 F8               [12]  637 	mov	r0,a
      0002FA E6               [12]  638 	mov	a,@r0
      0002FB C0 E0            [24]  639 	push	acc
      0002FD 08               [12]  640 	inc	r0
      0002FE E6               [12]  641 	mov	a,@r0
      0002FF C0 E0            [24]  642 	push	acc
      000301 E5*00            [12]  643 	mov	a,_bp
      000303 24 09            [12]  644 	add	a,#0x09
      000305 F8               [12]  645 	mov	r0,a
      000306 E6               [12]  646 	mov	a,@r0
      000307 C0 E0            [24]  647 	push	acc
      000309 08               [12]  648 	inc	r0
      00030A E6               [12]  649 	mov	a,@r0
      00030B C0 E0            [24]  650 	push	acc
      00030D E5*00            [12]  651 	mov	a,_bp
      00030F 24 0B            [12]  652 	add	a,#0x0b
      000311 F8               [12]  653 	mov	r0,a
      000312 E6               [12]  654 	mov	a,@r0
      000313 C0 E0            [24]  655 	push	acc
      000315 08               [12]  656 	inc	r0
      000316 E6               [12]  657 	mov	a,@r0
      000317 C0 E0            [24]  658 	push	acc
      000319 E5*00            [12]  659 	mov	a,_bp
      00031B 24 0D            [12]  660 	add	a,#0x0d
      00031D F8               [12]  661 	mov	r0,a
      00031E E6               [12]  662 	mov	a,@r0
      00031F C0 E0            [24]  663 	push	acc
      000321 08               [12]  664 	inc	r0
      000322 E6               [12]  665 	mov	a,@r0
      000323 C0 E0            [24]  666 	push	acc
      000325 08               [12]  667 	inc	r0
      000326 E6               [12]  668 	mov	a,@r0
      000327 C0 E0            [24]  669 	push	acc
      000329 C0 04            [24]  670 	push	ar4
      00032B C0 05            [24]  671 	push	ar5
      00032D C0 03            [24]  672 	push	ar3
      00032F 74r32            [12]  673 	mov	a,#__str_0
      000331 C0 E0            [24]  674 	push	acc
      000333 74s00            [12]  675 	mov	a,#(__str_0 >> 8)
      000335 C0 E0            [24]  676 	push	acc
      000337 EB               [12]  677 	mov	a,r3
      000338 C0 E0            [24]  678 	push	acc
      00033A 74r00            [12]  679 	mov	a,#_ascTimeBuffer
      00033C C0 E0            [24]  680 	push	acc
      00033E 74s00            [12]  681 	mov	a,#(_ascTimeBuffer >> 8)
      000340 C0 E0            [24]  682 	push	acc
      000342 E4               [12]  683 	clr	a
      000343 C0 E0            [24]  684 	push	acc
      000345 78r00            [12]  685 	mov	r0,#_sprintf
      000347 79s00            [12]  686 	mov	r1,#(_sprintf >> 8)
      000349 7As00            [12]  687 	mov	r2,#(_sprintf >> 16)
      00034B 12r00r00         [24]  688 	lcall	__sdcc_banked_call
      00034E E5 81            [12]  689 	mov	a,sp
      000350 24 EA            [12]  690 	add	a,#0xea
      000352 F5 81            [12]  691 	mov	sp,a
                                    692 ;	time.c:101: return ascTimeBuffer;
      000354 90r00r00         [24]  693 	mov	dptr,#_ascTimeBuffer
      000357 75 F0 00         [24]  694 	mov	b,#0x00
      00035A 85*00 81         [24]  695 	mov	sp,_bp
      00035D D0*00            [24]  696 	pop	_bp
      00035F 02r00r00         [24]  697 	ljmp	__sdcc_banked_ret
                                    698 ;------------------------------------------------------------
                                    699 ;Allocation info for local variables in function 'ctime'
                                    700 ;------------------------------------------------------------
                                    701 ;timep                     Allocated to registers r5 r6 r7 
                                    702 ;------------------------------------------------------------
                                    703 ;	time.c:104: char *ctime(time_t *timep) {
                                    704 ;	-----------------------------------------
                                    705 ;	 function ctime
                                    706 ;	-----------------------------------------
      000362                        707 _ctime:
                                    708 ;	time.c:105: return asctime(localtime(timep));
      000362 78r7D            [12]  709 	mov	r0,#_localtime
      000364 79s03            [12]  710 	mov	r1,#(_localtime >> 8)
      000366 7As00            [12]  711 	mov	r2,#(_localtime >> 16)
      000368 12r00r00         [24]  712 	lcall	__sdcc_banked_call
      00036B 78rB5            [12]  713 	mov	r0,#_asctime
      00036D 79s01            [12]  714 	mov	r1,#(_asctime >> 8)
      00036F 7As00            [12]  715 	mov	r2,#(_asctime >> 16)
      000371 12r00r00         [24]  716 	lcall	__sdcc_banked_call
      000374 AD 82            [24]  717 	mov	r5,dpl
      000376 AE 83            [24]  718 	mov	r6,dph
      000378 AF F0            [24]  719 	mov	r7,b
      00037A 02r00r00         [24]  720 	ljmp	__sdcc_banked_ret
                                    721 ;------------------------------------------------------------
                                    722 ;Allocation info for local variables in function 'localtime'
                                    723 ;------------------------------------------------------------
                                    724 ;timep                     Allocated to registers r5 r6 r7 
                                    725 ;------------------------------------------------------------
                                    726 ;	time.c:121: struct tm *localtime(time_t *timep) {
                                    727 ;	-----------------------------------------
                                    728 ;	 function localtime
                                    729 ;	-----------------------------------------
      00037D                        730 _localtime:
                                    731 ;	time.c:122: return gmtime(timep);
      00037D 78r8F            [12]  732 	mov	r0,#_gmtime
      00037F 79s03            [12]  733 	mov	r1,#(_gmtime >> 8)
      000381 7As00            [12]  734 	mov	r2,#(_gmtime >> 16)
      000383 12r00r00         [24]  735 	lcall	__sdcc_banked_call
      000386 AD 82            [24]  736 	mov	r5,dpl
      000388 AE 83            [24]  737 	mov	r6,dph
      00038A AF F0            [24]  738 	mov	r7,b
      00038C 02r00r00         [24]  739 	ljmp	__sdcc_banked_ret
                                    740 ;------------------------------------------------------------
                                    741 ;Allocation info for local variables in function 'gmtime'
                                    742 ;------------------------------------------------------------
                                    743 ;timep                     Allocated to registers r5 r6 r7 
                                    744 ;epoch                     Allocated to stack - _bp +5
                                    745 ;year                      Allocated to registers r2 r3 
                                    746 ;month                     Allocated to registers r5 
                                    747 ;monthLength               Allocated to registers r4 
                                    748 ;days                      Allocated to stack - _bp +9
                                    749 ;sloc0                     Allocated to stack - _bp +1
                                    750 ;------------------------------------------------------------
                                    751 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                                    752 ;	-----------------------------------------
                                    753 ;	 function gmtime
                                    754 ;	-----------------------------------------
      00038F                        755 _gmtime:
      00038F C0*00            [24]  756 	push	_bp
      000391 E5 81            [12]  757 	mov	a,sp
      000393 F5*00            [12]  758 	mov	_bp,a
      000395 24 0C            [12]  759 	add	a,#0x0C
      000397 F5 81            [12]  760 	mov	sp,a
                                    761 ;	time.c:126: unsigned long epoch=*timep;
      000399 E5*00            [12]  762 	mov	a,_bp
      00039B 24 05            [12]  763 	add	a,#0x05
      00039D F8               [12]  764 	mov	r0,a
      00039E 12r00r00         [24]  765 	lcall	__gptrget
      0003A1 F6               [12]  766 	mov	@r0,a
      0003A2 A3               [24]  767 	inc	dptr
      0003A3 12r00r00         [24]  768 	lcall	__gptrget
      0003A6 08               [12]  769 	inc	r0
      0003A7 F6               [12]  770 	mov	@r0,a
      0003A8 A3               [24]  771 	inc	dptr
      0003A9 12r00r00         [24]  772 	lcall	__gptrget
      0003AC 08               [12]  773 	inc	r0
      0003AD F6               [12]  774 	mov	@r0,a
      0003AE A3               [24]  775 	inc	dptr
      0003AF 12r00r00         [24]  776 	lcall	__gptrget
      0003B2 08               [12]  777 	inc	r0
      0003B3 F6               [12]  778 	mov	@r0,a
                                    779 ;	time.c:131: lastTime.tm_sec=epoch%60;
      0003B4 74 3C            [12]  780 	mov	a,#0x3C
      0003B6 C0 E0            [24]  781 	push	acc
      0003B8 E4               [12]  782 	clr	a
      0003B9 C0 E0            [24]  783 	push	acc
      0003BB C0 E0            [24]  784 	push	acc
      0003BD C0 E0            [24]  785 	push	acc
      0003BF E5*00            [12]  786 	mov	a,_bp
      0003C1 24 05            [12]  787 	add	a,#0x05
      0003C3 F8               [12]  788 	mov	r0,a
      0003C4 86 82            [24]  789 	mov	dpl,@r0
      0003C6 08               [12]  790 	inc	r0
      0003C7 86 83            [24]  791 	mov	dph,@r0
      0003C9 08               [12]  792 	inc	r0
      0003CA 86 F0            [24]  793 	mov	b,@r0
      0003CC 08               [12]  794 	inc	r0
      0003CD E6               [12]  795 	mov	a,@r0
      0003CE 12r00r00         [24]  796 	lcall	__modulong
      0003D1 AA 82            [24]  797 	mov	r2,dpl
      0003D3 E5 81            [12]  798 	mov	a,sp
      0003D5 24 FC            [12]  799 	add	a,#0xfc
      0003D7 F5 81            [12]  800 	mov	sp,a
      0003D9 90r00r20         [24]  801 	mov	dptr,#_lastTime
      0003DC EA               [12]  802 	mov	a,r2
      0003DD F0               [24]  803 	movx	@dptr,a
                                    804 ;	time.c:132: epoch/=60; // now it is minutes
      0003DE 74 3C            [12]  805 	mov	a,#0x3C
      0003E0 C0 E0            [24]  806 	push	acc
      0003E2 E4               [12]  807 	clr	a
      0003E3 C0 E0            [24]  808 	push	acc
      0003E5 C0 E0            [24]  809 	push	acc
      0003E7 C0 E0            [24]  810 	push	acc
      0003E9 E5*00            [12]  811 	mov	a,_bp
      0003EB 24 05            [12]  812 	add	a,#0x05
      0003ED F8               [12]  813 	mov	r0,a
      0003EE 86 82            [24]  814 	mov	dpl,@r0
      0003F0 08               [12]  815 	inc	r0
      0003F1 86 83            [24]  816 	mov	dph,@r0
      0003F3 08               [12]  817 	inc	r0
      0003F4 86 F0            [24]  818 	mov	b,@r0
      0003F6 08               [12]  819 	inc	r0
      0003F7 E6               [12]  820 	mov	a,@r0
      0003F8 12r00r00         [24]  821 	lcall	__divulong
      0003FB AC 82            [24]  822 	mov	r4,dpl
      0003FD AD 83            [24]  823 	mov	r5,dph
      0003FF AE F0            [24]  824 	mov	r6,b
      000401 FF               [12]  825 	mov	r7,a
      000402 E5 81            [12]  826 	mov	a,sp
      000404 24 FC            [12]  827 	add	a,#0xfc
      000406 F5 81            [12]  828 	mov	sp,a
      000408 E5*00            [12]  829 	mov	a,_bp
      00040A 24 05            [12]  830 	add	a,#0x05
      00040C F8               [12]  831 	mov	r0,a
      00040D A6 04            [24]  832 	mov	@r0,ar4
      00040F 08               [12]  833 	inc	r0
      000410 A6 05            [24]  834 	mov	@r0,ar5
      000412 08               [12]  835 	inc	r0
      000413 A6 06            [24]  836 	mov	@r0,ar6
      000415 08               [12]  837 	inc	r0
      000416 A6 07            [24]  838 	mov	@r0,ar7
                                    839 ;	time.c:133: lastTime.tm_min=epoch%60;
      000418 74 3C            [12]  840 	mov	a,#0x3C
      00041A C0 E0            [24]  841 	push	acc
      00041C E4               [12]  842 	clr	a
      00041D C0 E0            [24]  843 	push	acc
      00041F C0 E0            [24]  844 	push	acc
      000421 C0 E0            [24]  845 	push	acc
      000423 E5*00            [12]  846 	mov	a,_bp
      000425 24 05            [12]  847 	add	a,#0x05
      000427 F8               [12]  848 	mov	r0,a
      000428 86 82            [24]  849 	mov	dpl,@r0
      00042A 08               [12]  850 	inc	r0
      00042B 86 83            [24]  851 	mov	dph,@r0
      00042D 08               [12]  852 	inc	r0
      00042E 86 F0            [24]  853 	mov	b,@r0
      000430 08               [12]  854 	inc	r0
      000431 E6               [12]  855 	mov	a,@r0
      000432 12r00r00         [24]  856 	lcall	__modulong
      000435 AC 82            [24]  857 	mov	r4,dpl
      000437 E5 81            [12]  858 	mov	a,sp
      000439 24 FC            [12]  859 	add	a,#0xfc
      00043B F5 81            [12]  860 	mov	sp,a
      00043D 90r00r21         [24]  861 	mov	dptr,#(_lastTime + 0x0001)
      000440 EC               [12]  862 	mov	a,r4
      000441 F0               [24]  863 	movx	@dptr,a
                                    864 ;	time.c:134: epoch/=60; // now it is hours
      000442 74 3C            [12]  865 	mov	a,#0x3C
      000444 C0 E0            [24]  866 	push	acc
      000446 E4               [12]  867 	clr	a
      000447 C0 E0            [24]  868 	push	acc
      000449 C0 E0            [24]  869 	push	acc
      00044B C0 E0            [24]  870 	push	acc
      00044D E5*00            [12]  871 	mov	a,_bp
      00044F 24 05            [12]  872 	add	a,#0x05
      000451 F8               [12]  873 	mov	r0,a
      000452 86 82            [24]  874 	mov	dpl,@r0
      000454 08               [12]  875 	inc	r0
      000455 86 83            [24]  876 	mov	dph,@r0
      000457 08               [12]  877 	inc	r0
      000458 86 F0            [24]  878 	mov	b,@r0
      00045A 08               [12]  879 	inc	r0
      00045B E6               [12]  880 	mov	a,@r0
      00045C 12r00r00         [24]  881 	lcall	__divulong
      00045F AC 82            [24]  882 	mov	r4,dpl
      000461 AD 83            [24]  883 	mov	r5,dph
      000463 AE F0            [24]  884 	mov	r6,b
      000465 FF               [12]  885 	mov	r7,a
      000466 E5 81            [12]  886 	mov	a,sp
      000468 24 FC            [12]  887 	add	a,#0xfc
      00046A F5 81            [12]  888 	mov	sp,a
      00046C E5*00            [12]  889 	mov	a,_bp
      00046E 24 05            [12]  890 	add	a,#0x05
      000470 F8               [12]  891 	mov	r0,a
      000471 A6 04            [24]  892 	mov	@r0,ar4
      000473 08               [12]  893 	inc	r0
      000474 A6 05            [24]  894 	mov	@r0,ar5
      000476 08               [12]  895 	inc	r0
      000477 A6 06            [24]  896 	mov	@r0,ar6
      000479 08               [12]  897 	inc	r0
      00047A A6 07            [24]  898 	mov	@r0,ar7
                                    899 ;	time.c:135: lastTime.tm_hour=epoch%24;
      00047C 74 18            [12]  900 	mov	a,#0x18
      00047E C0 E0            [24]  901 	push	acc
      000480 E4               [12]  902 	clr	a
      000481 C0 E0            [24]  903 	push	acc
      000483 C0 E0            [24]  904 	push	acc
      000485 C0 E0            [24]  905 	push	acc
      000487 E5*00            [12]  906 	mov	a,_bp
      000489 24 05            [12]  907 	add	a,#0x05
      00048B F8               [12]  908 	mov	r0,a
      00048C 86 82            [24]  909 	mov	dpl,@r0
      00048E 08               [12]  910 	inc	r0
      00048F 86 83            [24]  911 	mov	dph,@r0
      000491 08               [12]  912 	inc	r0
      000492 86 F0            [24]  913 	mov	b,@r0
      000494 08               [12]  914 	inc	r0
      000495 E6               [12]  915 	mov	a,@r0
      000496 12r00r00         [24]  916 	lcall	__modulong
      000499 AC 82            [24]  917 	mov	r4,dpl
      00049B E5 81            [12]  918 	mov	a,sp
      00049D 24 FC            [12]  919 	add	a,#0xfc
      00049F F5 81            [12]  920 	mov	sp,a
      0004A1 90r00r22         [24]  921 	mov	dptr,#(_lastTime + 0x0002)
      0004A4 EC               [12]  922 	mov	a,r4
      0004A5 F0               [24]  923 	movx	@dptr,a
                                    924 ;	time.c:136: epoch/=24; // now it is days
      0004A6 74 18            [12]  925 	mov	a,#0x18
      0004A8 C0 E0            [24]  926 	push	acc
      0004AA E4               [12]  927 	clr	a
      0004AB C0 E0            [24]  928 	push	acc
      0004AD C0 E0            [24]  929 	push	acc
      0004AF C0 E0            [24]  930 	push	acc
      0004B1 E5*00            [12]  931 	mov	a,_bp
      0004B3 24 05            [12]  932 	add	a,#0x05
      0004B5 F8               [12]  933 	mov	r0,a
      0004B6 86 82            [24]  934 	mov	dpl,@r0
      0004B8 08               [12]  935 	inc	r0
      0004B9 86 83            [24]  936 	mov	dph,@r0
      0004BB 08               [12]  937 	inc	r0
      0004BC 86 F0            [24]  938 	mov	b,@r0
      0004BE 08               [12]  939 	inc	r0
      0004BF E6               [12]  940 	mov	a,@r0
      0004C0 12r00r00         [24]  941 	lcall	__divulong
      0004C3 AC 82            [24]  942 	mov	r4,dpl
      0004C5 AD 83            [24]  943 	mov	r5,dph
      0004C7 AE F0            [24]  944 	mov	r6,b
      0004C9 FF               [12]  945 	mov	r7,a
      0004CA E5 81            [12]  946 	mov	a,sp
      0004CC 24 FC            [12]  947 	add	a,#0xfc
      0004CE F5 81            [12]  948 	mov	sp,a
      0004D0 E5*00            [12]  949 	mov	a,_bp
      0004D2 24 05            [12]  950 	add	a,#0x05
      0004D4 F8               [12]  951 	mov	r0,a
      0004D5 A6 04            [24]  952 	mov	@r0,ar4
      0004D7 08               [12]  953 	inc	r0
      0004D8 A6 05            [24]  954 	mov	@r0,ar5
      0004DA 08               [12]  955 	inc	r0
      0004DB A6 06            [24]  956 	mov	@r0,ar6
      0004DD 08               [12]  957 	inc	r0
      0004DE A6 07            [24]  958 	mov	@r0,ar7
                                    959 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
      0004E0 E5*00            [12]  960 	mov	a,_bp
      0004E2 24 05            [12]  961 	add	a,#0x05
      0004E4 F8               [12]  962 	mov	r0,a
      0004E5 74 04            [12]  963 	mov	a,#0x04
      0004E7 26               [12]  964 	add	a,@r0
      0004E8 FC               [12]  965 	mov	r4,a
      0004E9 E4               [12]  966 	clr	a
      0004EA 08               [12]  967 	inc	r0
      0004EB 36               [12]  968 	addc	a,@r0
      0004EC FD               [12]  969 	mov	r5,a
      0004ED E4               [12]  970 	clr	a
      0004EE 08               [12]  971 	inc	r0
      0004EF 36               [12]  972 	addc	a,@r0
      0004F0 FE               [12]  973 	mov	r6,a
      0004F1 E4               [12]  974 	clr	a
      0004F2 08               [12]  975 	inc	r0
      0004F3 36               [12]  976 	addc	a,@r0
      0004F4 FF               [12]  977 	mov	r7,a
      0004F5 74 07            [12]  978 	mov	a,#0x07
      0004F7 C0 E0            [24]  979 	push	acc
      0004F9 E4               [12]  980 	clr	a
      0004FA C0 E0            [24]  981 	push	acc
      0004FC C0 E0            [24]  982 	push	acc
      0004FE C0 E0            [24]  983 	push	acc
      000500 8C 82            [24]  984 	mov	dpl,r4
      000502 8D 83            [24]  985 	mov	dph,r5
      000504 8E F0            [24]  986 	mov	b,r6
      000506 EF               [12]  987 	mov	a,r7
      000507 12r00r00         [24]  988 	lcall	__modulong
      00050A AC 82            [24]  989 	mov	r4,dpl
      00050C AD 83            [24]  990 	mov	r5,dph
      00050E AE F0            [24]  991 	mov	r6,b
      000510 FF               [12]  992 	mov	r7,a
      000511 E5 81            [12]  993 	mov	a,sp
      000513 24 FC            [12]  994 	add	a,#0xfc
      000515 F5 81            [12]  995 	mov	sp,a
      000517 90r00r27         [24]  996 	mov	dptr,#(_lastTime + 0x0007)
      00051A EC               [12]  997 	mov	a,r4
      00051B F0               [24]  998 	movx	@dptr,a
                                    999 ;	time.c:140: days=0;
      00051C E5*00            [12] 1000 	mov	a,_bp
      00051E 24 09            [12] 1001 	add	a,#0x09
      000520 F8               [12] 1002 	mov	r0,a
      000521 E4               [12] 1003 	clr	a
      000522 F6               [12] 1004 	mov	@r0,a
      000523 08               [12] 1005 	inc	r0
      000524 F6               [12] 1006 	mov	@r0,a
      000525 08               [12] 1007 	inc	r0
      000526 F6               [12] 1008 	mov	@r0,a
      000527 08               [12] 1009 	inc	r0
      000528 F6               [12] 1010 	mov	@r0,a
                                   1011 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      000529 7A B2            [12] 1012 	mov	r2,#0xB2
      00052B 7B 07            [12] 1013 	mov	r3,#0x07
      00052D                       1014 00101$:
      00052D 74 03            [12] 1015 	mov	a,#0x03
      00052F 5A               [12] 1016 	anl	a,r2
      000530 FE               [12] 1017 	mov	r6,a
      000531 7F 00            [12] 1018 	mov	r7,#0x00
      000533 4F               [12] 1019 	orl	a,r7
      000534 B4 01 00         [24] 1020 	cjne	a,#0x01,00148$
      000537                       1021 00148$:
      000537 E4               [12] 1022 	clr	a
      000538 33               [12] 1023 	rlc	a
      000539 FE               [12] 1024 	mov	r6,a
      00053A 60 06            [24] 1025 	jz	00118$
      00053C 7E 6E            [12] 1026 	mov	r6,#0x6E
      00053E 7F 01            [12] 1027 	mov	r7,#0x01
      000540 80 04            [24] 1028 	sjmp	00119$
      000542                       1029 00118$:
      000542 7E 6D            [12] 1030 	mov	r6,#0x6D
      000544 7F 01            [12] 1031 	mov	r7,#0x01
      000546                       1032 00119$:
      000546 EF               [12] 1033 	mov	a,r7
      000547 33               [12] 1034 	rlc	a
      000548 95 E0            [12] 1035 	subb	a,acc
      00054A FD               [12] 1036 	mov	r5,a
      00054B FC               [12] 1037 	mov	r4,a
      00054C E5*00            [12] 1038 	mov	a,_bp
      00054E 24 09            [12] 1039 	add	a,#0x09
      000550 F8               [12] 1040 	mov	r0,a
      000551 EE               [12] 1041 	mov	a,r6
      000552 26               [12] 1042 	add	a,@r0
      000553 FE               [12] 1043 	mov	r6,a
      000554 EF               [12] 1044 	mov	a,r7
      000555 08               [12] 1045 	inc	r0
      000556 36               [12] 1046 	addc	a,@r0
      000557 FF               [12] 1047 	mov	r7,a
      000558 ED               [12] 1048 	mov	a,r5
      000559 08               [12] 1049 	inc	r0
      00055A 36               [12] 1050 	addc	a,@r0
      00055B FD               [12] 1051 	mov	r5,a
      00055C EC               [12] 1052 	mov	a,r4
      00055D 08               [12] 1053 	inc	r0
      00055E 36               [12] 1054 	addc	a,@r0
      00055F FC               [12] 1055 	mov	r4,a
      000560 E5*00            [12] 1056 	mov	a,_bp
      000562 24 09            [12] 1057 	add	a,#0x09
      000564 F8               [12] 1058 	mov	r0,a
      000565 A6 06            [24] 1059 	mov	@r0,ar6
      000567 08               [12] 1060 	inc	r0
      000568 A6 07            [24] 1061 	mov	@r0,ar7
      00056A 08               [12] 1062 	inc	r0
      00056B A6 05            [24] 1063 	mov	@r0,ar5
      00056D 08               [12] 1064 	inc	r0
      00056E A6 04            [24] 1065 	mov	@r0,ar4
      000570 E5*00            [12] 1066 	mov	a,_bp
      000572 24 05            [12] 1067 	add	a,#0x05
      000574 F8               [12] 1068 	mov	r0,a
      000575 C3               [12] 1069 	clr	c
      000576 E6               [12] 1070 	mov	a,@r0
      000577 9E               [12] 1071 	subb	a,r6
      000578 08               [12] 1072 	inc	r0
      000579 E6               [12] 1073 	mov	a,@r0
      00057A 9F               [12] 1074 	subb	a,r7
      00057B 08               [12] 1075 	inc	r0
      00057C E6               [12] 1076 	mov	a,@r0
      00057D 9D               [12] 1077 	subb	a,r5
      00057E 08               [12] 1078 	inc	r0
      00057F E6               [12] 1079 	mov	a,@r0
      000580 9C               [12] 1080 	subb	a,r4
      000581 40 07            [24] 1081 	jc	00103$
                                   1082 ;	time.c:142: year++;
      000583 0A               [12] 1083 	inc	r2
      000584 BA 00 A6         [24] 1084 	cjne	r2,#0x00,00101$
      000587 0B               [12] 1085 	inc	r3
      000588 80 A3            [24] 1086 	sjmp	00101$
      00058A                       1087 00103$:
                                   1088 ;	time.c:144: lastTime.tm_year=year-1900;
      00058A EA               [12] 1089 	mov	a,r2
      00058B 24 94            [12] 1090 	add	a,#0x94
      00058D FE               [12] 1091 	mov	r6,a
      00058E EB               [12] 1092 	mov	a,r3
      00058F 34 F8            [12] 1093 	addc	a,#0xF8
      000591 FF               [12] 1094 	mov	r7,a
      000592 90r00r25         [24] 1095 	mov	dptr,#(_lastTime + 0x0005)
      000595 EE               [12] 1096 	mov	a,r6
      000596 F0               [24] 1097 	movx	@dptr,a
      000597 EF               [12] 1098 	mov	a,r7
      000598 A3               [24] 1099 	inc	dptr
      000599 F0               [24] 1100 	movx	@dptr,a
                                   1101 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
      00059A 74 03            [12] 1102 	mov	a,#0x03
      00059C 5A               [12] 1103 	anl	a,r2
      00059D FE               [12] 1104 	mov	r6,a
      00059E 7F 00            [12] 1105 	mov	r7,#0x00
      0005A0 4F               [12] 1106 	orl	a,r7
      0005A1 B4 01 00         [24] 1107 	cjne	a,#0x01,00152$
      0005A4                       1108 00152$:
      0005A4 E4               [12] 1109 	clr	a
      0005A5 33               [12] 1110 	rlc	a
      0005A6 FD               [12] 1111 	mov	r5,a
      0005A7 60 06            [24] 1112 	jz	00120$
      0005A9 7C 6E            [12] 1113 	mov	r4,#0x6E
      0005AB 7D 01            [12] 1114 	mov	r5,#0x01
      0005AD 80 04            [24] 1115 	sjmp	00121$
      0005AF                       1116 00120$:
      0005AF 7C 6D            [12] 1117 	mov	r4,#0x6D
      0005B1 7D 01            [12] 1118 	mov	r5,#0x01
      0005B3                       1119 00121$:
      0005B3 ED               [12] 1120 	mov	a,r5
      0005B4 33               [12] 1121 	rlc	a
      0005B5 95 E0            [12] 1122 	subb	a,acc
      0005B7 FB               [12] 1123 	mov	r3,a
      0005B8 FA               [12] 1124 	mov	r2,a
      0005B9 E5*00            [12] 1125 	mov	a,_bp
      0005BB 24 09            [12] 1126 	add	a,#0x09
      0005BD F8               [12] 1127 	mov	r0,a
      0005BE E6               [12] 1128 	mov	a,@r0
      0005BF C3               [12] 1129 	clr	c
      0005C0 9C               [12] 1130 	subb	a,r4
      0005C1 F6               [12] 1131 	mov	@r0,a
      0005C2 08               [12] 1132 	inc	r0
      0005C3 E6               [12] 1133 	mov	a,@r0
      0005C4 9D               [12] 1134 	subb	a,r5
      0005C5 F6               [12] 1135 	mov	@r0,a
      0005C6 08               [12] 1136 	inc	r0
      0005C7 E6               [12] 1137 	mov	a,@r0
      0005C8 9B               [12] 1138 	subb	a,r3
      0005C9 F6               [12] 1139 	mov	@r0,a
      0005CA 08               [12] 1140 	inc	r0
      0005CB E6               [12] 1141 	mov	a,@r0
      0005CC 9A               [12] 1142 	subb	a,r2
      0005CD F6               [12] 1143 	mov	@r0,a
                                   1144 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
      0005CE E5*00            [12] 1145 	mov	a,_bp
      0005D0 24 05            [12] 1146 	add	a,#0x05
      0005D2 F8               [12] 1147 	mov	r0,a
      0005D3 E5*00            [12] 1148 	mov	a,_bp
      0005D5 24 09            [12] 1149 	add	a,#0x09
      0005D7 F9               [12] 1150 	mov	r1,a
      0005D8 E6               [12] 1151 	mov	a,@r0
      0005D9 C3               [12] 1152 	clr	c
      0005DA 97               [12] 1153 	subb	a,@r1
      0005DB F6               [12] 1154 	mov	@r0,a
      0005DC 08               [12] 1155 	inc	r0
      0005DD E6               [12] 1156 	mov	a,@r0
      0005DE 09               [12] 1157 	inc	r1
      0005DF 97               [12] 1158 	subb	a,@r1
      0005E0 F6               [12] 1159 	mov	@r0,a
      0005E1 08               [12] 1160 	inc	r0
      0005E2 E6               [12] 1161 	mov	a,@r0
      0005E3 09               [12] 1162 	inc	r1
      0005E4 97               [12] 1163 	subb	a,@r1
      0005E5 F6               [12] 1164 	mov	@r0,a
      0005E6 08               [12] 1165 	inc	r0
      0005E7 E6               [12] 1166 	mov	a,@r0
      0005E8 09               [12] 1167 	inc	r1
      0005E9 97               [12] 1168 	subb	a,@r1
      0005EA F6               [12] 1169 	mov	@r0,a
                                   1170 ;	time.c:148: lastTime.tm_yday=epoch;
      0005EB E5*00            [12] 1171 	mov	a,_bp
      0005ED 24 05            [12] 1172 	add	a,#0x05
      0005EF F8               [12] 1173 	mov	r0,a
      0005F0 86 04            [24] 1174 	mov	ar4,@r0
      0005F2 08               [12] 1175 	inc	r0
      0005F3 86 05            [24] 1176 	mov	ar5,@r0
      0005F5 90r00r28         [24] 1177 	mov	dptr,#(_lastTime + 0x0008)
      0005F8 EC               [12] 1178 	mov	a,r4
      0005F9 F0               [24] 1179 	movx	@dptr,a
      0005FA ED               [12] 1180 	mov	a,r5
      0005FB A3               [24] 1181 	inc	dptr
      0005FC F0               [24] 1182 	movx	@dptr,a
                                   1183 ;	time.c:153: for (month=0; month<12; month++) {
      0005FD 7D 00            [12] 1184 	mov	r5,#0x00
      0005FF                       1185 00114$:
                                   1186 ;	time.c:154: if (month==1) { // februari
      0005FF BD 01 0C         [24] 1187 	cjne	r5,#0x01,00108$
                                   1188 ;	time.c:155: if (LEAP_YEAR(year)) {
      000602 EE               [12] 1189 	mov	a,r6
      000603 4F               [12] 1190 	orl	a,r7
      000604 70 04            [24] 1191 	jnz	00105$
                                   1192 ;	time.c:156: monthLength=29;
      000606 7C 1D            [12] 1193 	mov	r4,#0x1D
      000608 80 0A            [24] 1194 	sjmp	00109$
      00060A                       1195 00105$:
                                   1196 ;	time.c:158: monthLength=28;
      00060A 7C 1C            [12] 1197 	mov	r4,#0x1C
      00060C 80 06            [24] 1198 	sjmp	00109$
      00060E                       1199 00108$:
                                   1200 ;	time.c:161: monthLength = monthDays[month];
      00060E ED               [12] 1201 	mov	a,r5
      00060F 90r00r00         [24] 1202 	mov	dptr,#_monthDays
      000612 93               [24] 1203 	movc	a,@a+dptr
      000613 FC               [12] 1204 	mov	r4,a
      000614                       1205 00109$:
                                   1206 ;	time.c:164: if (epoch>=monthLength) {
      000614 A8*00            [24] 1207 	mov	r0,_bp
      000616 08               [12] 1208 	inc	r0
      000617 A6 04            [24] 1209 	mov	@r0,ar4
      000619 08               [12] 1210 	inc	r0
      00061A 76 00            [12] 1211 	mov	@r0,#0x00
      00061C 08               [12] 1212 	inc	r0
      00061D 76 00            [12] 1213 	mov	@r0,#0x00
      00061F 08               [12] 1214 	inc	r0
      000620 76 00            [12] 1215 	mov	@r0,#0x00
      000622 E5*00            [12] 1216 	mov	a,_bp
      000624 24 05            [12] 1217 	add	a,#0x05
      000626 F8               [12] 1218 	mov	r0,a
      000627 A9*00            [24] 1219 	mov	r1,_bp
      000629 09               [12] 1220 	inc	r1
      00062A C3               [12] 1221 	clr	c
      00062B E6               [12] 1222 	mov	a,@r0
      00062C 97               [12] 1223 	subb	a,@r1
      00062D 08               [12] 1224 	inc	r0
      00062E E6               [12] 1225 	mov	a,@r0
      00062F 09               [12] 1226 	inc	r1
      000630 97               [12] 1227 	subb	a,@r1
      000631 08               [12] 1228 	inc	r0
      000632 E6               [12] 1229 	mov	a,@r0
      000633 09               [12] 1230 	inc	r1
      000634 97               [12] 1231 	subb	a,@r1
      000635 08               [12] 1232 	inc	r0
      000636 E6               [12] 1233 	mov	a,@r0
      000637 09               [12] 1234 	inc	r1
      000638 97               [12] 1235 	subb	a,@r1
      000639 40 21            [24] 1236 	jc	00113$
                                   1237 ;	time.c:165: epoch-=monthLength;
      00063B E5*00            [12] 1238 	mov	a,_bp
      00063D 24 05            [12] 1239 	add	a,#0x05
      00063F F8               [12] 1240 	mov	r0,a
      000640 A9*00            [24] 1241 	mov	r1,_bp
      000642 09               [12] 1242 	inc	r1
      000643 E6               [12] 1243 	mov	a,@r0
      000644 C3               [12] 1244 	clr	c
      000645 97               [12] 1245 	subb	a,@r1
      000646 F6               [12] 1246 	mov	@r0,a
      000647 08               [12] 1247 	inc	r0
      000648 E6               [12] 1248 	mov	a,@r0
      000649 09               [12] 1249 	inc	r1
      00064A 97               [12] 1250 	subb	a,@r1
      00064B F6               [12] 1251 	mov	@r0,a
      00064C 08               [12] 1252 	inc	r0
      00064D E6               [12] 1253 	mov	a,@r0
      00064E 09               [12] 1254 	inc	r1
      00064F 97               [12] 1255 	subb	a,@r1
      000650 F6               [12] 1256 	mov	@r0,a
      000651 08               [12] 1257 	inc	r0
      000652 E6               [12] 1258 	mov	a,@r0
      000653 09               [12] 1259 	inc	r1
      000654 97               [12] 1260 	subb	a,@r1
      000655 F6               [12] 1261 	mov	@r0,a
                                   1262 ;	time.c:153: for (month=0; month<12; month++) {
      000656 0D               [12] 1263 	inc	r5
      000657 BD 0C 00         [24] 1264 	cjne	r5,#0x0C,00158$
      00065A                       1265 00158$:
      00065A 40 A3            [24] 1266 	jc	00114$
      00065C                       1267 00113$:
                                   1268 ;	time.c:170: lastTime.tm_mon=month;
      00065C 90r00r24         [24] 1269 	mov	dptr,#(_lastTime + 0x0004)
      00065F ED               [12] 1270 	mov	a,r5
      000660 F0               [24] 1271 	movx	@dptr,a
                                   1272 ;	time.c:171: lastTime.tm_mday=epoch+1;
      000661 E5*00            [12] 1273 	mov	a,_bp
      000663 24 05            [12] 1274 	add	a,#0x05
      000665 F8               [12] 1275 	mov	r0,a
      000666 86 04            [24] 1276 	mov	ar4,@r0
      000668 0C               [12] 1277 	inc	r4
      000669 90r00r23         [24] 1278 	mov	dptr,#(_lastTime + 0x0003)
      00066C EC               [12] 1279 	mov	a,r4
      00066D F0               [24] 1280 	movx	@dptr,a
                                   1281 ;	time.c:173: lastTime.tm_isdst=0;
      00066E 90r00r2A         [24] 1282 	mov	dptr,#(_lastTime + 0x000a)
      000671 E4               [12] 1283 	clr	a
      000672 F0               [24] 1284 	movx	@dptr,a
                                   1285 ;	time.c:175: return &lastTime;
      000673 90r00r20         [24] 1286 	mov	dptr,#_lastTime
      000676 75 F0 00         [24] 1287 	mov	b,#0x00
      000679 85*00 81         [24] 1288 	mov	sp,_bp
      00067C D0*00            [24] 1289 	pop	_bp
      00067E 02r00r00         [24] 1290 	ljmp	__sdcc_banked_ret
                                   1291 ;------------------------------------------------------------
                                   1292 ;Allocation info for local variables in function 'mktime'
                                   1293 ;------------------------------------------------------------
                                   1294 ;timeptr                   Allocated to stack - _bp +1
                                   1295 ;year                      Allocated to stack - _bp +12
                                   1296 ;month                     Allocated to stack - _bp +4
                                   1297 ;i                         Allocated to stack - _bp +6
                                   1298 ;seconds                   Allocated to stack - _bp +8
                                   1299 ;------------------------------------------------------------
                                   1300 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                                   1301 ;	-----------------------------------------
                                   1302 ;	 function mktime
                                   1303 ;	-----------------------------------------
      000681                       1304 _mktime:
      000681 C0*00            [24] 1305 	push	_bp
      000683 85 81*00         [24] 1306 	mov	_bp,sp
      000686 C0 82            [24] 1307 	push	dpl
      000688 C0 83            [24] 1308 	push	dph
      00068A C0 F0            [24] 1309 	push	b
      00068C E5 81            [12] 1310 	mov	a,sp
      00068E 24 0A            [12] 1311 	add	a,#0x0A
      000690 F5 81            [12] 1312 	mov	sp,a
                                   1313 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      000692 A8*00            [24] 1314 	mov	r0,_bp
      000694 08               [12] 1315 	inc	r0
      000695 74 05            [12] 1316 	mov	a,#0x05
      000697 26               [12] 1317 	add	a,@r0
      000698 FA               [12] 1318 	mov	r2,a
      000699 E4               [12] 1319 	clr	a
      00069A 08               [12] 1320 	inc	r0
      00069B 36               [12] 1321 	addc	a,@r0
      00069C FB               [12] 1322 	mov	r3,a
      00069D 08               [12] 1323 	inc	r0
      00069E 86 04            [24] 1324 	mov	ar4,@r0
      0006A0 8A 82            [24] 1325 	mov	dpl,r2
      0006A2 8B 83            [24] 1326 	mov	dph,r3
      0006A4 8C F0            [24] 1327 	mov	b,r4
      0006A6 12r00r00         [24] 1328 	lcall	__gptrget
      0006A9 FA               [12] 1329 	mov	r2,a
      0006AA A3               [24] 1330 	inc	dptr
      0006AB 12r00r00         [24] 1331 	lcall	__gptrget
      0006AE FB               [12] 1332 	mov	r3,a
      0006AF E5*00            [12] 1333 	mov	a,_bp
      0006B1 24 0C            [12] 1334 	add	a,#0x0c
      0006B3 F8               [12] 1335 	mov	r0,a
      0006B4 74 6C            [12] 1336 	mov	a,#0x6C
      0006B6 2A               [12] 1337 	add	a,r2
      0006B7 F6               [12] 1338 	mov	@r0,a
      0006B8 74 07            [12] 1339 	mov	a,#0x07
      0006BA 3B               [12] 1340 	addc	a,r3
      0006BB 08               [12] 1341 	inc	r0
      0006BC F6               [12] 1342 	mov	@r0,a
      0006BD A8*00            [24] 1343 	mov	r0,_bp
      0006BF 08               [12] 1344 	inc	r0
      0006C0 74 04            [12] 1345 	mov	a,#0x04
      0006C2 26               [12] 1346 	add	a,@r0
      0006C3 FA               [12] 1347 	mov	r2,a
      0006C4 E4               [12] 1348 	clr	a
      0006C5 08               [12] 1349 	inc	r0
      0006C6 36               [12] 1350 	addc	a,@r0
      0006C7 FB               [12] 1351 	mov	r3,a
      0006C8 08               [12] 1352 	inc	r0
      0006C9 86 04            [24] 1353 	mov	ar4,@r0
      0006CB 8A 82            [24] 1354 	mov	dpl,r2
      0006CD 8B 83            [24] 1355 	mov	dph,r3
      0006CF 8C F0            [24] 1356 	mov	b,r4
      0006D1 12r00r00         [24] 1357 	lcall	__gptrget
      0006D4 FA               [12] 1358 	mov	r2,a
      0006D5 E5*00            [12] 1359 	mov	a,_bp
      0006D7 24 04            [12] 1360 	add	a,#0x04
      0006D9 F8               [12] 1361 	mov	r0,a
      0006DA A6 02            [24] 1362 	mov	@r0,ar2
      0006DC 08               [12] 1363 	inc	r0
      0006DD 76 00            [12] 1364 	mov	@r0,#0x00
                                   1365 ;	time.c:183: CheckTime(timeptr);
      0006DF A8*00            [24] 1366 	mov	r0,_bp
      0006E1 08               [12] 1367 	inc	r0
      0006E2 86 82            [24] 1368 	mov	dpl,@r0
      0006E4 08               [12] 1369 	inc	r0
      0006E5 86 83            [24] 1370 	mov	dph,@r0
      0006E7 08               [12] 1371 	inc	r0
      0006E8 86 F0            [24] 1372 	mov	b,@r0
      0006EA 78rB5            [12] 1373 	mov	r0,#_CheckTime
      0006EC 79s00            [12] 1374 	mov	r1,#(_CheckTime >> 8)
      0006EE 7As00            [12] 1375 	mov	r2,#(_CheckTime >> 16)
      0006F0 12r00r00         [24] 1376 	lcall	__sdcc_banked_call
                                   1377 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
      0006F3 E5*00            [12] 1378 	mov	a,_bp
      0006F5 24 0C            [12] 1379 	add	a,#0x0c
      0006F7 F8               [12] 1380 	mov	r0,a
      0006F8 E6               [12] 1381 	mov	a,@r0
      0006F9 24 4E            [12] 1382 	add	a,#0x4E
      0006FB FB               [12] 1383 	mov	r3,a
      0006FC 08               [12] 1384 	inc	r0
      0006FD E6               [12] 1385 	mov	a,@r0
      0006FE 34 F8            [12] 1386 	addc	a,#0xF8
      000700 FA               [12] 1387 	mov	r2,a
      000701 33               [12] 1388 	rlc	a
      000702 95 E0            [12] 1389 	subb	a,acc
      000704 FC               [12] 1390 	mov	r4,a
      000705 FF               [12] 1391 	mov	r7,a
      000706 C0 03            [24] 1392 	push	ar3
      000708 C0 02            [24] 1393 	push	ar2
      00070A C0 04            [24] 1394 	push	ar4
      00070C C0 07            [24] 1395 	push	ar7
      00070E 90 33 80         [24] 1396 	mov	dptr,#0x3380
      000711 75 F0 E1         [24] 1397 	mov	b,#0xE1
      000714 74 01            [12] 1398 	mov	a,#0x01
      000716 12r00r00         [24] 1399 	lcall	__mullong
      000719 AC 82            [24] 1400 	mov	r4,dpl
      00071B AD 83            [24] 1401 	mov	r5,dph
      00071D AE F0            [24] 1402 	mov	r6,b
      00071F FF               [12] 1403 	mov	r7,a
      000720 E5 81            [12] 1404 	mov	a,sp
      000722 24 FC            [12] 1405 	add	a,#0xfc
      000724 F5 81            [12] 1406 	mov	sp,a
      000726 E5*00            [12] 1407 	mov	a,_bp
      000728 24 08            [12] 1408 	add	a,#0x08
      00072A F8               [12] 1409 	mov	r0,a
      00072B A6 04            [24] 1410 	mov	@r0,ar4
      00072D 08               [12] 1411 	inc	r0
      00072E A6 05            [24] 1412 	mov	@r0,ar5
      000730 08               [12] 1413 	inc	r0
      000731 A6 06            [24] 1414 	mov	@r0,ar6
      000733 08               [12] 1415 	inc	r0
      000734 A6 07            [24] 1416 	mov	@r0,ar7
                                   1417 ;	time.c:189: for (i=1970; i<year; i++) {
      000736 E5*00            [12] 1418 	mov	a,_bp
      000738 24 08            [12] 1419 	add	a,#0x08
      00073A F8               [12] 1420 	mov	r0,a
      00073B 86 02            [24] 1421 	mov	ar2,@r0
      00073D 08               [12] 1422 	inc	r0
      00073E 86 03            [24] 1423 	mov	ar3,@r0
      000740 08               [12] 1424 	inc	r0
      000741 86 06            [24] 1425 	mov	ar6,@r0
      000743 08               [12] 1426 	inc	r0
      000744 86 07            [24] 1427 	mov	ar7,@r0
      000746 E5*00            [12] 1428 	mov	a,_bp
      000748 24 06            [12] 1429 	add	a,#0x06
      00074A F8               [12] 1430 	mov	r0,a
      00074B 76 B2            [12] 1431 	mov	@r0,#0xB2
      00074D 08               [12] 1432 	inc	r0
      00074E 76 07            [12] 1433 	mov	@r0,#0x07
      000750                       1434 00110$:
      000750 E5*00            [12] 1435 	mov	a,_bp
      000752 24 06            [12] 1436 	add	a,#0x06
      000754 F8               [12] 1437 	mov	r0,a
      000755 E5*00            [12] 1438 	mov	a,_bp
      000757 24 0C            [12] 1439 	add	a,#0x0c
      000759 F9               [12] 1440 	mov	r1,a
      00075A C3               [12] 1441 	clr	c
      00075B E6               [12] 1442 	mov	a,@r0
      00075C 97               [12] 1443 	subb	a,@r1
      00075D 08               [12] 1444 	inc	r0
      00075E E6               [12] 1445 	mov	a,@r0
      00075F 64 80            [12] 1446 	xrl	a,#0x80
      000761 09               [12] 1447 	inc	r1
      000762 87 F0            [24] 1448 	mov	b,@r1
      000764 63 F0 80         [24] 1449 	xrl	b,#0x80
      000767 95 F0            [12] 1450 	subb	a,b
      000769 50 4C            [24] 1451 	jnc	00124$
                                   1452 ;	time.c:190: if (LEAP_YEAR(i)) {
      00076B C0 07            [24] 1453 	push	ar7
      00076D C0 06            [24] 1454 	push	ar6
      00076F C0 03            [24] 1455 	push	ar3
      000771 C0 02            [24] 1456 	push	ar2
      000773 74 04            [12] 1457 	mov	a,#0x04
      000775 C0 E0            [24] 1458 	push	acc
      000777 E4               [12] 1459 	clr	a
      000778 C0 E0            [24] 1460 	push	acc
      00077A E5*00            [12] 1461 	mov	a,_bp
      00077C 24 06            [12] 1462 	add	a,#0x06
      00077E F8               [12] 1463 	mov	r0,a
      00077F 86 82            [24] 1464 	mov	dpl,@r0
      000781 08               [12] 1465 	inc	r0
      000782 86 83            [24] 1466 	mov	dph,@r0
      000784 12r00r00         [24] 1467 	lcall	__modsint
      000787 AC 82            [24] 1468 	mov	r4,dpl
      000789 AD 83            [24] 1469 	mov	r5,dph
      00078B 15 81            [12] 1470 	dec	sp
      00078D 15 81            [12] 1471 	dec	sp
      00078F D0 02            [24] 1472 	pop	ar2
      000791 D0 03            [24] 1473 	pop	ar3
      000793 D0 06            [24] 1474 	pop	ar6
      000795 D0 07            [24] 1475 	pop	ar7
      000797 EC               [12] 1476 	mov	a,r4
      000798 4D               [12] 1477 	orl	a,r5
      000799 70 0F            [24] 1478 	jnz	00111$
                                   1479 ;	time.c:191: seconds+= 60*60*24L;
      00079B 74 80            [12] 1480 	mov	a,#0x80
      00079D 2A               [12] 1481 	add	a,r2
      00079E FA               [12] 1482 	mov	r2,a
      00079F 74 51            [12] 1483 	mov	a,#0x51
      0007A1 3B               [12] 1484 	addc	a,r3
      0007A2 FB               [12] 1485 	mov	r3,a
      0007A3 74 01            [12] 1486 	mov	a,#0x01
      0007A5 3E               [12] 1487 	addc	a,r6
      0007A6 FE               [12] 1488 	mov	r6,a
      0007A7 E4               [12] 1489 	clr	a
      0007A8 3F               [12] 1490 	addc	a,r7
      0007A9 FF               [12] 1491 	mov	r7,a
      0007AA                       1492 00111$:
                                   1493 ;	time.c:189: for (i=1970; i<year; i++) {
      0007AA E5*00            [12] 1494 	mov	a,_bp
      0007AC 24 06            [12] 1495 	add	a,#0x06
      0007AE F8               [12] 1496 	mov	r0,a
      0007AF 06               [12] 1497 	inc	@r0
      0007B0 B6 00 02         [24] 1498 	cjne	@r0,#0x00,00142$
      0007B3 08               [12] 1499 	inc	r0
      0007B4 06               [12] 1500 	inc	@r0
      0007B5                       1501 00142$:
      0007B5 80 99            [24] 1502 	sjmp	00110$
      0007B7                       1503 00124$:
      0007B7 E5*00            [12] 1504 	mov	a,_bp
      0007B9 24 08            [12] 1505 	add	a,#0x08
      0007BB F8               [12] 1506 	mov	r0,a
      0007BC A6 02            [24] 1507 	mov	@r0,ar2
      0007BE 08               [12] 1508 	inc	r0
      0007BF A6 03            [24] 1509 	mov	@r0,ar3
      0007C1 08               [12] 1510 	inc	r0
      0007C2 A6 06            [24] 1511 	mov	@r0,ar6
      0007C4 08               [12] 1512 	inc	r0
      0007C5 A6 07            [24] 1513 	mov	@r0,ar7
                                   1514 ;	time.c:196: for (i=0; i<month; i++) {
      0007C7 74 04            [12] 1515 	mov	a,#0x04
      0007C9 C0 E0            [24] 1516 	push	acc
      0007CB E4               [12] 1517 	clr	a
      0007CC C0 E0            [24] 1518 	push	acc
      0007CE E5*00            [12] 1519 	mov	a,_bp
      0007D0 24 0C            [12] 1520 	add	a,#0x0c
      0007D2 F8               [12] 1521 	mov	r0,a
      0007D3 86 82            [24] 1522 	mov	dpl,@r0
      0007D5 08               [12] 1523 	inc	r0
      0007D6 86 83            [24] 1524 	mov	dph,@r0
      0007D8 12r00r00         [24] 1525 	lcall	__modsint
      0007DB AE 82            [24] 1526 	mov	r6,dpl
      0007DD AF 83            [24] 1527 	mov	r7,dph
      0007DF 15 81            [12] 1528 	dec	sp
      0007E1 15 81            [12] 1529 	dec	sp
      0007E3 7C 00            [12] 1530 	mov	r4,#0x00
      0007E5 7D 00            [12] 1531 	mov	r5,#0x00
      0007E7                       1532 00113$:
      0007E7 E5*00            [12] 1533 	mov	a,_bp
      0007E9 24 04            [12] 1534 	add	a,#0x04
      0007EB F8               [12] 1535 	mov	r0,a
      0007EC C3               [12] 1536 	clr	c
      0007ED EC               [12] 1537 	mov	a,r4
      0007EE 96               [12] 1538 	subb	a,@r0
      0007EF ED               [12] 1539 	mov	a,r5
      0007F0 64 80            [12] 1540 	xrl	a,#0x80
      0007F2 08               [12] 1541 	inc	r0
      0007F3 86 F0            [24] 1542 	mov	b,@r0
      0007F5 63 F0 80         [24] 1543 	xrl	b,#0x80
      0007F8 95 F0            [12] 1544 	subb	a,b
      0007FA 40 03            [24] 1545 	jc	00143$
      0007FC 02r08r80         [24] 1546 	ljmp	00108$
      0007FF                       1547 00143$:
                                   1548 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
      0007FF BC 01 20         [24] 1549 	cjne	r4,#0x01,00105$
      000802 BD 00 1D         [24] 1550 	cjne	r5,#0x00,00105$
      000805 EE               [12] 1551 	mov	a,r6
      000806 4F               [12] 1552 	orl	a,r7
      000807 70 19            [24] 1553 	jnz	00105$
                                   1554 ;	time.c:198: seconds+= 60*60*24L*29;
      000809 E5*00            [12] 1555 	mov	a,_bp
      00080B 24 08            [12] 1556 	add	a,#0x08
      00080D F8               [12] 1557 	mov	r0,a
      00080E 74 80            [12] 1558 	mov	a,#0x80
      000810 26               [12] 1559 	add	a,@r0
      000811 F6               [12] 1560 	mov	@r0,a
      000812 74 3B            [12] 1561 	mov	a,#0x3B
      000814 08               [12] 1562 	inc	r0
      000815 36               [12] 1563 	addc	a,@r0
      000816 F6               [12] 1564 	mov	@r0,a
      000817 74 26            [12] 1565 	mov	a,#0x26
      000819 08               [12] 1566 	inc	r0
      00081A 36               [12] 1567 	addc	a,@r0
      00081B F6               [12] 1568 	mov	@r0,a
      00081C E4               [12] 1569 	clr	a
      00081D 08               [12] 1570 	inc	r0
      00081E 36               [12] 1571 	addc	a,@r0
      00081F F6               [12] 1572 	mov	@r0,a
      000820 80 56            [24] 1573 	sjmp	00114$
      000822                       1574 00105$:
                                   1575 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      000822 C0 06            [24] 1576 	push	ar6
      000824 C0 07            [24] 1577 	push	ar7
      000826 EC               [12] 1578 	mov	a,r4
      000827 24r00            [12] 1579 	add	a,#_monthDays
      000829 F5 82            [12] 1580 	mov	dpl,a
      00082B ED               [12] 1581 	mov	a,r5
      00082C 34s00            [12] 1582 	addc	a,#(_monthDays >> 8)
      00082E F5 83            [12] 1583 	mov	dph,a
      000830 E4               [12] 1584 	clr	a
      000831 93               [24] 1585 	movc	a,@a+dptr
      000832 FA               [12] 1586 	mov	r2,a
      000833 33               [12] 1587 	rlc	a
      000834 95 E0            [12] 1588 	subb	a,acc
      000836 FB               [12] 1589 	mov	r3,a
      000837 FE               [12] 1590 	mov	r6,a
      000838 FF               [12] 1591 	mov	r7,a
      000839 C0 05            [24] 1592 	push	ar5
      00083B C0 04            [24] 1593 	push	ar4
      00083D C0 02            [24] 1594 	push	ar2
      00083F C0 03            [24] 1595 	push	ar3
      000841 C0 06            [24] 1596 	push	ar6
      000843 C0 07            [24] 1597 	push	ar7
      000845 90 51 80         [24] 1598 	mov	dptr,#0x5180
      000848 75 F0 01         [24] 1599 	mov	b,#0x01
      00084B E4               [12] 1600 	clr	a
      00084C 12r00r00         [24] 1601 	lcall	__mullong
      00084F AA 82            [24] 1602 	mov	r2,dpl
      000851 AB 83            [24] 1603 	mov	r3,dph
      000853 AE F0            [24] 1604 	mov	r6,b
      000855 FF               [12] 1605 	mov	r7,a
      000856 E5 81            [12] 1606 	mov	a,sp
      000858 24 FC            [12] 1607 	add	a,#0xfc
      00085A F5 81            [12] 1608 	mov	sp,a
      00085C D0 04            [24] 1609 	pop	ar4
      00085E D0 05            [24] 1610 	pop	ar5
      000860 E5*00            [12] 1611 	mov	a,_bp
      000862 24 08            [12] 1612 	add	a,#0x08
      000864 F8               [12] 1613 	mov	r0,a
      000865 EA               [12] 1614 	mov	a,r2
      000866 26               [12] 1615 	add	a,@r0
      000867 F6               [12] 1616 	mov	@r0,a
      000868 EB               [12] 1617 	mov	a,r3
      000869 08               [12] 1618 	inc	r0
      00086A 36               [12] 1619 	addc	a,@r0
      00086B F6               [12] 1620 	mov	@r0,a
      00086C EE               [12] 1621 	mov	a,r6
      00086D 08               [12] 1622 	inc	r0
      00086E 36               [12] 1623 	addc	a,@r0
      00086F F6               [12] 1624 	mov	@r0,a
      000870 EF               [12] 1625 	mov	a,r7
      000871 08               [12] 1626 	inc	r0
      000872 36               [12] 1627 	addc	a,@r0
      000873 F6               [12] 1628 	mov	@r0,a
                                   1629 ;	time.c:208: return seconds;
      000874 D0 07            [24] 1630 	pop	ar7
      000876 D0 06            [24] 1631 	pop	ar6
                                   1632 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      000878                       1633 00114$:
                                   1634 ;	time.c:196: for (i=0; i<month; i++) {
      000878 0C               [12] 1635 	inc	r4
      000879 BC 00 01         [24] 1636 	cjne	r4,#0x00,00147$
      00087C 0D               [12] 1637 	inc	r5
      00087D                       1638 00147$:
      00087D 02r07rE7         [24] 1639 	ljmp	00113$
      000880                       1640 00108$:
                                   1641 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      000880 A8*00            [24] 1642 	mov	r0,_bp
      000882 08               [12] 1643 	inc	r0
      000883 74 03            [12] 1644 	mov	a,#0x03
      000885 26               [12] 1645 	add	a,@r0
      000886 FD               [12] 1646 	mov	r5,a
      000887 E4               [12] 1647 	clr	a
      000888 08               [12] 1648 	inc	r0
      000889 36               [12] 1649 	addc	a,@r0
      00088A FE               [12] 1650 	mov	r6,a
      00088B 08               [12] 1651 	inc	r0
      00088C 86 07            [24] 1652 	mov	ar7,@r0
      00088E 8D 82            [24] 1653 	mov	dpl,r5
      000890 8E 83            [24] 1654 	mov	dph,r6
      000892 8F F0            [24] 1655 	mov	b,r7
      000894 12r00r00         [24] 1656 	lcall	__gptrget
      000897 FD               [12] 1657 	mov	r5,a
      000898 7F 00            [12] 1658 	mov	r7,#0x00
      00089A 1D               [12] 1659 	dec	r5
      00089B BD FF 01         [24] 1660 	cjne	r5,#0xFF,00148$
      00089E 1F               [12] 1661 	dec	r7
      00089F                       1662 00148$:
      00089F EF               [12] 1663 	mov	a,r7
      0008A0 33               [12] 1664 	rlc	a
      0008A1 95 E0            [12] 1665 	subb	a,acc
      0008A3 FE               [12] 1666 	mov	r6,a
      0008A4 FC               [12] 1667 	mov	r4,a
      0008A5 C0 05            [24] 1668 	push	ar5
      0008A7 C0 07            [24] 1669 	push	ar7
      0008A9 C0 06            [24] 1670 	push	ar6
      0008AB C0 04            [24] 1671 	push	ar4
      0008AD 90 51 80         [24] 1672 	mov	dptr,#0x5180
      0008B0 75 F0 01         [24] 1673 	mov	b,#0x01
      0008B3 E4               [12] 1674 	clr	a
      0008B4 12r00r00         [24] 1675 	lcall	__mullong
      0008B7 AC 82            [24] 1676 	mov	r4,dpl
      0008B9 AD 83            [24] 1677 	mov	r5,dph
      0008BB AE F0            [24] 1678 	mov	r6,b
      0008BD FF               [12] 1679 	mov	r7,a
      0008BE E5 81            [12] 1680 	mov	a,sp
      0008C0 24 FC            [12] 1681 	add	a,#0xfc
      0008C2 F5 81            [12] 1682 	mov	sp,a
      0008C4 E5*00            [12] 1683 	mov	a,_bp
      0008C6 24 08            [12] 1684 	add	a,#0x08
      0008C8 F8               [12] 1685 	mov	r0,a
      0008C9 EC               [12] 1686 	mov	a,r4
      0008CA 26               [12] 1687 	add	a,@r0
      0008CB F6               [12] 1688 	mov	@r0,a
      0008CC ED               [12] 1689 	mov	a,r5
      0008CD 08               [12] 1690 	inc	r0
      0008CE 36               [12] 1691 	addc	a,@r0
      0008CF F6               [12] 1692 	mov	@r0,a
      0008D0 EE               [12] 1693 	mov	a,r6
      0008D1 08               [12] 1694 	inc	r0
      0008D2 36               [12] 1695 	addc	a,@r0
      0008D3 F6               [12] 1696 	mov	@r0,a
      0008D4 EF               [12] 1697 	mov	a,r7
      0008D5 08               [12] 1698 	inc	r0
      0008D6 36               [12] 1699 	addc	a,@r0
      0008D7 F6               [12] 1700 	mov	@r0,a
                                   1701 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
      0008D8 A8*00            [24] 1702 	mov	r0,_bp
      0008DA 08               [12] 1703 	inc	r0
      0008DB 74 02            [12] 1704 	mov	a,#0x02
      0008DD 26               [12] 1705 	add	a,@r0
      0008DE FD               [12] 1706 	mov	r5,a
      0008DF E4               [12] 1707 	clr	a
      0008E0 08               [12] 1708 	inc	r0
      0008E1 36               [12] 1709 	addc	a,@r0
      0008E2 FE               [12] 1710 	mov	r6,a
      0008E3 08               [12] 1711 	inc	r0
      0008E4 86 07            [24] 1712 	mov	ar7,@r0
      0008E6 8D 82            [24] 1713 	mov	dpl,r5
      0008E8 8E 83            [24] 1714 	mov	dph,r6
      0008EA 8F F0            [24] 1715 	mov	b,r7
      0008EC 12r00r00         [24] 1716 	lcall	__gptrget
      0008EF FD               [12] 1717 	mov	r5,a
      0008F0 7F 00            [12] 1718 	mov	r7,#0x00
      0008F2 7E 00            [12] 1719 	mov	r6,#0x00
      0008F4 7C 00            [12] 1720 	mov	r4,#0x00
      0008F6 C0 05            [24] 1721 	push	ar5
      0008F8 C0 07            [24] 1722 	push	ar7
      0008FA C0 06            [24] 1723 	push	ar6
      0008FC C0 04            [24] 1724 	push	ar4
      0008FE 90 0E 10         [24] 1725 	mov	dptr,#0x0E10
      000901 E4               [12] 1726 	clr	a
      000902 F5 F0            [12] 1727 	mov	b,a
      000904 12r00r00         [24] 1728 	lcall	__mullong
      000907 AC 82            [24] 1729 	mov	r4,dpl
      000909 AD 83            [24] 1730 	mov	r5,dph
      00090B AE F0            [24] 1731 	mov	r6,b
      00090D FF               [12] 1732 	mov	r7,a
      00090E E5 81            [12] 1733 	mov	a,sp
      000910 24 FC            [12] 1734 	add	a,#0xfc
      000912 F5 81            [12] 1735 	mov	sp,a
      000914 E5*00            [12] 1736 	mov	a,_bp
      000916 24 08            [12] 1737 	add	a,#0x08
      000918 F8               [12] 1738 	mov	r0,a
      000919 EC               [12] 1739 	mov	a,r4
      00091A 26               [12] 1740 	add	a,@r0
      00091B F6               [12] 1741 	mov	@r0,a
      00091C ED               [12] 1742 	mov	a,r5
      00091D 08               [12] 1743 	inc	r0
      00091E 36               [12] 1744 	addc	a,@r0
      00091F F6               [12] 1745 	mov	@r0,a
      000920 EE               [12] 1746 	mov	a,r6
      000921 08               [12] 1747 	inc	r0
      000922 36               [12] 1748 	addc	a,@r0
      000923 F6               [12] 1749 	mov	@r0,a
      000924 EF               [12] 1750 	mov	a,r7
      000925 08               [12] 1751 	inc	r0
      000926 36               [12] 1752 	addc	a,@r0
      000927 F6               [12] 1753 	mov	@r0,a
                                   1754 ;	time.c:206: seconds+= timeptr->tm_min*60;
      000928 A8*00            [24] 1755 	mov	r0,_bp
      00092A 08               [12] 1756 	inc	r0
      00092B 74 01            [12] 1757 	mov	a,#0x01
      00092D 26               [12] 1758 	add	a,@r0
      00092E FD               [12] 1759 	mov	r5,a
      00092F E4               [12] 1760 	clr	a
      000930 08               [12] 1761 	inc	r0
      000931 36               [12] 1762 	addc	a,@r0
      000932 FE               [12] 1763 	mov	r6,a
      000933 08               [12] 1764 	inc	r0
      000934 86 07            [24] 1765 	mov	ar7,@r0
      000936 8D 82            [24] 1766 	mov	dpl,r5
      000938 8E 83            [24] 1767 	mov	dph,r6
      00093A 8F F0            [24] 1768 	mov	b,r7
      00093C 12r00r00         [24] 1769 	lcall	__gptrget
      00093F 75 F0 3C         [24] 1770 	mov	b,#0x3C
      000942 A4               [48] 1771 	mul	ab
      000943 FD               [12] 1772 	mov	r5,a
      000944 E5 F0            [12] 1773 	mov	a,b
      000946 FF               [12] 1774 	mov	r7,a
      000947 33               [12] 1775 	rlc	a
      000948 95 E0            [12] 1776 	subb	a,acc
      00094A FE               [12] 1777 	mov	r6,a
      00094B FC               [12] 1778 	mov	r4,a
      00094C E5*00            [12] 1779 	mov	a,_bp
      00094E 24 08            [12] 1780 	add	a,#0x08
      000950 F8               [12] 1781 	mov	r0,a
      000951 ED               [12] 1782 	mov	a,r5
      000952 26               [12] 1783 	add	a,@r0
      000953 F6               [12] 1784 	mov	@r0,a
      000954 EF               [12] 1785 	mov	a,r7
      000955 08               [12] 1786 	inc	r0
      000956 36               [12] 1787 	addc	a,@r0
      000957 F6               [12] 1788 	mov	@r0,a
      000958 EE               [12] 1789 	mov	a,r6
      000959 08               [12] 1790 	inc	r0
      00095A 36               [12] 1791 	addc	a,@r0
      00095B F6               [12] 1792 	mov	@r0,a
      00095C EC               [12] 1793 	mov	a,r4
      00095D 08               [12] 1794 	inc	r0
      00095E 36               [12] 1795 	addc	a,@r0
      00095F F6               [12] 1796 	mov	@r0,a
                                   1797 ;	time.c:207: seconds+= timeptr->tm_sec;
      000960 A8*00            [24] 1798 	mov	r0,_bp
      000962 08               [12] 1799 	inc	r0
      000963 86 82            [24] 1800 	mov	dpl,@r0
      000965 08               [12] 1801 	inc	r0
      000966 86 83            [24] 1802 	mov	dph,@r0
      000968 08               [12] 1803 	inc	r0
      000969 86 F0            [24] 1804 	mov	b,@r0
      00096B 12r00r00         [24] 1805 	lcall	__gptrget
      00096E FF               [12] 1806 	mov	r7,a
      00096F E4               [12] 1807 	clr	a
      000970 FE               [12] 1808 	mov	r6,a
      000971 33               [12] 1809 	rlc	a
      000972 95 E0            [12] 1810 	subb	a,acc
      000974 FD               [12] 1811 	mov	r5,a
      000975 FC               [12] 1812 	mov	r4,a
      000976 E5*00            [12] 1813 	mov	a,_bp
      000978 24 08            [12] 1814 	add	a,#0x08
      00097A F8               [12] 1815 	mov	r0,a
      00097B EF               [12] 1816 	mov	a,r7
      00097C 26               [12] 1817 	add	a,@r0
      00097D F6               [12] 1818 	mov	@r0,a
      00097E EE               [12] 1819 	mov	a,r6
      00097F 08               [12] 1820 	inc	r0
      000980 36               [12] 1821 	addc	a,@r0
      000981 F6               [12] 1822 	mov	@r0,a
      000982 ED               [12] 1823 	mov	a,r5
      000983 08               [12] 1824 	inc	r0
      000984 36               [12] 1825 	addc	a,@r0
      000985 F6               [12] 1826 	mov	@r0,a
      000986 EC               [12] 1827 	mov	a,r4
      000987 08               [12] 1828 	inc	r0
      000988 36               [12] 1829 	addc	a,@r0
      000989 F6               [12] 1830 	mov	@r0,a
                                   1831 ;	time.c:208: return seconds;
      00098A E5*00            [12] 1832 	mov	a,_bp
      00098C 24 08            [12] 1833 	add	a,#0x08
      00098E F8               [12] 1834 	mov	r0,a
      00098F 86 82            [24] 1835 	mov	dpl,@r0
      000991 08               [12] 1836 	inc	r0
      000992 86 83            [24] 1837 	mov	dph,@r0
      000994 08               [12] 1838 	inc	r0
      000995 86 F0            [24] 1839 	mov	b,@r0
      000997 08               [12] 1840 	inc	r0
      000998 E6               [12] 1841 	mov	a,@r0
      000999 85*00 81         [24] 1842 	mov	sp,_bp
      00099C D0*00            [24] 1843 	pop	_bp
      00099E 02r00r00         [24] 1844 	ljmp	__sdcc_banked_ret
                                   1845 	.area CSEG    (CODE)
                                   1846 	.area CONST   (CODE)
      000000                       1847 _monthDays:
      000000 1F                    1848 	.db #0x1F	;  31
      000001 1C                    1849 	.db #0x1C	;  28
      000002 1F                    1850 	.db #0x1F	;  31
      000003 1E                    1851 	.db #0x1E	;  30
      000004 1F                    1852 	.db #0x1F	;  31
      000005 1E                    1853 	.db #0x1E	;  30
      000006 1F                    1854 	.db #0x1F	;  31
      000007 1F                    1855 	.db #0x1F	;  31
      000008 1E                    1856 	.db #0x1E	;  30
      000009 1F                    1857 	.db #0x1F	;  31
      00000A 1E                    1858 	.db #0x1E	;  30
      00000B 1F                    1859 	.db #0x1F	;  31
      00000C                       1860 ___month:
      00000Cr51s00                 1861 	.byte _str_1,(_str_1 >> 8)
      00000Er55s00                 1862 	.byte _str_2,(_str_2 >> 8)
      000010r59s00                 1863 	.byte _str_3,(_str_3 >> 8)
      000012r5Ds00                 1864 	.byte _str_4,(_str_4 >> 8)
      000014r61s00                 1865 	.byte _str_5,(_str_5 >> 8)
      000016r65s00                 1866 	.byte _str_6,(_str_6 >> 8)
      000018r69s00                 1867 	.byte _str_7,(_str_7 >> 8)
      00001Ar6Ds00                 1868 	.byte _str_8,(_str_8 >> 8)
      00001Cr71s00                 1869 	.byte _str_9,(_str_9 >> 8)
      00001Er75s00                 1870 	.byte _str_10,(_str_10 >> 8)
      000020r79s00                 1871 	.byte _str_11,(_str_11 >> 8)
      000022r7Ds00                 1872 	.byte _str_12,(_str_12 >> 8)
      000024                       1873 ___day:
      000024r81s00                 1874 	.byte _str_13,(_str_13 >> 8)
      000026r85s00                 1875 	.byte _str_14,(_str_14 >> 8)
      000028r89s00                 1876 	.byte _str_15,(_str_15 >> 8)
      00002Ar8Ds00                 1877 	.byte _str_16,(_str_16 >> 8)
      00002Cr91s00                 1878 	.byte _str_17,(_str_17 >> 8)
      00002Er95s00                 1879 	.byte _str_18,(_str_18 >> 8)
      000030r99s00                 1880 	.byte _str_19,(_str_19 >> 8)
      000032                       1881 __str_0:
      000032 25 73 20 25 73 20 25  1882 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      00004F 0A                    1883 	.db 0x0A
      000050 00                    1884 	.db 0x00
      000051                       1885 _str_1:
      000051 4A 61 6E              1886 	.ascii "Jan"
      000054 00                    1887 	.db 0x00
      000055                       1888 _str_2:
      000055 46 65 62              1889 	.ascii "Feb"
      000058 00                    1890 	.db 0x00
      000059                       1891 _str_3:
      000059 4D 61 72              1892 	.ascii "Mar"
      00005C 00                    1893 	.db 0x00
      00005D                       1894 _str_4:
      00005D 41 70 72              1895 	.ascii "Apr"
      000060 00                    1896 	.db 0x00
      000061                       1897 _str_5:
      000061 4D 61 79              1898 	.ascii "May"
      000064 00                    1899 	.db 0x00
      000065                       1900 _str_6:
      000065 4A 75 6E              1901 	.ascii "Jun"
      000068 00                    1902 	.db 0x00
      000069                       1903 _str_7:
      000069 4A 75 6C              1904 	.ascii "Jul"
      00006C 00                    1905 	.db 0x00
      00006D                       1906 _str_8:
      00006D 41 75 67              1907 	.ascii "Aug"
      000070 00                    1908 	.db 0x00
      000071                       1909 _str_9:
      000071 53 65 70              1910 	.ascii "Sep"
      000074 00                    1911 	.db 0x00
      000075                       1912 _str_10:
      000075 4F 63 74              1913 	.ascii "Oct"
      000078 00                    1914 	.db 0x00
      000079                       1915 _str_11:
      000079 4E 6F 76              1916 	.ascii "Nov"
      00007C 00                    1917 	.db 0x00
      00007D                       1918 _str_12:
      00007D 44 65 63              1919 	.ascii "Dec"
      000080 00                    1920 	.db 0x00
      000081                       1921 _str_13:
      000081 53 75 6E              1922 	.ascii "Sun"
      000084 00                    1923 	.db 0x00
      000085                       1924 _str_14:
      000085 4D 6F 6E              1925 	.ascii "Mon"
      000088 00                    1926 	.db 0x00
      000089                       1927 _str_15:
      000089 54 75 65              1928 	.ascii "Tue"
      00008C 00                    1929 	.db 0x00
      00008D                       1930 _str_16:
      00008D 57 65 64              1931 	.ascii "Wed"
      000090 00                    1932 	.db 0x00
      000091                       1933 _str_17:
      000091 54 68 75              1934 	.ascii "Thu"
      000094 00                    1935 	.db 0x00
      000095                       1936 _str_18:
      000095 46 72 69              1937 	.ascii "Fri"
      000098 00                    1938 	.db 0x00
      000099                       1939 _str_19:
      000099 53 61 74              1940 	.ascii "Sat"
      00009C 00                    1941 	.db 0x00
                                   1942 	.area XINIT   (CODE)
                                   1943 	.area CABS    (ABS,CODE)
