                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:13 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module asinf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _asincosf
                                     13 	.globl _asinf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'asinf'
                                    107 ;------------------------------------------------------------
                                    108 ;x                         Allocated to registers r4 r5 r6 r7 
                                    109 ;------------------------------------------------------------
                                    110 ;	asinf.c:36: float asinf(const float x) _FLOAT_FUNC_REENTRANT
                                    111 ;	-----------------------------------------
                                    112 ;	 function asinf
                                    113 ;	-----------------------------------------
      000000                        114 _asinf:
                           000007   115 	ar7 = 0x07
                           000006   116 	ar6 = 0x06
                           000005   117 	ar5 = 0x05
                           000004   118 	ar4 = 0x04
                           000003   119 	ar3 = 0x03
                           000002   120 	ar2 = 0x02
                           000001   121 	ar1 = 0x01
                           000000   122 	ar0 = 0x00
      000000 AC 82            [24]  123 	mov	r4,dpl
      000002 AD 83            [24]  124 	mov	r5,dph
      000004 AE F0            [24]  125 	mov	r6,b
      000006 FF               [12]  126 	mov	r7,a
                                    127 ;	asinf.c:38: if (x == 1.0) return  HALF_PI;
      000007 C0 07            [24]  128 	push	ar7
      000009 C0 06            [24]  129 	push	ar6
      00000B C0 05            [24]  130 	push	ar5
      00000D C0 04            [24]  131 	push	ar4
      00000F E4               [12]  132 	clr	a
      000010 C0 E0            [24]  133 	push	acc
      000012 C0 E0            [24]  134 	push	acc
      000014 74 80            [12]  135 	mov	a,#0x80
      000016 C0 E0            [24]  136 	push	acc
      000018 74 3F            [12]  137 	mov	a,#0x3F
      00001A C0 E0            [24]  138 	push	acc
      00001C 8C 82            [24]  139 	mov	dpl,r4
      00001E 8D 83            [24]  140 	mov	dph,r5
      000020 8E F0            [24]  141 	mov	b,r6
      000022 EF               [12]  142 	mov	a,r7
      000023 12r00r00         [24]  143 	lcall	___fseq
      000026 AB 82            [24]  144 	mov	r3,dpl
      000028 E5 81            [12]  145 	mov	a,sp
      00002A 24 FC            [12]  146 	add	a,#0xfc
      00002C F5 81            [12]  147 	mov	sp,a
      00002E D0 04            [24]  148 	pop	ar4
      000030 D0 05            [24]  149 	pop	ar5
      000032 D0 06            [24]  150 	pop	ar6
      000034 D0 07            [24]  151 	pop	ar7
      000036 EB               [12]  152 	mov	a,r3
      000037 60 0B            [24]  153 	jz	00108$
      000039 90 0F DB         [24]  154 	mov	dptr,#0x0FDB
      00003C 75 F0 C9         [24]  155 	mov	b,#0xC9
      00003F 74 3F            [12]  156 	mov	a,#0x3F
      000041 02r00rB3         [24]  157 	ljmp	00110$
      000044                        158 00108$:
                                    159 ;	asinf.c:39: else if (x ==-1.0) return -HALF_PI;
      000044 C0 07            [24]  160 	push	ar7
      000046 C0 06            [24]  161 	push	ar6
      000048 C0 05            [24]  162 	push	ar5
      00004A C0 04            [24]  163 	push	ar4
      00004C E4               [12]  164 	clr	a
      00004D C0 E0            [24]  165 	push	acc
      00004F C0 E0            [24]  166 	push	acc
      000051 74 80            [12]  167 	mov	a,#0x80
      000053 C0 E0            [24]  168 	push	acc
      000055 74 BF            [12]  169 	mov	a,#0xBF
      000057 C0 E0            [24]  170 	push	acc
      000059 8C 82            [24]  171 	mov	dpl,r4
      00005B 8D 83            [24]  172 	mov	dph,r5
      00005D 8E F0            [24]  173 	mov	b,r6
      00005F EF               [12]  174 	mov	a,r7
      000060 12r00r00         [24]  175 	lcall	___fseq
      000063 AB 82            [24]  176 	mov	r3,dpl
      000065 E5 81            [12]  177 	mov	a,sp
      000067 24 FC            [12]  178 	add	a,#0xfc
      000069 F5 81            [12]  179 	mov	sp,a
      00006B D0 04            [24]  180 	pop	ar4
      00006D D0 05            [24]  181 	pop	ar5
      00006F D0 06            [24]  182 	pop	ar6
      000071 D0 07            [24]  183 	pop	ar7
      000073 EB               [12]  184 	mov	a,r3
      000074 60 0A            [24]  185 	jz	00105$
      000076 90 0F DB         [24]  186 	mov	dptr,#0x0FDB
      000079 75 F0 C9         [24]  187 	mov	b,#0xC9
      00007C 74 BF            [12]  188 	mov	a,#0xBF
      00007E 80 33            [24]  189 	sjmp	00110$
      000080                        190 00105$:
                                    191 ;	asinf.c:40: else if (x == 0.0) return 0.0;
      000080 8C F0            [24]  192 	mov	b,r4
      000082 ED               [12]  193 	mov	a,r5
      000083 42 F0            [12]  194 	orl	b,a
      000085 EE               [12]  195 	mov	a,r6
      000086 42 F0            [12]  196 	orl	b,a
      000088 EF               [12]  197 	mov	a,r7
      000089 54 7F            [12]  198 	anl	a,#0x7F
      00008B 45 F0            [12]  199 	orl	a,b
      00008D 70 08            [24]  200 	jnz	00102$
      00008F 90 00 00         [24]  201 	mov	dptr,#(0x00&0x00ff)
      000092 E4               [12]  202 	clr	a
      000093 F5 F0            [12]  203 	mov	b,a
      000095 80 1C            [24]  204 	sjmp	00110$
      000097                        205 00102$:
                                    206 ;	asinf.c:41: else               return asincosf(x, false);
      000097 C2 F0            [12]  207 	clr	b[0]
      000099 85 F0*00         [24]  208 	mov	bits,b
      00009C 8C 82            [24]  209 	mov	dpl,r4
      00009E 8D 83            [24]  210 	mov	dph,r5
      0000A0 8E F0            [24]  211 	mov	b,r6
      0000A2 EF               [12]  212 	mov	a,r7
      0000A3 78r00            [12]  213 	mov	r0,#_asincosf
      0000A5 79s00            [12]  214 	mov	r1,#(_asincosf >> 8)
      0000A7 7As00            [12]  215 	mov	r2,#(_asincosf >> 16)
      0000A9 12r00r00         [24]  216 	lcall	__sdcc_banked_call
      0000AC AC 82            [24]  217 	mov	r4,dpl
      0000AE AD 83            [24]  218 	mov	r5,dph
      0000B0 AE F0            [24]  219 	mov	r6,b
      0000B2 FF               [12]  220 	mov	r7,a
      0000B3                        221 00110$:
      0000B3 02r00r00         [24]  222 	ljmp	__sdcc_banked_ret
                                    223 	.area CSEG    (CODE)
                                    224 	.area CONST   (CODE)
                                    225 	.area XINIT   (CODE)
                                    226 	.area CABS    (ABS,CODE)
