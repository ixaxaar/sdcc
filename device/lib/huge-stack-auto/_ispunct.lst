                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:14 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _ispunct
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _isspace
                                     13 	.globl _isprint
                                     14 	.globl _isupper
                                     15 	.globl _islower
                                     16 	.globl _isdigit
                                     17 	.globl _ispunct
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; special function bits
                                     25 ;--------------------------------------------------------
                                     26 	.area RSEG    (ABS,DATA)
      000000                         27 	.org 0x0000
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable register banks
                                     30 ;--------------------------------------------------------
                                     31 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         32 	.ds 8
                                     33 ;--------------------------------------------------------
                                     34 ; internal ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DSEG    (DATA)
                                     37 ;--------------------------------------------------------
                                     38 ; overlayable items in internal ram 
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; indirectly addressable internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area ISEG    (DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; absolute internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area IABS    (ABS,DATA)
                                     48 	.area IABS    (ABS,DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; bit data
                                     51 ;--------------------------------------------------------
                                     52 	.area BSEG    (BIT)
                                     53 ;--------------------------------------------------------
                                     54 ; paged external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area PSEG    (PAG,XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XSEG    (XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XABS    (ABS,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; external initialized ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XISEG   (XDATA)
                                     69 	.area HOME    (CODE)
                                     70 	.area GSINIT0 (CODE)
                                     71 	.area GSINIT1 (CODE)
                                     72 	.area GSINIT2 (CODE)
                                     73 	.area GSINIT3 (CODE)
                                     74 	.area GSINIT4 (CODE)
                                     75 	.area GSINIT5 (CODE)
                                     76 	.area GSINIT  (CODE)
                                     77 	.area GSFINAL (CODE)
                                     78 	.area CSEG    (CODE)
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; Home
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area HOME    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; code
                                     93 ;--------------------------------------------------------
                                     94 	.area CSEG    (CODE)
                                     95 ;------------------------------------------------------------
                                     96 ;Allocation info for local variables in function 'ispunct'
                                     97 ;------------------------------------------------------------
                                     98 ;c                         Allocated to registers r7 
                                     99 ;------------------------------------------------------------
                                    100 ;	_ispunct.c:31: char ispunct (unsigned char c)
                                    101 ;	-----------------------------------------
                                    102 ;	 function ispunct
                                    103 ;	-----------------------------------------
      000000                        104 _ispunct:
                           000007   105 	ar7 = 0x07
                           000006   106 	ar6 = 0x06
                           000005   107 	ar5 = 0x05
                           000004   108 	ar4 = 0x04
                           000003   109 	ar3 = 0x03
                           000002   110 	ar2 = 0x02
                           000001   111 	ar1 = 0x01
                           000000   112 	ar0 = 0x00
                                    113 ;	_ispunct.c:33: if ( isprint (c) &&
      000000 AF 82            [24]  114 	mov  r7,dpl
      000002 C0 07            [24]  115 	push	ar7
      000004 78r00            [12]  116 	mov	r0,#_isprint
      000006 79s00            [12]  117 	mov	r1,#(_isprint >> 8)
      000008 7As00            [12]  118 	mov	r2,#(_isprint >> 16)
      00000A 12r00r00         [24]  119 	lcall	__sdcc_banked_call
      00000D E5 82            [12]  120 	mov	a,dpl
      00000F D0 07            [24]  121 	pop	ar7
      000011 60 4D            [24]  122 	jz	00102$
                                    123 ;	_ispunct.c:34: !islower(c) &&
      000013 8F 82            [24]  124 	mov	dpl,r7
      000015 C0 07            [24]  125 	push	ar7
      000017 78r00            [12]  126 	mov	r0,#_islower
      000019 79s00            [12]  127 	mov	r1,#(_islower >> 8)
      00001B 7As00            [12]  128 	mov	r2,#(_islower >> 16)
      00001D 12r00r00         [24]  129 	lcall	__sdcc_banked_call
      000020 E5 82            [12]  130 	mov	a,dpl
      000022 D0 07            [24]  131 	pop	ar7
      000024 70 3A            [24]  132 	jnz	00102$
                                    133 ;	_ispunct.c:35: !isupper(c) &&
      000026 8F 82            [24]  134 	mov	dpl,r7
      000028 C0 07            [24]  135 	push	ar7
      00002A 78r00            [12]  136 	mov	r0,#_isupper
      00002C 79s00            [12]  137 	mov	r1,#(_isupper >> 8)
      00002E 7As00            [12]  138 	mov	r2,#(_isupper >> 16)
      000030 12r00r00         [24]  139 	lcall	__sdcc_banked_call
      000033 E5 82            [12]  140 	mov	a,dpl
      000035 D0 07            [24]  141 	pop	ar7
      000037 70 27            [24]  142 	jnz	00102$
                                    143 ;	_ispunct.c:36: !isspace(c) &&
      000039 8F 82            [24]  144 	mov	dpl,r7
      00003B C0 07            [24]  145 	push	ar7
      00003D 78r00            [12]  146 	mov	r0,#_isspace
      00003F 79s00            [12]  147 	mov	r1,#(_isspace >> 8)
      000041 7As00            [12]  148 	mov	r2,#(_isspace >> 16)
      000043 12r00r00         [24]  149 	lcall	__sdcc_banked_call
      000046 E5 82            [12]  150 	mov	a,dpl
      000048 D0 07            [24]  151 	pop	ar7
      00004A 70 14            [24]  152 	jnz	00102$
                                    153 ;	_ispunct.c:37: !isdigit(c) )
      00004C 8F 82            [24]  154 	mov	dpl,r7
      00004E 78r00            [12]  155 	mov	r0,#_isdigit
      000050 79s00            [12]  156 	mov	r1,#(_isdigit >> 8)
      000052 7As00            [12]  157 	mov	r2,#(_isdigit >> 16)
      000054 12r00r00         [24]  158 	lcall	__sdcc_banked_call
      000057 E5 82            [12]  159 	mov	a,dpl
      000059 70 05            [24]  160 	jnz	00102$
                                    161 ;	_ispunct.c:38: return 1;
      00005B 75 82 01         [24]  162 	mov	dpl,#0x01
      00005E 80 03            [24]  163 	sjmp	00107$
      000060                        164 00102$:
                                    165 ;	_ispunct.c:39: return 0;
      000060 75 82 00         [24]  166 	mov	dpl,#0x00
      000063                        167 00107$:
      000063 02r00r00         [24]  168 	ljmp	__sdcc_banked_ret
                                    169 	.area CSEG    (CODE)
                                    170 	.area CONST   (CODE)
                                    171 	.area XINIT   (CODE)
                                    172 	.area CABS    (ABS,CODE)
