                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:15 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module printf_large
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strlen
                                     13 	.globl __print_format
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'output_digit'
                                    107 ;------------------------------------------------------------
                                    108 ;output_char               Allocated to stack - _bp -6
                                    109 ;p                         Allocated to stack - _bp -9
                                    110 ;lower_case                Allocated to registers b0 
                                    111 ;n                         Allocated to registers r7 
                                    112 ;c                         Allocated to registers r7 
                                    113 ;------------------------------------------------------------
                                    114 ;	printf_large.c:116: output_digit (unsigned char n, bool lower_case, pfn_outputchar output_char, void* p)
                                    115 ;	-----------------------------------------
                                    116 ;	 function output_digit
                                    117 ;	-----------------------------------------
      000000                        118 _output_digit:
                           000007   119 	ar7 = 0x07
                           000006   120 	ar6 = 0x06
                           000005   121 	ar5 = 0x05
                           000004   122 	ar4 = 0x04
                           000003   123 	ar3 = 0x03
                           000002   124 	ar2 = 0x02
                           000001   125 	ar1 = 0x01
                           000000   126 	ar0 = 0x00
      000000 C0*00            [24]  127 	push	_bp
      000002 85 81*00         [24]  128 	mov	_bp,sp
      000005 AF 82            [24]  129 	mov	r7,dpl
                                    130 ;	printf_large.c:118: register unsigned char c = n + (unsigned char)'0';
      000007 74 30            [12]  131 	mov	a,#0x30
      000009 2F               [12]  132 	add	a,r7
                                    133 ;	printf_large.c:120: if (c > (unsigned char)'9')
      00000A FF               [12]  134 	mov  r7,a
      00000B 24 C6            [12]  135 	add	a,#0xff - 0x39
      00000D 50 0B            [24]  136 	jnc	00104$
                                    137 ;	printf_large.c:122: c += (unsigned char)('A' - '0' - 10);
      00000F 74 07            [12]  138 	mov	a,#0x07
      000011 2F               [12]  139 	add	a,r7
      000012 FF               [12]  140 	mov	r7,a
                                    141 ;	printf_large.c:123: if (lower_case)
      000013 30*00 04         [24]  142 	jnb	b0,00104$
                                    143 ;	printf_large.c:124: c += (unsigned char)('a' - 'A');
      000016 74 20            [12]  144 	mov	a,#0x20
      000018 2F               [12]  145 	add	a,r7
      000019 FF               [12]  146 	mov	r7,a
      00001A                        147 00104$:
                                    148 ;	printf_large.c:126: output_char( c, p );
      00001A E5*00            [12]  149 	mov	a,_bp
      00001C 24 F7            [12]  150 	add	a,#0xf7
      00001E F8               [12]  151 	mov	r0,a
      00001F E6               [12]  152 	mov	a,@r0
      000020 C0 E0            [24]  153 	push	acc
      000022 08               [12]  154 	inc	r0
      000023 E6               [12]  155 	mov	a,@r0
      000024 C0 E0            [24]  156 	push	acc
      000026 08               [12]  157 	inc	r0
      000027 E6               [12]  158 	mov	a,@r0
      000028 C0 E0            [24]  159 	push	acc
      00002A E5*00            [12]  160 	mov	a,_bp
      00002C 24 FA            [12]  161 	add	a,#0xfa
      00002E F8               [12]  162 	mov	r0,a
      00002F E6               [12]  163 	mov	a,@r0
      000030 C0 E0            [24]  164 	push	acc
      000032 08               [12]  165 	inc	r0
      000033 E6               [12]  166 	mov	a,@r0
      000034 C0 E0            [24]  167 	push	acc
      000036 08               [12]  168 	inc	r0
      000037 E6               [12]  169 	mov	a,@r0
      000038 C0 E0            [24]  170 	push	acc
      00003A 8F 82            [24]  171 	mov	dpl,r7
      00003C D0 02            [24]  172 	pop	ar2
      00003E D0 01            [24]  173 	pop	ar1
      000040 D0 00            [24]  174 	pop	ar0
      000042 12r00r00         [24]  175 	lcall	__sdcc_banked_call
      000045 15 81            [12]  176 	dec	sp
      000047 15 81            [12]  177 	dec	sp
      000049 15 81            [12]  178 	dec	sp
      00004B D0*00            [24]  179 	pop	_bp
      00004D 02r00r00         [24]  180 	ljmp	__sdcc_banked_ret
                                    181 ;------------------------------------------------------------
                                    182 ;Allocation info for local variables in function 'output_2digits'
                                    183 ;------------------------------------------------------------
                                    184 ;output_char               Allocated to stack - _bp -6
                                    185 ;p                         Allocated to stack - _bp -9
                                    186 ;lower_case                Allocated to registers b0 
                                    187 ;b                         Allocated to registers r7 
                                    188 ;------------------------------------------------------------
                                    189 ;	printf_large.c:149: output_2digits (unsigned char b, bool lower_case, pfn_outputchar output_char, void* p)
                                    190 ;	-----------------------------------------
                                    191 ;	 function output_2digits
                                    192 ;	-----------------------------------------
      000050                        193 _output_2digits:
      000050 C0*00            [24]  194 	push	_bp
      000052 85 81*00         [24]  195 	mov	_bp,sp
                                    196 ;	printf_large.c:151: output_digit( b>>4,   lower_case, output_char, p );
      000055 E5 82            [12]  197 	mov	a,dpl
      000057 FF               [12]  198 	mov	r7,a
      000058 C4               [12]  199 	swap	a
      000059 54 0F            [12]  200 	anl	a,#0x0F
      00005B FE               [12]  201 	mov	r6,a
      00005C C0 07            [24]  202 	push	ar7
      00005E C0*00            [24]  203 	push	bits
      000060 E5*00            [12]  204 	mov	a,_bp
      000062 24 F7            [12]  205 	add	a,#0xf7
      000064 F8               [12]  206 	mov	r0,a
      000065 E6               [12]  207 	mov	a,@r0
      000066 C0 E0            [24]  208 	push	acc
      000068 08               [12]  209 	inc	r0
      000069 E6               [12]  210 	mov	a,@r0
      00006A C0 E0            [24]  211 	push	acc
      00006C 08               [12]  212 	inc	r0
      00006D E6               [12]  213 	mov	a,@r0
      00006E C0 E0            [24]  214 	push	acc
      000070 E5*00            [12]  215 	mov	a,_bp
      000072 24 FA            [12]  216 	add	a,#0xfa
      000074 F8               [12]  217 	mov	r0,a
      000075 E6               [12]  218 	mov	a,@r0
      000076 C0 E0            [24]  219 	push	acc
      000078 08               [12]  220 	inc	r0
      000079 E6               [12]  221 	mov	a,@r0
      00007A C0 E0            [24]  222 	push	acc
      00007C 08               [12]  223 	inc	r0
      00007D E6               [12]  224 	mov	a,@r0
      00007E C0 E0            [24]  225 	push	acc
      000080 A2*00            [12]  226 	mov	c,b0
      000082 92 F0            [24]  227 	mov	b[0],c
      000084 85 F0*00         [24]  228 	mov	bits,b
      000087 8E 82            [24]  229 	mov	dpl,r6
      000089 78r00            [12]  230 	mov	r0,#_output_digit
      00008B 79s00            [12]  231 	mov	r1,#(_output_digit >> 8)
      00008D 7As00            [12]  232 	mov	r2,#(_output_digit >> 16)
      00008F 12r00r00         [24]  233 	lcall	__sdcc_banked_call
      000092 E5 81            [12]  234 	mov	a,sp
      000094 24 FA            [12]  235 	add	a,#0xfa
      000096 F5 81            [12]  236 	mov	sp,a
      000098 D0*00            [24]  237 	pop	bits
      00009A D0 07            [24]  238 	pop	ar7
                                    239 ;	printf_large.c:152: output_digit( b&0x0F, lower_case, output_char, p );
      00009C 53 07 0F         [24]  240 	anl	ar7,#0x0F
      00009F E5*00            [12]  241 	mov	a,_bp
      0000A1 24 F7            [12]  242 	add	a,#0xf7
      0000A3 F8               [12]  243 	mov	r0,a
      0000A4 E6               [12]  244 	mov	a,@r0
      0000A5 C0 E0            [24]  245 	push	acc
      0000A7 08               [12]  246 	inc	r0
      0000A8 E6               [12]  247 	mov	a,@r0
      0000A9 C0 E0            [24]  248 	push	acc
      0000AB 08               [12]  249 	inc	r0
      0000AC E6               [12]  250 	mov	a,@r0
      0000AD C0 E0            [24]  251 	push	acc
      0000AF E5*00            [12]  252 	mov	a,_bp
      0000B1 24 FA            [12]  253 	add	a,#0xfa
      0000B3 F8               [12]  254 	mov	r0,a
      0000B4 E6               [12]  255 	mov	a,@r0
      0000B5 C0 E0            [24]  256 	push	acc
      0000B7 08               [12]  257 	inc	r0
      0000B8 E6               [12]  258 	mov	a,@r0
      0000B9 C0 E0            [24]  259 	push	acc
      0000BB 08               [12]  260 	inc	r0
      0000BC E6               [12]  261 	mov	a,@r0
      0000BD C0 E0            [24]  262 	push	acc
      0000BF A2*00            [12]  263 	mov	c,b0
      0000C1 92 F0            [24]  264 	mov	b[0],c
      0000C3 85 F0*00         [24]  265 	mov	bits,b
      0000C6 8F 82            [24]  266 	mov	dpl,r7
      0000C8 78r00            [12]  267 	mov	r0,#_output_digit
      0000CA 79s00            [12]  268 	mov	r1,#(_output_digit >> 8)
      0000CC 7As00            [12]  269 	mov	r2,#(_output_digit >> 16)
      0000CE 12r00r00         [24]  270 	lcall	__sdcc_banked_call
      0000D1 E5 81            [12]  271 	mov	a,sp
      0000D3 24 FA            [12]  272 	add	a,#0xfa
      0000D5 F5 81            [12]  273 	mov	sp,a
      0000D7 D0*00            [24]  274 	pop	_bp
      0000D9 02r00r00         [24]  275 	ljmp	__sdcc_banked_ret
                                    276 ;------------------------------------------------------------
                                    277 ;Allocation info for local variables in function 'calculate_digit'
                                    278 ;------------------------------------------------------------
                                    279 ;radix                     Allocated to stack - _bp -4
                                    280 ;value                     Allocated to registers r1 
                                    281 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    282 ;pb4                       Allocated to registers r0 
                                    283 ;i                         Allocated to stack - _bp +1
                                    284 ;sloc0                     Allocated to stack - _bp +8
                                    285 ;------------------------------------------------------------
                                    286 ;	printf_large.c:168: calculate_digit (value_t _AUTOMEM * value, unsigned char radix)
                                    287 ;	-----------------------------------------
                                    288 ;	 function calculate_digit
                                    289 ;	-----------------------------------------
      0000DC                        290 _calculate_digit:
      0000DC C0*00            [24]  291 	push	_bp
      0000DE 85 81*00         [24]  292 	mov	_bp,sp
      0000E1 05 81            [12]  293 	inc	sp
      0000E3 A9 82            [24]  294 	mov	r1,dpl
                                    295 ;	printf_large.c:170: unsigned long ul = value->ul;
      0000E5 87 04            [24]  296 	mov	ar4,@r1
      0000E7 09               [12]  297 	inc	r1
      0000E8 87 05            [24]  298 	mov	ar5,@r1
      0000EA 09               [12]  299 	inc	r1
      0000EB 87 06            [24]  300 	mov	ar6,@r1
      0000ED 09               [12]  301 	inc	r1
      0000EE 87 07            [24]  302 	mov	ar7,@r1
      0000F0 19               [12]  303 	dec	r1
      0000F1 19               [12]  304 	dec	r1
      0000F2 19               [12]  305 	dec	r1
                                    306 ;	printf_large.c:171: unsigned char _AUTOMEM * pb4 = &value->byte[4];
      0000F3 74 04            [12]  307 	mov	a,#0x04
      0000F5 29               [12]  308 	add	a,r1
      0000F6 F8               [12]  309 	mov	r0,a
                                    310 ;	printf_large.c:174: do
      0000F7 C0 00            [24]  311 	push	ar0
      0000F9 A8*00            [24]  312 	mov	r0,_bp
      0000FB 08               [12]  313 	inc	r0
      0000FC 76 20            [12]  314 	mov	@r0,#0x20
      0000FE D0 00            [24]  315 	pop	ar0
      000100                        316 00103$:
                                    317 ;	printf_large.c:176: *pb4 = (*pb4 << 1) | ((ul >> 31) & 0x01);
      000100 C0 01            [24]  318 	push	ar1
      000102 E6               [12]  319 	mov	a,@r0
      000103 26               [12]  320 	add	a,@r0
      000104 FA               [12]  321 	mov	r2,a
      000105 EF               [12]  322 	mov	a,r7
      000106 23               [12]  323 	rl	a
      000107 54 01            [12]  324 	anl	a,#0x01
      000109 FB               [12]  325 	mov	r3,a
      00010A EA               [12]  326 	mov	a,r2
      00010B 42 03            [12]  327 	orl	ar3,a
      00010D A6 03            [24]  328 	mov	@r0,ar3
                                    329 ;	printf_large.c:177: ul <<= 1;
      00010F EC               [12]  330 	mov	a,r4
      000110 2C               [12]  331 	add	a,r4
      000111 FC               [12]  332 	mov	r4,a
      000112 ED               [12]  333 	mov	a,r5
      000113 33               [12]  334 	rlc	a
      000114 FD               [12]  335 	mov	r5,a
      000115 EE               [12]  336 	mov	a,r6
      000116 33               [12]  337 	rlc	a
      000117 FE               [12]  338 	mov	r6,a
      000118 EF               [12]  339 	mov	a,r7
      000119 33               [12]  340 	rlc	a
      00011A FF               [12]  341 	mov	r7,a
                                    342 ;	printf_large.c:179: if (radix <= *pb4 )
      00011B 86 03            [24]  343 	mov	ar3,@r0
      00011D C0 00            [24]  344 	push	ar0
      00011F E5*00            [12]  345 	mov	a,_bp
      000121 24 FC            [12]  346 	add	a,#0xfc
      000123 F8               [12]  347 	mov	r0,a
      000124 C3               [12]  348 	clr	c
      000125 EB               [12]  349 	mov	a,r3
      000126 96               [12]  350 	subb	a,@r0
      000127 D0 00            [24]  351 	pop	ar0
      000129 D0 01            [24]  352 	pop	ar1
      00012B 40 12            [24]  353 	jc	00104$
                                    354 ;	printf_large.c:181: *pb4 -= radix;
      00012D C0 00            [24]  355 	push	ar0
      00012F E5*00            [12]  356 	mov	a,_bp
      000131 24 FC            [12]  357 	add	a,#0xfc
      000133 F8               [12]  358 	mov	r0,a
      000134 EB               [12]  359 	mov	a,r3
      000135 C3               [12]  360 	clr	c
      000136 96               [12]  361 	subb	a,@r0
      000137 FB               [12]  362 	mov	r3,a
      000138 D0 00            [24]  363 	pop	ar0
      00013A A6 03            [24]  364 	mov	@r0,ar3
                                    365 ;	printf_large.c:182: ul |= 1;
      00013C 43 04 01         [24]  366 	orl	ar4,#0x01
      00013F                        367 00104$:
                                    368 ;	printf_large.c:184: } while (--i);
      00013F C0 00            [24]  369 	push	ar0
      000141 A8*00            [24]  370 	mov	r0,_bp
      000143 08               [12]  371 	inc	r0
      000144 16               [12]  372 	dec	@r0
      000145 E6               [12]  373 	mov	a,@r0
      000146 D0 00            [24]  374 	pop	ar0
      000148 60 02            [24]  375 	jz	00120$
      00014A 80 B4            [24]  376 	sjmp	00103$
      00014C                        377 00120$:
                                    378 ;	printf_large.c:185: value->ul = ul;
      00014C A7 04            [24]  379 	mov	@r1,ar4
      00014E 09               [12]  380 	inc	r1
      00014F A7 05            [24]  381 	mov	@r1,ar5
      000151 09               [12]  382 	inc	r1
      000152 A7 06            [24]  383 	mov	@r1,ar6
      000154 09               [12]  384 	inc	r1
      000155 A7 07            [24]  385 	mov	@r1,ar7
      000157 15 81            [12]  386 	dec	sp
      000159 D0*00            [24]  387 	pop	_bp
      00015B 02r00r00         [24]  388 	ljmp	__sdcc_banked_ret
                                    389 ;------------------------------------------------------------
                                    390 ;Allocation info for local variables in function 'output_float'
                                    391 ;------------------------------------------------------------
                                    392 ;reqWidth                  Allocated to stack - _bp -4
                                    393 ;reqDecimals               Allocated to stack - _bp -5
                                    394 ;output_char               Allocated to stack - _bp -8
                                    395 ;p                         Allocated to stack - _bp -11
                                    396 ;space                     Allocated to registers b3 
                                    397 ;sign                      Allocated to registers b2 
                                    398 ;zero                      Allocated to registers b1 
                                    399 ;left                      Allocated to registers b0 
                                    400 ;f                         Allocated to stack - _bp +1
                                    401 ;charsOutputted            Allocated to stack - _bp +26
                                    402 ;fpBuffer                  Allocated to stack - _bp +10
                                    403 ;negative                  Allocated to registers b4 
                                    404 ;integerPart               Allocated to stack - _bp +27
                                    405 ;rounding                  Allocated to registers r3 r5 r6 r7 
                                    406 ;decimalPart               Allocated to stack - _bp +31
                                    407 ;fpBI                      Allocated to registers r7 
                                    408 ;fpBD                      Allocated to stack - _bp +35
                                    409 ;minWidth                  Allocated to registers r6 
                                    410 ;i                         Allocated to registers r4 
                                    411 ;exp                       Allocated to stack - _bp +9
                                    412 ;sloc0                     Allocated to stack - _bp +44
                                    413 ;sloc1                     Allocated to stack - _bp +5
                                    414 ;sloc2                     Allocated to stack - _bp +9
                                    415 ;------------------------------------------------------------
                                    416 ;	printf_large.c:227: output_float (float f, unsigned char reqWidth,
                                    417 ;	-----------------------------------------
                                    418 ;	 function output_float
                                    419 ;	-----------------------------------------
      00015E                        420 _output_float:
      00015E C0*00            [24]  421 	push	_bp
      000160 85 81*00         [24]  422 	mov	_bp,sp
      000163 C0 82            [24]  423 	push	dpl
      000165 C0 83            [24]  424 	push	dph
      000167 C0 F0            [24]  425 	push	b
      000169 C0 E0            [24]  426 	push	acc
      00016B E5 81            [12]  427 	mov	a,sp
      00016D 24 1F            [12]  428 	add	a,#0x1F
      00016F F5 81            [12]  429 	mov	sp,a
                                    430 ;	printf_large.c:232: unsigned char charsOutputted = 0;
      000171 E5*00            [12]  431 	mov	a,_bp
      000173 24 1A            [12]  432 	add	a,#0x1a
      000175 F8               [12]  433 	mov	r0,a
      000176 76 00            [12]  434 	mov	@r0,#0x00
                                    435 ;	printf_large.c:247: bool negative = 0;
      000178 C2*00            [12]  436 	clr	b4
                                    437 ;	printf_large.c:253: signed char exp = -128;
      00017A E5*00            [12]  438 	mov	a,_bp
      00017C 24 09            [12]  439 	add	a,#0x09
      00017E F8               [12]  440 	mov	r0,a
      00017F 76 80            [12]  441 	mov	@r0,#0x80
                                    442 ;	printf_large.c:256: if (f<0)
      000181 C0*00            [24]  443 	push	bits
      000183 E4               [12]  444 	clr	a
      000184 C0 E0            [24]  445 	push	acc
      000186 C0 E0            [24]  446 	push	acc
      000188 C0 E0            [24]  447 	push	acc
      00018A C0 E0            [24]  448 	push	acc
      00018C A8*00            [24]  449 	mov	r0,_bp
      00018E 08               [12]  450 	inc	r0
      00018F 86 82            [24]  451 	mov	dpl,@r0
      000191 08               [12]  452 	inc	r0
      000192 86 83            [24]  453 	mov	dph,@r0
      000194 08               [12]  454 	inc	r0
      000195 86 F0            [24]  455 	mov	b,@r0
      000197 08               [12]  456 	inc	r0
      000198 E6               [12]  457 	mov	a,@r0
      000199 12r00r00         [24]  458 	lcall	___fslt
      00019C AB 82            [24]  459 	mov	r3,dpl
      00019E E5 81            [12]  460 	mov	a,sp
      0001A0 24 FC            [12]  461 	add	a,#0xfc
      0001A2 F5 81            [12]  462 	mov	sp,a
      0001A4 D0*00            [24]  463 	pop	bits
      0001A6 EB               [12]  464 	mov	a,r3
      0001A7 60 12            [24]  465 	jz	00102$
                                    466 ;	printf_large.c:258: negative=1;
      0001A9 D2*00            [12]  467 	setb	b4
                                    468 ;	printf_large.c:259: f=-f;
      0001AB A8*00            [24]  469 	mov	r0,_bp
      0001AD 08               [12]  470 	inc	r0
      0001AE E6               [12]  471 	mov	a,@r0
      0001AF F6               [12]  472 	mov	@r0,a
      0001B0 08               [12]  473 	inc	r0
      0001B1 E6               [12]  474 	mov	a,@r0
      0001B2 F6               [12]  475 	mov	@r0,a
      0001B3 08               [12]  476 	inc	r0
      0001B4 E6               [12]  477 	mov	a,@r0
      0001B5 F6               [12]  478 	mov	@r0,a
      0001B6 08               [12]  479 	inc	r0
      0001B7 E6               [12]  480 	mov	a,@r0
      0001B8 B2 E7            [12]  481 	cpl	acc.7
      0001BA F6               [12]  482 	mov	@r0,a
      0001BB                        483 00102$:
                                    484 ;	printf_large.c:262: if (f>0x00ffffff)
      0001BB C0*00            [24]  485 	push	bits
      0001BD 74 FF            [12]  486 	mov	a,#0xFF
      0001BF C0 E0            [24]  487 	push	acc
      0001C1 C0 E0            [24]  488 	push	acc
      0001C3 74 7F            [12]  489 	mov	a,#0x7F
      0001C5 C0 E0            [24]  490 	push	acc
      0001C7 74 4B            [12]  491 	mov	a,#0x4B
      0001C9 C0 E0            [24]  492 	push	acc
      0001CB A8*00            [24]  493 	mov	r0,_bp
      0001CD 08               [12]  494 	inc	r0
      0001CE 86 82            [24]  495 	mov	dpl,@r0
      0001D0 08               [12]  496 	inc	r0
      0001D1 86 83            [24]  497 	mov	dph,@r0
      0001D3 08               [12]  498 	inc	r0
      0001D4 86 F0            [24]  499 	mov	b,@r0
      0001D6 08               [12]  500 	inc	r0
      0001D7 E6               [12]  501 	mov	a,@r0
      0001D8 12r00r00         [24]  502 	lcall	___fsgt
      0001DB AB 82            [24]  503 	mov	r3,dpl
      0001DD E5 81            [12]  504 	mov	a,sp
      0001DF 24 FC            [12]  505 	add	a,#0xfc
      0001E1 F5 81            [12]  506 	mov	sp,a
      0001E3 D0*00            [24]  507 	pop	bits
      0001E5 EB               [12]  508 	mov	a,r3
      0001E6 70 03            [24]  509 	jnz	00348$
      0001E8 02r03r5B         [24]  510 	ljmp	00111$
      0001EB                        511 00348$:
                                    512 ;	printf_large.c:266: for (exp = 0; f >= 10.0; exp++) f /=10.0;
      0001EB 7F 00            [12]  513 	mov	r7,#0x00
      0001ED                        514 00181$:
      0001ED C0 07            [24]  515 	push	ar7
      0001EF C0*00            [24]  516 	push	bits
      0001F1 E4               [12]  517 	clr	a
      0001F2 C0 E0            [24]  518 	push	acc
      0001F4 C0 E0            [24]  519 	push	acc
      0001F6 74 20            [12]  520 	mov	a,#0x20
      0001F8 C0 E0            [24]  521 	push	acc
      0001FA 74 41            [12]  522 	mov	a,#0x41
      0001FC C0 E0            [24]  523 	push	acc
      0001FE A8*00            [24]  524 	mov	r0,_bp
      000200 08               [12]  525 	inc	r0
      000201 86 82            [24]  526 	mov	dpl,@r0
      000203 08               [12]  527 	inc	r0
      000204 86 83            [24]  528 	mov	dph,@r0
      000206 08               [12]  529 	inc	r0
      000207 86 F0            [24]  530 	mov	b,@r0
      000209 08               [12]  531 	inc	r0
      00020A E6               [12]  532 	mov	a,@r0
      00020B 12r00r00         [24]  533 	lcall	___fslt
      00020E AB 82            [24]  534 	mov	r3,dpl
      000210 E5 81            [12]  535 	mov	a,sp
      000212 24 FC            [12]  536 	add	a,#0xfc
      000214 F5 81            [12]  537 	mov	sp,a
      000216 D0*00            [24]  538 	pop	bits
      000218 D0 07            [24]  539 	pop	ar7
      00021A EB               [12]  540 	mov	a,r3
      00021B 70 3B            [24]  541 	jnz	00205$
      00021D C0 07            [24]  542 	push	ar7
      00021F C0*00            [24]  543 	push	bits
      000221 E4               [12]  544 	clr	a
      000222 C0 E0            [24]  545 	push	acc
      000224 C0 E0            [24]  546 	push	acc
      000226 74 20            [12]  547 	mov	a,#0x20
      000228 C0 E0            [24]  548 	push	acc
      00022A 74 41            [12]  549 	mov	a,#0x41
      00022C C0 E0            [24]  550 	push	acc
      00022E A8*00            [24]  551 	mov	r0,_bp
      000230 08               [12]  552 	inc	r0
      000231 86 82            [24]  553 	mov	dpl,@r0
      000233 08               [12]  554 	inc	r0
      000234 86 83            [24]  555 	mov	dph,@r0
      000236 08               [12]  556 	inc	r0
      000237 86 F0            [24]  557 	mov	b,@r0
      000239 08               [12]  558 	inc	r0
      00023A E6               [12]  559 	mov	a,@r0
      00023B 12r00r00         [24]  560 	lcall	___fsdiv
      00023E A8*00            [24]  561 	mov	r0,_bp
      000240 08               [12]  562 	inc	r0
      000241 A6 82            [24]  563 	mov	@r0,dpl
      000243 08               [12]  564 	inc	r0
      000244 A6 83            [24]  565 	mov	@r0,dph
      000246 08               [12]  566 	inc	r0
      000247 A6 F0            [24]  567 	mov	@r0,b
      000249 08               [12]  568 	inc	r0
      00024A F6               [12]  569 	mov	@r0,a
      00024B E5 81            [12]  570 	mov	a,sp
      00024D 24 FC            [12]  571 	add	a,#0xfc
      00024F F5 81            [12]  572 	mov	sp,a
      000251 D0*00            [24]  573 	pop	bits
      000253 D0 07            [24]  574 	pop	ar7
      000255 0F               [12]  575 	inc	r7
      000256 80 95            [24]  576 	sjmp	00181$
      000258                        577 00205$:
      000258                        578 00184$:
                                    579 ;	printf_large.c:267: for (       ; f < 1.0;   exp--) f *=10.0;
      000258 C0 07            [24]  580 	push	ar7
      00025A C0*00            [24]  581 	push	bits
      00025C E4               [12]  582 	clr	a
      00025D C0 E0            [24]  583 	push	acc
      00025F C0 E0            [24]  584 	push	acc
      000261 74 80            [12]  585 	mov	a,#0x80
      000263 C0 E0            [24]  586 	push	acc
      000265 74 3F            [12]  587 	mov	a,#0x3F
      000267 C0 E0            [24]  588 	push	acc
      000269 A8*00            [24]  589 	mov	r0,_bp
      00026B 08               [12]  590 	inc	r0
      00026C 86 82            [24]  591 	mov	dpl,@r0
      00026E 08               [12]  592 	inc	r0
      00026F 86 83            [24]  593 	mov	dph,@r0
      000271 08               [12]  594 	inc	r0
      000272 86 F0            [24]  595 	mov	b,@r0
      000274 08               [12]  596 	inc	r0
      000275 E6               [12]  597 	mov	a,@r0
      000276 12r00r00         [24]  598 	lcall	___fslt
      000279 AB 82            [24]  599 	mov	r3,dpl
      00027B E5 81            [12]  600 	mov	a,sp
      00027D 24 FC            [12]  601 	add	a,#0xfc
      00027F F5 81            [12]  602 	mov	sp,a
      000281 D0*00            [24]  603 	pop	bits
      000283 D0 07            [24]  604 	pop	ar7
      000285 EB               [12]  605 	mov	a,r3
      000286 60 3B            [24]  606 	jz	00246$
      000288 C0 07            [24]  607 	push	ar7
      00028A C0*00            [24]  608 	push	bits
      00028C A8*00            [24]  609 	mov	r0,_bp
      00028E 08               [12]  610 	inc	r0
      00028F E6               [12]  611 	mov	a,@r0
      000290 C0 E0            [24]  612 	push	acc
      000292 08               [12]  613 	inc	r0
      000293 E6               [12]  614 	mov	a,@r0
      000294 C0 E0            [24]  615 	push	acc
      000296 08               [12]  616 	inc	r0
      000297 E6               [12]  617 	mov	a,@r0
      000298 C0 E0            [24]  618 	push	acc
      00029A 08               [12]  619 	inc	r0
      00029B E6               [12]  620 	mov	a,@r0
      00029C C0 E0            [24]  621 	push	acc
      00029E 90 00 00         [24]  622 	mov	dptr,#0x0000
      0002A1 75 F0 20         [24]  623 	mov	b,#0x20
      0002A4 74 41            [12]  624 	mov	a,#0x41
      0002A6 12r00r00         [24]  625 	lcall	___fsmul
      0002A9 A8*00            [24]  626 	mov	r0,_bp
      0002AB 08               [12]  627 	inc	r0
      0002AC A6 82            [24]  628 	mov	@r0,dpl
      0002AE 08               [12]  629 	inc	r0
      0002AF A6 83            [24]  630 	mov	@r0,dph
      0002B1 08               [12]  631 	inc	r0
      0002B2 A6 F0            [24]  632 	mov	@r0,b
      0002B4 08               [12]  633 	inc	r0
      0002B5 F6               [12]  634 	mov	@r0,a
      0002B6 E5 81            [12]  635 	mov	a,sp
      0002B8 24 FC            [12]  636 	add	a,#0xfc
      0002BA F5 81            [12]  637 	mov	sp,a
      0002BC D0*00            [24]  638 	pop	bits
      0002BE D0 07            [24]  639 	pop	ar7
      0002C0 1F               [12]  640 	dec	r7
      0002C1 80 95            [24]  641 	sjmp	00184$
      0002C3                        642 00246$:
      0002C3 E5*00            [12]  643 	mov	a,_bp
      0002C5 24 09            [12]  644 	add	a,#0x09
      0002C7 F8               [12]  645 	mov	r0,a
      0002C8 A6 07            [24]  646 	mov	@r0,ar7
                                    647 ;	printf_large.c:269: if (negative)
      0002CA 30*00 3F         [24]  648 	jnb	b4,00108$
                                    649 ;	printf_large.c:271: OUTPUT_CHAR ('-', p);
      0002CD C0*00            [24]  650 	push	bits
      0002CF E5*00            [12]  651 	mov	a,_bp
      0002D1 24 F5            [12]  652 	add	a,#0xf5
      0002D3 F8               [12]  653 	mov	r0,a
      0002D4 E6               [12]  654 	mov	a,@r0
      0002D5 C0 E0            [24]  655 	push	acc
      0002D7 08               [12]  656 	inc	r0
      0002D8 E6               [12]  657 	mov	a,@r0
      0002D9 C0 E0            [24]  658 	push	acc
      0002DB 08               [12]  659 	inc	r0
      0002DC E6               [12]  660 	mov	a,@r0
      0002DD C0 E0            [24]  661 	push	acc
      0002DF E5*00            [12]  662 	mov	a,_bp
      0002E1 24 F8            [12]  663 	add	a,#0xf8
      0002E3 F8               [12]  664 	mov	r0,a
      0002E4 E6               [12]  665 	mov	a,@r0
      0002E5 C0 E0            [24]  666 	push	acc
      0002E7 08               [12]  667 	inc	r0
      0002E8 E6               [12]  668 	mov	a,@r0
      0002E9 C0 E0            [24]  669 	push	acc
      0002EB 08               [12]  670 	inc	r0
      0002EC E6               [12]  671 	mov	a,@r0
      0002ED C0 E0            [24]  672 	push	acc
      0002EF 75 82 2D         [24]  673 	mov	dpl,#0x2D
      0002F2 D0 02            [24]  674 	pop	ar2
      0002F4 D0 01            [24]  675 	pop	ar1
      0002F6 D0 00            [24]  676 	pop	ar0
      0002F8 12r00r00         [24]  677 	lcall	__sdcc_banked_call
      0002FB 15 81            [12]  678 	dec	sp
      0002FD 15 81            [12]  679 	dec	sp
      0002FF 15 81            [12]  680 	dec	sp
      000301 D0*00            [24]  681 	pop	bits
      000303 E5*00            [12]  682 	mov	a,_bp
      000305 24 1A            [12]  683 	add	a,#0x1a
      000307 F8               [12]  684 	mov	r0,a
      000308 76 01            [12]  685 	mov	@r0,#0x01
      00030A 80 40            [24]  686 	sjmp	00109$
      00030C                        687 00108$:
                                    688 ;	printf_large.c:275: if (sign)
      00030C 30*00 3D         [24]  689 	jnb	b2,00109$
                                    690 ;	printf_large.c:277: OUTPUT_CHAR ('+', p);
      00030F C0*00            [24]  691 	push	bits
      000311 E5*00            [12]  692 	mov	a,_bp
      000313 24 F5            [12]  693 	add	a,#0xf5
      000315 F8               [12]  694 	mov	r0,a
      000316 E6               [12]  695 	mov	a,@r0
      000317 C0 E0            [24]  696 	push	acc
      000319 08               [12]  697 	inc	r0
      00031A E6               [12]  698 	mov	a,@r0
      00031B C0 E0            [24]  699 	push	acc
      00031D 08               [12]  700 	inc	r0
      00031E E6               [12]  701 	mov	a,@r0
      00031F C0 E0            [24]  702 	push	acc
      000321 E5*00            [12]  703 	mov	a,_bp
      000323 24 F8            [12]  704 	add	a,#0xf8
      000325 F8               [12]  705 	mov	r0,a
      000326 E6               [12]  706 	mov	a,@r0
      000327 C0 E0            [24]  707 	push	acc
      000329 08               [12]  708 	inc	r0
      00032A E6               [12]  709 	mov	a,@r0
      00032B C0 E0            [24]  710 	push	acc
      00032D 08               [12]  711 	inc	r0
      00032E E6               [12]  712 	mov	a,@r0
      00032F C0 E0            [24]  713 	push	acc
      000331 75 82 2B         [24]  714 	mov	dpl,#0x2B
      000334 D0 02            [24]  715 	pop	ar2
      000336 D0 01            [24]  716 	pop	ar1
      000338 D0 00            [24]  717 	pop	ar0
      00033A 12r00r00         [24]  718 	lcall	__sdcc_banked_call
      00033D 15 81            [12]  719 	dec	sp
      00033F 15 81            [12]  720 	dec	sp
      000341 15 81            [12]  721 	dec	sp
      000343 D0*00            [24]  722 	pop	bits
      000345 E5*00            [12]  723 	mov	a,_bp
      000347 24 1A            [12]  724 	add	a,#0x1a
      000349 F8               [12]  725 	mov	r0,a
      00034A 76 01            [12]  726 	mov	@r0,#0x01
      00034C                        727 00109$:
                                    728 ;	printf_large.c:280: reqWidth = 0;
      00034C E5*00            [12]  729 	mov	a,_bp
      00034E 24 FC            [12]  730 	add	a,#0xfc
      000350 F8               [12]  731 	mov	r0,a
      000351 76 00            [12]  732 	mov	@r0,#0x00
                                    733 ;	printf_large.c:281: left = 0;
      000353 C2*00            [12]  734 	clr	b0
                                    735 ;	printf_large.c:282: zero = 0;
      000355 C2*00            [12]  736 	clr	b1
                                    737 ;	printf_large.c:283: sign = 0;
      000357 C2*00            [12]  738 	clr	b2
                                    739 ;	printf_large.c:284: space = 0;
      000359 C2*00            [12]  740 	clr	b3
      00035B                        741 00111$:
                                    742 ;	printf_large.c:288: if (reqDecimals==-1)
      00035B E5*00            [12]  743 	mov	a,_bp
      00035D 24 FB            [12]  744 	add	a,#0xfb
      00035F F8               [12]  745 	mov	r0,a
      000360 B6 FF 07         [24]  746 	cjne	@r0,#0xFF,00113$
                                    747 ;	printf_large.c:289: reqDecimals=DEFAULT_FLOAT_PRECISION;
      000363 E5*00            [12]  748 	mov	a,_bp
      000365 24 FB            [12]  749 	add	a,#0xfb
      000367 F8               [12]  750 	mov	r0,a
      000368 76 06            [12]  751 	mov	@r0,#0x06
      00036A                        752 00113$:
                                    753 ;	printf_large.c:292: rounding = 0.5;
      00036A 7B 00            [12]  754 	mov	r3,#0x00
      00036C 7D 00            [12]  755 	mov	r5,#0x00
      00036E 7E 00            [12]  756 	mov	r6,#0x00
      000370 7F 3F            [12]  757 	mov	r7,#0x3F
                                    758 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      000372 E5*00            [12]  759 	mov	a,_bp
      000374 24 FB            [12]  760 	add	a,#0xfb
      000376 F8               [12]  761 	mov	r0,a
      000377 86 04            [24]  762 	mov	ar4,@r0
      000379 8C 02            [24]  763 	mov	ar2,r4
      00037B                        764 00187$:
      00037B EA               [12]  765 	mov	a,r2
      00037C 60 48            [24]  766 	jz	00114$
                                    767 ;	printf_large.c:295: rounding /= 10.0;
      00037E C0 02            [24]  768 	push	ar2
      000380 C0*00            [24]  769 	push	bits
      000382 E4               [12]  770 	clr	a
      000383 C0 E0            [24]  771 	push	acc
      000385 C0 E0            [24]  772 	push	acc
      000387 74 20            [12]  773 	mov	a,#0x20
      000389 C0 E0            [24]  774 	push	acc
      00038B 74 41            [12]  775 	mov	a,#0x41
      00038D C0 E0            [24]  776 	push	acc
      00038F 8B 82            [24]  777 	mov	dpl,r3
      000391 8D 83            [24]  778 	mov	dph,r5
      000393 8E F0            [24]  779 	mov	b,r6
      000395 EF               [12]  780 	mov	a,r7
      000396 12r00r00         [24]  781 	lcall	___fsdiv
      000399 C8               [12]  782 	xch	a,r0
      00039A E5*00            [12]  783 	mov	a,_bp
      00039C 24 05            [12]  784 	add	a,#0x05
      00039E C8               [12]  785 	xch	a,r0
      00039F A6 82            [24]  786 	mov	@r0,dpl
      0003A1 08               [12]  787 	inc	r0
      0003A2 A6 83            [24]  788 	mov	@r0,dph
      0003A4 08               [12]  789 	inc	r0
      0003A5 A6 F0            [24]  790 	mov	@r0,b
      0003A7 08               [12]  791 	inc	r0
      0003A8 F6               [12]  792 	mov	@r0,a
      0003A9 E5 81            [12]  793 	mov	a,sp
      0003AB 24 FC            [12]  794 	add	a,#0xfc
      0003AD F5 81            [12]  795 	mov	sp,a
      0003AF D0*00            [24]  796 	pop	bits
      0003B1 D0 02            [24]  797 	pop	ar2
      0003B3 E5*00            [12]  798 	mov	a,_bp
      0003B5 24 05            [12]  799 	add	a,#0x05
      0003B7 F8               [12]  800 	mov	r0,a
      0003B8 86 03            [24]  801 	mov	ar3,@r0
      0003BA 08               [12]  802 	inc	r0
      0003BB 86 05            [24]  803 	mov	ar5,@r0
      0003BD 08               [12]  804 	inc	r0
      0003BE 86 06            [24]  805 	mov	ar6,@r0
      0003C0 08               [12]  806 	inc	r0
      0003C1 86 07            [24]  807 	mov	ar7,@r0
                                    808 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      0003C3 1A               [12]  809 	dec	r2
      0003C4 80 B5            [24]  810 	sjmp	00187$
      0003C6                        811 00114$:
                                    812 ;	printf_large.c:297: f += rounding;
      0003C6 C0*00            [24]  813 	push	bits
      0003C8 C0 03            [24]  814 	push	ar3
      0003CA C0 05            [24]  815 	push	ar5
      0003CC C0 06            [24]  816 	push	ar6
      0003CE C0 07            [24]  817 	push	ar7
      0003D0 A8*00            [24]  818 	mov	r0,_bp
      0003D2 08               [12]  819 	inc	r0
      0003D3 86 82            [24]  820 	mov	dpl,@r0
      0003D5 08               [12]  821 	inc	r0
      0003D6 86 83            [24]  822 	mov	dph,@r0
      0003D8 08               [12]  823 	inc	r0
      0003D9 86 F0            [24]  824 	mov	b,@r0
      0003DB 08               [12]  825 	inc	r0
      0003DC E6               [12]  826 	mov	a,@r0
      0003DD 12r00r00         [24]  827 	lcall	___fsadd
      0003E0 A8*00            [24]  828 	mov	r0,_bp
      0003E2 08               [12]  829 	inc	r0
      0003E3 A6 82            [24]  830 	mov	@r0,dpl
      0003E5 08               [12]  831 	inc	r0
      0003E6 A6 83            [24]  832 	mov	@r0,dph
      0003E8 08               [12]  833 	inc	r0
      0003E9 A6 F0            [24]  834 	mov	@r0,b
      0003EB 08               [12]  835 	inc	r0
      0003EC F6               [12]  836 	mov	@r0,a
      0003ED E5 81            [12]  837 	mov	a,sp
      0003EF 24 FC            [12]  838 	add	a,#0xfc
      0003F1 F5 81            [12]  839 	mov	sp,a
      0003F3 D0*00            [24]  840 	pop	bits
                                    841 ;	printf_large.c:300: integerPart = f;
      0003F5 A8*00            [24]  842 	mov	r0,_bp
      0003F7 08               [12]  843 	inc	r0
      0003F8 86 82            [24]  844 	mov	dpl,@r0
      0003FA 08               [12]  845 	inc	r0
      0003FB 86 83            [24]  846 	mov	dph,@r0
      0003FD 08               [12]  847 	inc	r0
      0003FE 86 F0            [24]  848 	mov	b,@r0
      000400 08               [12]  849 	inc	r0
      000401 E6               [12]  850 	mov	a,@r0
      000402 C0*00            [24]  851 	push	bits
      000404 12r00r00         [24]  852 	lcall	___fs2ulong
      000407 AB 82            [24]  853 	mov	r3,dpl
      000409 AD 83            [24]  854 	mov	r5,dph
      00040B AE F0            [24]  855 	mov	r6,b
      00040D FF               [12]  856 	mov	r7,a
      00040E D0*00            [24]  857 	pop	bits
      000410 E5*00            [12]  858 	mov	a,_bp
      000412 24 1B            [12]  859 	add	a,#0x1b
      000414 F8               [12]  860 	mov	r0,a
      000415 A6 03            [24]  861 	mov	@r0,ar3
      000417 08               [12]  862 	inc	r0
      000418 A6 05            [24]  863 	mov	@r0,ar5
      00041A 08               [12]  864 	inc	r0
      00041B A6 06            [24]  865 	mov	@r0,ar6
      00041D 08               [12]  866 	inc	r0
      00041E A6 07            [24]  867 	mov	@r0,ar7
                                    868 ;	printf_large.c:301: decimalPart = f - integerPart;
      000420 E5*00            [12]  869 	mov	a,_bp
      000422 24 1B            [12]  870 	add	a,#0x1b
      000424 F8               [12]  871 	mov	r0,a
      000425 86 82            [24]  872 	mov	dpl,@r0
      000427 08               [12]  873 	inc	r0
      000428 86 83            [24]  874 	mov	dph,@r0
      00042A 08               [12]  875 	inc	r0
      00042B 86 F0            [24]  876 	mov	b,@r0
      00042D 08               [12]  877 	inc	r0
      00042E E6               [12]  878 	mov	a,@r0
      00042F C0*00            [24]  879 	push	bits
      000431 12r00r00         [24]  880 	lcall	___ulong2fs
      000434 AA 82            [24]  881 	mov	r2,dpl
      000436 AD 83            [24]  882 	mov	r5,dph
      000438 AE F0            [24]  883 	mov	r6,b
      00043A FF               [12]  884 	mov	r7,a
      00043B D0*00            [24]  885 	pop	bits
      00043D C0*00            [24]  886 	push	bits
      00043F C0 02            [24]  887 	push	ar2
      000441 C0 05            [24]  888 	push	ar5
      000443 C0 06            [24]  889 	push	ar6
      000445 C0 07            [24]  890 	push	ar7
      000447 A8*00            [24]  891 	mov	r0,_bp
      000449 08               [12]  892 	inc	r0
      00044A 86 82            [24]  893 	mov	dpl,@r0
      00044C 08               [12]  894 	inc	r0
      00044D 86 83            [24]  895 	mov	dph,@r0
      00044F 08               [12]  896 	inc	r0
      000450 86 F0            [24]  897 	mov	b,@r0
      000452 08               [12]  898 	inc	r0
      000453 E6               [12]  899 	mov	a,@r0
      000454 12r00r00         [24]  900 	lcall	___fssub
      000457 AB 82            [24]  901 	mov	r3,dpl
      000459 AD 83            [24]  902 	mov	r5,dph
      00045B AE F0            [24]  903 	mov	r6,b
      00045D FF               [12]  904 	mov	r7,a
      00045E E5 81            [12]  905 	mov	a,sp
      000460 24 FC            [12]  906 	add	a,#0xfc
      000462 F5 81            [12]  907 	mov	sp,a
      000464 D0*00            [24]  908 	pop	bits
      000466 E5*00            [12]  909 	mov	a,_bp
      000468 24 1F            [12]  910 	add	a,#0x1f
      00046A F8               [12]  911 	mov	r0,a
      00046B A6 03            [24]  912 	mov	@r0,ar3
      00046D 08               [12]  913 	inc	r0
      00046E A6 05            [24]  914 	mov	@r0,ar5
      000470 08               [12]  915 	inc	r0
      000471 A6 06            [24]  916 	mov	@r0,ar6
      000473 08               [12]  917 	inc	r0
      000474 A6 07            [24]  918 	mov	@r0,ar7
                                    919 ;	printf_large.c:304: while (integerPart)
      000476 E5*00            [12]  920 	mov	a,_bp
      000478 24 05            [12]  921 	add	a,#0x05
      00047A F8               [12]  922 	mov	r0,a
      00047B E5*00            [12]  923 	mov	a,_bp
      00047D 24 0A            [12]  924 	add	a,#0x0A
      00047F F6               [12]  925 	mov	@r0,a
      000480 7C 00            [12]  926 	mov	r4,#0x00
                                    927 ;	printf_large.c:426: return charsOutputted;
                                    928 ;	printf_large.c:304: while (integerPart)
      000482                        929 00115$:
      000482 E5*00            [12]  930 	mov	a,_bp
      000484 24 1B            [12]  931 	add	a,#0x1b
      000486 F8               [12]  932 	mov	r0,a
      000487 E6               [12]  933 	mov	a,@r0
      000488 08               [12]  934 	inc	r0
      000489 46               [12]  935 	orl	a,@r0
      00048A 08               [12]  936 	inc	r0
      00048B 46               [12]  937 	orl	a,@r0
      00048C 08               [12]  938 	inc	r0
      00048D 46               [12]  939 	orl	a,@r0
      00048E 70 03            [24]  940 	jnz	00356$
      000490 02r05r14         [24]  941 	ljmp	00248$
      000493                        942 00356$:
                                    943 ;	printf_large.c:306: fpBuffer[fpBI++]='0' + integerPart%10;
      000493 8C 07            [24]  944 	mov	ar7,r4
      000495 0C               [12]  945 	inc	r4
      000496 E5*00            [12]  946 	mov	a,_bp
      000498 24 05            [12]  947 	add	a,#0x05
      00049A F8               [12]  948 	mov	r0,a
      00049B EF               [12]  949 	mov	a,r7
      00049C 26               [12]  950 	add	a,@r0
      00049D F9               [12]  951 	mov	r1,a
      00049E C0 04            [24]  952 	push	ar4
      0004A0 C0 01            [24]  953 	push	ar1
      0004A2 C0*00            [24]  954 	push	bits
      0004A4 74 0A            [12]  955 	mov	a,#0x0A
      0004A6 C0 E0            [24]  956 	push	acc
      0004A8 E4               [12]  957 	clr	a
      0004A9 C0 E0            [24]  958 	push	acc
      0004AB C0 E0            [24]  959 	push	acc
      0004AD C0 E0            [24]  960 	push	acc
      0004AF E5*00            [12]  961 	mov	a,_bp
      0004B1 24 1B            [12]  962 	add	a,#0x1b
      0004B3 F8               [12]  963 	mov	r0,a
      0004B4 86 82            [24]  964 	mov	dpl,@r0
      0004B6 08               [12]  965 	inc	r0
      0004B7 86 83            [24]  966 	mov	dph,@r0
      0004B9 08               [12]  967 	inc	r0
      0004BA 86 F0            [24]  968 	mov	b,@r0
      0004BC 08               [12]  969 	inc	r0
      0004BD E6               [12]  970 	mov	a,@r0
      0004BE 12r00r00         [24]  971 	lcall	__modulong
      0004C1 AB 82            [24]  972 	mov	r3,dpl
      0004C3 E5 81            [12]  973 	mov	a,sp
      0004C5 24 FC            [12]  974 	add	a,#0xfc
      0004C7 F5 81            [12]  975 	mov	sp,a
      0004C9 D0*00            [24]  976 	pop	bits
      0004CB D0 01            [24]  977 	pop	ar1
      0004CD 74 30            [12]  978 	mov	a,#0x30
      0004CF 2B               [12]  979 	add	a,r3
      0004D0 F7               [12]  980 	mov	@r1,a
                                    981 ;	printf_large.c:307: integerPart /= 10;
      0004D1 C0*00            [24]  982 	push	bits
      0004D3 74 0A            [12]  983 	mov	a,#0x0A
      0004D5 C0 E0            [24]  984 	push	acc
      0004D7 E4               [12]  985 	clr	a
      0004D8 C0 E0            [24]  986 	push	acc
      0004DA C0 E0            [24]  987 	push	acc
      0004DC C0 E0            [24]  988 	push	acc
      0004DE E5*00            [12]  989 	mov	a,_bp
      0004E0 24 1B            [12]  990 	add	a,#0x1b
      0004E2 F8               [12]  991 	mov	r0,a
      0004E3 86 82            [24]  992 	mov	dpl,@r0
      0004E5 08               [12]  993 	inc	r0
      0004E6 86 83            [24]  994 	mov	dph,@r0
      0004E8 08               [12]  995 	inc	r0
      0004E9 86 F0            [24]  996 	mov	b,@r0
      0004EB 08               [12]  997 	inc	r0
      0004EC E6               [12]  998 	mov	a,@r0
      0004ED 12r00r00         [24]  999 	lcall	__divulong
      0004F0 AB 82            [24] 1000 	mov	r3,dpl
      0004F2 AD 83            [24] 1001 	mov	r5,dph
      0004F4 AE F0            [24] 1002 	mov	r6,b
      0004F6 FF               [12] 1003 	mov	r7,a
      0004F7 E5 81            [12] 1004 	mov	a,sp
      0004F9 24 FC            [12] 1005 	add	a,#0xfc
      0004FB F5 81            [12] 1006 	mov	sp,a
      0004FD D0*00            [24] 1007 	pop	bits
      0004FF D0 04            [24] 1008 	pop	ar4
      000501 E5*00            [12] 1009 	mov	a,_bp
      000503 24 1B            [12] 1010 	add	a,#0x1b
      000505 F8               [12] 1011 	mov	r0,a
      000506 A6 03            [24] 1012 	mov	@r0,ar3
      000508 08               [12] 1013 	inc	r0
      000509 A6 05            [24] 1014 	mov	@r0,ar5
      00050B 08               [12] 1015 	inc	r0
      00050C A6 06            [24] 1016 	mov	@r0,ar6
      00050E 08               [12] 1017 	inc	r0
      00050F A6 07            [24] 1018 	mov	@r0,ar7
      000511 02r04r82         [24] 1019 	ljmp	00115$
      000514                       1020 00248$:
                                   1021 ;	printf_large.c:309: if (!fpBI)
      000514 EC               [12] 1022 	mov	a,r4
      000515 FF               [12] 1023 	mov	r7,a
      000516 70 0D            [24] 1024 	jnz	00119$
                                   1025 ;	printf_large.c:312: fpBuffer[fpBI++]='0';
      000518 EC               [12] 1026 	mov	a,r4
      000519 04               [12] 1027 	inc	a
      00051A FF               [12] 1028 	mov	r7,a
      00051B E5*00            [12] 1029 	mov	a,_bp
      00051D 24 05            [12] 1030 	add	a,#0x05
      00051F F8               [12] 1031 	mov	r0,a
      000520 EC               [12] 1032 	mov	a,r4
      000521 26               [12] 1033 	add	a,@r0
      000522 F8               [12] 1034 	mov	r0,a
      000523 76 30            [12] 1035 	mov	@r0,#0x30
      000525                       1036 00119$:
                                   1037 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      000525 E5*00            [12] 1038 	mov	a,_bp
      000527 24 FB            [12] 1039 	add	a,#0xfb
      000529 F8               [12] 1040 	mov	r0,a
      00052A 86 04            [24] 1041 	mov	ar4,@r0
      00052C E5*00            [12] 1042 	mov	a,_bp
      00052E 24 23            [12] 1043 	add	a,#0x23
      000530 F8               [12] 1044 	mov	r0,a
      000531 A6 07            [24] 1045 	mov	@r0,ar7
      000533 8C 05            [24] 1046 	mov	ar5,r4
      000535                       1047 00190$:
      000535 ED               [12] 1048 	mov	a,r5
      000536 70 05            [24] 1049 	jnz	00189$
      000538 8D 04            [24] 1050 	mov	ar4,r5
      00053A 02r06r2E         [24] 1051 	ljmp	00120$
      00053D                       1052 00189$:
                                   1053 ;	printf_large.c:320: decimalPart *= 10.0;
      00053D C0 07            [24] 1054 	push	ar7
      00053F C0 05            [24] 1055 	push	ar5
      000541 C0*00            [24] 1056 	push	bits
      000543 E5*00            [12] 1057 	mov	a,_bp
      000545 24 1F            [12] 1058 	add	a,#0x1f
      000547 F8               [12] 1059 	mov	r0,a
      000548 E6               [12] 1060 	mov	a,@r0
      000549 C0 E0            [24] 1061 	push	acc
      00054B 08               [12] 1062 	inc	r0
      00054C E6               [12] 1063 	mov	a,@r0
      00054D C0 E0            [24] 1064 	push	acc
      00054F 08               [12] 1065 	inc	r0
      000550 E6               [12] 1066 	mov	a,@r0
      000551 C0 E0            [24] 1067 	push	acc
      000553 08               [12] 1068 	inc	r0
      000554 E6               [12] 1069 	mov	a,@r0
      000555 C0 E0            [24] 1070 	push	acc
      000557 90 00 00         [24] 1071 	mov	dptr,#0x0000
      00055A 75 F0 20         [24] 1072 	mov	b,#0x20
      00055D 74 41            [12] 1073 	mov	a,#0x41
      00055F 12r00r00         [24] 1074 	lcall	___fsmul
      000562 AA 82            [24] 1075 	mov	r2,dpl
      000564 AB 83            [24] 1076 	mov	r3,dph
      000566 AE F0            [24] 1077 	mov	r6,b
      000568 FF               [12] 1078 	mov	r7,a
      000569 E5 81            [12] 1079 	mov	a,sp
      00056B 24 FC            [12] 1080 	add	a,#0xfc
      00056D F5 81            [12] 1081 	mov	sp,a
      00056F D0*00            [24] 1082 	pop	bits
      000571 E5*00            [12] 1083 	mov	a,_bp
      000573 24 1F            [12] 1084 	add	a,#0x1f
      000575 F8               [12] 1085 	mov	r0,a
      000576 A6 02            [24] 1086 	mov	@r0,ar2
      000578 08               [12] 1087 	inc	r0
      000579 A6 03            [24] 1088 	mov	@r0,ar3
      00057B 08               [12] 1089 	inc	r0
      00057C A6 06            [24] 1090 	mov	@r0,ar6
      00057E 08               [12] 1091 	inc	r0
      00057F A6 07            [24] 1092 	mov	@r0,ar7
                                   1093 ;	printf_large.c:322: integerPart = decimalPart;
      000581 E5*00            [12] 1094 	mov	a,_bp
      000583 24 1F            [12] 1095 	add	a,#0x1f
      000585 F8               [12] 1096 	mov	r0,a
      000586 86 82            [24] 1097 	mov	dpl,@r0
      000588 08               [12] 1098 	inc	r0
      000589 86 83            [24] 1099 	mov	dph,@r0
      00058B 08               [12] 1100 	inc	r0
      00058C 86 F0            [24] 1101 	mov	b,@r0
      00058E 08               [12] 1102 	inc	r0
      00058F E6               [12] 1103 	mov	a,@r0
      000590 C0*00            [24] 1104 	push	bits
      000592 12r00r00         [24] 1105 	lcall	___fs2ulong
      000595 AA 82            [24] 1106 	mov	r2,dpl
      000597 AB 83            [24] 1107 	mov	r3,dph
      000599 AE F0            [24] 1108 	mov	r6,b
      00059B FF               [12] 1109 	mov	r7,a
      00059C D0*00            [24] 1110 	pop	bits
      00059E E5*00            [12] 1111 	mov	a,_bp
      0005A0 24 1B            [12] 1112 	add	a,#0x1b
      0005A2 F8               [12] 1113 	mov	r0,a
      0005A3 A6 02            [24] 1114 	mov	@r0,ar2
      0005A5 08               [12] 1115 	inc	r0
      0005A6 A6 03            [24] 1116 	mov	@r0,ar3
      0005A8 08               [12] 1117 	inc	r0
      0005A9 A6 06            [24] 1118 	mov	@r0,ar6
      0005AB 08               [12] 1119 	inc	r0
      0005AC A6 07            [24] 1120 	mov	@r0,ar7
                                   1121 ;	printf_large.c:323: fpBuffer[fpBD++] = '0' + integerPart;
      0005AE E5*00            [12] 1122 	mov	a,_bp
      0005B0 24 23            [12] 1123 	add	a,#0x23
      0005B2 F8               [12] 1124 	mov	r0,a
      0005B3 86 07            [24] 1125 	mov	ar7,@r0
      0005B5 E5*00            [12] 1126 	mov	a,_bp
      0005B7 24 23            [12] 1127 	add	a,#0x23
      0005B9 F8               [12] 1128 	mov	r0,a
      0005BA 06               [12] 1129 	inc	@r0
      0005BB E5*00            [12] 1130 	mov	a,_bp
      0005BD 24 05            [12] 1131 	add	a,#0x05
      0005BF F8               [12] 1132 	mov	r0,a
      0005C0 EF               [12] 1133 	mov	a,r7
      0005C1 26               [12] 1134 	add	a,@r0
      0005C2 F9               [12] 1135 	mov	r1,a
      0005C3 E5*00            [12] 1136 	mov	a,_bp
      0005C5 24 1B            [12] 1137 	add	a,#0x1b
      0005C7 F8               [12] 1138 	mov	r0,a
      0005C8 86 03            [24] 1139 	mov	ar3,@r0
      0005CA 74 30            [12] 1140 	mov	a,#0x30
      0005CC 2B               [12] 1141 	add	a,r3
      0005CD F7               [12] 1142 	mov	@r1,a
                                   1143 ;	printf_large.c:324: decimalPart -= integerPart;
      0005CE E5*00            [12] 1144 	mov	a,_bp
      0005D0 24 1B            [12] 1145 	add	a,#0x1b
      0005D2 F8               [12] 1146 	mov	r0,a
      0005D3 86 82            [24] 1147 	mov	dpl,@r0
      0005D5 08               [12] 1148 	inc	r0
      0005D6 86 83            [24] 1149 	mov	dph,@r0
      0005D8 08               [12] 1150 	inc	r0
      0005D9 86 F0            [24] 1151 	mov	b,@r0
      0005DB 08               [12] 1152 	inc	r0
      0005DC E6               [12] 1153 	mov	a,@r0
      0005DD C0*00            [24] 1154 	push	bits
      0005DF 12r00r00         [24] 1155 	lcall	___ulong2fs
      0005E2 AA 82            [24] 1156 	mov	r2,dpl
      0005E4 AB 83            [24] 1157 	mov	r3,dph
      0005E6 AE F0            [24] 1158 	mov	r6,b
      0005E8 FF               [12] 1159 	mov	r7,a
      0005E9 D0*00            [24] 1160 	pop	bits
      0005EB C0*00            [24] 1161 	push	bits
      0005ED C0 02            [24] 1162 	push	ar2
      0005EF C0 03            [24] 1163 	push	ar3
      0005F1 C0 06            [24] 1164 	push	ar6
      0005F3 C0 07            [24] 1165 	push	ar7
      0005F5 E5*00            [12] 1166 	mov	a,_bp
      0005F7 24 1F            [12] 1167 	add	a,#0x1f
      0005F9 F8               [12] 1168 	mov	r0,a
      0005FA 86 82            [24] 1169 	mov	dpl,@r0
      0005FC 08               [12] 1170 	inc	r0
      0005FD 86 83            [24] 1171 	mov	dph,@r0
      0005FF 08               [12] 1172 	inc	r0
      000600 86 F0            [24] 1173 	mov	b,@r0
      000602 08               [12] 1174 	inc	r0
      000603 E6               [12] 1175 	mov	a,@r0
      000604 12r00r00         [24] 1176 	lcall	___fssub
      000607 AA 82            [24] 1177 	mov	r2,dpl
      000609 AB 83            [24] 1178 	mov	r3,dph
      00060B AE F0            [24] 1179 	mov	r6,b
      00060D FF               [12] 1180 	mov	r7,a
      00060E E5 81            [12] 1181 	mov	a,sp
      000610 24 FC            [12] 1182 	add	a,#0xfc
      000612 F5 81            [12] 1183 	mov	sp,a
      000614 D0*00            [24] 1184 	pop	bits
      000616 D0 05            [24] 1185 	pop	ar5
      000618 E5*00            [12] 1186 	mov	a,_bp
      00061A 24 1F            [12] 1187 	add	a,#0x1f
      00061C F8               [12] 1188 	mov	r0,a
      00061D A6 02            [24] 1189 	mov	@r0,ar2
      00061F 08               [12] 1190 	inc	r0
      000620 A6 03            [24] 1191 	mov	@r0,ar3
      000622 08               [12] 1192 	inc	r0
      000623 A6 06            [24] 1193 	mov	@r0,ar6
      000625 08               [12] 1194 	inc	r0
      000626 A6 07            [24] 1195 	mov	@r0,ar7
                                   1196 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      000628 1D               [12] 1197 	dec	r5
      000629 D0 07            [24] 1198 	pop	ar7
      00062B 02r05r35         [24] 1199 	ljmp	00190$
      00062E                       1200 00120$:
                                   1201 ;	printf_large.c:327: minWidth=fpBI; // we need at least these
      00062E 8F 06            [24] 1202 	mov	ar6,r7
                                   1203 ;	printf_large.c:328: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
      000630 E5*00            [12] 1204 	mov	a,_bp
      000632 24 FB            [12] 1205 	add	a,#0xfb
      000634 F8               [12] 1206 	mov	r0,a
      000635 E6               [12] 1207 	mov	a,@r0
      000636 60 0A            [24] 1208 	jz	00198$
      000638 E5*00            [12] 1209 	mov	a,_bp
      00063A 24 FB            [12] 1210 	add	a,#0xfb
      00063C F8               [12] 1211 	mov	r0,a
      00063D E6               [12] 1212 	mov	a,@r0
      00063E 04               [12] 1213 	inc	a
      00063F FD               [12] 1214 	mov	r5,a
      000640 80 02            [24] 1215 	sjmp	00199$
      000642                       1216 00198$:
      000642 7D 00            [12] 1217 	mov	r5,#0x00
      000644                       1218 00199$:
      000644 8E 03            [24] 1219 	mov	ar3,r6
      000646 ED               [12] 1220 	mov	a,r5
      000647 2B               [12] 1221 	add	a,r3
      000648 FD               [12] 1222 	mov	r5,a
      000649 FE               [12] 1223 	mov	r6,a
                                   1224 ;	printf_large.c:329: if (negative || sign || space)
      00064A 20*00 06         [24] 1225 	jb	b4,00121$
      00064D 20*00 03         [24] 1226 	jb	b2,00121$
      000650 30*00 01         [24] 1227 	jnb	b3,00122$
      000653                       1228 00121$:
                                   1229 ;	printf_large.c:330: minWidth++; // and maybe even this :)
      000653 0E               [12] 1230 	inc	r6
      000654                       1231 00122$:
                                   1232 ;	printf_large.c:332: if (!left && reqWidth>i)
      000654 30*00 03         [24] 1233 	jnb	b0,00363$
      000657 02r09r0D         [24] 1234 	ljmp	00159$
      00065A                       1235 00363$:
      00065A E5*00            [12] 1236 	mov	a,_bp
      00065C 24 FC            [12] 1237 	add	a,#0xfc
      00065E F8               [12] 1238 	mov	r0,a
      00065F C3               [12] 1239 	clr	c
      000660 EC               [12] 1240 	mov	a,r4
      000661 96               [12] 1241 	subb	a,@r0
      000662 40 03            [24] 1242 	jc	00364$
      000664 02r09r0D         [24] 1243 	ljmp	00159$
      000667                       1244 00364$:
                                   1245 ;	printf_large.c:334: if (zero)
      000667 20*00 03         [24] 1246 	jb	b1,00365$
      00066A 02r07rA9         [24] 1247 	ljmp	00228$
      00066D                       1248 00365$:
                                   1249 ;	printf_large.c:336: if (negative)
      00066D 30*00 47         [24] 1250 	jnb	b4,00131$
                                   1251 ;	printf_large.c:338: OUTPUT_CHAR('-', p);
      000670 C0 07            [24] 1252 	push	ar7
      000672 C0 06            [24] 1253 	push	ar6
      000674 C0*00            [24] 1254 	push	bits
      000676 E5*00            [12] 1255 	mov	a,_bp
      000678 24 F5            [12] 1256 	add	a,#0xf5
      00067A F8               [12] 1257 	mov	r0,a
      00067B E6               [12] 1258 	mov	a,@r0
      00067C C0 E0            [24] 1259 	push	acc
      00067E 08               [12] 1260 	inc	r0
      00067F E6               [12] 1261 	mov	a,@r0
      000680 C0 E0            [24] 1262 	push	acc
      000682 08               [12] 1263 	inc	r0
      000683 E6               [12] 1264 	mov	a,@r0
      000684 C0 E0            [24] 1265 	push	acc
      000686 E5*00            [12] 1266 	mov	a,_bp
      000688 24 F8            [12] 1267 	add	a,#0xf8
      00068A F8               [12] 1268 	mov	r0,a
      00068B E6               [12] 1269 	mov	a,@r0
      00068C C0 E0            [24] 1270 	push	acc
      00068E 08               [12] 1271 	inc	r0
      00068F E6               [12] 1272 	mov	a,@r0
      000690 C0 E0            [24] 1273 	push	acc
      000692 08               [12] 1274 	inc	r0
      000693 E6               [12] 1275 	mov	a,@r0
      000694 C0 E0            [24] 1276 	push	acc
      000696 75 82 2D         [24] 1277 	mov	dpl,#0x2D
      000699 D0 02            [24] 1278 	pop	ar2
      00069B D0 01            [24] 1279 	pop	ar1
      00069D D0 00            [24] 1280 	pop	ar0
      00069F 12r00r00         [24] 1281 	lcall	__sdcc_banked_call
      0006A2 15 81            [12] 1282 	dec	sp
      0006A4 15 81            [12] 1283 	dec	sp
      0006A6 15 81            [12] 1284 	dec	sp
      0006A8 D0*00            [24] 1285 	pop	bits
      0006AA D0 06            [24] 1286 	pop	ar6
      0006AC D0 07            [24] 1287 	pop	ar7
      0006AE E5*00            [12] 1288 	mov	a,_bp
      0006B0 24 1A            [12] 1289 	add	a,#0x1a
      0006B2 F8               [12] 1290 	mov	r0,a
      0006B3 06               [12] 1291 	inc	@r0
      0006B4 02r07r47         [24] 1292 	ljmp	00226$
      0006B7                       1293 00131$:
                                   1294 ;	printf_large.c:340: else if (sign)
      0006B7 30*00 46         [24] 1295 	jnb	b2,00128$
                                   1296 ;	printf_large.c:342: OUTPUT_CHAR('+', p);
      0006BA C0 07            [24] 1297 	push	ar7
      0006BC C0 06            [24] 1298 	push	ar6
      0006BE C0*00            [24] 1299 	push	bits
      0006C0 E5*00            [12] 1300 	mov	a,_bp
      0006C2 24 F5            [12] 1301 	add	a,#0xf5
      0006C4 F8               [12] 1302 	mov	r0,a
      0006C5 E6               [12] 1303 	mov	a,@r0
      0006C6 C0 E0            [24] 1304 	push	acc
      0006C8 08               [12] 1305 	inc	r0
      0006C9 E6               [12] 1306 	mov	a,@r0
      0006CA C0 E0            [24] 1307 	push	acc
      0006CC 08               [12] 1308 	inc	r0
      0006CD E6               [12] 1309 	mov	a,@r0
      0006CE C0 E0            [24] 1310 	push	acc
      0006D0 E5*00            [12] 1311 	mov	a,_bp
      0006D2 24 F8            [12] 1312 	add	a,#0xf8
      0006D4 F8               [12] 1313 	mov	r0,a
      0006D5 E6               [12] 1314 	mov	a,@r0
      0006D6 C0 E0            [24] 1315 	push	acc
      0006D8 08               [12] 1316 	inc	r0
      0006D9 E6               [12] 1317 	mov	a,@r0
      0006DA C0 E0            [24] 1318 	push	acc
      0006DC 08               [12] 1319 	inc	r0
      0006DD E6               [12] 1320 	mov	a,@r0
      0006DE C0 E0            [24] 1321 	push	acc
      0006E0 75 82 2B         [24] 1322 	mov	dpl,#0x2B
      0006E3 D0 02            [24] 1323 	pop	ar2
      0006E5 D0 01            [24] 1324 	pop	ar1
      0006E7 D0 00            [24] 1325 	pop	ar0
      0006E9 12r00r00         [24] 1326 	lcall	__sdcc_banked_call
      0006EC 15 81            [12] 1327 	dec	sp
      0006EE 15 81            [12] 1328 	dec	sp
      0006F0 15 81            [12] 1329 	dec	sp
      0006F2 D0*00            [24] 1330 	pop	bits
      0006F4 D0 06            [24] 1331 	pop	ar6
      0006F6 D0 07            [24] 1332 	pop	ar7
      0006F8 E5*00            [12] 1333 	mov	a,_bp
      0006FA 24 1A            [12] 1334 	add	a,#0x1a
      0006FC F8               [12] 1335 	mov	r0,a
      0006FD 06               [12] 1336 	inc	@r0
      0006FE 80 47            [24] 1337 	sjmp	00226$
      000700                       1338 00128$:
                                   1339 ;	printf_large.c:344: else if (space)
      000700 30*00 44         [24] 1340 	jnb	b3,00226$
                                   1341 ;	printf_large.c:346: OUTPUT_CHAR(' ', p);
      000703 C0 07            [24] 1342 	push	ar7
      000705 C0 06            [24] 1343 	push	ar6
      000707 C0*00            [24] 1344 	push	bits
      000709 E5*00            [12] 1345 	mov	a,_bp
      00070B 24 F5            [12] 1346 	add	a,#0xf5
      00070D F8               [12] 1347 	mov	r0,a
      00070E E6               [12] 1348 	mov	a,@r0
      00070F C0 E0            [24] 1349 	push	acc
      000711 08               [12] 1350 	inc	r0
      000712 E6               [12] 1351 	mov	a,@r0
      000713 C0 E0            [24] 1352 	push	acc
      000715 08               [12] 1353 	inc	r0
      000716 E6               [12] 1354 	mov	a,@r0
      000717 C0 E0            [24] 1355 	push	acc
      000719 E5*00            [12] 1356 	mov	a,_bp
      00071B 24 F8            [12] 1357 	add	a,#0xf8
      00071D F8               [12] 1358 	mov	r0,a
      00071E E6               [12] 1359 	mov	a,@r0
      00071F C0 E0            [24] 1360 	push	acc
      000721 08               [12] 1361 	inc	r0
      000722 E6               [12] 1362 	mov	a,@r0
      000723 C0 E0            [24] 1363 	push	acc
      000725 08               [12] 1364 	inc	r0
      000726 E6               [12] 1365 	mov	a,@r0
      000727 C0 E0            [24] 1366 	push	acc
      000729 75 82 20         [24] 1367 	mov	dpl,#0x20
      00072C D0 02            [24] 1368 	pop	ar2
      00072E D0 01            [24] 1369 	pop	ar1
      000730 D0 00            [24] 1370 	pop	ar0
      000732 12r00r00         [24] 1371 	lcall	__sdcc_banked_call
      000735 15 81            [12] 1372 	dec	sp
      000737 15 81            [12] 1373 	dec	sp
      000739 15 81            [12] 1374 	dec	sp
      00073B D0*00            [24] 1375 	pop	bits
      00073D D0 06            [24] 1376 	pop	ar6
      00073F D0 07            [24] 1377 	pop	ar7
      000741 E5*00            [12] 1378 	mov	a,_bp
      000743 24 1A            [12] 1379 	add	a,#0x1a
      000745 F8               [12] 1380 	mov	r0,a
      000746 06               [12] 1381 	inc	@r0
                                   1382 ;	printf_large.c:348: while (reqWidth-->minWidth)
      000747                       1383 00226$:
      000747 E5*00            [12] 1384 	mov	a,_bp
      000749 24 1A            [12] 1385 	add	a,#0x1a
      00074B F8               [12] 1386 	mov	r0,a
      00074C 86 05            [24] 1387 	mov	ar5,@r0
      00074E E5*00            [12] 1388 	mov	a,_bp
      000750 24 FC            [12] 1389 	add	a,#0xfc
      000752 F8               [12] 1390 	mov	r0,a
      000753 86 04            [24] 1391 	mov	ar4,@r0
      000755                       1392 00133$:
      000755 8C 03            [24] 1393 	mov	ar3,r4
      000757 1C               [12] 1394 	dec	r4
      000758 C3               [12] 1395 	clr	c
      000759 EE               [12] 1396 	mov	a,r6
      00075A 9B               [12] 1397 	subb	a,r3
      00075B 40 03            [24] 1398 	jc	00369$
      00075D 02r09rE9         [24] 1399 	ljmp	00250$
      000760                       1400 00369$:
                                   1401 ;	printf_large.c:350: OUTPUT_CHAR('0', p);
      000760 C0 07            [24] 1402 	push	ar7
      000762 C0 06            [24] 1403 	push	ar6
      000764 C0 05            [24] 1404 	push	ar5
      000766 C0 04            [24] 1405 	push	ar4
      000768 C0*00            [24] 1406 	push	bits
      00076A E5*00            [12] 1407 	mov	a,_bp
      00076C 24 F5            [12] 1408 	add	a,#0xf5
      00076E F8               [12] 1409 	mov	r0,a
      00076F E6               [12] 1410 	mov	a,@r0
      000770 C0 E0            [24] 1411 	push	acc
      000772 08               [12] 1412 	inc	r0
      000773 E6               [12] 1413 	mov	a,@r0
      000774 C0 E0            [24] 1414 	push	acc
      000776 08               [12] 1415 	inc	r0
      000777 E6               [12] 1416 	mov	a,@r0
      000778 C0 E0            [24] 1417 	push	acc
      00077A E5*00            [12] 1418 	mov	a,_bp
      00077C 24 F8            [12] 1419 	add	a,#0xf8
      00077E F8               [12] 1420 	mov	r0,a
      00077F E6               [12] 1421 	mov	a,@r0
      000780 C0 E0            [24] 1422 	push	acc
      000782 08               [12] 1423 	inc	r0
      000783 E6               [12] 1424 	mov	a,@r0
      000784 C0 E0            [24] 1425 	push	acc
      000786 08               [12] 1426 	inc	r0
      000787 E6               [12] 1427 	mov	a,@r0
      000788 C0 E0            [24] 1428 	push	acc
      00078A 75 82 30         [24] 1429 	mov	dpl,#0x30
      00078D D0 02            [24] 1430 	pop	ar2
      00078F D0 01            [24] 1431 	pop	ar1
      000791 D0 00            [24] 1432 	pop	ar0
      000793 12r00r00         [24] 1433 	lcall	__sdcc_banked_call
      000796 15 81            [12] 1434 	dec	sp
      000798 15 81            [12] 1435 	dec	sp
      00079A 15 81            [12] 1436 	dec	sp
      00079C D0*00            [24] 1437 	pop	bits
      00079E D0 04            [24] 1438 	pop	ar4
      0007A0 D0 05            [24] 1439 	pop	ar5
      0007A2 D0 06            [24] 1440 	pop	ar6
      0007A4 D0 07            [24] 1441 	pop	ar7
      0007A6 0D               [12] 1442 	inc	r5
                                   1443 ;	printf_large.c:355: while (reqWidth-->minWidth)
      0007A7 80 AC            [24] 1444 	sjmp	00133$
      0007A9                       1445 00228$:
      0007A9 E5*00            [12] 1446 	mov	a,_bp
      0007AB 24 1A            [12] 1447 	add	a,#0x1a
      0007AD F8               [12] 1448 	mov	r0,a
      0007AE 86 03            [24] 1449 	mov	ar3,@r0
      0007B0 E5*00            [12] 1450 	mov	a,_bp
      0007B2 24 FC            [12] 1451 	add	a,#0xfc
      0007B4 F8               [12] 1452 	mov	r0,a
      0007B5 86 02            [24] 1453 	mov	ar2,@r0
      0007B7                       1454 00136$:
      0007B7 C0 07            [24] 1455 	push	ar7
      0007B9 8A 07            [24] 1456 	mov	ar7,r2
      0007BB 1A               [12] 1457 	dec	r2
      0007BC C3               [12] 1458 	clr	c
      0007BD EE               [12] 1459 	mov	a,r6
      0007BE 9F               [12] 1460 	subb	a,r7
      0007BF D0 07            [24] 1461 	pop	ar7
      0007C1 50 49            [24] 1462 	jnc	00251$
                                   1463 ;	printf_large.c:357: OUTPUT_CHAR(' ', p);
      0007C3 C0 07            [24] 1464 	push	ar7
      0007C5 C0 06            [24] 1465 	push	ar6
      0007C7 C0 03            [24] 1466 	push	ar3
      0007C9 C0 02            [24] 1467 	push	ar2
      0007CB C0*00            [24] 1468 	push	bits
      0007CD E5*00            [12] 1469 	mov	a,_bp
      0007CF 24 F5            [12] 1470 	add	a,#0xf5
      0007D1 F8               [12] 1471 	mov	r0,a
      0007D2 E6               [12] 1472 	mov	a,@r0
      0007D3 C0 E0            [24] 1473 	push	acc
      0007D5 08               [12] 1474 	inc	r0
      0007D6 E6               [12] 1475 	mov	a,@r0
      0007D7 C0 E0            [24] 1476 	push	acc
      0007D9 08               [12] 1477 	inc	r0
      0007DA E6               [12] 1478 	mov	a,@r0
      0007DB C0 E0            [24] 1479 	push	acc
      0007DD E5*00            [12] 1480 	mov	a,_bp
      0007DF 24 F8            [12] 1481 	add	a,#0xf8
      0007E1 F8               [12] 1482 	mov	r0,a
      0007E2 E6               [12] 1483 	mov	a,@r0
      0007E3 C0 E0            [24] 1484 	push	acc
      0007E5 08               [12] 1485 	inc	r0
      0007E6 E6               [12] 1486 	mov	a,@r0
      0007E7 C0 E0            [24] 1487 	push	acc
      0007E9 08               [12] 1488 	inc	r0
      0007EA E6               [12] 1489 	mov	a,@r0
      0007EB C0 E0            [24] 1490 	push	acc
      0007ED 75 82 20         [24] 1491 	mov	dpl,#0x20
      0007F0 D0 02            [24] 1492 	pop	ar2
      0007F2 D0 01            [24] 1493 	pop	ar1
      0007F4 D0 00            [24] 1494 	pop	ar0
      0007F6 12r00r00         [24] 1495 	lcall	__sdcc_banked_call
      0007F9 15 81            [12] 1496 	dec	sp
      0007FB 15 81            [12] 1497 	dec	sp
      0007FD 15 81            [12] 1498 	dec	sp
      0007FF D0*00            [24] 1499 	pop	bits
      000801 D0 02            [24] 1500 	pop	ar2
      000803 D0 03            [24] 1501 	pop	ar3
      000805 D0 06            [24] 1502 	pop	ar6
      000807 D0 07            [24] 1503 	pop	ar7
      000809 0B               [12] 1504 	inc	r3
      00080A 80 AB            [24] 1505 	sjmp	00136$
      00080C                       1506 00251$:
      00080C E5*00            [12] 1507 	mov	a,_bp
      00080E 24 1A            [12] 1508 	add	a,#0x1a
      000810 F8               [12] 1509 	mov	r0,a
      000811 A6 03            [24] 1510 	mov	@r0,ar3
      000813 E5*00            [12] 1511 	mov	a,_bp
      000815 24 FC            [12] 1512 	add	a,#0xfc
      000817 F8               [12] 1513 	mov	r0,a
      000818 A6 02            [24] 1514 	mov	@r0,ar2
                                   1515 ;	printf_large.c:359: if (negative)
      00081A 30*00 4D         [24] 1516 	jnb	b4,00145$
                                   1517 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
      00081D C0 07            [24] 1518 	push	ar7
      00081F C0 06            [24] 1519 	push	ar6
      000821 C0 03            [24] 1520 	push	ar3
      000823 C0*00            [24] 1521 	push	bits
      000825 E5*00            [12] 1522 	mov	a,_bp
      000827 24 F5            [12] 1523 	add	a,#0xf5
      000829 F8               [12] 1524 	mov	r0,a
      00082A E6               [12] 1525 	mov	a,@r0
      00082B C0 E0            [24] 1526 	push	acc
      00082D 08               [12] 1527 	inc	r0
      00082E E6               [12] 1528 	mov	a,@r0
      00082F C0 E0            [24] 1529 	push	acc
      000831 08               [12] 1530 	inc	r0
      000832 E6               [12] 1531 	mov	a,@r0
      000833 C0 E0            [24] 1532 	push	acc
      000835 E5*00            [12] 1533 	mov	a,_bp
      000837 24 F8            [12] 1534 	add	a,#0xf8
      000839 F8               [12] 1535 	mov	r0,a
      00083A E6               [12] 1536 	mov	a,@r0
      00083B C0 E0            [24] 1537 	push	acc
      00083D 08               [12] 1538 	inc	r0
      00083E E6               [12] 1539 	mov	a,@r0
      00083F C0 E0            [24] 1540 	push	acc
      000841 08               [12] 1541 	inc	r0
      000842 E6               [12] 1542 	mov	a,@r0
      000843 C0 E0            [24] 1543 	push	acc
      000845 75 82 2D         [24] 1544 	mov	dpl,#0x2D
      000848 D0 02            [24] 1545 	pop	ar2
      00084A D0 01            [24] 1546 	pop	ar1
      00084C D0 00            [24] 1547 	pop	ar0
      00084E 12r00r00         [24] 1548 	lcall	__sdcc_banked_call
      000851 15 81            [12] 1549 	dec	sp
      000853 15 81            [12] 1550 	dec	sp
      000855 15 81            [12] 1551 	dec	sp
      000857 D0*00            [24] 1552 	pop	bits
      000859 D0 03            [24] 1553 	pop	ar3
      00085B D0 06            [24] 1554 	pop	ar6
      00085D D0 07            [24] 1555 	pop	ar7
      00085F E5*00            [12] 1556 	mov	a,_bp
      000861 24 1A            [12] 1557 	add	a,#0x1a
      000863 F8               [12] 1558 	mov	r0,a
      000864 EB               [12] 1559 	mov	a,r3
      000865 04               [12] 1560 	inc	a
      000866 F6               [12] 1561 	mov	@r0,a
      000867 02r09rF7         [24] 1562 	ljmp	00160$
      00086A                       1563 00145$:
                                   1564 ;	printf_large.c:363: else if (sign)
      00086A 30*00 4D         [24] 1565 	jnb	b2,00142$
                                   1566 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
      00086D C0 07            [24] 1567 	push	ar7
      00086F C0 06            [24] 1568 	push	ar6
      000871 C0 03            [24] 1569 	push	ar3
      000873 C0*00            [24] 1570 	push	bits
      000875 E5*00            [12] 1571 	mov	a,_bp
      000877 24 F5            [12] 1572 	add	a,#0xf5
      000879 F8               [12] 1573 	mov	r0,a
      00087A E6               [12] 1574 	mov	a,@r0
      00087B C0 E0            [24] 1575 	push	acc
      00087D 08               [12] 1576 	inc	r0
      00087E E6               [12] 1577 	mov	a,@r0
      00087F C0 E0            [24] 1578 	push	acc
      000881 08               [12] 1579 	inc	r0
      000882 E6               [12] 1580 	mov	a,@r0
      000883 C0 E0            [24] 1581 	push	acc
      000885 E5*00            [12] 1582 	mov	a,_bp
      000887 24 F8            [12] 1583 	add	a,#0xf8
      000889 F8               [12] 1584 	mov	r0,a
      00088A E6               [12] 1585 	mov	a,@r0
      00088B C0 E0            [24] 1586 	push	acc
      00088D 08               [12] 1587 	inc	r0
      00088E E6               [12] 1588 	mov	a,@r0
      00088F C0 E0            [24] 1589 	push	acc
      000891 08               [12] 1590 	inc	r0
      000892 E6               [12] 1591 	mov	a,@r0
      000893 C0 E0            [24] 1592 	push	acc
      000895 75 82 2B         [24] 1593 	mov	dpl,#0x2B
      000898 D0 02            [24] 1594 	pop	ar2
      00089A D0 01            [24] 1595 	pop	ar1
      00089C D0 00            [24] 1596 	pop	ar0
      00089E 12r00r00         [24] 1597 	lcall	__sdcc_banked_call
      0008A1 15 81            [12] 1598 	dec	sp
      0008A3 15 81            [12] 1599 	dec	sp
      0008A5 15 81            [12] 1600 	dec	sp
      0008A7 D0*00            [24] 1601 	pop	bits
      0008A9 D0 03            [24] 1602 	pop	ar3
      0008AB D0 06            [24] 1603 	pop	ar6
      0008AD D0 07            [24] 1604 	pop	ar7
      0008AF E5*00            [12] 1605 	mov	a,_bp
      0008B1 24 1A            [12] 1606 	add	a,#0x1a
      0008B3 F8               [12] 1607 	mov	r0,a
      0008B4 EB               [12] 1608 	mov	a,r3
      0008B5 04               [12] 1609 	inc	a
      0008B6 F6               [12] 1610 	mov	@r0,a
      0008B7 02r09rF7         [24] 1611 	ljmp	00160$
      0008BA                       1612 00142$:
                                   1613 ;	printf_large.c:367: else if (space)
      0008BA 20*00 03         [24] 1614 	jb	b3,00373$
      0008BD 02r09rF7         [24] 1615 	ljmp	00160$
      0008C0                       1616 00373$:
                                   1617 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
      0008C0 C0 07            [24] 1618 	push	ar7
      0008C2 C0 06            [24] 1619 	push	ar6
      0008C4 C0 03            [24] 1620 	push	ar3
      0008C6 C0*00            [24] 1621 	push	bits
      0008C8 E5*00            [12] 1622 	mov	a,_bp
      0008CA 24 F5            [12] 1623 	add	a,#0xf5
      0008CC F8               [12] 1624 	mov	r0,a
      0008CD E6               [12] 1625 	mov	a,@r0
      0008CE C0 E0            [24] 1626 	push	acc
      0008D0 08               [12] 1627 	inc	r0
      0008D1 E6               [12] 1628 	mov	a,@r0
      0008D2 C0 E0            [24] 1629 	push	acc
      0008D4 08               [12] 1630 	inc	r0
      0008D5 E6               [12] 1631 	mov	a,@r0
      0008D6 C0 E0            [24] 1632 	push	acc
      0008D8 E5*00            [12] 1633 	mov	a,_bp
      0008DA 24 F8            [12] 1634 	add	a,#0xf8
      0008DC F8               [12] 1635 	mov	r0,a
      0008DD E6               [12] 1636 	mov	a,@r0
      0008DE C0 E0            [24] 1637 	push	acc
      0008E0 08               [12] 1638 	inc	r0
      0008E1 E6               [12] 1639 	mov	a,@r0
      0008E2 C0 E0            [24] 1640 	push	acc
      0008E4 08               [12] 1641 	inc	r0
      0008E5 E6               [12] 1642 	mov	a,@r0
      0008E6 C0 E0            [24] 1643 	push	acc
      0008E8 75 82 20         [24] 1644 	mov	dpl,#0x20
      0008EB D0 02            [24] 1645 	pop	ar2
      0008ED D0 01            [24] 1646 	pop	ar1
      0008EF D0 00            [24] 1647 	pop	ar0
      0008F1 12r00r00         [24] 1648 	lcall	__sdcc_banked_call
      0008F4 15 81            [12] 1649 	dec	sp
      0008F6 15 81            [12] 1650 	dec	sp
      0008F8 15 81            [12] 1651 	dec	sp
      0008FA D0*00            [24] 1652 	pop	bits
      0008FC D0 03            [24] 1653 	pop	ar3
      0008FE D0 06            [24] 1654 	pop	ar6
      000900 D0 07            [24] 1655 	pop	ar7
      000902 E5*00            [12] 1656 	mov	a,_bp
      000904 24 1A            [12] 1657 	add	a,#0x1a
      000906 F8               [12] 1658 	mov	r0,a
      000907 EB               [12] 1659 	mov	a,r3
      000908 04               [12] 1660 	inc	a
      000909 F6               [12] 1661 	mov	@r0,a
      00090A 02r09rF7         [24] 1662 	ljmp	00160$
      00090D                       1663 00159$:
                                   1664 ;	printf_large.c:375: if (negative)
      00090D 30*00 47         [24] 1665 	jnb	b4,00156$
                                   1666 ;	printf_large.c:377: OUTPUT_CHAR('-', p);
      000910 C0 07            [24] 1667 	push	ar7
      000912 C0 06            [24] 1668 	push	ar6
      000914 C0*00            [24] 1669 	push	bits
      000916 E5*00            [12] 1670 	mov	a,_bp
      000918 24 F5            [12] 1671 	add	a,#0xf5
      00091A F8               [12] 1672 	mov	r0,a
      00091B E6               [12] 1673 	mov	a,@r0
      00091C C0 E0            [24] 1674 	push	acc
      00091E 08               [12] 1675 	inc	r0
      00091F E6               [12] 1676 	mov	a,@r0
      000920 C0 E0            [24] 1677 	push	acc
      000922 08               [12] 1678 	inc	r0
      000923 E6               [12] 1679 	mov	a,@r0
      000924 C0 E0            [24] 1680 	push	acc
      000926 E5*00            [12] 1681 	mov	a,_bp
      000928 24 F8            [12] 1682 	add	a,#0xf8
      00092A F8               [12] 1683 	mov	r0,a
      00092B E6               [12] 1684 	mov	a,@r0
      00092C C0 E0            [24] 1685 	push	acc
      00092E 08               [12] 1686 	inc	r0
      00092F E6               [12] 1687 	mov	a,@r0
      000930 C0 E0            [24] 1688 	push	acc
      000932 08               [12] 1689 	inc	r0
      000933 E6               [12] 1690 	mov	a,@r0
      000934 C0 E0            [24] 1691 	push	acc
      000936 75 82 2D         [24] 1692 	mov	dpl,#0x2D
      000939 D0 02            [24] 1693 	pop	ar2
      00093B D0 01            [24] 1694 	pop	ar1
      00093D D0 00            [24] 1695 	pop	ar0
      00093F 12r00r00         [24] 1696 	lcall	__sdcc_banked_call
      000942 15 81            [12] 1697 	dec	sp
      000944 15 81            [12] 1698 	dec	sp
      000946 15 81            [12] 1699 	dec	sp
      000948 D0*00            [24] 1700 	pop	bits
      00094A D0 06            [24] 1701 	pop	ar6
      00094C D0 07            [24] 1702 	pop	ar7
      00094E E5*00            [12] 1703 	mov	a,_bp
      000950 24 1A            [12] 1704 	add	a,#0x1a
      000952 F8               [12] 1705 	mov	r0,a
      000953 06               [12] 1706 	inc	@r0
      000954 02r09rF7         [24] 1707 	ljmp	00160$
      000957                       1708 00156$:
                                   1709 ;	printf_large.c:379: else if (sign)
      000957 30*00 46         [24] 1710 	jnb	b2,00153$
                                   1711 ;	printf_large.c:381: OUTPUT_CHAR('+', p);
      00095A C0 07            [24] 1712 	push	ar7
      00095C C0 06            [24] 1713 	push	ar6
      00095E C0*00            [24] 1714 	push	bits
      000960 E5*00            [12] 1715 	mov	a,_bp
      000962 24 F5            [12] 1716 	add	a,#0xf5
      000964 F8               [12] 1717 	mov	r0,a
      000965 E6               [12] 1718 	mov	a,@r0
      000966 C0 E0            [24] 1719 	push	acc
      000968 08               [12] 1720 	inc	r0
      000969 E6               [12] 1721 	mov	a,@r0
      00096A C0 E0            [24] 1722 	push	acc
      00096C 08               [12] 1723 	inc	r0
      00096D E6               [12] 1724 	mov	a,@r0
      00096E C0 E0            [24] 1725 	push	acc
      000970 E5*00            [12] 1726 	mov	a,_bp
      000972 24 F8            [12] 1727 	add	a,#0xf8
      000974 F8               [12] 1728 	mov	r0,a
      000975 E6               [12] 1729 	mov	a,@r0
      000976 C0 E0            [24] 1730 	push	acc
      000978 08               [12] 1731 	inc	r0
      000979 E6               [12] 1732 	mov	a,@r0
      00097A C0 E0            [24] 1733 	push	acc
      00097C 08               [12] 1734 	inc	r0
      00097D E6               [12] 1735 	mov	a,@r0
      00097E C0 E0            [24] 1736 	push	acc
      000980 75 82 2B         [24] 1737 	mov	dpl,#0x2B
      000983 D0 02            [24] 1738 	pop	ar2
      000985 D0 01            [24] 1739 	pop	ar1
      000987 D0 00            [24] 1740 	pop	ar0
      000989 12r00r00         [24] 1741 	lcall	__sdcc_banked_call
      00098C 15 81            [12] 1742 	dec	sp
      00098E 15 81            [12] 1743 	dec	sp
      000990 15 81            [12] 1744 	dec	sp
      000992 D0*00            [24] 1745 	pop	bits
      000994 D0 06            [24] 1746 	pop	ar6
      000996 D0 07            [24] 1747 	pop	ar7
      000998 E5*00            [12] 1748 	mov	a,_bp
      00099A 24 1A            [12] 1749 	add	a,#0x1a
      00099C F8               [12] 1750 	mov	r0,a
      00099D 06               [12] 1751 	inc	@r0
      00099E 80 57            [24] 1752 	sjmp	00160$
      0009A0                       1753 00153$:
                                   1754 ;	printf_large.c:383: else if (space)
      0009A0 30*00 54         [24] 1755 	jnb	b3,00160$
                                   1756 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      0009A3 C0 07            [24] 1757 	push	ar7
      0009A5 C0 06            [24] 1758 	push	ar6
      0009A7 C0*00            [24] 1759 	push	bits
      0009A9 E5*00            [12] 1760 	mov	a,_bp
      0009AB 24 F5            [12] 1761 	add	a,#0xf5
      0009AD F8               [12] 1762 	mov	r0,a
      0009AE E6               [12] 1763 	mov	a,@r0
      0009AF C0 E0            [24] 1764 	push	acc
      0009B1 08               [12] 1765 	inc	r0
      0009B2 E6               [12] 1766 	mov	a,@r0
      0009B3 C0 E0            [24] 1767 	push	acc
      0009B5 08               [12] 1768 	inc	r0
      0009B6 E6               [12] 1769 	mov	a,@r0
      0009B7 C0 E0            [24] 1770 	push	acc
      0009B9 E5*00            [12] 1771 	mov	a,_bp
      0009BB 24 F8            [12] 1772 	add	a,#0xf8
      0009BD F8               [12] 1773 	mov	r0,a
      0009BE E6               [12] 1774 	mov	a,@r0
      0009BF C0 E0            [24] 1775 	push	acc
      0009C1 08               [12] 1776 	inc	r0
      0009C2 E6               [12] 1777 	mov	a,@r0
      0009C3 C0 E0            [24] 1778 	push	acc
      0009C5 08               [12] 1779 	inc	r0
      0009C6 E6               [12] 1780 	mov	a,@r0
      0009C7 C0 E0            [24] 1781 	push	acc
      0009C9 75 82 20         [24] 1782 	mov	dpl,#0x20
      0009CC D0 02            [24] 1783 	pop	ar2
      0009CE D0 01            [24] 1784 	pop	ar1
      0009D0 D0 00            [24] 1785 	pop	ar0
      0009D2 12r00r00         [24] 1786 	lcall	__sdcc_banked_call
      0009D5 15 81            [12] 1787 	dec	sp
      0009D7 15 81            [12] 1788 	dec	sp
      0009D9 15 81            [12] 1789 	dec	sp
      0009DB D0*00            [24] 1790 	pop	bits
      0009DD D0 06            [24] 1791 	pop	ar6
      0009DF D0 07            [24] 1792 	pop	ar7
      0009E1 E5*00            [12] 1793 	mov	a,_bp
      0009E3 24 1A            [12] 1794 	add	a,#0x1a
      0009E5 F8               [12] 1795 	mov	r0,a
      0009E6 06               [12] 1796 	inc	@r0
                                   1797 ;	printf_large.c:426: return charsOutputted;
                                   1798 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      0009E7 80 0E            [24] 1799 	sjmp	00160$
      0009E9                       1800 00250$:
      0009E9 E5*00            [12] 1801 	mov	a,_bp
      0009EB 24 1A            [12] 1802 	add	a,#0x1a
      0009ED F8               [12] 1803 	mov	r0,a
      0009EE A6 05            [24] 1804 	mov	@r0,ar5
      0009F0 E5*00            [12] 1805 	mov	a,_bp
      0009F2 24 FC            [12] 1806 	add	a,#0xfc
      0009F4 F8               [12] 1807 	mov	r0,a
      0009F5 A6 04            [24] 1808 	mov	@r0,ar4
      0009F7                       1809 00160$:
                                   1810 ;	printf_large.c:390: i=fpBI-1;
      0009F7 EF               [12] 1811 	mov	a,r7
      0009F8 14               [12] 1812 	dec	a
      0009F9 FD               [12] 1813 	mov	r5,a
                                   1814 ;	printf_large.c:391: do {
      0009FA E5*00            [12] 1815 	mov	a,_bp
      0009FC 24 1A            [12] 1816 	add	a,#0x1a
      0009FE F8               [12] 1817 	mov	r0,a
      0009FF 86 04            [24] 1818 	mov	ar4,@r0
      000A01                       1819 00162$:
                                   1820 ;	printf_large.c:392: OUTPUT_CHAR (fpBuffer[i], p);
      000A01 E5*00            [12] 1821 	mov	a,_bp
      000A03 24 05            [12] 1822 	add	a,#0x05
      000A05 F8               [12] 1823 	mov	r0,a
      000A06 ED               [12] 1824 	mov	a,r5
      000A07 26               [12] 1825 	add	a,@r0
      000A08 F9               [12] 1826 	mov	r1,a
      000A09 87 03            [24] 1827 	mov	ar3,@r1
      000A0B C0 07            [24] 1828 	push	ar7
      000A0D C0 06            [24] 1829 	push	ar6
      000A0F C0 05            [24] 1830 	push	ar5
      000A11 C0 04            [24] 1831 	push	ar4
      000A13 C0*00            [24] 1832 	push	bits
      000A15 E5*00            [12] 1833 	mov	a,_bp
      000A17 24 F5            [12] 1834 	add	a,#0xf5
      000A19 F8               [12] 1835 	mov	r0,a
      000A1A E6               [12] 1836 	mov	a,@r0
      000A1B C0 E0            [24] 1837 	push	acc
      000A1D 08               [12] 1838 	inc	r0
      000A1E E6               [12] 1839 	mov	a,@r0
      000A1F C0 E0            [24] 1840 	push	acc
      000A21 08               [12] 1841 	inc	r0
      000A22 E6               [12] 1842 	mov	a,@r0
      000A23 C0 E0            [24] 1843 	push	acc
      000A25 E5*00            [12] 1844 	mov	a,_bp
      000A27 24 F8            [12] 1845 	add	a,#0xf8
      000A29 F8               [12] 1846 	mov	r0,a
      000A2A E6               [12] 1847 	mov	a,@r0
      000A2B C0 E0            [24] 1848 	push	acc
      000A2D 08               [12] 1849 	inc	r0
      000A2E E6               [12] 1850 	mov	a,@r0
      000A2F C0 E0            [24] 1851 	push	acc
      000A31 08               [12] 1852 	inc	r0
      000A32 E6               [12] 1853 	mov	a,@r0
      000A33 C0 E0            [24] 1854 	push	acc
      000A35 8B 82            [24] 1855 	mov	dpl,r3
      000A37 D0 02            [24] 1856 	pop	ar2
      000A39 D0 01            [24] 1857 	pop	ar1
      000A3B D0 00            [24] 1858 	pop	ar0
      000A3D 12r00r00         [24] 1859 	lcall	__sdcc_banked_call
      000A40 15 81            [12] 1860 	dec	sp
      000A42 15 81            [12] 1861 	dec	sp
      000A44 15 81            [12] 1862 	dec	sp
      000A46 D0*00            [24] 1863 	pop	bits
      000A48 D0 04            [24] 1864 	pop	ar4
      000A4A D0 05            [24] 1865 	pop	ar5
      000A4C D0 06            [24] 1866 	pop	ar6
      000A4E D0 07            [24] 1867 	pop	ar7
      000A50 0C               [12] 1868 	inc	r4
                                   1869 ;	printf_large.c:393: } while (i--);
      000A51 8D 03            [24] 1870 	mov	ar3,r5
      000A53 1D               [12] 1871 	dec	r5
      000A54 EB               [12] 1872 	mov	a,r3
      000A55 70 AA            [24] 1873 	jnz	00162$
                                   1874 ;	printf_large.c:396: if (reqDecimals)
      000A57 E5*00            [12] 1875 	mov	a,_bp
      000A59 24 1A            [12] 1876 	add	a,#0x1a
      000A5B F8               [12] 1877 	mov	r0,a
      000A5C A6 04            [24] 1878 	mov	@r0,ar4
      000A5E E5*00            [12] 1879 	mov	a,_bp
      000A60 24 FB            [12] 1880 	add	a,#0xfb
      000A62 F8               [12] 1881 	mov	r0,a
      000A63 E6               [12] 1882 	mov	a,@r0
      000A64 70 03            [24] 1883 	jnz	00378$
      000A66 02r0Br23         [24] 1884 	ljmp	00169$
      000A69                       1885 00378$:
                                   1886 ;	printf_large.c:398: OUTPUT_CHAR ('.', p);
      000A69 C0 07            [24] 1887 	push	ar7
      000A6B C0 06            [24] 1888 	push	ar6
      000A6D C0 04            [24] 1889 	push	ar4
      000A6F C0*00            [24] 1890 	push	bits
      000A71 E5*00            [12] 1891 	mov	a,_bp
      000A73 24 F5            [12] 1892 	add	a,#0xf5
      000A75 F8               [12] 1893 	mov	r0,a
      000A76 E6               [12] 1894 	mov	a,@r0
      000A77 C0 E0            [24] 1895 	push	acc
      000A79 08               [12] 1896 	inc	r0
      000A7A E6               [12] 1897 	mov	a,@r0
      000A7B C0 E0            [24] 1898 	push	acc
      000A7D 08               [12] 1899 	inc	r0
      000A7E E6               [12] 1900 	mov	a,@r0
      000A7F C0 E0            [24] 1901 	push	acc
      000A81 E5*00            [12] 1902 	mov	a,_bp
      000A83 24 F8            [12] 1903 	add	a,#0xf8
      000A85 F8               [12] 1904 	mov	r0,a
      000A86 E6               [12] 1905 	mov	a,@r0
      000A87 C0 E0            [24] 1906 	push	acc
      000A89 08               [12] 1907 	inc	r0
      000A8A E6               [12] 1908 	mov	a,@r0
      000A8B C0 E0            [24] 1909 	push	acc
      000A8D 08               [12] 1910 	inc	r0
      000A8E E6               [12] 1911 	mov	a,@r0
      000A8F C0 E0            [24] 1912 	push	acc
      000A91 75 82 2E         [24] 1913 	mov	dpl,#0x2E
      000A94 D0 02            [24] 1914 	pop	ar2
      000A96 D0 01            [24] 1915 	pop	ar1
      000A98 D0 00            [24] 1916 	pop	ar0
      000A9A 12r00r00         [24] 1917 	lcall	__sdcc_banked_call
      000A9D 15 81            [12] 1918 	dec	sp
      000A9F 15 81            [12] 1919 	dec	sp
      000AA1 15 81            [12] 1920 	dec	sp
      000AA3 D0*00            [24] 1921 	pop	bits
      000AA5 D0 04            [24] 1922 	pop	ar4
      000AA7 D0 06            [24] 1923 	pop	ar6
      000AA9 D0 07            [24] 1924 	pop	ar7
      000AAB E5*00            [12] 1925 	mov	a,_bp
      000AAD 24 1A            [12] 1926 	add	a,#0x1a
      000AAF F8               [12] 1927 	mov	r0,a
      000AB0 EC               [12] 1928 	mov	a,r4
      000AB1 04               [12] 1929 	inc	a
      000AB2 F6               [12] 1930 	mov	@r0,a
                                   1931 ;	printf_large.c:400: while (reqDecimals--)
      000AB3 E5*00            [12] 1932 	mov	a,_bp
      000AB5 24 1A            [12] 1933 	add	a,#0x1a
      000AB7 F8               [12] 1934 	mov	r0,a
      000AB8 86 05            [24] 1935 	mov	ar5,@r0
      000ABA E5*00            [12] 1936 	mov	a,_bp
      000ABC 24 FB            [12] 1937 	add	a,#0xfb
      000ABE F8               [12] 1938 	mov	r0,a
      000ABF 86 04            [24] 1939 	mov	ar4,@r0
      000AC1                       1940 00165$:
      000AC1 8C 03            [24] 1941 	mov	ar3,r4
      000AC3 1C               [12] 1942 	dec	r4
      000AC4 EB               [12] 1943 	mov	a,r3
      000AC5 60 55            [24] 1944 	jz	00253$
                                   1945 ;	printf_large.c:402: OUTPUT_CHAR (fpBuffer[i++], p);
      000AC7 8F 03            [24] 1946 	mov	ar3,r7
      000AC9 0F               [12] 1947 	inc	r7
      000ACA E5*00            [12] 1948 	mov	a,_bp
      000ACC 24 05            [12] 1949 	add	a,#0x05
      000ACE F8               [12] 1950 	mov	r0,a
      000ACF EB               [12] 1951 	mov	a,r3
      000AD0 26               [12] 1952 	add	a,@r0
      000AD1 F9               [12] 1953 	mov	r1,a
      000AD2 87 03            [24] 1954 	mov	ar3,@r1
      000AD4 C0 07            [24] 1955 	push	ar7
      000AD6 C0 06            [24] 1956 	push	ar6
      000AD8 C0 05            [24] 1957 	push	ar5
      000ADA C0 04            [24] 1958 	push	ar4
      000ADC C0*00            [24] 1959 	push	bits
      000ADE E5*00            [12] 1960 	mov	a,_bp
      000AE0 24 F5            [12] 1961 	add	a,#0xf5
      000AE2 F8               [12] 1962 	mov	r0,a
      000AE3 E6               [12] 1963 	mov	a,@r0
      000AE4 C0 E0            [24] 1964 	push	acc
      000AE6 08               [12] 1965 	inc	r0
      000AE7 E6               [12] 1966 	mov	a,@r0
      000AE8 C0 E0            [24] 1967 	push	acc
      000AEA 08               [12] 1968 	inc	r0
      000AEB E6               [12] 1969 	mov	a,@r0
      000AEC C0 E0            [24] 1970 	push	acc
      000AEE E5*00            [12] 1971 	mov	a,_bp
      000AF0 24 F8            [12] 1972 	add	a,#0xf8
      000AF2 F8               [12] 1973 	mov	r0,a
      000AF3 E6               [12] 1974 	mov	a,@r0
      000AF4 C0 E0            [24] 1975 	push	acc
      000AF6 08               [12] 1976 	inc	r0
      000AF7 E6               [12] 1977 	mov	a,@r0
      000AF8 C0 E0            [24] 1978 	push	acc
      000AFA 08               [12] 1979 	inc	r0
      000AFB E6               [12] 1980 	mov	a,@r0
      000AFC C0 E0            [24] 1981 	push	acc
      000AFE 8B 82            [24] 1982 	mov	dpl,r3
      000B00 D0 02            [24] 1983 	pop	ar2
      000B02 D0 01            [24] 1984 	pop	ar1
      000B04 D0 00            [24] 1985 	pop	ar0
      000B06 12r00r00         [24] 1986 	lcall	__sdcc_banked_call
      000B09 15 81            [12] 1987 	dec	sp
      000B0B 15 81            [12] 1988 	dec	sp
      000B0D 15 81            [12] 1989 	dec	sp
      000B0F D0*00            [24] 1990 	pop	bits
      000B11 D0 04            [24] 1991 	pop	ar4
      000B13 D0 05            [24] 1992 	pop	ar5
      000B15 D0 06            [24] 1993 	pop	ar6
      000B17 D0 07            [24] 1994 	pop	ar7
      000B19 0D               [12] 1995 	inc	r5
      000B1A 80 A5            [24] 1996 	sjmp	00165$
      000B1C                       1997 00253$:
      000B1C E5*00            [12] 1998 	mov	a,_bp
      000B1E 24 1A            [12] 1999 	add	a,#0x1a
      000B20 F8               [12] 2000 	mov	r0,a
      000B21 A6 05            [24] 2001 	mov	@r0,ar5
      000B23                       2002 00169$:
                                   2003 ;	printf_large.c:406: if (left && reqWidth>minWidth)
      000B23 30*00 68         [24] 2004 	jnb	b0,00174$
      000B26 E5*00            [12] 2005 	mov	a,_bp
      000B28 24 FC            [12] 2006 	add	a,#0xfc
      000B2A F8               [12] 2007 	mov	r0,a
      000B2B C3               [12] 2008 	clr	c
      000B2C EE               [12] 2009 	mov	a,r6
      000B2D 96               [12] 2010 	subb	a,@r0
      000B2E 50 5E            [24] 2011 	jnc	00174$
                                   2012 ;	printf_large.c:408: while (reqWidth-->minWidth)
      000B30 E5*00            [12] 2013 	mov	a,_bp
      000B32 24 1A            [12] 2014 	add	a,#0x1a
      000B34 F8               [12] 2015 	mov	r0,a
      000B35 86 07            [24] 2016 	mov	ar7,@r0
      000B37 E5*00            [12] 2017 	mov	a,_bp
      000B39 24 FC            [12] 2018 	add	a,#0xfc
      000B3B F8               [12] 2019 	mov	r0,a
      000B3C 86 05            [24] 2020 	mov	ar5,@r0
      000B3E                       2021 00170$:
      000B3E 8D 04            [24] 2022 	mov	ar4,r5
      000B40 1D               [12] 2023 	dec	r5
      000B41 C3               [12] 2024 	clr	c
      000B42 EE               [12] 2025 	mov	a,r6
      000B43 9C               [12] 2026 	subb	a,r4
      000B44 50 41            [24] 2027 	jnc	00254$
                                   2028 ;	printf_large.c:410: OUTPUT_CHAR(' ', p);
      000B46 C0 07            [24] 2029 	push	ar7
      000B48 C0 06            [24] 2030 	push	ar6
      000B4A C0 05            [24] 2031 	push	ar5
      000B4C E5*00            [12] 2032 	mov	a,_bp
      000B4E 24 F5            [12] 2033 	add	a,#0xf5
      000B50 F8               [12] 2034 	mov	r0,a
      000B51 E6               [12] 2035 	mov	a,@r0
      000B52 C0 E0            [24] 2036 	push	acc
      000B54 08               [12] 2037 	inc	r0
      000B55 E6               [12] 2038 	mov	a,@r0
      000B56 C0 E0            [24] 2039 	push	acc
      000B58 08               [12] 2040 	inc	r0
      000B59 E6               [12] 2041 	mov	a,@r0
      000B5A C0 E0            [24] 2042 	push	acc
      000B5C E5*00            [12] 2043 	mov	a,_bp
      000B5E 24 F8            [12] 2044 	add	a,#0xf8
      000B60 F8               [12] 2045 	mov	r0,a
      000B61 E6               [12] 2046 	mov	a,@r0
      000B62 C0 E0            [24] 2047 	push	acc
      000B64 08               [12] 2048 	inc	r0
      000B65 E6               [12] 2049 	mov	a,@r0
      000B66 C0 E0            [24] 2050 	push	acc
      000B68 08               [12] 2051 	inc	r0
      000B69 E6               [12] 2052 	mov	a,@r0
      000B6A C0 E0            [24] 2053 	push	acc
      000B6C 75 82 20         [24] 2054 	mov	dpl,#0x20
      000B6F D0 02            [24] 2055 	pop	ar2
      000B71 D0 01            [24] 2056 	pop	ar1
      000B73 D0 00            [24] 2057 	pop	ar0
      000B75 12r00r00         [24] 2058 	lcall	__sdcc_banked_call
      000B78 15 81            [12] 2059 	dec	sp
      000B7A 15 81            [12] 2060 	dec	sp
      000B7C 15 81            [12] 2061 	dec	sp
      000B7E D0 05            [24] 2062 	pop	ar5
      000B80 D0 06            [24] 2063 	pop	ar6
      000B82 D0 07            [24] 2064 	pop	ar7
      000B84 0F               [12] 2065 	inc	r7
      000B85 80 B7            [24] 2066 	sjmp	00170$
      000B87                       2067 00254$:
      000B87 E5*00            [12] 2068 	mov	a,_bp
      000B89 24 1A            [12] 2069 	add	a,#0x1a
      000B8B F8               [12] 2070 	mov	r0,a
      000B8C A6 07            [24] 2071 	mov	@r0,ar7
      000B8E                       2072 00174$:
                                   2073 ;	printf_large.c:414: if (exp != -128)
      000B8E E5*00            [12] 2074 	mov	a,_bp
      000B90 24 09            [12] 2075 	add	a,#0x09
      000B92 F8               [12] 2076 	mov	r0,a
      000B93 B6 80 03         [24] 2077 	cjne	@r0,#0x80,00383$
      000B96 02r0CrC1         [24] 2078 	ljmp	00179$
      000B99                       2079 00383$:
                                   2080 ;	printf_large.c:416: OUTPUT_CHAR ('e', p);
      000B99 E5*00            [12] 2081 	mov	a,_bp
      000B9B 24 F5            [12] 2082 	add	a,#0xf5
      000B9D F8               [12] 2083 	mov	r0,a
      000B9E E6               [12] 2084 	mov	a,@r0
      000B9F C0 E0            [24] 2085 	push	acc
      000BA1 08               [12] 2086 	inc	r0
      000BA2 E6               [12] 2087 	mov	a,@r0
      000BA3 C0 E0            [24] 2088 	push	acc
      000BA5 08               [12] 2089 	inc	r0
      000BA6 E6               [12] 2090 	mov	a,@r0
      000BA7 C0 E0            [24] 2091 	push	acc
      000BA9 E5*00            [12] 2092 	mov	a,_bp
      000BAB 24 F8            [12] 2093 	add	a,#0xf8
      000BAD F8               [12] 2094 	mov	r0,a
      000BAE E6               [12] 2095 	mov	a,@r0
      000BAF C0 E0            [24] 2096 	push	acc
      000BB1 08               [12] 2097 	inc	r0
      000BB2 E6               [12] 2098 	mov	a,@r0
      000BB3 C0 E0            [24] 2099 	push	acc
      000BB5 08               [12] 2100 	inc	r0
      000BB6 E6               [12] 2101 	mov	a,@r0
      000BB7 C0 E0            [24] 2102 	push	acc
      000BB9 75 82 65         [24] 2103 	mov	dpl,#0x65
      000BBC D0 02            [24] 2104 	pop	ar2
      000BBE D0 01            [24] 2105 	pop	ar1
      000BC0 D0 00            [24] 2106 	pop	ar0
      000BC2 12r00r00         [24] 2107 	lcall	__sdcc_banked_call
      000BC5 15 81            [12] 2108 	dec	sp
      000BC7 15 81            [12] 2109 	dec	sp
      000BC9 15 81            [12] 2110 	dec	sp
      000BCB E5*00            [12] 2111 	mov	a,_bp
      000BCD 24 1A            [12] 2112 	add	a,#0x1a
      000BCF F8               [12] 2113 	mov	r0,a
      000BD0 06               [12] 2114 	inc	@r0
                                   2115 ;	printf_large.c:417: if (exp<0)
      000BD1 E5*00            [12] 2116 	mov	a,_bp
      000BD3 24 09            [12] 2117 	add	a,#0x09
      000BD5 F8               [12] 2118 	mov	r0,a
      000BD6 E6               [12] 2119 	mov	a,@r0
      000BD7 30 E7 41         [24] 2120 	jnb	acc.7,00177$
                                   2121 ;	printf_large.c:419: OUTPUT_CHAR ('-', p);
      000BDA E5*00            [12] 2122 	mov	a,_bp
      000BDC 24 F5            [12] 2123 	add	a,#0xf5
      000BDE F8               [12] 2124 	mov	r0,a
      000BDF E6               [12] 2125 	mov	a,@r0
      000BE0 C0 E0            [24] 2126 	push	acc
      000BE2 08               [12] 2127 	inc	r0
      000BE3 E6               [12] 2128 	mov	a,@r0
      000BE4 C0 E0            [24] 2129 	push	acc
      000BE6 08               [12] 2130 	inc	r0
      000BE7 E6               [12] 2131 	mov	a,@r0
      000BE8 C0 E0            [24] 2132 	push	acc
      000BEA E5*00            [12] 2133 	mov	a,_bp
      000BEC 24 F8            [12] 2134 	add	a,#0xf8
      000BEE F8               [12] 2135 	mov	r0,a
      000BEF E6               [12] 2136 	mov	a,@r0
      000BF0 C0 E0            [24] 2137 	push	acc
      000BF2 08               [12] 2138 	inc	r0
      000BF3 E6               [12] 2139 	mov	a,@r0
      000BF4 C0 E0            [24] 2140 	push	acc
      000BF6 08               [12] 2141 	inc	r0
      000BF7 E6               [12] 2142 	mov	a,@r0
      000BF8 C0 E0            [24] 2143 	push	acc
      000BFA 75 82 2D         [24] 2144 	mov	dpl,#0x2D
      000BFD D0 02            [24] 2145 	pop	ar2
      000BFF D0 01            [24] 2146 	pop	ar1
      000C01 D0 00            [24] 2147 	pop	ar0
      000C03 12r00r00         [24] 2148 	lcall	__sdcc_banked_call
      000C06 15 81            [12] 2149 	dec	sp
      000C08 15 81            [12] 2150 	dec	sp
      000C0A 15 81            [12] 2151 	dec	sp
      000C0C E5*00            [12] 2152 	mov	a,_bp
      000C0E 24 1A            [12] 2153 	add	a,#0x1a
      000C10 F8               [12] 2154 	mov	r0,a
      000C11 06               [12] 2155 	inc	@r0
                                   2156 ;	printf_large.c:420: exp = -exp;
      000C12 E5*00            [12] 2157 	mov	a,_bp
      000C14 24 09            [12] 2158 	add	a,#0x09
      000C16 F8               [12] 2159 	mov	r0,a
      000C17 C3               [12] 2160 	clr	c
      000C18 E4               [12] 2161 	clr	a
      000C19 96               [12] 2162 	subb	a,@r0
      000C1A F6               [12] 2163 	mov	@r0,a
      000C1B                       2164 00177$:
                                   2165 ;	printf_large.c:422: OUTPUT_CHAR ('0'+exp/10, p);
      000C1B E5*00            [12] 2166 	mov	a,_bp
      000C1D 24 09            [12] 2167 	add	a,#0x09
      000C1F F8               [12] 2168 	mov	r0,a
      000C20 C2 D5            [12] 2169 	clr	F0
      000C22 75 F0 0A         [24] 2170 	mov	b,#0x0a
      000C25 E6               [12] 2171 	mov	a,@r0
      000C26 30 E7 04         [24] 2172 	jnb	acc.7,00385$
      000C29 B2 D5            [12] 2173 	cpl	F0
      000C2B F4               [12] 2174 	cpl	a
      000C2C 04               [12] 2175 	inc	a
      000C2D                       2176 00385$:
      000C2D 84               [48] 2177 	div	ab
      000C2E 30 D5 02         [24] 2178 	jnb	F0,00386$
      000C31 F4               [12] 2179 	cpl	a
      000C32 04               [12] 2180 	inc	a
      000C33                       2181 00386$:
      000C33 24 30            [12] 2182 	add	a,#0x30
      000C35 FF               [12] 2183 	mov	r7,a
      000C36 E5*00            [12] 2184 	mov	a,_bp
      000C38 24 F5            [12] 2185 	add	a,#0xf5
      000C3A F8               [12] 2186 	mov	r0,a
      000C3B E6               [12] 2187 	mov	a,@r0
      000C3C C0 E0            [24] 2188 	push	acc
      000C3E 08               [12] 2189 	inc	r0
      000C3F E6               [12] 2190 	mov	a,@r0
      000C40 C0 E0            [24] 2191 	push	acc
      000C42 08               [12] 2192 	inc	r0
      000C43 E6               [12] 2193 	mov	a,@r0
      000C44 C0 E0            [24] 2194 	push	acc
      000C46 E5*00            [12] 2195 	mov	a,_bp
      000C48 24 F8            [12] 2196 	add	a,#0xf8
      000C4A F8               [12] 2197 	mov	r0,a
      000C4B E6               [12] 2198 	mov	a,@r0
      000C4C C0 E0            [24] 2199 	push	acc
      000C4E 08               [12] 2200 	inc	r0
      000C4F E6               [12] 2201 	mov	a,@r0
      000C50 C0 E0            [24] 2202 	push	acc
      000C52 08               [12] 2203 	inc	r0
      000C53 E6               [12] 2204 	mov	a,@r0
      000C54 C0 E0            [24] 2205 	push	acc
      000C56 8F 82            [24] 2206 	mov	dpl,r7
      000C58 D0 02            [24] 2207 	pop	ar2
      000C5A D0 01            [24] 2208 	pop	ar1
      000C5C D0 00            [24] 2209 	pop	ar0
      000C5E 12r00r00         [24] 2210 	lcall	__sdcc_banked_call
      000C61 15 81            [12] 2211 	dec	sp
      000C63 15 81            [12] 2212 	dec	sp
      000C65 15 81            [12] 2213 	dec	sp
      000C67 E5*00            [12] 2214 	mov	a,_bp
      000C69 24 1A            [12] 2215 	add	a,#0x1a
      000C6B F8               [12] 2216 	mov	r0,a
      000C6C 06               [12] 2217 	inc	@r0
                                   2218 ;	printf_large.c:423: OUTPUT_CHAR ('0'+exp%10, p);
      000C6D E5*00            [12] 2219 	mov	a,_bp
      000C6F 24 09            [12] 2220 	add	a,#0x09
      000C71 F8               [12] 2221 	mov	r0,a
      000C72 75 F0 0A         [24] 2222 	mov	b,#0x0a
      000C75 E6               [12] 2223 	mov	a,@r0
      000C76 C2 D5            [12] 2224 	clr	F0
      000C78 30 E7 04         [24] 2225 	jnb	acc.7,00387$
      000C7B D2 D5            [12] 2226 	setb	F0
      000C7D F4               [12] 2227 	cpl	a
      000C7E 04               [12] 2228 	inc	a
      000C7F                       2229 00387$:
      000C7F 84               [48] 2230 	div	ab
      000C80 E5 F0            [12] 2231 	mov	a,b
      000C82 30 D5 02         [24] 2232 	jnb	F0,00388$
      000C85 F4               [12] 2233 	cpl	a
      000C86 04               [12] 2234 	inc	a
      000C87                       2235 00388$:
      000C87 24 30            [12] 2236 	add	a,#0x30
      000C89 FF               [12] 2237 	mov	r7,a
      000C8A E5*00            [12] 2238 	mov	a,_bp
      000C8C 24 F5            [12] 2239 	add	a,#0xf5
      000C8E F8               [12] 2240 	mov	r0,a
      000C8F E6               [12] 2241 	mov	a,@r0
      000C90 C0 E0            [24] 2242 	push	acc
      000C92 08               [12] 2243 	inc	r0
      000C93 E6               [12] 2244 	mov	a,@r0
      000C94 C0 E0            [24] 2245 	push	acc
      000C96 08               [12] 2246 	inc	r0
      000C97 E6               [12] 2247 	mov	a,@r0
      000C98 C0 E0            [24] 2248 	push	acc
      000C9A E5*00            [12] 2249 	mov	a,_bp
      000C9C 24 F8            [12] 2250 	add	a,#0xf8
      000C9E F8               [12] 2251 	mov	r0,a
      000C9F E6               [12] 2252 	mov	a,@r0
      000CA0 C0 E0            [24] 2253 	push	acc
      000CA2 08               [12] 2254 	inc	r0
      000CA3 E6               [12] 2255 	mov	a,@r0
      000CA4 C0 E0            [24] 2256 	push	acc
      000CA6 08               [12] 2257 	inc	r0
      000CA7 E6               [12] 2258 	mov	a,@r0
      000CA8 C0 E0            [24] 2259 	push	acc
      000CAA 8F 82            [24] 2260 	mov	dpl,r7
      000CAC D0 02            [24] 2261 	pop	ar2
      000CAE D0 01            [24] 2262 	pop	ar1
      000CB0 D0 00            [24] 2263 	pop	ar0
      000CB2 12r00r00         [24] 2264 	lcall	__sdcc_banked_call
      000CB5 15 81            [12] 2265 	dec	sp
      000CB7 15 81            [12] 2266 	dec	sp
      000CB9 15 81            [12] 2267 	dec	sp
      000CBB E5*00            [12] 2268 	mov	a,_bp
      000CBD 24 1A            [12] 2269 	add	a,#0x1a
      000CBF F8               [12] 2270 	mov	r0,a
      000CC0 06               [12] 2271 	inc	@r0
      000CC1                       2272 00179$:
                                   2273 ;	printf_large.c:426: return charsOutputted;
      000CC1 E5*00            [12] 2274 	mov	a,_bp
      000CC3 24 1A            [12] 2275 	add	a,#0x1a
      000CC5 F8               [12] 2276 	mov	r0,a
      000CC6 86 82            [24] 2277 	mov	dpl,@r0
      000CC8 85*00 81         [24] 2278 	mov	sp,_bp
      000CCB D0*00            [24] 2279 	pop	_bp
      000CCD 02r00r00         [24] 2280 	ljmp	__sdcc_banked_ret
                                   2281 ;------------------------------------------------------------
                                   2282 ;Allocation info for local variables in function '_print_format'
                                   2283 ;------------------------------------------------------------
                                   2284 ;pvoid                     Allocated to stack - _bp -6
                                   2285 ;format                    Allocated to stack - _bp -9
                                   2286 ;ap                        Allocated to stack - _bp -10
                                   2287 ;pfn                       Allocated to stack - _bp +1
                                   2288 ;left_justify              Allocated to registers b0 
                                   2289 ;zero_padding              Allocated to registers b1 
                                   2290 ;prefix_sign               Allocated to registers b2 
                                   2291 ;prefix_space              Allocated to registers b3 
                                   2292 ;signed_argument           Allocated to registers b4 
                                   2293 ;char_argument             Allocated to registers b5 
                                   2294 ;long_argument             Allocated to registers b6 
                                   2295 ;float_argument            Allocated to registers b7 
                                   2296 ;lower_case                Allocated to stack - _bp +21
                                   2297 ;value                     Allocated to stack - _bp +16
                                   2298 ;charsOutputted            Allocated to stack - _bp +11
                                   2299 ;lsd                       Allocated to registers b5 
                                   2300 ;radix                     Allocated to stack - _bp +13
                                   2301 ;width                     Allocated to stack - _bp +14
                                   2302 ;decimals                  Allocated to stack - _bp +15
                                   2303 ;length                    Allocated to registers r3 
                                   2304 ;c                         Allocated to registers r4 
                                   2305 ;memtype                   Allocated to registers r7 
                                   2306 ;store                     Allocated to stack - _bp +22
                                   2307 ;pstore                    Allocated to registers r2 
                                   2308 ;sloc0                     Allocated to stack - _bp +4
                                   2309 ;sloc1                     Allocated to stack - _bp +5
                                   2310 ;sloc2                     Allocated to stack - _bp +38
                                   2311 ;sloc3                     Allocated to stack - _bp +8
                                   2312 ;sloc4                     Allocated to stack - _bp +9
                                   2313 ;sloc5                     Allocated to stack - _bp +10
                                   2314 ;sloc6                     Allocated to stack - _bp +11
                                   2315 ;------------------------------------------------------------
                                   2316 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                   2317 ;	-----------------------------------------
                                   2318 ;	 function _print_format
                                   2319 ;	-----------------------------------------
      000CD0                       2320 __print_format:
      000CD0 C0*00            [24] 2321 	push	_bp
      000CD2 85 81*00         [24] 2322 	mov	_bp,sp
      000CD5 C0 82            [24] 2323 	push	dpl
      000CD7 C0 83            [24] 2324 	push	dph
      000CD9 C0 F0            [24] 2325 	push	b
      000CDB E5 81            [12] 2326 	mov	a,sp
      000CDD 24 18            [12] 2327 	add	a,#0x18
      000CDF F5 81            [12] 2328 	mov	sp,a
                                   2329 ;	printf_large.c:466: charsOutputted = 0;
      000CE1 E5*00            [12] 2330 	mov	a,_bp
      000CE3 24 0B            [12] 2331 	add	a,#0x0b
      000CE5 F8               [12] 2332 	mov	r0,a
      000CE6 E4               [12] 2333 	clr	a
      000CE7 F6               [12] 2334 	mov	@r0,a
      000CE8 08               [12] 2335 	inc	r0
      000CE9 F6               [12] 2336 	mov	@r0,a
                                   2337 ;	printf_large.c:475: while( c=*format++ )
      000CEA E5*00            [12] 2338 	mov	a,_bp
      000CEC 24 10            [12] 2339 	add	a,#0x10
      000CEE F9               [12] 2340 	mov	r1,a
      000CEF E5*00            [12] 2341 	mov	a,_bp
      000CF1 24 16            [12] 2342 	add	a,#0x16
      000CF3 C8               [12] 2343 	xch	a,r0
      000CF4 E5*00            [12] 2344 	mov	a,_bp
      000CF6 24 08            [12] 2345 	add	a,#0x08
      000CF8 C8               [12] 2346 	xch	a,r0
      000CF9 24 05            [12] 2347 	add	a,#0x05
      000CFB F6               [12] 2348 	mov	@r0,a
      000CFC E5*00            [12] 2349 	mov	a,_bp
      000CFE 24 09            [12] 2350 	add	a,#0x09
      000D00 F8               [12] 2351 	mov	r0,a
      000D01 E5*00            [12] 2352 	mov	a,_bp
      000D03 24 10            [12] 2353 	add	a,#0x10
      000D05 F6               [12] 2354 	mov	@r0,a
      000D06 E5*00            [12] 2355 	mov	a,_bp
      000D08 24 09            [12] 2356 	add	a,#0x09
      000D0A F8               [12] 2357 	mov	r0,a
      000D0B C0 01            [24] 2358 	push	ar1
      000D0D E5*00            [12] 2359 	mov	a,_bp
      000D0F 24 04            [12] 2360 	add	a,#0x04
      000D11 F9               [12] 2361 	mov	r1,a
      000D12 74 04            [12] 2362 	mov	a,#0x04
      000D14 26               [12] 2363 	add	a,@r0
      000D15 F7               [12] 2364 	mov	@r1,a
      000D16 D0 01            [24] 2365 	pop	ar1
      000D18                       2366 00240$:
      000D18 E5*00            [12] 2367 	mov	a,_bp
      000D1A 24 F7            [12] 2368 	add	a,#0xf7
      000D1C F8               [12] 2369 	mov	r0,a
      000D1D 86 02            [24] 2370 	mov	ar2,@r0
      000D1F 08               [12] 2371 	inc	r0
      000D20 86 06            [24] 2372 	mov	ar6,@r0
      000D22 08               [12] 2373 	inc	r0
      000D23 86 07            [24] 2374 	mov	ar7,@r0
      000D25 8A 82            [24] 2375 	mov	dpl,r2
      000D27 8E 83            [24] 2376 	mov	dph,r6
      000D29 8F F0            [24] 2377 	mov	b,r7
      000D2B 12r00r00         [24] 2378 	lcall	__gptrget
      000D2E FD               [12] 2379 	mov	r5,a
      000D2F E5*00            [12] 2380 	mov	a,_bp
      000D31 24 F7            [12] 2381 	add	a,#0xf7
      000D33 F8               [12] 2382 	mov	r0,a
      000D34 74 01            [12] 2383 	mov	a,#0x01
      000D36 2A               [12] 2384 	add	a,r2
      000D37 F6               [12] 2385 	mov	@r0,a
      000D38 E4               [12] 2386 	clr	a
      000D39 3E               [12] 2387 	addc	a,r6
      000D3A 08               [12] 2388 	inc	r0
      000D3B F6               [12] 2389 	mov	@r0,a
      000D3C 08               [12] 2390 	inc	r0
      000D3D A6 07            [24] 2391 	mov	@r0,ar7
      000D3F ED               [12] 2392 	mov	a,r5
      000D40 FC               [12] 2393 	mov	r4,a
      000D41 70 03            [24] 2394 	jnz	00491$
      000D43 02r1ArB3         [24] 2395 	ljmp	00242$
      000D46                       2396 00491$:
                                   2397 ;	printf_large.c:477: if ( c=='%' )
      000D46 BC 25 02         [24] 2398 	cjne	r4,#0x25,00492$
      000D49 80 03            [24] 2399 	sjmp	00493$
      000D4B                       2400 00492$:
      000D4B 02r1Ar72         [24] 2401 	ljmp	00238$
      000D4E                       2402 00493$:
                                   2403 ;	printf_large.c:479: left_justify    = 0;
      000D4E C2*00            [12] 2404 	clr	b0
                                   2405 ;	printf_large.c:480: zero_padding    = 0;
      000D50 C2*00            [12] 2406 	clr	b1
                                   2407 ;	printf_large.c:481: prefix_sign     = 0;
      000D52 C2*00            [12] 2408 	clr	b2
                                   2409 ;	printf_large.c:482: prefix_space    = 0;
      000D54 C2*00            [12] 2410 	clr	b3
                                   2411 ;	printf_large.c:483: signed_argument = 0;
      000D56 C2*00            [12] 2412 	clr	b4
                                   2413 ;	printf_large.c:484: char_argument   = 0;
      000D58 C2*00            [12] 2414 	clr	b5
                                   2415 ;	printf_large.c:485: long_argument   = 0;
      000D5A C2*00            [12] 2416 	clr	b6
                                   2417 ;	printf_large.c:486: float_argument  = 0;
      000D5C C2*00            [12] 2418 	clr	b7
                                   2419 ;	printf_large.c:487: radix           = 0;
      000D5E E5*00            [12] 2420 	mov	a,_bp
      000D60 24 0D            [12] 2421 	add	a,#0x0d
      000D62 F8               [12] 2422 	mov	r0,a
      000D63 76 00            [12] 2423 	mov	@r0,#0x00
                                   2424 ;	printf_large.c:488: width           = 0;
      000D65 E5*00            [12] 2425 	mov	a,_bp
      000D67 24 0E            [12] 2426 	add	a,#0x0e
      000D69 F8               [12] 2427 	mov	r0,a
      000D6A 76 00            [12] 2428 	mov	@r0,#0x00
                                   2429 ;	printf_large.c:489: decimals        = -1;
      000D6C E5*00            [12] 2430 	mov	a,_bp
      000D6E 24 0F            [12] 2431 	add	a,#0x0f
      000D70 F8               [12] 2432 	mov	r0,a
      000D71 76 FF            [12] 2433 	mov	@r0,#0xFF
                                   2434 ;	printf_large.c:491: get_conversion_spec:
      000D73 E5*00            [12] 2435 	mov	a,_bp
      000D75 24 F7            [12] 2436 	add	a,#0xf7
      000D77 F8               [12] 2437 	mov	r0,a
      000D78 86 07            [24] 2438 	mov	ar7,@r0
      000D7A 08               [12] 2439 	inc	r0
      000D7B 86 06            [24] 2440 	mov	ar6,@r0
      000D7D 08               [12] 2441 	inc	r0
      000D7E 86 05            [24] 2442 	mov	ar5,@r0
      000D80                       2443 00101$:
                                   2444 ;	printf_large.c:493: c = *format++;
      000D80 8F 82            [24] 2445 	mov	dpl,r7
      000D82 8E 83            [24] 2446 	mov	dph,r6
      000D84 8D F0            [24] 2447 	mov	b,r5
      000D86 12r00r00         [24] 2448 	lcall	__gptrget
      000D89 FC               [12] 2449 	mov	r4,a
      000D8A A3               [24] 2450 	inc	dptr
      000D8B AF 82            [24] 2451 	mov	r7,dpl
      000D8D AE 83            [24] 2452 	mov	r6,dph
      000D8F E5*00            [12] 2453 	mov	a,_bp
      000D91 24 F7            [12] 2454 	add	a,#0xf7
      000D93 F8               [12] 2455 	mov	r0,a
      000D94 A6 07            [24] 2456 	mov	@r0,ar7
      000D96 08               [12] 2457 	inc	r0
      000D97 A6 06            [24] 2458 	mov	@r0,ar6
      000D99 08               [12] 2459 	inc	r0
      000D9A A6 05            [24] 2460 	mov	@r0,ar5
                                   2461 ;	printf_large.c:495: if (c=='%')
      000D9C BC 25 41         [24] 2462 	cjne	r4,#0x25,00103$
                                   2463 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000D9F C0 01            [24] 2464 	push	ar1
      000DA1 E5*00            [12] 2465 	mov	a,_bp
      000DA3 24 FA            [12] 2466 	add	a,#0xfa
      000DA5 F8               [12] 2467 	mov	r0,a
      000DA6 E6               [12] 2468 	mov	a,@r0
      000DA7 C0 E0            [24] 2469 	push	acc
      000DA9 08               [12] 2470 	inc	r0
      000DAA E6               [12] 2471 	mov	a,@r0
      000DAB C0 E0            [24] 2472 	push	acc
      000DAD 08               [12] 2473 	inc	r0
      000DAE E6               [12] 2474 	mov	a,@r0
      000DAF C0 E0            [24] 2475 	push	acc
      000DB1 A8*00            [24] 2476 	mov	r0,_bp
      000DB3 08               [12] 2477 	inc	r0
      000DB4 E6               [12] 2478 	mov	a,@r0
      000DB5 C0 E0            [24] 2479 	push	acc
      000DB7 08               [12] 2480 	inc	r0
      000DB8 E6               [12] 2481 	mov	a,@r0
      000DB9 C0 E0            [24] 2482 	push	acc
      000DBB 08               [12] 2483 	inc	r0
      000DBC E6               [12] 2484 	mov	a,@r0
      000DBD C0 E0            [24] 2485 	push	acc
      000DBF 8C 82            [24] 2486 	mov	dpl,r4
      000DC1 D0 02            [24] 2487 	pop	ar2
      000DC3 D0 01            [24] 2488 	pop	ar1
      000DC5 D0 00            [24] 2489 	pop	ar0
      000DC7 12r00r00         [24] 2490 	lcall	__sdcc_banked_call
      000DCA 15 81            [12] 2491 	dec	sp
      000DCC 15 81            [12] 2492 	dec	sp
      000DCE 15 81            [12] 2493 	dec	sp
      000DD0 D0 01            [24] 2494 	pop	ar1
      000DD2 E5*00            [12] 2495 	mov	a,_bp
      000DD4 24 0B            [12] 2496 	add	a,#0x0b
      000DD6 F8               [12] 2497 	mov	r0,a
      000DD7 06               [12] 2498 	inc	@r0
      000DD8 B6 00 02         [24] 2499 	cjne	@r0,#0x00,00496$
      000DDB 08               [12] 2500 	inc	r0
      000DDC 06               [12] 2501 	inc	@r0
      000DDD                       2502 00496$:
                                   2503 ;	printf_large.c:498: continue;
      000DDD 02r0Dr18         [24] 2504 	ljmp	00240$
      000DE0                       2505 00103$:
                                   2506 ;	printf_large.c:501: if (isdigit(c))
      000DE0 8C 03            [24] 2507 	mov	ar3,r4
      000DE2 BB 30 00         [24] 2508 	cjne	r3,#0x30,00497$
      000DE5                       2509 00497$:
      000DE5 40 4A            [24] 2510 	jc	00110$
      000DE7 EB               [12] 2511 	mov	a,r3
      000DE8 24 C6            [12] 2512 	add	a,#0xff - 0x39
      000DEA 40 45            [24] 2513 	jc	00110$
                                   2514 ;	printf_large.c:503: if (decimals==-1)
      000DEC E5*00            [12] 2515 	mov	a,_bp
      000DEE 24 0F            [12] 2516 	add	a,#0x0f
      000DF0 F8               [12] 2517 	mov	r0,a
      000DF1 B6 FF 25         [24] 2518 	cjne	@r0,#0xFF,00107$
                                   2519 ;	printf_large.c:505: width = 10*width + c - '0';
      000DF4 E5*00            [12] 2520 	mov	a,_bp
      000DF6 24 0E            [12] 2521 	add	a,#0x0e
      000DF8 F8               [12] 2522 	mov	r0,a
      000DF9 E6               [12] 2523 	mov	a,@r0
      000DFA 75 F0 0A         [24] 2524 	mov	b,#0x0A
      000DFD A4               [48] 2525 	mul	ab
      000DFE 2C               [12] 2526 	add	a,r4
      000DFF FA               [12] 2527 	mov	r2,a
      000E00 E5*00            [12] 2528 	mov	a,_bp
      000E02 24 0E            [12] 2529 	add	a,#0x0e
      000E04 F8               [12] 2530 	mov	r0,a
      000E05 EA               [12] 2531 	mov	a,r2
      000E06 24 D0            [12] 2532 	add	a,#0xD0
      000E08 F6               [12] 2533 	mov	@r0,a
                                   2534 ;	printf_large.c:506: if (width == 0)
      000E09 E5*00            [12] 2535 	mov	a,_bp
      000E0B 24 0E            [12] 2536 	add	a,#0x0e
      000E0D F8               [12] 2537 	mov	r0,a
      000E0E E6               [12] 2538 	mov	a,@r0
      000E0F 60 03            [24] 2539 	jz	00502$
      000E11 02r0Dr80         [24] 2540 	ljmp	00101$
      000E14                       2541 00502$:
                                   2542 ;	printf_large.c:509: zero_padding = 1;
      000E14 D2*00            [12] 2543 	setb	b1
      000E16 02r0Dr80         [24] 2544 	ljmp	00101$
      000E19                       2545 00107$:
                                   2546 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000E19 E5*00            [12] 2547 	mov	a,_bp
      000E1B 24 0F            [12] 2548 	add	a,#0x0f
      000E1D F8               [12] 2549 	mov	r0,a
      000E1E E6               [12] 2550 	mov	a,@r0
      000E1F 75 F0 0A         [24] 2551 	mov	b,#0x0A
      000E22 A4               [48] 2552 	mul	ab
      000E23 2C               [12] 2553 	add	a,r4
      000E24 FA               [12] 2554 	mov	r2,a
      000E25 E5*00            [12] 2555 	mov	a,_bp
      000E27 24 0F            [12] 2556 	add	a,#0x0f
      000E29 F8               [12] 2557 	mov	r0,a
      000E2A EA               [12] 2558 	mov	a,r2
      000E2B 24 D0            [12] 2559 	add	a,#0xD0
      000E2D F6               [12] 2560 	mov	@r0,a
                                   2561 ;	printf_large.c:516: goto get_conversion_spec;
      000E2E 02r0Dr80         [24] 2562 	ljmp	00101$
      000E31                       2563 00110$:
                                   2564 ;	printf_large.c:519: if (c=='.')
      000E31 BC 2E 17         [24] 2565 	cjne	r4,#0x2E,00115$
                                   2566 ;	printf_large.c:521: if (decimals==-1)
      000E34 E5*00            [12] 2567 	mov	a,_bp
      000E36 24 0F            [12] 2568 	add	a,#0x0f
      000E38 F8               [12] 2569 	mov	r0,a
      000E39 B6 FF 02         [24] 2570 	cjne	@r0,#0xFF,00505$
      000E3C 80 03            [24] 2571 	sjmp	00506$
      000E3E                       2572 00505$:
      000E3E 02r0Dr80         [24] 2573 	ljmp	00101$
      000E41                       2574 00506$:
                                   2575 ;	printf_large.c:522: decimals=0;
      000E41 E5*00            [12] 2576 	mov	a,_bp
      000E43 24 0F            [12] 2577 	add	a,#0x0f
      000E45 F8               [12] 2578 	mov	r0,a
      000E46 76 00            [12] 2579 	mov	@r0,#0x00
                                   2580 ;	printf_large.c:525: goto get_conversion_spec;
      000E48 02r0Dr80         [24] 2581 	ljmp	00101$
      000E4B                       2582 00115$:
                                   2583 ;	printf_large.c:528: if (islower(c))
      000E4B 8C 03            [24] 2584 	mov	ar3,r4
      000E4D BB 61 00         [24] 2585 	cjne	r3,#0x61,00507$
      000E50                       2586 00507$:
      000E50 40 11            [24] 2587 	jc	00117$
      000E52 EB               [12] 2588 	mov	a,r3
      000E53 24 85            [12] 2589 	add	a,#0xff - 0x7A
      000E55 40 0C            [24] 2590 	jc	00117$
                                   2591 ;	printf_large.c:530: c = toupper(c);
      000E57 53 04 DF         [24] 2592 	anl	ar4,#0xDF
                                   2593 ;	printf_large.c:531: lower_case = 1;
      000E5A E5*00            [12] 2594 	mov	a,_bp
      000E5C 24 15            [12] 2595 	add	a,#0x15
      000E5E F8               [12] 2596 	mov	r0,a
      000E5F 76 01            [12] 2597 	mov	@r0,#0x01
      000E61 80 07            [24] 2598 	sjmp	00118$
      000E63                       2599 00117$:
                                   2600 ;	printf_large.c:534: lower_case = 0;
      000E63 E5*00            [12] 2601 	mov	a,_bp
      000E65 24 15            [12] 2602 	add	a,#0x15
      000E67 F8               [12] 2603 	mov	r0,a
      000E68 76 00            [12] 2604 	mov	@r0,#0x00
      000E6A                       2605 00118$:
                                   2606 ;	printf_large.c:536: switch( c )
      000E6A BC 20 02         [24] 2607 	cjne	r4,#0x20,00510$
      000E6D 80 6E            [24] 2608 	sjmp	00122$
      000E6F                       2609 00510$:
      000E6F BC 2B 02         [24] 2610 	cjne	r4,#0x2B,00511$
      000E72 80 64            [24] 2611 	sjmp	00121$
      000E74                       2612 00511$:
      000E74 BC 2D 02         [24] 2613 	cjne	r4,#0x2D,00512$
      000E77 80 5A            [24] 2614 	sjmp	00120$
      000E79                       2615 00512$:
      000E79 BC 42 02         [24] 2616 	cjne	r4,#0x42,00513$
      000E7C 80 64            [24] 2617 	sjmp	00123$
      000E7E                       2618 00513$:
      000E7E BC 43 02         [24] 2619 	cjne	r4,#0x43,00514$
      000E81 80 69            [24] 2620 	sjmp	00129$
      000E83                       2621 00514$:
      000E83 BC 44 03         [24] 2622 	cjne	r4,#0x44,00515$
      000E86 02r13rEA         [24] 2623 	ljmp	00166$
      000E89                       2624 00515$:
      000E89 BC 46 03         [24] 2625 	cjne	r4,#0x46,00516$
      000E8C 02r14r10         [24] 2626 	ljmp	00170$
      000E8F                       2627 00516$:
      000E8F BC 48 03         [24] 2628 	cjne	r4,#0x48,00517$
      000E92 02r0Dr80         [24] 2629 	ljmp	00101$
      000E95                       2630 00517$:
      000E95 BC 49 03         [24] 2631 	cjne	r4,#0x49,00518$
      000E98 02r13rEA         [24] 2632 	ljmp	00166$
      000E9B                       2633 00518$:
      000E9B BC 4A 03         [24] 2634 	cjne	r4,#0x4A,00519$
      000E9E 02r0Dr80         [24] 2635 	ljmp	00101$
      000EA1                       2636 00519$:
      000EA1 BC 4C 02         [24] 2637 	cjne	r4,#0x4C,00520$
      000EA4 80 41            [24] 2638 	sjmp	00128$
      000EA6                       2639 00520$:
      000EA6 BC 4F 03         [24] 2640 	cjne	r4,#0x4F,00521$
      000EA9 02r13rF5         [24] 2641 	ljmp	00167$
      000EAC                       2642 00521$:
      000EAC BC 50 03         [24] 2643 	cjne	r4,#0x50,00522$
      000EAF 02r11rB1         [24] 2644 	ljmp	00152$
      000EB2                       2645 00522$:
      000EB2 BC 53 03         [24] 2646 	cjne	r4,#0x53,00523$
      000EB5 02r0Fr62         [24] 2647 	ljmp	00133$
      000EB8                       2648 00523$:
      000EB8 BC 54 03         [24] 2649 	cjne	r4,#0x54,00524$
      000EBB 02r0Dr80         [24] 2650 	ljmp	00101$
      000EBE                       2651 00524$:
      000EBE BC 55 03         [24] 2652 	cjne	r4,#0x55,00525$
      000EC1 02r13rFE         [24] 2653 	ljmp	00168$
      000EC4                       2654 00525$:
      000EC4 BC 58 03         [24] 2655 	cjne	r4,#0x58,00526$
      000EC7 02r14r07         [24] 2656 	ljmp	00169$
      000ECA                       2657 00526$:
      000ECA BC 5A 03         [24] 2658 	cjne	r4,#0x5A,00527$
      000ECD 02r0Dr80         [24] 2659 	ljmp	00101$
      000ED0                       2660 00527$:
      000ED0 02r14r14         [24] 2661 	ljmp	00171$
                                   2662 ;	printf_large.c:538: case '-':
      000ED3                       2663 00120$:
                                   2664 ;	printf_large.c:539: left_justify = 1;
      000ED3 D2*00            [12] 2665 	setb	b0
                                   2666 ;	printf_large.c:540: goto get_conversion_spec;
      000ED5 02r0Dr80         [24] 2667 	ljmp	00101$
                                   2668 ;	printf_large.c:541: case '+':
      000ED8                       2669 00121$:
                                   2670 ;	printf_large.c:542: prefix_sign = 1;
      000ED8 D2*00            [12] 2671 	setb	b2
                                   2672 ;	printf_large.c:543: goto get_conversion_spec;
      000EDA 02r0Dr80         [24] 2673 	ljmp	00101$
                                   2674 ;	printf_large.c:544: case ' ':
      000EDD                       2675 00122$:
                                   2676 ;	printf_large.c:545: prefix_space = 1;
      000EDD D2*00            [12] 2677 	setb	b3
                                   2678 ;	printf_large.c:546: goto get_conversion_spec;
      000EDF 02r0Dr80         [24] 2679 	ljmp	00101$
                                   2680 ;	printf_large.c:547: case 'B': /* byte */
      000EE2                       2681 00123$:
                                   2682 ;	printf_large.c:548: char_argument = 1;
      000EE2 D2*00            [12] 2683 	setb	b5
                                   2684 ;	printf_large.c:549: goto get_conversion_spec;
      000EE4 02r0Dr80         [24] 2685 	ljmp	00101$
                                   2686 ;	printf_large.c:556: case 'L': /* long */
      000EE7                       2687 00128$:
                                   2688 ;	printf_large.c:557: long_argument = 1;
      000EE7 D2*00            [12] 2689 	setb	b6
                                   2690 ;	printf_large.c:558: goto get_conversion_spec;
      000EE9 02r0Dr80         [24] 2691 	ljmp	00101$
                                   2692 ;	printf_large.c:560: case 'C':
      000EEC                       2693 00129$:
                                   2694 ;	printf_large.c:561: if( char_argument )
      000EEC 30*00 15         [24] 2695 	jnb	b5,00131$
                                   2696 ;	printf_large.c:562: c = va_arg(ap,char);
      000EEF E5*00            [12] 2697 	mov	a,_bp
      000EF1 24 F6            [12] 2698 	add	a,#0xf6
      000EF3 F8               [12] 2699 	mov	r0,a
      000EF4 E6               [12] 2700 	mov	a,@r0
      000EF5 14               [12] 2701 	dec	a
      000EF6 FA               [12] 2702 	mov	r2,a
      000EF7 E5*00            [12] 2703 	mov	a,_bp
      000EF9 24 F6            [12] 2704 	add	a,#0xf6
      000EFB F8               [12] 2705 	mov	r0,a
      000EFC A6 02            [24] 2706 	mov	@r0,ar2
      000EFE A8 02            [24] 2707 	mov	r0,ar2
      000F00 86 04            [24] 2708 	mov	ar4,@r0
      000F02 80 19            [24] 2709 	sjmp	00132$
      000F04                       2710 00131$:
                                   2711 ;	printf_large.c:564: c = va_arg(ap,int);
      000F04 E5*00            [12] 2712 	mov	a,_bp
      000F06 24 F6            [12] 2713 	add	a,#0xf6
      000F08 F8               [12] 2714 	mov	r0,a
      000F09 E6               [12] 2715 	mov	a,@r0
      000F0A 24 FE            [12] 2716 	add	a,#0xFE
      000F0C FA               [12] 2717 	mov	r2,a
      000F0D E5*00            [12] 2718 	mov	a,_bp
      000F0F 24 F6            [12] 2719 	add	a,#0xf6
      000F11 F8               [12] 2720 	mov	r0,a
      000F12 A6 02            [24] 2721 	mov	@r0,ar2
      000F14 A8 02            [24] 2722 	mov	r0,ar2
      000F16 86 02            [24] 2723 	mov	ar2,@r0
      000F18 08               [12] 2724 	inc	r0
      000F19 86 07            [24] 2725 	mov	ar7,@r0
      000F1B 8A 04            [24] 2726 	mov	ar4,r2
                                   2727 ;	printf_large.c:872: return charsOutputted;
                                   2728 ;	printf_large.c:564: c = va_arg(ap,int);
      000F1D                       2729 00132$:
                                   2730 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000F1D C0 01            [24] 2731 	push	ar1
      000F1F C0*00            [24] 2732 	push	bits
      000F21 E5*00            [12] 2733 	mov	a,_bp
      000F23 24 FA            [12] 2734 	add	a,#0xfa
      000F25 F8               [12] 2735 	mov	r0,a
      000F26 E6               [12] 2736 	mov	a,@r0
      000F27 C0 E0            [24] 2737 	push	acc
      000F29 08               [12] 2738 	inc	r0
      000F2A E6               [12] 2739 	mov	a,@r0
      000F2B C0 E0            [24] 2740 	push	acc
      000F2D 08               [12] 2741 	inc	r0
      000F2E E6               [12] 2742 	mov	a,@r0
      000F2F C0 E0            [24] 2743 	push	acc
      000F31 A8*00            [24] 2744 	mov	r0,_bp
      000F33 08               [12] 2745 	inc	r0
      000F34 E6               [12] 2746 	mov	a,@r0
      000F35 C0 E0            [24] 2747 	push	acc
      000F37 08               [12] 2748 	inc	r0
      000F38 E6               [12] 2749 	mov	a,@r0
      000F39 C0 E0            [24] 2750 	push	acc
      000F3B 08               [12] 2751 	inc	r0
      000F3C E6               [12] 2752 	mov	a,@r0
      000F3D C0 E0            [24] 2753 	push	acc
      000F3F 8C 82            [24] 2754 	mov	dpl,r4
      000F41 D0 02            [24] 2755 	pop	ar2
      000F43 D0 01            [24] 2756 	pop	ar1
      000F45 D0 00            [24] 2757 	pop	ar0
      000F47 12r00r00         [24] 2758 	lcall	__sdcc_banked_call
      000F4A 15 81            [12] 2759 	dec	sp
      000F4C 15 81            [12] 2760 	dec	sp
      000F4E 15 81            [12] 2761 	dec	sp
      000F50 D0*00            [24] 2762 	pop	bits
      000F52 D0 01            [24] 2763 	pop	ar1
      000F54 E5*00            [12] 2764 	mov	a,_bp
      000F56 24 0B            [12] 2765 	add	a,#0x0b
      000F58 F8               [12] 2766 	mov	r0,a
      000F59 06               [12] 2767 	inc	@r0
      000F5A B6 00 02         [24] 2768 	cjne	@r0,#0x00,00529$
      000F5D 08               [12] 2769 	inc	r0
      000F5E 06               [12] 2770 	inc	@r0
      000F5F                       2771 00529$:
                                   2772 ;	printf_large.c:566: break;
      000F5F 02r14r69         [24] 2773 	ljmp	00172$
                                   2774 ;	printf_large.c:568: case 'S':
      000F62                       2775 00133$:
                                   2776 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000F62 E5*00            [12] 2777 	mov	a,_bp
      000F64 24 10            [12] 2778 	add	a,#0x10
      000F66 FF               [12] 2779 	mov	r7,a
      000F67 E5*00            [12] 2780 	mov	a,_bp
      000F69 24 F6            [12] 2781 	add	a,#0xf6
      000F6B F8               [12] 2782 	mov	r0,a
      000F6C E6               [12] 2783 	mov	a,@r0
      000F6D 24 FD            [12] 2784 	add	a,#0xFD
      000F6F FA               [12] 2785 	mov	r2,a
      000F70 E5*00            [12] 2786 	mov	a,_bp
      000F72 24 F6            [12] 2787 	add	a,#0xf6
      000F74 F8               [12] 2788 	mov	r0,a
      000F75 A6 02            [24] 2789 	mov	@r0,ar2
      000F77 A8 02            [24] 2790 	mov	r0,ar2
      000F79 86 02            [24] 2791 	mov	ar2,@r0
      000F7B 08               [12] 2792 	inc	r0
      000F7C 86 05            [24] 2793 	mov	ar5,@r0
      000F7E 08               [12] 2794 	inc	r0
      000F7F 86 06            [24] 2795 	mov	ar6,@r0
      000F81 A8 07            [24] 2796 	mov	r0,ar7
      000F83 A6 02            [24] 2797 	mov	@r0,ar2
      000F85 08               [12] 2798 	inc	r0
      000F86 A6 05            [24] 2799 	mov	@r0,ar5
      000F88 08               [12] 2800 	inc	r0
      000F89 A6 06            [24] 2801 	mov	@r0,ar6
                                   2802 ;	printf_large.c:582: length = strlen(PTR);
      000F8B 8A 82            [24] 2803 	mov	dpl,r2
      000F8D 8D 83            [24] 2804 	mov	dph,r5
      000F8F 8E F0            [24] 2805 	mov	b,r6
      000F91 C0 07            [24] 2806 	push	ar7
      000F93 C0 01            [24] 2807 	push	ar1
      000F95 C0*00            [24] 2808 	push	bits
      000F97 78r00            [12] 2809 	mov	r0,#_strlen
      000F99 79s00            [12] 2810 	mov	r1,#(_strlen >> 8)
      000F9B 7As00            [12] 2811 	mov	r2,#(_strlen >> 16)
      000F9D 12r00r00         [24] 2812 	lcall	__sdcc_banked_call
      000FA0 AD 82            [24] 2813 	mov	r5,dpl
      000FA2 AE 83            [24] 2814 	mov	r6,dph
      000FA4 D0*00            [24] 2815 	pop	bits
      000FA6 D0 01            [24] 2816 	pop	ar1
      000FA8 D0 07            [24] 2817 	pop	ar7
      000FAA 8D 03            [24] 2818 	mov	ar3,r5
                                   2819 ;	printf_large.c:584: if ( decimals == -1 )
      000FAC E5*00            [12] 2820 	mov	a,_bp
      000FAE 24 0F            [12] 2821 	add	a,#0x0f
      000FB0 F8               [12] 2822 	mov	r0,a
      000FB1 B6 FF 07         [24] 2823 	cjne	@r0,#0xFF,00135$
                                   2824 ;	printf_large.c:586: decimals = length;
      000FB4 E5*00            [12] 2825 	mov	a,_bp
      000FB6 24 0F            [12] 2826 	add	a,#0x0f
      000FB8 F8               [12] 2827 	mov	r0,a
      000FB9 A6 03            [24] 2828 	mov	@r0,ar3
      000FBB                       2829 00135$:
                                   2830 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000FBB 30*00 03         [24] 2831 	jnb	b0,00532$
      000FBE 02r10r52         [24] 2832 	ljmp	00286$
      000FC1                       2833 00532$:
      000FC1 E5*00            [12] 2834 	mov	a,_bp
      000FC3 24 0E            [12] 2835 	add	a,#0x0e
      000FC5 F8               [12] 2836 	mov	r0,a
      000FC6 C3               [12] 2837 	clr	c
      000FC7 EB               [12] 2838 	mov	a,r3
      000FC8 96               [12] 2839 	subb	a,@r0
      000FC9 40 03            [24] 2840 	jc	00533$
      000FCB 02r10r52         [24] 2841 	ljmp	00286$
      000FCE                       2842 00533$:
                                   2843 ;	printf_large.c:590: width -= length;
      000FCE E5*00            [12] 2844 	mov	a,_bp
      000FD0 24 0E            [12] 2845 	add	a,#0x0e
      000FD2 F8               [12] 2846 	mov	r0,a
      000FD3 E6               [12] 2847 	mov	a,@r0
      000FD4 C3               [12] 2848 	clr	c
      000FD5 9B               [12] 2849 	subb	a,r3
      000FD6 F6               [12] 2850 	mov	@r0,a
                                   2851 ;	printf_large.c:591: while( width-- != 0 )
      000FD7 E5*00            [12] 2852 	mov	a,_bp
      000FD9 24 0B            [12] 2853 	add	a,#0x0b
      000FDB F8               [12] 2854 	mov	r0,a
      000FDC 86 05            [24] 2855 	mov	ar5,@r0
      000FDE 08               [12] 2856 	inc	r0
      000FDF 86 06            [24] 2857 	mov	ar6,@r0
      000FE1 E5*00            [12] 2858 	mov	a,_bp
      000FE3 24 0E            [12] 2859 	add	a,#0x0e
      000FE5 F8               [12] 2860 	mov	r0,a
      000FE6 86 04            [24] 2861 	mov	ar4,@r0
      000FE8                       2862 00136$:
      000FE8 8C 02            [24] 2863 	mov	ar2,r4
      000FEA 1C               [12] 2864 	dec	r4
      000FEB EA               [12] 2865 	mov	a,r2
      000FEC 60 53            [24] 2866 	jz	00324$
                                   2867 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000FEE C0 07            [24] 2868 	push	ar7
      000FF0 C0 06            [24] 2869 	push	ar6
      000FF2 C0 05            [24] 2870 	push	ar5
      000FF4 C0 04            [24] 2871 	push	ar4
      000FF6 C0 03            [24] 2872 	push	ar3
      000FF8 C0 01            [24] 2873 	push	ar1
      000FFA C0*00            [24] 2874 	push	bits
      000FFC E5*00            [12] 2875 	mov	a,_bp
      000FFE 24 FA            [12] 2876 	add	a,#0xfa
      001000 F8               [12] 2877 	mov	r0,a
      001001 E6               [12] 2878 	mov	a,@r0
      001002 C0 E0            [24] 2879 	push	acc
      001004 08               [12] 2880 	inc	r0
      001005 E6               [12] 2881 	mov	a,@r0
      001006 C0 E0            [24] 2882 	push	acc
      001008 08               [12] 2883 	inc	r0
      001009 E6               [12] 2884 	mov	a,@r0
      00100A C0 E0            [24] 2885 	push	acc
      00100C A8*00            [24] 2886 	mov	r0,_bp
      00100E 08               [12] 2887 	inc	r0
      00100F E6               [12] 2888 	mov	a,@r0
      001010 C0 E0            [24] 2889 	push	acc
      001012 08               [12] 2890 	inc	r0
      001013 E6               [12] 2891 	mov	a,@r0
      001014 C0 E0            [24] 2892 	push	acc
      001016 08               [12] 2893 	inc	r0
      001017 E6               [12] 2894 	mov	a,@r0
      001018 C0 E0            [24] 2895 	push	acc
      00101A 75 82 20         [24] 2896 	mov	dpl,#0x20
      00101D D0 02            [24] 2897 	pop	ar2
      00101F D0 01            [24] 2898 	pop	ar1
      001021 D0 00            [24] 2899 	pop	ar0
      001023 12r00r00         [24] 2900 	lcall	__sdcc_banked_call
      001026 15 81            [12] 2901 	dec	sp
      001028 15 81            [12] 2902 	dec	sp
      00102A 15 81            [12] 2903 	dec	sp
      00102C D0*00            [24] 2904 	pop	bits
      00102E D0 01            [24] 2905 	pop	ar1
      001030 D0 03            [24] 2906 	pop	ar3
      001032 D0 04            [24] 2907 	pop	ar4
      001034 D0 05            [24] 2908 	pop	ar5
      001036 D0 06            [24] 2909 	pop	ar6
      001038 D0 07            [24] 2910 	pop	ar7
      00103A 0D               [12] 2911 	inc	r5
                                   2912 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      00103B BD 00 AA         [24] 2913 	cjne	r5,#0x00,00136$
      00103E 0E               [12] 2914 	inc	r6
      00103F 80 A7            [24] 2915 	sjmp	00136$
      001041                       2916 00324$:
      001041 E5*00            [12] 2917 	mov	a,_bp
      001043 24 0B            [12] 2918 	add	a,#0x0b
      001045 F8               [12] 2919 	mov	r0,a
      001046 A6 05            [24] 2920 	mov	@r0,ar5
      001048 08               [12] 2921 	inc	r0
      001049 A6 06            [24] 2922 	mov	@r0,ar6
      00104B E5*00            [12] 2923 	mov	a,_bp
      00104D 24 0E            [12] 2924 	add	a,#0x0e
      00104F F8               [12] 2925 	mov	r0,a
      001050 A6 04            [24] 2926 	mov	@r0,ar4
      001052                       2927 00286$:
      001052 E5*00            [12] 2928 	mov	a,_bp
      001054 24 0F            [12] 2929 	add	a,#0x0f
      001056 F8               [12] 2930 	mov	r0,a
      001057 C0 01            [24] 2931 	push	ar1
      001059 E5*00            [12] 2932 	mov	a,_bp
      00105B 24 0A            [12] 2933 	add	a,#0x0a
      00105D F9               [12] 2934 	mov	r1,a
      00105E E6               [12] 2935 	mov	a,@r0
      00105F F7               [12] 2936 	mov	@r1,a
      001060 E5*00            [12] 2937 	mov	a,_bp
      001062 24 0B            [12] 2938 	add	a,#0x0b
      001064 F8               [12] 2939 	mov	r0,a
      001065 E5*00            [12] 2940 	mov	a,_bp
      001067 24 05            [12] 2941 	add	a,#0x05
      001069 F9               [12] 2942 	mov	r1,a
      00106A E6               [12] 2943 	mov	a,@r0
      00106B F7               [12] 2944 	mov	@r1,a
      00106C 08               [12] 2945 	inc	r0
      00106D 09               [12] 2946 	inc	r1
      00106E E6               [12] 2947 	mov	a,@r0
      00106F F7               [12] 2948 	mov	@r1,a
      001070 D0 01            [24] 2949 	pop	ar1
      001072                       2950 00143$:
      001072 C0 01            [24] 2951 	push	ar1
      001074 A8 07            [24] 2952 	mov	r0,ar7
      001076 86 02            [24] 2953 	mov	ar2,@r0
      001078 08               [12] 2954 	inc	r0
      001079 86 05            [24] 2955 	mov	ar5,@r0
      00107B 08               [12] 2956 	inc	r0
      00107C 86 06            [24] 2957 	mov	ar6,@r0
      00107E 8A 82            [24] 2958 	mov	dpl,r2
      001080 8D 83            [24] 2959 	mov	dph,r5
      001082 8E F0            [24] 2960 	mov	b,r6
      001084 12r00r00         [24] 2961 	lcall	__gptrget
      001087 FA               [12] 2962 	mov	r2,a
      001088 FC               [12] 2963 	mov	r4,a
      001089 D0 01            [24] 2964 	pop	ar1
      00108B EA               [12] 2965 	mov	a,r2
      00108C 70 03            [24] 2966 	jnz	00536$
      00108E 02r11r10         [24] 2967 	ljmp	00325$
      001091                       2968 00536$:
      001091 E5*00            [12] 2969 	mov	a,_bp
      001093 24 0A            [12] 2970 	add	a,#0x0a
      001095 F8               [12] 2971 	mov	r0,a
      001096 86 06            [24] 2972 	mov	ar6,@r0
      001098 E5*00            [12] 2973 	mov	a,_bp
      00109A 24 0A            [12] 2974 	add	a,#0x0a
      00109C F8               [12] 2975 	mov	r0,a
      00109D 16               [12] 2976 	dec	@r0
      00109E C3               [12] 2977 	clr	c
      00109F 74 80            [12] 2978 	mov	a,#(0x00 ^ 0x80)
      0010A1 8E F0            [24] 2979 	mov	b,r6
      0010A3 63 F0 80         [24] 2980 	xrl	b,#0x80
      0010A6 95 F0            [12] 2981 	subb	a,b
      0010A8 50 66            [24] 2982 	jnc	00325$
                                   2983 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      0010AA C0 07            [24] 2984 	push	ar7
      0010AC C0 03            [24] 2985 	push	ar3
      0010AE C0 01            [24] 2986 	push	ar1
      0010B0 C0*00            [24] 2987 	push	bits
      0010B2 E5*00            [12] 2988 	mov	a,_bp
      0010B4 24 FA            [12] 2989 	add	a,#0xfa
      0010B6 F8               [12] 2990 	mov	r0,a
      0010B7 E6               [12] 2991 	mov	a,@r0
      0010B8 C0 E0            [24] 2992 	push	acc
      0010BA 08               [12] 2993 	inc	r0
      0010BB E6               [12] 2994 	mov	a,@r0
      0010BC C0 E0            [24] 2995 	push	acc
      0010BE 08               [12] 2996 	inc	r0
      0010BF E6               [12] 2997 	mov	a,@r0
      0010C0 C0 E0            [24] 2998 	push	acc
      0010C2 A8*00            [24] 2999 	mov	r0,_bp
      0010C4 08               [12] 3000 	inc	r0
      0010C5 E6               [12] 3001 	mov	a,@r0
      0010C6 C0 E0            [24] 3002 	push	acc
      0010C8 08               [12] 3003 	inc	r0
      0010C9 E6               [12] 3004 	mov	a,@r0
      0010CA C0 E0            [24] 3005 	push	acc
      0010CC 08               [12] 3006 	inc	r0
      0010CD E6               [12] 3007 	mov	a,@r0
      0010CE C0 E0            [24] 3008 	push	acc
      0010D0 8C 82            [24] 3009 	mov	dpl,r4
      0010D2 D0 02            [24] 3010 	pop	ar2
      0010D4 D0 01            [24] 3011 	pop	ar1
      0010D6 D0 00            [24] 3012 	pop	ar0
      0010D8 12r00r00         [24] 3013 	lcall	__sdcc_banked_call
      0010DB 15 81            [12] 3014 	dec	sp
      0010DD 15 81            [12] 3015 	dec	sp
      0010DF 15 81            [12] 3016 	dec	sp
      0010E1 D0*00            [24] 3017 	pop	bits
      0010E3 D0 01            [24] 3018 	pop	ar1
      0010E5 D0 03            [24] 3019 	pop	ar3
      0010E7 D0 07            [24] 3020 	pop	ar7
      0010E9 E5*00            [12] 3021 	mov	a,_bp
      0010EB 24 05            [12] 3022 	add	a,#0x05
      0010ED F8               [12] 3023 	mov	r0,a
      0010EE 06               [12] 3024 	inc	@r0
      0010EF B6 00 02         [24] 3025 	cjne	@r0,#0x00,00538$
      0010F2 08               [12] 3026 	inc	r0
      0010F3 06               [12] 3027 	inc	@r0
      0010F4                       3028 00538$:
                                   3029 ;	printf_large.c:600: PTR++;
      0010F4 A8 07            [24] 3030 	mov	r0,ar7
      0010F6 86 02            [24] 3031 	mov	ar2,@r0
      0010F8 08               [12] 3032 	inc	r0
      0010F9 86 05            [24] 3033 	mov	ar5,@r0
      0010FB 08               [12] 3034 	inc	r0
      0010FC 86 06            [24] 3035 	mov	ar6,@r0
      0010FE 0A               [12] 3036 	inc	r2
      0010FF BA 00 01         [24] 3037 	cjne	r2,#0x00,00539$
      001102 0D               [12] 3038 	inc	r5
      001103                       3039 00539$:
      001103 A8 07            [24] 3040 	mov	r0,ar7
      001105 A6 02            [24] 3041 	mov	@r0,ar2
      001107 08               [12] 3042 	inc	r0
      001108 A6 05            [24] 3043 	mov	@r0,ar5
      00110A 08               [12] 3044 	inc	r0
      00110B A6 06            [24] 3045 	mov	@r0,ar6
      00110D 02r10r72         [24] 3046 	ljmp	00143$
      001110                       3047 00325$:
      001110 E5*00            [12] 3048 	mov	a,_bp
      001112 24 0A            [12] 3049 	add	a,#0x0a
      001114 F8               [12] 3050 	mov	r0,a
      001115 C0 01            [24] 3051 	push	ar1
      001117 E5*00            [12] 3052 	mov	a,_bp
      001119 24 0F            [12] 3053 	add	a,#0x0f
      00111B F9               [12] 3054 	mov	r1,a
      00111C E6               [12] 3055 	mov	a,@r0
      00111D F7               [12] 3056 	mov	@r1,a
      00111E E5*00            [12] 3057 	mov	a,_bp
      001120 24 05            [12] 3058 	add	a,#0x05
      001122 F8               [12] 3059 	mov	r0,a
      001123 E5*00            [12] 3060 	mov	a,_bp
      001125 24 0B            [12] 3061 	add	a,#0x0b
      001127 F9               [12] 3062 	mov	r1,a
      001128 E6               [12] 3063 	mov	a,@r0
      001129 F7               [12] 3064 	mov	@r1,a
      00112A 08               [12] 3065 	inc	r0
      00112B 09               [12] 3066 	inc	r1
      00112C E6               [12] 3067 	mov	a,@r0
      00112D F7               [12] 3068 	mov	@r1,a
      00112E D0 01            [24] 3069 	pop	ar1
                                   3070 ;	printf_large.c:603: if ( left_justify && (length < width))
      001130 20*00 03         [24] 3071 	jb	b0,00540$
      001133 02r14r69         [24] 3072 	ljmp	00172$
      001136                       3073 00540$:
      001136 E5*00            [12] 3074 	mov	a,_bp
      001138 24 0E            [12] 3075 	add	a,#0x0e
      00113A F8               [12] 3076 	mov	r0,a
      00113B C3               [12] 3077 	clr	c
      00113C EB               [12] 3078 	mov	a,r3
      00113D 96               [12] 3079 	subb	a,@r0
      00113E 40 03            [24] 3080 	jc	00541$
      001140 02r14r69         [24] 3081 	ljmp	00172$
      001143                       3082 00541$:
                                   3083 ;	printf_large.c:605: width -= length;
      001143 E5*00            [12] 3084 	mov	a,_bp
      001145 24 0E            [12] 3085 	add	a,#0x0e
      001147 F8               [12] 3086 	mov	r0,a
      001148 E6               [12] 3087 	mov	a,@r0
      001149 C3               [12] 3088 	clr	c
      00114A 9B               [12] 3089 	subb	a,r3
      00114B F6               [12] 3090 	mov	@r0,a
                                   3091 ;	printf_large.c:606: while( width-- != 0 )
      00114C E5*00            [12] 3092 	mov	a,_bp
      00114E 24 05            [12] 3093 	add	a,#0x05
      001150 F8               [12] 3094 	mov	r0,a
      001151 86 06            [24] 3095 	mov	ar6,@r0
      001153 08               [12] 3096 	inc	r0
      001154 86 07            [24] 3097 	mov	ar7,@r0
      001156 E5*00            [12] 3098 	mov	a,_bp
      001158 24 0E            [12] 3099 	add	a,#0x0e
      00115A F8               [12] 3100 	mov	r0,a
      00115B 86 05            [24] 3101 	mov	ar5,@r0
      00115D                       3102 00146$:
      00115D 8D 02            [24] 3103 	mov	ar2,r5
      00115F 1D               [12] 3104 	dec	r5
      001160 EA               [12] 3105 	mov	a,r2
      001161 70 03            [24] 3106 	jnz	00542$
      001163 02r14r58         [24] 3107 	ljmp	00326$
      001166                       3108 00542$:
                                   3109 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      001166 C0 07            [24] 3110 	push	ar7
      001168 C0 06            [24] 3111 	push	ar6
      00116A C0 05            [24] 3112 	push	ar5
      00116C C0 01            [24] 3113 	push	ar1
      00116E C0*00            [24] 3114 	push	bits
      001170 E5*00            [12] 3115 	mov	a,_bp
      001172 24 FA            [12] 3116 	add	a,#0xfa
      001174 F8               [12] 3117 	mov	r0,a
      001175 E6               [12] 3118 	mov	a,@r0
      001176 C0 E0            [24] 3119 	push	acc
      001178 08               [12] 3120 	inc	r0
      001179 E6               [12] 3121 	mov	a,@r0
      00117A C0 E0            [24] 3122 	push	acc
      00117C 08               [12] 3123 	inc	r0
      00117D E6               [12] 3124 	mov	a,@r0
      00117E C0 E0            [24] 3125 	push	acc
      001180 A8*00            [24] 3126 	mov	r0,_bp
      001182 08               [12] 3127 	inc	r0
      001183 E6               [12] 3128 	mov	a,@r0
      001184 C0 E0            [24] 3129 	push	acc
      001186 08               [12] 3130 	inc	r0
      001187 E6               [12] 3131 	mov	a,@r0
      001188 C0 E0            [24] 3132 	push	acc
      00118A 08               [12] 3133 	inc	r0
      00118B E6               [12] 3134 	mov	a,@r0
      00118C C0 E0            [24] 3135 	push	acc
      00118E 75 82 20         [24] 3136 	mov	dpl,#0x20
      001191 D0 02            [24] 3137 	pop	ar2
      001193 D0 01            [24] 3138 	pop	ar1
      001195 D0 00            [24] 3139 	pop	ar0
      001197 12r00r00         [24] 3140 	lcall	__sdcc_banked_call
      00119A 15 81            [12] 3141 	dec	sp
      00119C 15 81            [12] 3142 	dec	sp
      00119E 15 81            [12] 3143 	dec	sp
      0011A0 D0*00            [24] 3144 	pop	bits
      0011A2 D0 01            [24] 3145 	pop	ar1
      0011A4 D0 05            [24] 3146 	pop	ar5
      0011A6 D0 06            [24] 3147 	pop	ar6
      0011A8 D0 07            [24] 3148 	pop	ar7
      0011AA 0E               [12] 3149 	inc	r6
                                   3150 ;	printf_large.c:613: case 'P':
      0011AB BE 00 AF         [24] 3151 	cjne	r6,#0x00,00146$
      0011AE 0F               [12] 3152 	inc	r7
      0011AF 80 AC            [24] 3153 	sjmp	00146$
      0011B1                       3154 00152$:
                                   3155 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      0011B1 C0 01            [24] 3156 	push	ar1
      0011B3 E5*00            [12] 3157 	mov	a,_bp
      0011B5 24 10            [12] 3158 	add	a,#0x10
      0011B7 F8               [12] 3159 	mov	r0,a
      0011B8 C0 00            [24] 3160 	push	ar0
      0011BA E5*00            [12] 3161 	mov	a,_bp
      0011BC 24 F6            [12] 3162 	add	a,#0xf6
      0011BE F8               [12] 3163 	mov	r0,a
      0011BF E6               [12] 3164 	mov	a,@r0
      0011C0 24 FD            [12] 3165 	add	a,#0xFD
      0011C2 FA               [12] 3166 	mov	r2,a
      0011C3 E5*00            [12] 3167 	mov	a,_bp
      0011C5 24 F6            [12] 3168 	add	a,#0xf6
      0011C7 F8               [12] 3169 	mov	r0,a
      0011C8 A6 02            [24] 3170 	mov	@r0,ar2
      0011CA A8 02            [24] 3171 	mov	r0,ar2
      0011CC 86 02            [24] 3172 	mov	ar2,@r0
      0011CE 08               [12] 3173 	inc	r0
      0011CF 86 03            [24] 3174 	mov	ar3,@r0
      0011D1 08               [12] 3175 	inc	r0
      0011D2 86 04            [24] 3176 	mov	ar4,@r0
      0011D4 D0 00            [24] 3177 	pop	ar0
      0011D6 A6 02            [24] 3178 	mov	@r0,ar2
      0011D8 08               [12] 3179 	inc	r0
      0011D9 A6 03            [24] 3180 	mov	@r0,ar3
      0011DB 08               [12] 3181 	inc	r0
      0011DC A6 04            [24] 3182 	mov	@r0,ar4
      0011DE 18               [12] 3183 	dec	r0
      0011DF 18               [12] 3184 	dec	r0
                                   3185 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      0011E0 E5*00            [12] 3186 	mov	a,_bp
      0011E2 24 10            [12] 3187 	add	a,#0x10
      0011E4 FE               [12] 3188 	mov	r6,a
      0011E5 24 02            [12] 3189 	add	a,#0x02
      0011E7 F9               [12] 3190 	mov	r1,a
      0011E8 87 07            [24] 3191 	mov	ar7,@r1
                                   3192 ;	printf_large.c:638: if (memtype >= 0x80)
      0011EA BF 80 00         [24] 3193 	cjne	r7,#0x80,00544$
      0011ED                       3194 00544$:
      0011ED D0 01            [24] 3195 	pop	ar1
      0011EF 40 04            [24] 3196 	jc	00160$
                                   3197 ;	printf_large.c:639: c = 'C';
      0011F1 7C 43            [12] 3198 	mov	r4,#0x43
      0011F3 80 14            [24] 3199 	sjmp	00161$
      0011F5                       3200 00160$:
                                   3201 ;	printf_large.c:640: else if (memtype >= 0x60)
      0011F5 BF 60 00         [24] 3202 	cjne	r7,#0x60,00546$
      0011F8                       3203 00546$:
      0011F8 40 04            [24] 3204 	jc	00157$
                                   3205 ;	printf_large.c:641: c = 'P';
      0011FA 7C 50            [12] 3206 	mov	r4,#0x50
      0011FC 80 0B            [24] 3207 	sjmp	00161$
      0011FE                       3208 00157$:
                                   3209 ;	printf_large.c:642: else if (memtype >= 0x40)
      0011FE BF 40 00         [24] 3210 	cjne	r7,#0x40,00548$
      001201                       3211 00548$:
      001201 40 04            [24] 3212 	jc	00154$
                                   3213 ;	printf_large.c:643: c = 'I';
      001203 7C 49            [12] 3214 	mov	r4,#0x49
      001205 80 02            [24] 3215 	sjmp	00161$
      001207                       3216 00154$:
                                   3217 ;	printf_large.c:645: c = 'X';
      001207 7C 58            [12] 3218 	mov	r4,#0x58
      001209                       3219 00161$:
                                   3220 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      001209 C0 06            [24] 3221 	push	ar6
      00120B C0 04            [24] 3222 	push	ar4
      00120D C0 01            [24] 3223 	push	ar1
      00120F C0*00            [24] 3224 	push	bits
      001211 E5*00            [12] 3225 	mov	a,_bp
      001213 24 FA            [12] 3226 	add	a,#0xfa
      001215 F8               [12] 3227 	mov	r0,a
      001216 E6               [12] 3228 	mov	a,@r0
      001217 C0 E0            [24] 3229 	push	acc
      001219 08               [12] 3230 	inc	r0
      00121A E6               [12] 3231 	mov	a,@r0
      00121B C0 E0            [24] 3232 	push	acc
      00121D 08               [12] 3233 	inc	r0
      00121E E6               [12] 3234 	mov	a,@r0
      00121F C0 E0            [24] 3235 	push	acc
      001221 A8*00            [24] 3236 	mov	r0,_bp
      001223 08               [12] 3237 	inc	r0
      001224 E6               [12] 3238 	mov	a,@r0
      001225 C0 E0            [24] 3239 	push	acc
      001227 08               [12] 3240 	inc	r0
      001228 E6               [12] 3241 	mov	a,@r0
      001229 C0 E0            [24] 3242 	push	acc
      00122B 08               [12] 3243 	inc	r0
      00122C E6               [12] 3244 	mov	a,@r0
      00122D C0 E0            [24] 3245 	push	acc
      00122F 8C 82            [24] 3246 	mov	dpl,r4
      001231 D0 02            [24] 3247 	pop	ar2
      001233 D0 01            [24] 3248 	pop	ar1
      001235 D0 00            [24] 3249 	pop	ar0
      001237 12r00r00         [24] 3250 	lcall	__sdcc_banked_call
      00123A 15 81            [12] 3251 	dec	sp
      00123C 15 81            [12] 3252 	dec	sp
      00123E 15 81            [12] 3253 	dec	sp
      001240 D0*00            [24] 3254 	pop	bits
      001242 D0 01            [24] 3255 	pop	ar1
      001244 D0 04            [24] 3256 	pop	ar4
      001246 D0 06            [24] 3257 	pop	ar6
      001248 E5*00            [12] 3258 	mov	a,_bp
      00124A 24 0B            [12] 3259 	add	a,#0x0b
      00124C F8               [12] 3260 	mov	r0,a
      00124D 06               [12] 3261 	inc	@r0
      00124E B6 00 02         [24] 3262 	cjne	@r0,#0x00,00550$
      001251 08               [12] 3263 	inc	r0
      001252 06               [12] 3264 	inc	@r0
      001253                       3265 00550$:
                                   3266 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      001253 C0 06            [24] 3267 	push	ar6
      001255 C0 04            [24] 3268 	push	ar4
      001257 C0 01            [24] 3269 	push	ar1
      001259 C0*00            [24] 3270 	push	bits
      00125B E5*00            [12] 3271 	mov	a,_bp
      00125D 24 FA            [12] 3272 	add	a,#0xfa
      00125F F8               [12] 3273 	mov	r0,a
      001260 E6               [12] 3274 	mov	a,@r0
      001261 C0 E0            [24] 3275 	push	acc
      001263 08               [12] 3276 	inc	r0
      001264 E6               [12] 3277 	mov	a,@r0
      001265 C0 E0            [24] 3278 	push	acc
      001267 08               [12] 3279 	inc	r0
      001268 E6               [12] 3280 	mov	a,@r0
      001269 C0 E0            [24] 3281 	push	acc
      00126B A8*00            [24] 3282 	mov	r0,_bp
      00126D 08               [12] 3283 	inc	r0
      00126E E6               [12] 3284 	mov	a,@r0
      00126F C0 E0            [24] 3285 	push	acc
      001271 08               [12] 3286 	inc	r0
      001272 E6               [12] 3287 	mov	a,@r0
      001273 C0 E0            [24] 3288 	push	acc
      001275 08               [12] 3289 	inc	r0
      001276 E6               [12] 3290 	mov	a,@r0
      001277 C0 E0            [24] 3291 	push	acc
      001279 75 82 3A         [24] 3292 	mov	dpl,#0x3A
      00127C D0 02            [24] 3293 	pop	ar2
      00127E D0 01            [24] 3294 	pop	ar1
      001280 D0 00            [24] 3295 	pop	ar0
      001282 12r00r00         [24] 3296 	lcall	__sdcc_banked_call
      001285 15 81            [12] 3297 	dec	sp
      001287 15 81            [12] 3298 	dec	sp
      001289 15 81            [12] 3299 	dec	sp
      00128B D0*00            [24] 3300 	pop	bits
      00128D D0 01            [24] 3301 	pop	ar1
      00128F D0 04            [24] 3302 	pop	ar4
      001291 D0 06            [24] 3303 	pop	ar6
      001293 E5*00            [12] 3304 	mov	a,_bp
      001295 24 0B            [12] 3305 	add	a,#0x0b
      001297 F8               [12] 3306 	mov	r0,a
      001298 06               [12] 3307 	inc	@r0
      001299 B6 00 02         [24] 3308 	cjne	@r0,#0x00,00551$
      00129C 08               [12] 3309 	inc	r0
      00129D 06               [12] 3310 	inc	@r0
      00129E                       3311 00551$:
                                   3312 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      00129E C0 06            [24] 3313 	push	ar6
      0012A0 C0 04            [24] 3314 	push	ar4
      0012A2 C0 01            [24] 3315 	push	ar1
      0012A4 C0*00            [24] 3316 	push	bits
      0012A6 E5*00            [12] 3317 	mov	a,_bp
      0012A8 24 FA            [12] 3318 	add	a,#0xfa
      0012AA F8               [12] 3319 	mov	r0,a
      0012AB E6               [12] 3320 	mov	a,@r0
      0012AC C0 E0            [24] 3321 	push	acc
      0012AE 08               [12] 3322 	inc	r0
      0012AF E6               [12] 3323 	mov	a,@r0
      0012B0 C0 E0            [24] 3324 	push	acc
      0012B2 08               [12] 3325 	inc	r0
      0012B3 E6               [12] 3326 	mov	a,@r0
      0012B4 C0 E0            [24] 3327 	push	acc
      0012B6 A8*00            [24] 3328 	mov	r0,_bp
      0012B8 08               [12] 3329 	inc	r0
      0012B9 E6               [12] 3330 	mov	a,@r0
      0012BA C0 E0            [24] 3331 	push	acc
      0012BC 08               [12] 3332 	inc	r0
      0012BD E6               [12] 3333 	mov	a,@r0
      0012BE C0 E0            [24] 3334 	push	acc
      0012C0 08               [12] 3335 	inc	r0
      0012C1 E6               [12] 3336 	mov	a,@r0
      0012C2 C0 E0            [24] 3337 	push	acc
      0012C4 75 82 30         [24] 3338 	mov	dpl,#0x30
      0012C7 D0 02            [24] 3339 	pop	ar2
      0012C9 D0 01            [24] 3340 	pop	ar1
      0012CB D0 00            [24] 3341 	pop	ar0
      0012CD 12r00r00         [24] 3342 	lcall	__sdcc_banked_call
      0012D0 15 81            [12] 3343 	dec	sp
      0012D2 15 81            [12] 3344 	dec	sp
      0012D4 15 81            [12] 3345 	dec	sp
      0012D6 D0*00            [24] 3346 	pop	bits
      0012D8 D0 01            [24] 3347 	pop	ar1
      0012DA D0 04            [24] 3348 	pop	ar4
      0012DC D0 06            [24] 3349 	pop	ar6
      0012DE E5*00            [12] 3350 	mov	a,_bp
      0012E0 24 0B            [12] 3351 	add	a,#0x0b
      0012E2 F8               [12] 3352 	mov	r0,a
      0012E3 06               [12] 3353 	inc	@r0
      0012E4 B6 00 02         [24] 3354 	cjne	@r0,#0x00,00552$
      0012E7 08               [12] 3355 	inc	r0
      0012E8 06               [12] 3356 	inc	@r0
      0012E9                       3357 00552$:
                                   3358 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      0012E9 C0 06            [24] 3359 	push	ar6
      0012EB C0 04            [24] 3360 	push	ar4
      0012ED C0 01            [24] 3361 	push	ar1
      0012EF C0*00            [24] 3362 	push	bits
      0012F1 E5*00            [12] 3363 	mov	a,_bp
      0012F3 24 FA            [12] 3364 	add	a,#0xfa
      0012F5 F8               [12] 3365 	mov	r0,a
      0012F6 E6               [12] 3366 	mov	a,@r0
      0012F7 C0 E0            [24] 3367 	push	acc
      0012F9 08               [12] 3368 	inc	r0
      0012FA E6               [12] 3369 	mov	a,@r0
      0012FB C0 E0            [24] 3370 	push	acc
      0012FD 08               [12] 3371 	inc	r0
      0012FE E6               [12] 3372 	mov	a,@r0
      0012FF C0 E0            [24] 3373 	push	acc
      001301 A8*00            [24] 3374 	mov	r0,_bp
      001303 08               [12] 3375 	inc	r0
      001304 E6               [12] 3376 	mov	a,@r0
      001305 C0 E0            [24] 3377 	push	acc
      001307 08               [12] 3378 	inc	r0
      001308 E6               [12] 3379 	mov	a,@r0
      001309 C0 E0            [24] 3380 	push	acc
      00130B 08               [12] 3381 	inc	r0
      00130C E6               [12] 3382 	mov	a,@r0
      00130D C0 E0            [24] 3383 	push	acc
      00130F 75 82 78         [24] 3384 	mov	dpl,#0x78
      001312 D0 02            [24] 3385 	pop	ar2
      001314 D0 01            [24] 3386 	pop	ar1
      001316 D0 00            [24] 3387 	pop	ar0
      001318 12r00r00         [24] 3388 	lcall	__sdcc_banked_call
      00131B 15 81            [12] 3389 	dec	sp
      00131D 15 81            [12] 3390 	dec	sp
      00131F 15 81            [12] 3391 	dec	sp
      001321 D0*00            [24] 3392 	pop	bits
      001323 D0 01            [24] 3393 	pop	ar1
      001325 D0 04            [24] 3394 	pop	ar4
      001327 D0 06            [24] 3395 	pop	ar6
      001329 E5*00            [12] 3396 	mov	a,_bp
      00132B 24 0B            [12] 3397 	add	a,#0x0b
      00132D F8               [12] 3398 	mov	r0,a
      00132E 06               [12] 3399 	inc	@r0
      00132F B6 00 02         [24] 3400 	cjne	@r0,#0x00,00553$
      001332 08               [12] 3401 	inc	r0
      001333 06               [12] 3402 	inc	@r0
      001334                       3403 00553$:
                                   3404 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      001334 BC 49 02         [24] 3405 	cjne	r4,#0x49,00554$
      001337 80 5B            [24] 3406 	sjmp	00163$
      001339                       3407 00554$:
                                   3408 ;	printf_large.c:652: (c != 'P' /* pdata */))
      001339 BC 50 02         [24] 3409 	cjne	r4,#0x50,00555$
      00133C 80 56            [24] 3410 	sjmp	00163$
      00133E                       3411 00555$:
                                   3412 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      00133E EE               [12] 3413 	mov	a,r6
      00133F 04               [12] 3414 	inc	a
      001340 F8               [12] 3415 	mov	r0,a
      001341 86 04            [24] 3416 	mov	ar4,@r0
      001343 C0 01            [24] 3417 	push	ar1
      001345 C0*00            [24] 3418 	push	bits
      001347 E5*00            [12] 3419 	mov	a,_bp
      001349 24 FA            [12] 3420 	add	a,#0xfa
      00134B F8               [12] 3421 	mov	r0,a
      00134C E6               [12] 3422 	mov	a,@r0
      00134D C0 E0            [24] 3423 	push	acc
      00134F 08               [12] 3424 	inc	r0
      001350 E6               [12] 3425 	mov	a,@r0
      001351 C0 E0            [24] 3426 	push	acc
      001353 08               [12] 3427 	inc	r0
      001354 E6               [12] 3428 	mov	a,@r0
      001355 C0 E0            [24] 3429 	push	acc
      001357 A8*00            [24] 3430 	mov	r0,_bp
      001359 08               [12] 3431 	inc	r0
      00135A E6               [12] 3432 	mov	a,@r0
      00135B C0 E0            [24] 3433 	push	acc
      00135D 08               [12] 3434 	inc	r0
      00135E E6               [12] 3435 	mov	a,@r0
      00135F C0 E0            [24] 3436 	push	acc
      001361 08               [12] 3437 	inc	r0
      001362 E6               [12] 3438 	mov	a,@r0
      001363 C0 E0            [24] 3439 	push	acc
      001365 E5*00            [12] 3440 	mov	a,_bp
      001367 24 15            [12] 3441 	add	a,#0x15
      001369 F8               [12] 3442 	mov	r0,a
      00136A E6               [12] 3443 	mov	a,@r0
      00136B 24 FF            [12] 3444 	add	a,#0xff
      00136D 92 F0            [24] 3445 	mov	b[0],c
      00136F 85 F0*00         [24] 3446 	mov	bits,b
      001372 8C 82            [24] 3447 	mov	dpl,r4
      001374 78r50            [12] 3448 	mov	r0,#_output_2digits
      001376 79s00            [12] 3449 	mov	r1,#(_output_2digits >> 8)
      001378 7As00            [12] 3450 	mov	r2,#(_output_2digits >> 16)
      00137A 12r00r00         [24] 3451 	lcall	__sdcc_banked_call
      00137D E5 81            [12] 3452 	mov	a,sp
      00137F 24 FA            [12] 3453 	add	a,#0xfa
      001381 F5 81            [12] 3454 	mov	sp,a
      001383 D0*00            [24] 3455 	pop	bits
      001385 D0 01            [24] 3456 	pop	ar1
      001387 E5*00            [12] 3457 	mov	a,_bp
      001389 24 0B            [12] 3458 	add	a,#0x0b
      00138B F8               [12] 3459 	mov	r0,a
      00138C 74 02            [12] 3460 	mov	a,#0x02
      00138E 26               [12] 3461 	add	a,@r0
      00138F F6               [12] 3462 	mov	@r0,a
      001390 E4               [12] 3463 	clr	a
      001391 08               [12] 3464 	inc	r0
      001392 36               [12] 3465 	addc	a,@r0
      001393 F6               [12] 3466 	mov	@r0,a
      001394                       3467 00163$:
                                   3468 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      001394 87 04            [24] 3469 	mov	ar4,@r1
      001396 C0 01            [24] 3470 	push	ar1
      001398 C0*00            [24] 3471 	push	bits
      00139A E5*00            [12] 3472 	mov	a,_bp
      00139C 24 FA            [12] 3473 	add	a,#0xfa
      00139E F8               [12] 3474 	mov	r0,a
      00139F E6               [12] 3475 	mov	a,@r0
      0013A0 C0 E0            [24] 3476 	push	acc
      0013A2 08               [12] 3477 	inc	r0
      0013A3 E6               [12] 3478 	mov	a,@r0
      0013A4 C0 E0            [24] 3479 	push	acc
      0013A6 08               [12] 3480 	inc	r0
      0013A7 E6               [12] 3481 	mov	a,@r0
      0013A8 C0 E0            [24] 3482 	push	acc
      0013AA A8*00            [24] 3483 	mov	r0,_bp
      0013AC 08               [12] 3484 	inc	r0
      0013AD E6               [12] 3485 	mov	a,@r0
      0013AE C0 E0            [24] 3486 	push	acc
      0013B0 08               [12] 3487 	inc	r0
      0013B1 E6               [12] 3488 	mov	a,@r0
      0013B2 C0 E0            [24] 3489 	push	acc
      0013B4 08               [12] 3490 	inc	r0
      0013B5 E6               [12] 3491 	mov	a,@r0
      0013B6 C0 E0            [24] 3492 	push	acc
      0013B8 E5*00            [12] 3493 	mov	a,_bp
      0013BA 24 15            [12] 3494 	add	a,#0x15
      0013BC F8               [12] 3495 	mov	r0,a
      0013BD E6               [12] 3496 	mov	a,@r0
      0013BE 24 FF            [12] 3497 	add	a,#0xff
      0013C0 92 F0            [24] 3498 	mov	b[0],c
      0013C2 85 F0*00         [24] 3499 	mov	bits,b
      0013C5 8C 82            [24] 3500 	mov	dpl,r4
      0013C7 78r50            [12] 3501 	mov	r0,#_output_2digits
      0013C9 79s00            [12] 3502 	mov	r1,#(_output_2digits >> 8)
      0013CB 7As00            [12] 3503 	mov	r2,#(_output_2digits >> 16)
      0013CD 12r00r00         [24] 3504 	lcall	__sdcc_banked_call
      0013D0 E5 81            [12] 3505 	mov	a,sp
      0013D2 24 FA            [12] 3506 	add	a,#0xfa
      0013D4 F5 81            [12] 3507 	mov	sp,a
      0013D6 D0*00            [24] 3508 	pop	bits
      0013D8 D0 01            [24] 3509 	pop	ar1
      0013DA E5*00            [12] 3510 	mov	a,_bp
      0013DC 24 0B            [12] 3511 	add	a,#0x0b
      0013DE F8               [12] 3512 	mov	r0,a
      0013DF 74 02            [12] 3513 	mov	a,#0x02
      0013E1 26               [12] 3514 	add	a,@r0
      0013E2 F6               [12] 3515 	mov	@r0,a
      0013E3 E4               [12] 3516 	clr	a
      0013E4 08               [12] 3517 	inc	r0
      0013E5 36               [12] 3518 	addc	a,@r0
      0013E6 F6               [12] 3519 	mov	@r0,a
                                   3520 ;	printf_large.c:663: break;
      0013E7 02r14r69         [24] 3521 	ljmp	00172$
                                   3522 ;	printf_large.c:666: case 'I':
      0013EA                       3523 00166$:
                                   3524 ;	printf_large.c:667: signed_argument = 1;
      0013EA D2*00            [12] 3525 	setb	b4
                                   3526 ;	printf_large.c:668: radix = 10;
      0013EC E5*00            [12] 3527 	mov	a,_bp
      0013EE 24 0D            [12] 3528 	add	a,#0x0d
      0013F0 F8               [12] 3529 	mov	r0,a
      0013F1 76 0A            [12] 3530 	mov	@r0,#0x0A
                                   3531 ;	printf_large.c:669: break;
                                   3532 ;	printf_large.c:671: case 'O':
      0013F3 80 74            [24] 3533 	sjmp	00172$
      0013F5                       3534 00167$:
                                   3535 ;	printf_large.c:672: radix = 8;
      0013F5 E5*00            [12] 3536 	mov	a,_bp
      0013F7 24 0D            [12] 3537 	add	a,#0x0d
      0013F9 F8               [12] 3538 	mov	r0,a
      0013FA 76 08            [12] 3539 	mov	@r0,#0x08
                                   3540 ;	printf_large.c:673: break;
                                   3541 ;	printf_large.c:675: case 'U':
      0013FC 80 6B            [24] 3542 	sjmp	00172$
      0013FE                       3543 00168$:
                                   3544 ;	printf_large.c:676: radix = 10;
      0013FE E5*00            [12] 3545 	mov	a,_bp
      001400 24 0D            [12] 3546 	add	a,#0x0d
      001402 F8               [12] 3547 	mov	r0,a
      001403 76 0A            [12] 3548 	mov	@r0,#0x0A
                                   3549 ;	printf_large.c:677: break;
                                   3550 ;	printf_large.c:679: case 'X':
      001405 80 62            [24] 3551 	sjmp	00172$
      001407                       3552 00169$:
                                   3553 ;	printf_large.c:680: radix = 16;
      001407 E5*00            [12] 3554 	mov	a,_bp
      001409 24 0D            [12] 3555 	add	a,#0x0d
      00140B F8               [12] 3556 	mov	r0,a
      00140C 76 10            [12] 3557 	mov	@r0,#0x10
                                   3558 ;	printf_large.c:681: break;
                                   3559 ;	printf_large.c:683: case 'F':
      00140E 80 59            [24] 3560 	sjmp	00172$
      001410                       3561 00170$:
                                   3562 ;	printf_large.c:684: float_argument=1;
      001410 D2*00            [12] 3563 	setb	b7
                                   3564 ;	printf_large.c:685: break;
                                   3565 ;	printf_large.c:687: default:
      001412 80 55            [24] 3566 	sjmp	00172$
      001414                       3567 00171$:
                                   3568 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      001414 C0 01            [24] 3569 	push	ar1
      001416 C0*00            [24] 3570 	push	bits
      001418 E5*00            [12] 3571 	mov	a,_bp
      00141A 24 FA            [12] 3572 	add	a,#0xfa
      00141C F8               [12] 3573 	mov	r0,a
      00141D E6               [12] 3574 	mov	a,@r0
      00141E C0 E0            [24] 3575 	push	acc
      001420 08               [12] 3576 	inc	r0
      001421 E6               [12] 3577 	mov	a,@r0
      001422 C0 E0            [24] 3578 	push	acc
      001424 08               [12] 3579 	inc	r0
      001425 E6               [12] 3580 	mov	a,@r0
      001426 C0 E0            [24] 3581 	push	acc
      001428 A8*00            [24] 3582 	mov	r0,_bp
      00142A 08               [12] 3583 	inc	r0
      00142B E6               [12] 3584 	mov	a,@r0
      00142C C0 E0            [24] 3585 	push	acc
      00142E 08               [12] 3586 	inc	r0
      00142F E6               [12] 3587 	mov	a,@r0
      001430 C0 E0            [24] 3588 	push	acc
      001432 08               [12] 3589 	inc	r0
      001433 E6               [12] 3590 	mov	a,@r0
      001434 C0 E0            [24] 3591 	push	acc
      001436 8C 82            [24] 3592 	mov	dpl,r4
      001438 D0 02            [24] 3593 	pop	ar2
      00143A D0 01            [24] 3594 	pop	ar1
      00143C D0 00            [24] 3595 	pop	ar0
      00143E 12r00r00         [24] 3596 	lcall	__sdcc_banked_call
      001441 15 81            [12] 3597 	dec	sp
      001443 15 81            [12] 3598 	dec	sp
      001445 15 81            [12] 3599 	dec	sp
      001447 D0*00            [24] 3600 	pop	bits
      001449 D0 01            [24] 3601 	pop	ar1
      00144B E5*00            [12] 3602 	mov	a,_bp
      00144D 24 0B            [12] 3603 	add	a,#0x0b
      00144F F8               [12] 3604 	mov	r0,a
      001450 06               [12] 3605 	inc	@r0
      001451 B6 00 02         [24] 3606 	cjne	@r0,#0x00,00556$
      001454 08               [12] 3607 	inc	r0
      001455 06               [12] 3608 	inc	@r0
      001456                       3609 00556$:
                                   3610 ;	printf_large.c:872: return charsOutputted;
                                   3611 ;	printf_large.c:691: }
      001456 80 11            [24] 3612 	sjmp	00172$
      001458                       3613 00326$:
      001458 E5*00            [12] 3614 	mov	a,_bp
      00145A 24 0B            [12] 3615 	add	a,#0x0b
      00145C F8               [12] 3616 	mov	r0,a
      00145D A6 06            [24] 3617 	mov	@r0,ar6
      00145F 08               [12] 3618 	inc	r0
      001460 A6 07            [24] 3619 	mov	@r0,ar7
      001462 E5*00            [12] 3620 	mov	a,_bp
      001464 24 0E            [12] 3621 	add	a,#0x0e
      001466 F8               [12] 3622 	mov	r0,a
      001467 A6 05            [24] 3623 	mov	@r0,ar5
      001469                       3624 00172$:
                                   3625 ;	printf_large.c:693: if (float_argument)
      001469 20*00 03         [24] 3626 	jb	b7,00557$
      00146C 02r15r1B         [24] 3627 	ljmp	00235$
      00146F                       3628 00557$:
                                   3629 ;	printf_large.c:695: value.f = va_arg(ap, float);
      00146F E5*00            [12] 3630 	mov	a,_bp
      001471 24 10            [12] 3631 	add	a,#0x10
      001473 F8               [12] 3632 	mov	r0,a
      001474 C0 00            [24] 3633 	push	ar0
      001476 E5*00            [12] 3634 	mov	a,_bp
      001478 24 F6            [12] 3635 	add	a,#0xf6
      00147A F8               [12] 3636 	mov	r0,a
      00147B E6               [12] 3637 	mov	a,@r0
      00147C 24 FC            [12] 3638 	add	a,#0xFC
      00147E FF               [12] 3639 	mov	r7,a
      00147F E5*00            [12] 3640 	mov	a,_bp
      001481 24 F6            [12] 3641 	add	a,#0xf6
      001483 F8               [12] 3642 	mov	r0,a
      001484 A6 07            [24] 3643 	mov	@r0,ar7
      001486 A8 07            [24] 3644 	mov	r0,ar7
      001488 86 04            [24] 3645 	mov	ar4,@r0
      00148A 08               [12] 3646 	inc	r0
      00148B 86 05            [24] 3647 	mov	ar5,@r0
      00148D 08               [12] 3648 	inc	r0
      00148E 86 06            [24] 3649 	mov	ar6,@r0
      001490 08               [12] 3650 	inc	r0
      001491 86 07            [24] 3651 	mov	ar7,@r0
      001493 D0 00            [24] 3652 	pop	ar0
      001495 A6 04            [24] 3653 	mov	@r0,ar4
      001497 08               [12] 3654 	inc	r0
      001498 A6 05            [24] 3655 	mov	@r0,ar5
      00149A 08               [12] 3656 	inc	r0
      00149B A6 06            [24] 3657 	mov	@r0,ar6
      00149D 08               [12] 3658 	inc	r0
      00149E A6 07            [24] 3659 	mov	@r0,ar7
      0014A0 18               [12] 3660 	dec	r0
      0014A1 18               [12] 3661 	dec	r0
      0014A2 18               [12] 3662 	dec	r0
                                   3663 ;	printf_large.c:710: charsOutputted += OUTPUT_FLOAT(value.f, width, decimals, left_justify,
      0014A3 E6               [12] 3664 	mov	a,@r0
      0014A4 08               [12] 3665 	inc	r0
      0014A5 E6               [12] 3666 	mov	a,@r0
      0014A6 08               [12] 3667 	inc	r0
      0014A7 E6               [12] 3668 	mov	a,@r0
      0014A8 08               [12] 3669 	inc	r0
      0014A9 E6               [12] 3670 	mov	a,@r0
      0014AA 18               [12] 3671 	dec	r0
      0014AB 18               [12] 3672 	dec	r0
      0014AC 18               [12] 3673 	dec	r0
      0014AD C0 01            [24] 3674 	push	ar1
      0014AF E5*00            [12] 3675 	mov	a,_bp
      0014B1 24 FA            [12] 3676 	add	a,#0xfa
      0014B3 F8               [12] 3677 	mov	r0,a
      0014B4 E6               [12] 3678 	mov	a,@r0
      0014B5 C0 E0            [24] 3679 	push	acc
      0014B7 08               [12] 3680 	inc	r0
      0014B8 E6               [12] 3681 	mov	a,@r0
      0014B9 C0 E0            [24] 3682 	push	acc
      0014BB 08               [12] 3683 	inc	r0
      0014BC E6               [12] 3684 	mov	a,@r0
      0014BD C0 E0            [24] 3685 	push	acc
      0014BF A8*00            [24] 3686 	mov	r0,_bp
      0014C1 08               [12] 3687 	inc	r0
      0014C2 E6               [12] 3688 	mov	a,@r0
      0014C3 C0 E0            [24] 3689 	push	acc
      0014C5 08               [12] 3690 	inc	r0
      0014C6 E6               [12] 3691 	mov	a,@r0
      0014C7 C0 E0            [24] 3692 	push	acc
      0014C9 08               [12] 3693 	inc	r0
      0014CA E6               [12] 3694 	mov	a,@r0
      0014CB C0 E0            [24] 3695 	push	acc
      0014CD E5*00            [12] 3696 	mov	a,_bp
      0014CF 24 0F            [12] 3697 	add	a,#0x0f
      0014D1 F8               [12] 3698 	mov	r0,a
      0014D2 E6               [12] 3699 	mov	a,@r0
      0014D3 C0 E0            [24] 3700 	push	acc
      0014D5 E5*00            [12] 3701 	mov	a,_bp
      0014D7 24 0E            [12] 3702 	add	a,#0x0e
      0014D9 F8               [12] 3703 	mov	r0,a
      0014DA E6               [12] 3704 	mov	a,@r0
      0014DB C0 E0            [24] 3705 	push	acc
      0014DD A2*00            [12] 3706 	mov	c,b0
      0014DF 92 F0            [24] 3707 	mov	b[0],c
      0014E1 A2*00            [12] 3708 	mov	c,b1
      0014E3 92 F1            [24] 3709 	mov	b[1],c
      0014E5 A2*00            [12] 3710 	mov	c,b2
      0014E7 92 F2            [24] 3711 	mov	b[2],c
      0014E9 A2*00            [12] 3712 	mov	c,b3
      0014EB 92 F3            [24] 3713 	mov	b[3],c
      0014ED 85 F0*00         [24] 3714 	mov	bits,b
      0014F0 8C 82            [24] 3715 	mov	dpl,r4
      0014F2 8D 83            [24] 3716 	mov	dph,r5
      0014F4 8E F0            [24] 3717 	mov	b,r6
      0014F6 EF               [12] 3718 	mov	a,r7
      0014F7 78r5E            [12] 3719 	mov	r0,#_output_float
      0014F9 79s01            [12] 3720 	mov	r1,#(_output_float >> 8)
      0014FB 7As00            [12] 3721 	mov	r2,#(_output_float >> 16)
      0014FD 12r00r00         [24] 3722 	lcall	__sdcc_banked_call
      001500 AF 82            [24] 3723 	mov	r7,dpl
      001502 E5 81            [12] 3724 	mov	a,sp
      001504 24 F8            [12] 3725 	add	a,#0xf8
      001506 F5 81            [12] 3726 	mov	sp,a
      001508 D0 01            [24] 3727 	pop	ar1
      00150A 7E 00            [12] 3728 	mov	r6,#0x00
      00150C E5*00            [12] 3729 	mov	a,_bp
      00150E 24 0B            [12] 3730 	add	a,#0x0b
      001510 F8               [12] 3731 	mov	r0,a
      001511 EF               [12] 3732 	mov	a,r7
      001512 26               [12] 3733 	add	a,@r0
      001513 F6               [12] 3734 	mov	@r0,a
      001514 EE               [12] 3735 	mov	a,r6
      001515 08               [12] 3736 	inc	r0
      001516 36               [12] 3737 	addc	a,@r0
      001517 F6               [12] 3738 	mov	@r0,a
      001518 02r0Dr18         [24] 3739 	ljmp	00240$
      00151B                       3740 00235$:
                                   3741 ;	printf_large.c:718: else if (radix != 0)
      00151B E5*00            [12] 3742 	mov	a,_bp
      00151D 24 0D            [12] 3743 	add	a,#0x0d
      00151F F8               [12] 3744 	mov	r0,a
      001520 E6               [12] 3745 	mov	a,@r0
      001521 70 03            [24] 3746 	jnz	00558$
      001523 02r0Dr18         [24] 3747 	ljmp	00240$
      001526                       3748 00558$:
                                   3749 ;	printf_large.c:723: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
      001526 E5*00            [12] 3750 	mov	a,_bp
      001528 24 08            [12] 3751 	add	a,#0x08
      00152A F8               [12] 3752 	mov	r0,a
      00152B 86 02            [24] 3753 	mov	ar2,@r0
                                   3754 ;	printf_large.c:726: if (char_argument)
      00152D 30*00 5C         [24] 3755 	jnb	b5,00181$
                                   3756 ;	printf_large.c:728: value.l = va_arg(ap, char);
      001530 E5*00            [12] 3757 	mov	a,_bp
      001532 24 10            [12] 3758 	add	a,#0x10
      001534 F8               [12] 3759 	mov	r0,a
      001535 C0 00            [24] 3760 	push	ar0
      001537 E5*00            [12] 3761 	mov	a,_bp
      001539 24 F6            [12] 3762 	add	a,#0xf6
      00153B F8               [12] 3763 	mov	r0,a
      00153C E6               [12] 3764 	mov	a,@r0
      00153D 14               [12] 3765 	dec	a
      00153E FF               [12] 3766 	mov	r7,a
      00153F E5*00            [12] 3767 	mov	a,_bp
      001541 24 F6            [12] 3768 	add	a,#0xf6
      001543 F8               [12] 3769 	mov	r0,a
      001544 A6 07            [24] 3770 	mov	@r0,ar7
      001546 A8 07            [24] 3771 	mov	r0,ar7
      001548 86 07            [24] 3772 	mov	ar7,@r0
      00154A D0 00            [24] 3773 	pop	ar0
      00154C EF               [12] 3774 	mov	a,r7
      00154D 33               [12] 3775 	rlc	a
      00154E 95 E0            [12] 3776 	subb	a,acc
      001550 FE               [12] 3777 	mov	r6,a
      001551 FD               [12] 3778 	mov	r5,a
      001552 FC               [12] 3779 	mov	r4,a
      001553 A6 07            [24] 3780 	mov	@r0,ar7
      001555 08               [12] 3781 	inc	r0
      001556 A6 06            [24] 3782 	mov	@r0,ar6
      001558 08               [12] 3783 	inc	r0
      001559 A6 05            [24] 3784 	mov	@r0,ar5
      00155B 08               [12] 3785 	inc	r0
      00155C A6 04            [24] 3786 	mov	@r0,ar4
      00155E 18               [12] 3787 	dec	r0
      00155F 18               [12] 3788 	dec	r0
      001560 18               [12] 3789 	dec	r0
                                   3790 ;	printf_large.c:729: if (!signed_argument)
      001561 30*00 03         [24] 3791 	jnb	b4,00560$
      001564 02r16r1C         [24] 3792 	ljmp	00182$
      001567                       3793 00560$:
                                   3794 ;	printf_large.c:731: value.l &= 0xFF;
      001567 86 04            [24] 3795 	mov	ar4,@r0
      001569 08               [12] 3796 	inc	r0
      00156A 86 05            [24] 3797 	mov	ar5,@r0
      00156C 08               [12] 3798 	inc	r0
      00156D 86 06            [24] 3799 	mov	ar6,@r0
      00156F 08               [12] 3800 	inc	r0
      001570 86 07            [24] 3801 	mov	ar7,@r0
      001572 18               [12] 3802 	dec	r0
      001573 18               [12] 3803 	dec	r0
      001574 18               [12] 3804 	dec	r0
      001575 7D 00            [12] 3805 	mov	r5,#0x00
      001577 7E 00            [12] 3806 	mov	r6,#0x00
      001579 7F 00            [12] 3807 	mov	r7,#0x00
      00157B A6 04            [24] 3808 	mov	@r0,ar4
      00157D 08               [12] 3809 	inc	r0
      00157E A6 05            [24] 3810 	mov	@r0,ar5
      001580 08               [12] 3811 	inc	r0
      001581 A6 06            [24] 3812 	mov	@r0,ar6
      001583 08               [12] 3813 	inc	r0
      001584 A6 07            [24] 3814 	mov	@r0,ar7
      001586 18               [12] 3815 	dec	r0
      001587 18               [12] 3816 	dec	r0
      001588 18               [12] 3817 	dec	r0
      001589 02r16r1C         [24] 3818 	ljmp	00182$
      00158C                       3819 00181$:
                                   3820 ;	printf_large.c:734: else if (long_argument)
      00158C 30*00 36         [24] 3821 	jnb	b6,00178$
                                   3822 ;	printf_large.c:736: value.l = va_arg(ap, long);
      00158F E5*00            [12] 3823 	mov	a,_bp
      001591 24 10            [12] 3824 	add	a,#0x10
      001593 F8               [12] 3825 	mov	r0,a
      001594 C0 00            [24] 3826 	push	ar0
      001596 E5*00            [12] 3827 	mov	a,_bp
      001598 24 F6            [12] 3828 	add	a,#0xf6
      00159A F8               [12] 3829 	mov	r0,a
      00159B E6               [12] 3830 	mov	a,@r0
      00159C 24 FC            [12] 3831 	add	a,#0xFC
      00159E FF               [12] 3832 	mov	r7,a
      00159F E5*00            [12] 3833 	mov	a,_bp
      0015A1 24 F6            [12] 3834 	add	a,#0xf6
      0015A3 F8               [12] 3835 	mov	r0,a
      0015A4 A6 07            [24] 3836 	mov	@r0,ar7
      0015A6 A8 07            [24] 3837 	mov	r0,ar7
      0015A8 86 04            [24] 3838 	mov	ar4,@r0
      0015AA 08               [12] 3839 	inc	r0
      0015AB 86 05            [24] 3840 	mov	ar5,@r0
      0015AD 08               [12] 3841 	inc	r0
      0015AE 86 06            [24] 3842 	mov	ar6,@r0
      0015B0 08               [12] 3843 	inc	r0
      0015B1 86 07            [24] 3844 	mov	ar7,@r0
      0015B3 D0 00            [24] 3845 	pop	ar0
      0015B5 A6 04            [24] 3846 	mov	@r0,ar4
      0015B7 08               [12] 3847 	inc	r0
      0015B8 A6 05            [24] 3848 	mov	@r0,ar5
      0015BA 08               [12] 3849 	inc	r0
      0015BB A6 06            [24] 3850 	mov	@r0,ar6
      0015BD 08               [12] 3851 	inc	r0
      0015BE A6 07            [24] 3852 	mov	@r0,ar7
      0015C0 18               [12] 3853 	dec	r0
      0015C1 18               [12] 3854 	dec	r0
      0015C2 18               [12] 3855 	dec	r0
      0015C3 80 57            [24] 3856 	sjmp	00182$
      0015C5                       3857 00178$:
                                   3858 ;	printf_large.c:740: value.l = va_arg(ap, int);
      0015C5 E5*00            [12] 3859 	mov	a,_bp
      0015C7 24 10            [12] 3860 	add	a,#0x10
      0015C9 F8               [12] 3861 	mov	r0,a
      0015CA C0 00            [24] 3862 	push	ar0
      0015CC E5*00            [12] 3863 	mov	a,_bp
      0015CE 24 F6            [12] 3864 	add	a,#0xf6
      0015D0 F8               [12] 3865 	mov	r0,a
      0015D1 E6               [12] 3866 	mov	a,@r0
      0015D2 24 FE            [12] 3867 	add	a,#0xFE
      0015D4 FF               [12] 3868 	mov	r7,a
      0015D5 E5*00            [12] 3869 	mov	a,_bp
      0015D7 24 F6            [12] 3870 	add	a,#0xf6
      0015D9 F8               [12] 3871 	mov	r0,a
      0015DA A6 07            [24] 3872 	mov	@r0,ar7
      0015DC A8 07            [24] 3873 	mov	r0,ar7
      0015DE 86 06            [24] 3874 	mov	ar6,@r0
      0015E0 08               [12] 3875 	inc	r0
      0015E1 86 07            [24] 3876 	mov	ar7,@r0
      0015E3 D0 00            [24] 3877 	pop	ar0
      0015E5 EF               [12] 3878 	mov	a,r7
      0015E6 33               [12] 3879 	rlc	a
      0015E7 95 E0            [12] 3880 	subb	a,acc
      0015E9 FD               [12] 3881 	mov	r5,a
      0015EA FC               [12] 3882 	mov	r4,a
      0015EB A6 06            [24] 3883 	mov	@r0,ar6
      0015ED 08               [12] 3884 	inc	r0
      0015EE A6 07            [24] 3885 	mov	@r0,ar7
      0015F0 08               [12] 3886 	inc	r0
      0015F1 A6 05            [24] 3887 	mov	@r0,ar5
      0015F3 08               [12] 3888 	inc	r0
      0015F4 A6 04            [24] 3889 	mov	@r0,ar4
      0015F6 18               [12] 3890 	dec	r0
      0015F7 18               [12] 3891 	dec	r0
      0015F8 18               [12] 3892 	dec	r0
                                   3893 ;	printf_large.c:741: if (!signed_argument)
      0015F9 20*00 20         [24] 3894 	jb	b4,00182$
                                   3895 ;	printf_large.c:743: value.l &= 0xFFFF;
      0015FC 86 04            [24] 3896 	mov	ar4,@r0
      0015FE 08               [12] 3897 	inc	r0
      0015FF 86 05            [24] 3898 	mov	ar5,@r0
      001601 08               [12] 3899 	inc	r0
      001602 86 06            [24] 3900 	mov	ar6,@r0
      001604 08               [12] 3901 	inc	r0
      001605 86 07            [24] 3902 	mov	ar7,@r0
      001607 18               [12] 3903 	dec	r0
      001608 18               [12] 3904 	dec	r0
      001609 18               [12] 3905 	dec	r0
      00160A 7E 00            [12] 3906 	mov	r6,#0x00
      00160C 7F 00            [12] 3907 	mov	r7,#0x00
      00160E A6 04            [24] 3908 	mov	@r0,ar4
      001610 08               [12] 3909 	inc	r0
      001611 A6 05            [24] 3910 	mov	@r0,ar5
      001613 08               [12] 3911 	inc	r0
      001614 A6 06            [24] 3912 	mov	@r0,ar6
      001616 08               [12] 3913 	inc	r0
      001617 A6 07            [24] 3914 	mov	@r0,ar7
      001619 18               [12] 3915 	dec	r0
      00161A 18               [12] 3916 	dec	r0
      00161B 18               [12] 3917 	dec	r0
      00161C                       3918 00182$:
                                   3919 ;	printf_large.c:747: if ( signed_argument )
      00161C 30*00 44         [24] 3920 	jnb	b4,00187$
                                   3921 ;	printf_large.c:749: if (value.l < 0)
      00161F E5*00            [12] 3922 	mov	a,_bp
      001621 24 10            [12] 3923 	add	a,#0x10
      001623 F8               [12] 3924 	mov	r0,a
      001624 86 04            [24] 3925 	mov	ar4,@r0
      001626 08               [12] 3926 	inc	r0
      001627 86 05            [24] 3927 	mov	ar5,@r0
      001629 08               [12] 3928 	inc	r0
      00162A 86 06            [24] 3929 	mov	ar6,@r0
      00162C 08               [12] 3930 	inc	r0
      00162D 86 07            [24] 3931 	mov	ar7,@r0
      00162F 18               [12] 3932 	dec	r0
      001630 18               [12] 3933 	dec	r0
      001631 18               [12] 3934 	dec	r0
      001632 EF               [12] 3935 	mov	a,r7
      001633 30 E7 2B         [24] 3936 	jnb	acc.7,00184$
                                   3937 ;	printf_large.c:750: value.l = -value.l;
      001636 86 04            [24] 3938 	mov	ar4,@r0
      001638 08               [12] 3939 	inc	r0
      001639 86 05            [24] 3940 	mov	ar5,@r0
      00163B 08               [12] 3941 	inc	r0
      00163C 86 06            [24] 3942 	mov	ar6,@r0
      00163E 08               [12] 3943 	inc	r0
      00163F 86 07            [24] 3944 	mov	ar7,@r0
      001641 18               [12] 3945 	dec	r0
      001642 18               [12] 3946 	dec	r0
      001643 18               [12] 3947 	dec	r0
      001644 C3               [12] 3948 	clr	c
      001645 E4               [12] 3949 	clr	a
      001646 9C               [12] 3950 	subb	a,r4
      001647 FC               [12] 3951 	mov	r4,a
      001648 E4               [12] 3952 	clr	a
      001649 9D               [12] 3953 	subb	a,r5
      00164A FD               [12] 3954 	mov	r5,a
      00164B E4               [12] 3955 	clr	a
      00164C 9E               [12] 3956 	subb	a,r6
      00164D FE               [12] 3957 	mov	r6,a
      00164E E4               [12] 3958 	clr	a
      00164F 9F               [12] 3959 	subb	a,r7
      001650 FF               [12] 3960 	mov	r7,a
      001651 A6 04            [24] 3961 	mov	@r0,ar4
      001653 08               [12] 3962 	inc	r0
      001654 A6 05            [24] 3963 	mov	@r0,ar5
      001656 08               [12] 3964 	inc	r0
      001657 A6 06            [24] 3965 	mov	@r0,ar6
      001659 08               [12] 3966 	inc	r0
      00165A A6 07            [24] 3967 	mov	@r0,ar7
      00165C 18               [12] 3968 	dec	r0
      00165D 18               [12] 3969 	dec	r0
      00165E 18               [12] 3970 	dec	r0
      00165F 80 02            [24] 3971 	sjmp	00187$
      001661                       3972 00184$:
                                   3973 ;	printf_large.c:752: signed_argument = 0;
      001661 C2*00            [12] 3974 	clr	b4
      001663                       3975 00187$:
                                   3976 ;	printf_large.c:756: lsd = 1;
      001663 D2*00            [12] 3977 	setb	b5
                                   3978 ;	printf_large.c:758: do {
      001665 8A 00            [24] 3979 	mov	ar0,r2
      001667 7F 00            [12] 3980 	mov	r7,#0x00
      001669                       3981 00191$:
                                   3982 ;	printf_large.c:759: value.byte[4] = 0;
      001669 E5*00            [12] 3983 	mov	a,_bp
      00166B 24 10            [12] 3984 	add	a,#0x10
      00166D 24 04            [12] 3985 	add	a,#0x04
      00166F C0 00            [24] 3986 	push	ar0
      001671 F8               [12] 3987 	mov	r0,a
      001672 76 00            [12] 3988 	mov	@r0,#0x00
                                   3989 ;	printf_large.c:761: calculate_digit(&value, radix);
      001674 E5*00            [12] 3990 	mov	a,_bp
      001676 24 09            [12] 3991 	add	a,#0x09
      001678 F8               [12] 3992 	mov	r0,a
      001679 86 06            [24] 3993 	mov	ar6,@r0
      00167B D0 00            [24] 3994 	pop	ar0
      00167D C0 07            [24] 3995 	push	ar7
      00167F C0 01            [24] 3996 	push	ar1
      001681 C0 00            [24] 3997 	push	ar0
      001683 C0*00            [24] 3998 	push	bits
      001685 85 00 F0         [24] 3999 	mov	b,ar0
      001688 E5*00            [12] 4000 	mov	a,_bp
      00168A 24 0D            [12] 4001 	add	a,#0x0d
      00168C F8               [12] 4002 	mov	r0,a
      00168D E6               [12] 4003 	mov	a,@r0
      00168E C0 E0            [24] 4004 	push	acc
      001690 8E 82            [24] 4005 	mov	dpl,r6
      001692 78rDC            [12] 4006 	mov	r0,#_calculate_digit
      001694 79s00            [12] 4007 	mov	r1,#(_calculate_digit >> 8)
      001696 7As00            [12] 4008 	mov	r2,#(_calculate_digit >> 16)
      001698 12r00r00         [24] 4009 	lcall	__sdcc_banked_call
      00169B 15 81            [12] 4010 	dec	sp
      00169D D0*00            [24] 4011 	pop	bits
      00169F D0 00            [24] 4012 	pop	ar0
      0016A1 D0 01            [24] 4013 	pop	ar1
      0016A3 D0 07            [24] 4014 	pop	ar7
                                   4015 ;	printf_large.c:765: if (!lsd)
      0016A5 20*00 19         [24] 4016 	jb	b5,00189$
                                   4017 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      0016A8 C0 00            [24] 4018 	push	ar0
      0016AA E5*00            [12] 4019 	mov	a,_bp
      0016AC 24 04            [12] 4020 	add	a,#0x04
      0016AE F8               [12] 4021 	mov	r0,a
      0016AF 86 00            [24] 4022 	mov	ar0,@r0
      0016B1 86 06            [24] 4023 	mov	ar6,@r0
      0016B3 D0 00            [24] 4024 	pop	ar0
      0016B5 EE               [12] 4025 	mov	a,r6
      0016B6 C4               [12] 4026 	swap	a
      0016B7 FE               [12] 4027 	mov	r6,a
      0016B8 E6               [12] 4028 	mov	a,@r0
      0016B9 FD               [12] 4029 	mov	r5,a
      0016BA 42 06            [12] 4030 	orl	ar6,a
      0016BC A6 06            [24] 4031 	mov	@r0,ar6
                                   4032 ;	printf_large.c:768: pstore--;
      0016BE 18               [12] 4033 	dec	r0
      0016BF 80 0F            [24] 4034 	sjmp	00190$
      0016C1                       4035 00189$:
                                   4036 ;	printf_large.c:772: *pstore = value.byte[4];
      0016C1 C0 00            [24] 4037 	push	ar0
      0016C3 E5*00            [12] 4038 	mov	a,_bp
      0016C5 24 04            [12] 4039 	add	a,#0x04
      0016C7 F8               [12] 4040 	mov	r0,a
      0016C8 86 00            [24] 4041 	mov	ar0,@r0
      0016CA 86 06            [24] 4042 	mov	ar6,@r0
      0016CC D0 00            [24] 4043 	pop	ar0
      0016CE A6 06            [24] 4044 	mov	@r0,ar6
      0016D0                       4045 00190$:
                                   4046 ;	printf_large.c:774: length++;
      0016D0 0F               [12] 4047 	inc	r7
                                   4048 ;	printf_large.c:775: lsd = !lsd;
      0016D1 B2*00            [12] 4049 	cpl	b5
                                   4050 ;	printf_large.c:776: } while( value.ul );
      0016D3 C0 00            [24] 4051 	push	ar0
      0016D5 E5*00            [12] 4052 	mov	a,_bp
      0016D7 24 09            [12] 4053 	add	a,#0x09
      0016D9 F8               [12] 4054 	mov	r0,a
      0016DA 86 00            [24] 4055 	mov	ar0,@r0
      0016DC 86 03            [24] 4056 	mov	ar3,@r0
      0016DE 08               [12] 4057 	inc	r0
      0016DF 86 04            [24] 4058 	mov	ar4,@r0
      0016E1 08               [12] 4059 	inc	r0
      0016E2 86 05            [24] 4060 	mov	ar5,@r0
      0016E4 08               [12] 4061 	inc	r0
      0016E5 86 06            [24] 4062 	mov	ar6,@r0
      0016E7 18               [12] 4063 	dec	r0
      0016E8 18               [12] 4064 	dec	r0
      0016E9 18               [12] 4065 	dec	r0
      0016EA D0 00            [24] 4066 	pop	ar0
      0016EC EB               [12] 4067 	mov	a,r3
      0016ED 4C               [12] 4068 	orl	a,r4
      0016EE 4D               [12] 4069 	orl	a,r5
      0016EF 4E               [12] 4070 	orl	a,r6
      0016F0 60 03            [24] 4071 	jz	00566$
      0016F2 02r16r69         [24] 4072 	ljmp	00191$
      0016F5                       4073 00566$:
                                   4074 ;	printf_large.c:778: if (width == 0)
      0016F5 88 02            [24] 4075 	mov	ar2,r0
      0016F7 8F 03            [24] 4076 	mov	ar3,r7
      0016F9 E5*00            [12] 4077 	mov	a,_bp
      0016FB 24 0E            [12] 4078 	add	a,#0x0e
      0016FD F8               [12] 4079 	mov	r0,a
      0016FE E6               [12] 4080 	mov	a,@r0
      0016FF 70 07            [24] 4081 	jnz	00195$
                                   4082 ;	printf_large.c:783: width = 1;
      001701 E5*00            [12] 4083 	mov	a,_bp
      001703 24 0E            [12] 4084 	add	a,#0x0e
      001705 F8               [12] 4085 	mov	r0,a
      001706 76 01            [12] 4086 	mov	@r0,#0x01
      001708                       4087 00195$:
                                   4088 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      001708 30*00 03         [24] 4089 	jnb	b1,00568$
      00170B 02r17r96         [24] 4090 	ljmp	00200$
      00170E                       4091 00568$:
      00170E 30*00 03         [24] 4092 	jnb	b0,00569$
      001711 02r17r96         [24] 4093 	ljmp	00200$
      001714                       4094 00569$:
                                   4095 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      001714 EB               [12] 4096 	mov	a,r3
      001715 04               [12] 4097 	inc	a
      001716 FF               [12] 4098 	mov	r7,a
      001717 E5*00            [12] 4099 	mov	a,_bp
      001719 24 0B            [12] 4100 	add	a,#0x0b
      00171B F8               [12] 4101 	mov	r0,a
      00171C 86 05            [24] 4102 	mov	ar5,@r0
      00171E 08               [12] 4103 	inc	r0
      00171F 86 06            [24] 4104 	mov	ar6,@r0
      001721 E5*00            [12] 4105 	mov	a,_bp
      001723 24 0E            [12] 4106 	add	a,#0x0e
      001725 F8               [12] 4107 	mov	r0,a
      001726 86 04            [24] 4108 	mov	ar4,@r0
      001728                       4109 00196$:
      001728 C3               [12] 4110 	clr	c
      001729 EF               [12] 4111 	mov	a,r7
      00172A 9C               [12] 4112 	subb	a,r4
      00172B 50 58            [24] 4113 	jnc	00328$
                                   4114 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      00172D C0 07            [24] 4115 	push	ar7
      00172F C0 06            [24] 4116 	push	ar6
      001731 C0 05            [24] 4117 	push	ar5
      001733 C0 04            [24] 4118 	push	ar4
      001735 C0 03            [24] 4119 	push	ar3
      001737 C0 02            [24] 4120 	push	ar2
      001739 C0 01            [24] 4121 	push	ar1
      00173B C0*00            [24] 4122 	push	bits
      00173D E5*00            [12] 4123 	mov	a,_bp
      00173F 24 FA            [12] 4124 	add	a,#0xfa
      001741 F8               [12] 4125 	mov	r0,a
      001742 E6               [12] 4126 	mov	a,@r0
      001743 C0 E0            [24] 4127 	push	acc
      001745 08               [12] 4128 	inc	r0
      001746 E6               [12] 4129 	mov	a,@r0
      001747 C0 E0            [24] 4130 	push	acc
      001749 08               [12] 4131 	inc	r0
      00174A E6               [12] 4132 	mov	a,@r0
      00174B C0 E0            [24] 4133 	push	acc
      00174D A8*00            [24] 4134 	mov	r0,_bp
      00174F 08               [12] 4135 	inc	r0
      001750 E6               [12] 4136 	mov	a,@r0
      001751 C0 E0            [24] 4137 	push	acc
      001753 08               [12] 4138 	inc	r0
      001754 E6               [12] 4139 	mov	a,@r0
      001755 C0 E0            [24] 4140 	push	acc
      001757 08               [12] 4141 	inc	r0
      001758 E6               [12] 4142 	mov	a,@r0
      001759 C0 E0            [24] 4143 	push	acc
      00175B 75 82 20         [24] 4144 	mov	dpl,#0x20
      00175E D0 02            [24] 4145 	pop	ar2
      001760 D0 01            [24] 4146 	pop	ar1
      001762 D0 00            [24] 4147 	pop	ar0
      001764 12r00r00         [24] 4148 	lcall	__sdcc_banked_call
      001767 15 81            [12] 4149 	dec	sp
      001769 15 81            [12] 4150 	dec	sp
      00176B 15 81            [12] 4151 	dec	sp
      00176D D0*00            [24] 4152 	pop	bits
      00176F D0 01            [24] 4153 	pop	ar1
      001771 D0 02            [24] 4154 	pop	ar2
      001773 D0 03            [24] 4155 	pop	ar3
      001775 D0 04            [24] 4156 	pop	ar4
      001777 D0 05            [24] 4157 	pop	ar5
      001779 D0 06            [24] 4158 	pop	ar6
      00177B D0 07            [24] 4159 	pop	ar7
      00177D 0D               [12] 4160 	inc	r5
      00177E BD 00 01         [24] 4161 	cjne	r5,#0x00,00571$
      001781 0E               [12] 4162 	inc	r6
      001782                       4163 00571$:
                                   4164 ;	printf_large.c:792: width--;
      001782 1C               [12] 4165 	dec	r4
      001783 80 A3            [24] 4166 	sjmp	00196$
      001785                       4167 00328$:
      001785 E5*00            [12] 4168 	mov	a,_bp
      001787 24 0B            [12] 4169 	add	a,#0x0b
      001789 F8               [12] 4170 	mov	r0,a
      00178A A6 05            [24] 4171 	mov	@r0,ar5
      00178C 08               [12] 4172 	inc	r0
      00178D A6 06            [24] 4173 	mov	@r0,ar6
      00178F E5*00            [12] 4174 	mov	a,_bp
      001791 24 0E            [12] 4175 	add	a,#0x0e
      001793 F8               [12] 4176 	mov	r0,a
      001794 A6 04            [24] 4177 	mov	@r0,ar4
      001796                       4178 00200$:
                                   4179 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      001796 30*00 54         [24] 4180 	jnb	b4,00210$
                                   4181 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      001799 C0 03            [24] 4182 	push	ar3
      00179B C0 02            [24] 4183 	push	ar2
      00179D C0 01            [24] 4184 	push	ar1
      00179F C0*00            [24] 4185 	push	bits
      0017A1 E5*00            [12] 4186 	mov	a,_bp
      0017A3 24 FA            [12] 4187 	add	a,#0xfa
      0017A5 F8               [12] 4188 	mov	r0,a
      0017A6 E6               [12] 4189 	mov	a,@r0
      0017A7 C0 E0            [24] 4190 	push	acc
      0017A9 08               [12] 4191 	inc	r0
      0017AA E6               [12] 4192 	mov	a,@r0
      0017AB C0 E0            [24] 4193 	push	acc
      0017AD 08               [12] 4194 	inc	r0
      0017AE E6               [12] 4195 	mov	a,@r0
      0017AF C0 E0            [24] 4196 	push	acc
      0017B1 A8*00            [24] 4197 	mov	r0,_bp
      0017B3 08               [12] 4198 	inc	r0
      0017B4 E6               [12] 4199 	mov	a,@r0
      0017B5 C0 E0            [24] 4200 	push	acc
      0017B7 08               [12] 4201 	inc	r0
      0017B8 E6               [12] 4202 	mov	a,@r0
      0017B9 C0 E0            [24] 4203 	push	acc
      0017BB 08               [12] 4204 	inc	r0
      0017BC E6               [12] 4205 	mov	a,@r0
      0017BD C0 E0            [24] 4206 	push	acc
      0017BF 75 82 2D         [24] 4207 	mov	dpl,#0x2D
      0017C2 D0 02            [24] 4208 	pop	ar2
      0017C4 D0 01            [24] 4209 	pop	ar1
      0017C6 D0 00            [24] 4210 	pop	ar0
      0017C8 12r00r00         [24] 4211 	lcall	__sdcc_banked_call
      0017CB 15 81            [12] 4212 	dec	sp
      0017CD 15 81            [12] 4213 	dec	sp
      0017CF 15 81            [12] 4214 	dec	sp
      0017D1 D0*00            [24] 4215 	pop	bits
      0017D3 D0 01            [24] 4216 	pop	ar1
      0017D5 D0 02            [24] 4217 	pop	ar2
      0017D7 D0 03            [24] 4218 	pop	ar3
      0017D9 E5*00            [12] 4219 	mov	a,_bp
      0017DB 24 0B            [12] 4220 	add	a,#0x0b
      0017DD F8               [12] 4221 	mov	r0,a
      0017DE 06               [12] 4222 	inc	@r0
      0017DF B6 00 02         [24] 4223 	cjne	@r0,#0x00,00573$
      0017E2 08               [12] 4224 	inc	r0
      0017E3 06               [12] 4225 	inc	@r0
      0017E4                       4226 00573$:
                                   4227 ;	printf_large.c:800: width--;
      0017E4 E5*00            [12] 4228 	mov	a,_bp
      0017E6 24 0E            [12] 4229 	add	a,#0x0e
      0017E8 F8               [12] 4230 	mov	r0,a
      0017E9 16               [12] 4231 	dec	@r0
      0017EA 02r18r9D         [24] 4232 	ljmp	00211$
      0017ED                       4233 00210$:
                                   4234 ;	printf_large.c:802: else if (length != 0)
      0017ED EB               [12] 4235 	mov	a,r3
      0017EE 70 03            [24] 4236 	jnz	00574$
      0017F0 02r18r9D         [24] 4237 	ljmp	00211$
      0017F3                       4238 00574$:
                                   4239 ;	printf_large.c:805: if (prefix_sign)
      0017F3 30*00 53         [24] 4240 	jnb	b2,00205$
                                   4241 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      0017F6 C0 03            [24] 4242 	push	ar3
      0017F8 C0 02            [24] 4243 	push	ar2
      0017FA C0 01            [24] 4244 	push	ar1
      0017FC C0*00            [24] 4245 	push	bits
      0017FE E5*00            [12] 4246 	mov	a,_bp
      001800 24 FA            [12] 4247 	add	a,#0xfa
      001802 F8               [12] 4248 	mov	r0,a
      001803 E6               [12] 4249 	mov	a,@r0
      001804 C0 E0            [24] 4250 	push	acc
      001806 08               [12] 4251 	inc	r0
      001807 E6               [12] 4252 	mov	a,@r0
      001808 C0 E0            [24] 4253 	push	acc
      00180A 08               [12] 4254 	inc	r0
      00180B E6               [12] 4255 	mov	a,@r0
      00180C C0 E0            [24] 4256 	push	acc
      00180E A8*00            [24] 4257 	mov	r0,_bp
      001810 08               [12] 4258 	inc	r0
      001811 E6               [12] 4259 	mov	a,@r0
      001812 C0 E0            [24] 4260 	push	acc
      001814 08               [12] 4261 	inc	r0
      001815 E6               [12] 4262 	mov	a,@r0
      001816 C0 E0            [24] 4263 	push	acc
      001818 08               [12] 4264 	inc	r0
      001819 E6               [12] 4265 	mov	a,@r0
      00181A C0 E0            [24] 4266 	push	acc
      00181C 75 82 2B         [24] 4267 	mov	dpl,#0x2B
      00181F D0 02            [24] 4268 	pop	ar2
      001821 D0 01            [24] 4269 	pop	ar1
      001823 D0 00            [24] 4270 	pop	ar0
      001825 12r00r00         [24] 4271 	lcall	__sdcc_banked_call
      001828 15 81            [12] 4272 	dec	sp
      00182A 15 81            [12] 4273 	dec	sp
      00182C 15 81            [12] 4274 	dec	sp
      00182E D0*00            [24] 4275 	pop	bits
      001830 D0 01            [24] 4276 	pop	ar1
      001832 D0 02            [24] 4277 	pop	ar2
      001834 D0 03            [24] 4278 	pop	ar3
      001836 E5*00            [12] 4279 	mov	a,_bp
      001838 24 0B            [12] 4280 	add	a,#0x0b
      00183A F8               [12] 4281 	mov	r0,a
      00183B 06               [12] 4282 	inc	@r0
      00183C B6 00 02         [24] 4283 	cjne	@r0,#0x00,00576$
      00183F 08               [12] 4284 	inc	r0
      001840 06               [12] 4285 	inc	@r0
      001841                       4286 00576$:
                                   4287 ;	printf_large.c:809: width--;
      001841 E5*00            [12] 4288 	mov	a,_bp
      001843 24 0E            [12] 4289 	add	a,#0x0e
      001845 F8               [12] 4290 	mov	r0,a
      001846 16               [12] 4291 	dec	@r0
      001847 80 54            [24] 4292 	sjmp	00211$
      001849                       4293 00205$:
                                   4294 ;	printf_large.c:811: else if (prefix_space)
      001849 30*00 51         [24] 4295 	jnb	b3,00211$
                                   4296 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      00184C C0 03            [24] 4297 	push	ar3
      00184E C0 02            [24] 4298 	push	ar2
      001850 C0 01            [24] 4299 	push	ar1
      001852 C0*00            [24] 4300 	push	bits
      001854 E5*00            [12] 4301 	mov	a,_bp
      001856 24 FA            [12] 4302 	add	a,#0xfa
      001858 F8               [12] 4303 	mov	r0,a
      001859 E6               [12] 4304 	mov	a,@r0
      00185A C0 E0            [24] 4305 	push	acc
      00185C 08               [12] 4306 	inc	r0
      00185D E6               [12] 4307 	mov	a,@r0
      00185E C0 E0            [24] 4308 	push	acc
      001860 08               [12] 4309 	inc	r0
      001861 E6               [12] 4310 	mov	a,@r0
      001862 C0 E0            [24] 4311 	push	acc
      001864 A8*00            [24] 4312 	mov	r0,_bp
      001866 08               [12] 4313 	inc	r0
      001867 E6               [12] 4314 	mov	a,@r0
      001868 C0 E0            [24] 4315 	push	acc
      00186A 08               [12] 4316 	inc	r0
      00186B E6               [12] 4317 	mov	a,@r0
      00186C C0 E0            [24] 4318 	push	acc
      00186E 08               [12] 4319 	inc	r0
      00186F E6               [12] 4320 	mov	a,@r0
      001870 C0 E0            [24] 4321 	push	acc
      001872 75 82 20         [24] 4322 	mov	dpl,#0x20
      001875 D0 02            [24] 4323 	pop	ar2
      001877 D0 01            [24] 4324 	pop	ar1
      001879 D0 00            [24] 4325 	pop	ar0
      00187B 12r00r00         [24] 4326 	lcall	__sdcc_banked_call
      00187E 15 81            [12] 4327 	dec	sp
      001880 15 81            [12] 4328 	dec	sp
      001882 15 81            [12] 4329 	dec	sp
      001884 D0*00            [24] 4330 	pop	bits
      001886 D0 01            [24] 4331 	pop	ar1
      001888 D0 02            [24] 4332 	pop	ar2
      00188A D0 03            [24] 4333 	pop	ar3
      00188C E5*00            [12] 4334 	mov	a,_bp
      00188E 24 0B            [12] 4335 	add	a,#0x0b
      001890 F8               [12] 4336 	mov	r0,a
      001891 06               [12] 4337 	inc	@r0
      001892 B6 00 02         [24] 4338 	cjne	@r0,#0x00,00578$
      001895 08               [12] 4339 	inc	r0
      001896 06               [12] 4340 	inc	@r0
      001897                       4341 00578$:
                                   4342 ;	printf_large.c:815: width--;
      001897 E5*00            [12] 4343 	mov	a,_bp
      001899 24 0E            [12] 4344 	add	a,#0x0e
      00189B F8               [12] 4345 	mov	r0,a
      00189C 16               [12] 4346 	dec	@r0
      00189D                       4347 00211$:
                                   4348 ;	printf_large.c:820: if (!left_justify)
      00189D 20*00 74         [24] 4349 	jb	b0,00219$
                                   4350 ;	printf_large.c:822: while ( width-- > length )
      0018A0 E5*00            [12] 4351 	mov	a,_bp
      0018A2 24 0B            [12] 4352 	add	a,#0x0b
      0018A4 F8               [12] 4353 	mov	r0,a
      0018A5 86 06            [24] 4354 	mov	ar6,@r0
      0018A7 08               [12] 4355 	inc	r0
      0018A8 86 07            [24] 4356 	mov	ar7,@r0
      0018AA E5*00            [12] 4357 	mov	a,_bp
      0018AC 24 0E            [12] 4358 	add	a,#0x0e
      0018AE F8               [12] 4359 	mov	r0,a
      0018AF 86 05            [24] 4360 	mov	ar5,@r0
      0018B1                       4361 00212$:
      0018B1 8D 04            [24] 4362 	mov	ar4,r5
      0018B3 1D               [12] 4363 	dec	r5
      0018B4 C3               [12] 4364 	clr	c
      0018B5 EB               [12] 4365 	mov	a,r3
      0018B6 9C               [12] 4366 	subb	a,r4
      0018B7 50 79            [24] 4367 	jnc	00329$
                                   4368 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      0018B9 30*00 04         [24] 4369 	jnb	b1,00245$
      0018BC 7C 30            [12] 4370 	mov	r4,#0x30
      0018BE 80 02            [24] 4371 	sjmp	00246$
      0018C0                       4372 00245$:
      0018C0 7C 20            [12] 4373 	mov	r4,#0x20
      0018C2                       4374 00246$:
      0018C2 C0 07            [24] 4375 	push	ar7
      0018C4 C0 06            [24] 4376 	push	ar6
      0018C6 C0 05            [24] 4377 	push	ar5
      0018C8 C0 03            [24] 4378 	push	ar3
      0018CA C0 02            [24] 4379 	push	ar2
      0018CC C0 01            [24] 4380 	push	ar1
      0018CE C0*00            [24] 4381 	push	bits
      0018D0 E5*00            [12] 4382 	mov	a,_bp
      0018D2 24 FA            [12] 4383 	add	a,#0xfa
      0018D4 F8               [12] 4384 	mov	r0,a
      0018D5 E6               [12] 4385 	mov	a,@r0
      0018D6 C0 E0            [24] 4386 	push	acc
      0018D8 08               [12] 4387 	inc	r0
      0018D9 E6               [12] 4388 	mov	a,@r0
      0018DA C0 E0            [24] 4389 	push	acc
      0018DC 08               [12] 4390 	inc	r0
      0018DD E6               [12] 4391 	mov	a,@r0
      0018DE C0 E0            [24] 4392 	push	acc
      0018E0 A8*00            [24] 4393 	mov	r0,_bp
      0018E2 08               [12] 4394 	inc	r0
      0018E3 E6               [12] 4395 	mov	a,@r0
      0018E4 C0 E0            [24] 4396 	push	acc
      0018E6 08               [12] 4397 	inc	r0
      0018E7 E6               [12] 4398 	mov	a,@r0
      0018E8 C0 E0            [24] 4399 	push	acc
      0018EA 08               [12] 4400 	inc	r0
      0018EB E6               [12] 4401 	mov	a,@r0
      0018EC C0 E0            [24] 4402 	push	acc
      0018EE 8C 82            [24] 4403 	mov	dpl,r4
      0018F0 D0 02            [24] 4404 	pop	ar2
      0018F2 D0 01            [24] 4405 	pop	ar1
      0018F4 D0 00            [24] 4406 	pop	ar0
      0018F6 12r00r00         [24] 4407 	lcall	__sdcc_banked_call
      0018F9 15 81            [12] 4408 	dec	sp
      0018FB 15 81            [12] 4409 	dec	sp
      0018FD 15 81            [12] 4410 	dec	sp
      0018FF D0*00            [24] 4411 	pop	bits
      001901 D0 01            [24] 4412 	pop	ar1
      001903 D0 02            [24] 4413 	pop	ar2
      001905 D0 03            [24] 4414 	pop	ar3
      001907 D0 05            [24] 4415 	pop	ar5
      001909 D0 06            [24] 4416 	pop	ar6
      00190B D0 07            [24] 4417 	pop	ar7
      00190D 0E               [12] 4418 	inc	r6
      00190E BE 00 A0         [24] 4419 	cjne	r6,#0x00,00212$
      001911 0F               [12] 4420 	inc	r7
      001912 80 9D            [24] 4421 	sjmp	00212$
      001914                       4422 00219$:
                                   4423 ;	printf_large.c:830: if (width > length)
      001914 E5*00            [12] 4424 	mov	a,_bp
      001916 24 0E            [12] 4425 	add	a,#0x0e
      001918 F8               [12] 4426 	mov	r0,a
      001919 C3               [12] 4427 	clr	c
      00191A EB               [12] 4428 	mov	a,r3
      00191B 96               [12] 4429 	subb	a,@r0
      00191C 50 0B            [24] 4430 	jnc	00216$
                                   4431 ;	printf_large.c:831: width -= length;
      00191E E5*00            [12] 4432 	mov	a,_bp
      001920 24 0E            [12] 4433 	add	a,#0x0e
      001922 F8               [12] 4434 	mov	r0,a
      001923 E6               [12] 4435 	mov	a,@r0
      001924 C3               [12] 4436 	clr	c
      001925 9B               [12] 4437 	subb	a,r3
      001926 F6               [12] 4438 	mov	@r0,a
      001927 80 1A            [24] 4439 	sjmp	00321$
      001929                       4440 00216$:
                                   4441 ;	printf_large.c:833: width = 0;
      001929 E5*00            [12] 4442 	mov	a,_bp
      00192B 24 0E            [12] 4443 	add	a,#0x0e
      00192D F8               [12] 4444 	mov	r0,a
      00192E 76 00            [12] 4445 	mov	@r0,#0x00
                                   4446 ;	printf_large.c:872: return charsOutputted;
                                   4447 ;	printf_large.c:837: while( length-- )
      001930 80 11            [24] 4448 	sjmp	00321$
      001932                       4449 00329$:
      001932 E5*00            [12] 4450 	mov	a,_bp
      001934 24 0B            [12] 4451 	add	a,#0x0b
      001936 F8               [12] 4452 	mov	r0,a
      001937 A6 06            [24] 4453 	mov	@r0,ar6
      001939 08               [12] 4454 	inc	r0
      00193A A6 07            [24] 4455 	mov	@r0,ar7
      00193C E5*00            [12] 4456 	mov	a,_bp
      00193E 24 0E            [12] 4457 	add	a,#0x0e
      001940 F8               [12] 4458 	mov	r0,a
      001941 A6 05            [24] 4459 	mov	@r0,ar5
      001943                       4460 00321$:
      001943 8A 00            [24] 4461 	mov	ar0,r2
      001945 C0 00            [24] 4462 	push	ar0
      001947 E5*00            [12] 4463 	mov	a,_bp
      001949 24 0B            [12] 4464 	add	a,#0x0b
      00194B F8               [12] 4465 	mov	r0,a
      00194C 86 06            [24] 4466 	mov	ar6,@r0
      00194E 08               [12] 4467 	inc	r0
      00194F 86 07            [24] 4468 	mov	ar7,@r0
      001951 D0 00            [24] 4469 	pop	ar0
      001953 8B 05            [24] 4470 	mov	ar5,r3
      001955                       4471 00224$:
      001955 8D 04            [24] 4472 	mov	ar4,r5
      001957 1D               [12] 4473 	dec	r5
      001958 EC               [12] 4474 	mov	a,r4
      001959 70 03            [24] 4475 	jnz	00584$
      00195B 02r1Ar01         [24] 4476 	ljmp	00330$
      00195E                       4477 00584$:
                                   4478 ;	printf_large.c:839: lsd = !lsd;
      00195E B2*00            [12] 4479 	cpl	b5
                                   4480 ;	printf_large.c:840: if (!lsd)
      001960 20*00 15         [24] 4481 	jb	b5,00222$
                                   4482 ;	printf_large.c:842: pstore++;
      001963 08               [12] 4483 	inc	r0
                                   4484 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      001964 E6               [12] 4485 	mov	a,@r0
      001965 C4               [12] 4486 	swap	a
      001966 54 0F            [12] 4487 	anl	a,#0x0F
      001968 FC               [12] 4488 	mov	r4,a
      001969 C0 00            [24] 4489 	push	ar0
      00196B E5*00            [12] 4490 	mov	a,_bp
      00196D 24 04            [12] 4491 	add	a,#0x04
      00196F F8               [12] 4492 	mov	r0,a
      001970 86 00            [24] 4493 	mov	ar0,@r0
      001972 A6 04            [24] 4494 	mov	@r0,ar4
      001974 D0 00            [24] 4495 	pop	ar0
      001976 80 12            [24] 4496 	sjmp	00223$
      001978                       4497 00222$:
                                   4498 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      001978 86 04            [24] 4499 	mov	ar4,@r0
      00197A 74 0F            [12] 4500 	mov	a,#0x0F
      00197C 5C               [12] 4501 	anl	a,r4
      00197D C0 00            [24] 4502 	push	ar0
      00197F C8               [12] 4503 	xch	a,r0
      001980 E5*00            [12] 4504 	mov	a,_bp
      001982 24 04            [12] 4505 	add	a,#0x04
      001984 C8               [12] 4506 	xch	a,r0
      001985 86 00            [24] 4507 	mov	ar0,@r0
      001987 F6               [12] 4508 	mov	@r0,a
      001988 D0 00            [24] 4509 	pop	ar0
      00198A                       4510 00223$:
                                   4511 ;	printf_large.c:850: output_digit( value.byte[4], lower_case, output_char, p );
      00198A C0 00            [24] 4512 	push	ar0
      00198C E5*00            [12] 4513 	mov	a,_bp
      00198E 24 04            [12] 4514 	add	a,#0x04
      001990 F8               [12] 4515 	mov	r0,a
      001991 86 00            [24] 4516 	mov	ar0,@r0
      001993 86 04            [24] 4517 	mov	ar4,@r0
      001995 D0 00            [24] 4518 	pop	ar0
      001997 C0 07            [24] 4519 	push	ar7
      001999 C0 06            [24] 4520 	push	ar6
      00199B C0 05            [24] 4521 	push	ar5
      00199D C0 01            [24] 4522 	push	ar1
      00199F C0 00            [24] 4523 	push	ar0
      0019A1 C0*00            [24] 4524 	push	bits
      0019A3 85 00 F0         [24] 4525 	mov	b,ar0
      0019A6 E5*00            [12] 4526 	mov	a,_bp
      0019A8 24 FA            [12] 4527 	add	a,#0xfa
      0019AA F8               [12] 4528 	mov	r0,a
      0019AB E6               [12] 4529 	mov	a,@r0
      0019AC C0 E0            [24] 4530 	push	acc
      0019AE 08               [12] 4531 	inc	r0
      0019AF E6               [12] 4532 	mov	a,@r0
      0019B0 C0 E0            [24] 4533 	push	acc
      0019B2 08               [12] 4534 	inc	r0
      0019B3 E6               [12] 4535 	mov	a,@r0
      0019B4 C0 E0            [24] 4536 	push	acc
      0019B6 A8 F0            [24] 4537 	mov	r0,b
      0019B8 85 00 F0         [24] 4538 	mov	b,ar0
      0019BB A8*00            [24] 4539 	mov	r0,_bp
      0019BD 08               [12] 4540 	inc	r0
      0019BE E6               [12] 4541 	mov	a,@r0
      0019BF C0 E0            [24] 4542 	push	acc
      0019C1 08               [12] 4543 	inc	r0
      0019C2 E6               [12] 4544 	mov	a,@r0
      0019C3 C0 E0            [24] 4545 	push	acc
      0019C5 08               [12] 4546 	inc	r0
      0019C6 E6               [12] 4547 	mov	a,@r0
      0019C7 C0 E0            [24] 4548 	push	acc
      0019C9 A8 F0            [24] 4549 	mov	r0,b
      0019CB C0 00            [24] 4550 	push	ar0
      0019CD E5*00            [12] 4551 	mov	a,_bp
      0019CF 24 15            [12] 4552 	add	a,#0x15
      0019D1 F8               [12] 4553 	mov	r0,a
      0019D2 E6               [12] 4554 	mov	a,@r0
      0019D3 24 FF            [12] 4555 	add	a,#0xff
      0019D5 92 F0            [24] 4556 	mov	b[0],c
      0019D7 D0 00            [24] 4557 	pop	ar0
      0019D9 85 F0*00         [24] 4558 	mov	bits,b
      0019DC 8C 82            [24] 4559 	mov	dpl,r4
      0019DE 78r00            [12] 4560 	mov	r0,#_output_digit
      0019E0 79s00            [12] 4561 	mov	r1,#(_output_digit >> 8)
      0019E2 7As00            [12] 4562 	mov	r2,#(_output_digit >> 16)
      0019E4 12r00r00         [24] 4563 	lcall	__sdcc_banked_call
      0019E7 E5 81            [12] 4564 	mov	a,sp
      0019E9 24 FA            [12] 4565 	add	a,#0xfa
      0019EB F5 81            [12] 4566 	mov	sp,a
      0019ED D0*00            [24] 4567 	pop	bits
      0019EF D0 00            [24] 4568 	pop	ar0
      0019F1 D0 01            [24] 4569 	pop	ar1
      0019F3 D0 05            [24] 4570 	pop	ar5
      0019F5 D0 06            [24] 4571 	pop	ar6
      0019F7 D0 07            [24] 4572 	pop	ar7
                                   4573 ;	printf_large.c:851: charsOutputted++;
      0019F9 0E               [12] 4574 	inc	r6
      0019FA BE 00 01         [24] 4575 	cjne	r6,#0x00,00586$
      0019FD 0F               [12] 4576 	inc	r7
      0019FE                       4577 00586$:
      0019FE 02r19r55         [24] 4578 	ljmp	00224$
      001A01                       4579 00330$:
      001A01 E5*00            [12] 4580 	mov	a,_bp
      001A03 24 0B            [12] 4581 	add	a,#0x0b
      001A05 F8               [12] 4582 	mov	r0,a
      001A06 A6 06            [24] 4583 	mov	@r0,ar6
      001A08 08               [12] 4584 	inc	r0
      001A09 A6 07            [24] 4585 	mov	@r0,ar7
                                   4586 ;	printf_large.c:856: if (left_justify)
      001A0B 20*00 03         [24] 4587 	jb	b0,00587$
      001A0E 02r0Dr18         [24] 4588 	ljmp	00240$
      001A11                       4589 00587$:
                                   4590 ;	printf_large.c:858: while (width-- > 0)
      001A11 E5*00            [12] 4591 	mov	a,_bp
      001A13 24 0E            [12] 4592 	add	a,#0x0e
      001A15 F8               [12] 4593 	mov	r0,a
      001A16 86 05            [24] 4594 	mov	ar5,@r0
      001A18                       4595 00227$:
      001A18 8D 04            [24] 4596 	mov	ar4,r5
      001A1A 1D               [12] 4597 	dec	r5
      001A1B EC               [12] 4598 	mov	a,r4
      001A1C 70 03            [24] 4599 	jnz	00588$
      001A1E 02r0Dr18         [24] 4600 	ljmp	00240$
      001A21                       4601 00588$:
                                   4602 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      001A21 C0 07            [24] 4603 	push	ar7
      001A23 C0 06            [24] 4604 	push	ar6
      001A25 C0 05            [24] 4605 	push	ar5
      001A27 C0 01            [24] 4606 	push	ar1
      001A29 E5*00            [12] 4607 	mov	a,_bp
      001A2B 24 FA            [12] 4608 	add	a,#0xfa
      001A2D F8               [12] 4609 	mov	r0,a
      001A2E E6               [12] 4610 	mov	a,@r0
      001A2F C0 E0            [24] 4611 	push	acc
      001A31 08               [12] 4612 	inc	r0
      001A32 E6               [12] 4613 	mov	a,@r0
      001A33 C0 E0            [24] 4614 	push	acc
      001A35 08               [12] 4615 	inc	r0
      001A36 E6               [12] 4616 	mov	a,@r0
      001A37 C0 E0            [24] 4617 	push	acc
      001A39 A8*00            [24] 4618 	mov	r0,_bp
      001A3B 08               [12] 4619 	inc	r0
      001A3C E6               [12] 4620 	mov	a,@r0
      001A3D C0 E0            [24] 4621 	push	acc
      001A3F 08               [12] 4622 	inc	r0
      001A40 E6               [12] 4623 	mov	a,@r0
      001A41 C0 E0            [24] 4624 	push	acc
      001A43 08               [12] 4625 	inc	r0
      001A44 E6               [12] 4626 	mov	a,@r0
      001A45 C0 E0            [24] 4627 	push	acc
      001A47 75 82 20         [24] 4628 	mov	dpl,#0x20
      001A4A D0 02            [24] 4629 	pop	ar2
      001A4C D0 01            [24] 4630 	pop	ar1
      001A4E D0 00            [24] 4631 	pop	ar0
      001A50 12r00r00         [24] 4632 	lcall	__sdcc_banked_call
      001A53 15 81            [12] 4633 	dec	sp
      001A55 15 81            [12] 4634 	dec	sp
      001A57 15 81            [12] 4635 	dec	sp
      001A59 D0 01            [24] 4636 	pop	ar1
      001A5B D0 05            [24] 4637 	pop	ar5
      001A5D D0 06            [24] 4638 	pop	ar6
      001A5F D0 07            [24] 4639 	pop	ar7
      001A61 0E               [12] 4640 	inc	r6
      001A62 BE 00 01         [24] 4641 	cjne	r6,#0x00,00589$
      001A65 0F               [12] 4642 	inc	r7
      001A66                       4643 00589$:
      001A66 E5*00            [12] 4644 	mov	a,_bp
      001A68 24 0B            [12] 4645 	add	a,#0x0b
      001A6A F8               [12] 4646 	mov	r0,a
      001A6B A6 06            [24] 4647 	mov	@r0,ar6
      001A6D 08               [12] 4648 	inc	r0
      001A6E A6 07            [24] 4649 	mov	@r0,ar7
      001A70 80 A6            [24] 4650 	sjmp	00227$
      001A72                       4651 00238$:
                                   4652 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      001A72 C0 01            [24] 4653 	push	ar1
      001A74 E5*00            [12] 4654 	mov	a,_bp
      001A76 24 FA            [12] 4655 	add	a,#0xfa
      001A78 F8               [12] 4656 	mov	r0,a
      001A79 E6               [12] 4657 	mov	a,@r0
      001A7A C0 E0            [24] 4658 	push	acc
      001A7C 08               [12] 4659 	inc	r0
      001A7D E6               [12] 4660 	mov	a,@r0
      001A7E C0 E0            [24] 4661 	push	acc
      001A80 08               [12] 4662 	inc	r0
      001A81 E6               [12] 4663 	mov	a,@r0
      001A82 C0 E0            [24] 4664 	push	acc
      001A84 A8*00            [24] 4665 	mov	r0,_bp
      001A86 08               [12] 4666 	inc	r0
      001A87 E6               [12] 4667 	mov	a,@r0
      001A88 C0 E0            [24] 4668 	push	acc
      001A8A 08               [12] 4669 	inc	r0
      001A8B E6               [12] 4670 	mov	a,@r0
      001A8C C0 E0            [24] 4671 	push	acc
      001A8E 08               [12] 4672 	inc	r0
      001A8F E6               [12] 4673 	mov	a,@r0
      001A90 C0 E0            [24] 4674 	push	acc
      001A92 8C 82            [24] 4675 	mov	dpl,r4
      001A94 D0 02            [24] 4676 	pop	ar2
      001A96 D0 01            [24] 4677 	pop	ar1
      001A98 D0 00            [24] 4678 	pop	ar0
      001A9A 12r00r00         [24] 4679 	lcall	__sdcc_banked_call
      001A9D 15 81            [12] 4680 	dec	sp
      001A9F 15 81            [12] 4681 	dec	sp
      001AA1 15 81            [12] 4682 	dec	sp
      001AA3 D0 01            [24] 4683 	pop	ar1
      001AA5 E5*00            [12] 4684 	mov	a,_bp
      001AA7 24 0B            [12] 4685 	add	a,#0x0b
      001AA9 F8               [12] 4686 	mov	r0,a
      001AAA 06               [12] 4687 	inc	@r0
      001AAB B6 00 02         [24] 4688 	cjne	@r0,#0x00,00590$
      001AAE 08               [12] 4689 	inc	r0
      001AAF 06               [12] 4690 	inc	@r0
      001AB0                       4691 00590$:
      001AB0 02r0Dr18         [24] 4692 	ljmp	00240$
      001AB3                       4693 00242$:
                                   4694 ;	printf_large.c:872: return charsOutputted;
      001AB3 E5*00            [12] 4695 	mov	a,_bp
      001AB5 24 0B            [12] 4696 	add	a,#0x0b
      001AB7 F8               [12] 4697 	mov	r0,a
      001AB8 86 82            [24] 4698 	mov	dpl,@r0
      001ABA 08               [12] 4699 	inc	r0
      001ABB 86 83            [24] 4700 	mov	dph,@r0
      001ABD 85*00 81         [24] 4701 	mov	sp,_bp
      001AC0 D0*00            [24] 4702 	pop	_bp
      001AC2 02r00r00         [24] 4703 	ljmp	__sdcc_banked_ret
                                   4704 	.area CSEG    (CODE)
                                   4705 	.area CONST   (CODE)
                                   4706 	.area XINIT   (CODE)
                                   4707 	.area CABS    (ABS,CODE)
