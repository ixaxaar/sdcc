                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:14 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _mullong
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __mullong
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function '_mullong'
                                     92 ;------------------------------------------------------------
                                     93 ;b                         Allocated to stack - _bp -6
                                     94 ;a                         Allocated to stack - _bp +1
                                     95 ;t                         Allocated to stack - _bp +9
                                     96 ;sloc0                     Allocated to stack - _bp +5
                                     97 ;------------------------------------------------------------
                                     98 ;	_mullong.c:734: _mullong (long a, long b)
                                     99 ;	-----------------------------------------
                                    100 ;	 function _mullong
                                    101 ;	-----------------------------------------
      000000                        102 __mullong:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 C0*00            [24]  111 	push	_bp
      000002 85 81*00         [24]  112 	mov	_bp,sp
      000005 C0 82            [24]  113 	push	dpl
      000007 C0 83            [24]  114 	push	dph
      000009 C0 F0            [24]  115 	push	b
      00000B C0 E0            [24]  116 	push	acc
      00000D E5 81            [12]  117 	mov	a,sp
      00000F 24 08            [12]  118 	add	a,#0x08
      000011 F5 81            [12]  119 	mov	sp,a
                                    120 ;	_mullong.c:738: t.i.hi = bcast(a)->b.b0 * bcast(b)->b.b2;           // A
      000013 E5*00            [12]  121 	mov	a,_bp
      000015 24 09            [12]  122 	add	a,#0x09
      000017 F9               [12]  123 	mov	r1,a
      000018 24 02            [12]  124 	add	a,#0x02
      00001A F8               [12]  125 	mov	r0,a
      00001B AF*00            [24]  126 	mov	r7,_bp
      00001D 0F               [12]  127 	inc	r7
      00001E 8F 06            [24]  128 	mov	ar6,r7
      000020 C0 00            [24]  129 	push	ar0
      000022 A8 06            [24]  130 	mov	r0,ar6
      000024 86 06            [24]  131 	mov	ar6,@r0
      000026 E5*00            [12]  132 	mov	a,_bp
      000028 24 FA            [12]  133 	add	a,#0xFA
      00002A FD               [12]  134 	mov	r5,a
      00002B FC               [12]  135 	mov	r4,a
      00002C 0C               [12]  136 	inc	r4
      00002D 0C               [12]  137 	inc	r4
      00002E A8 04            [24]  138 	mov	r0,ar4
      000030 86 04            [24]  139 	mov	ar4,@r0
      000032 D0 00            [24]  140 	pop	ar0
      000034 8E F0            [24]  141 	mov	b,r6
      000036 EC               [12]  142 	mov	a,r4
      000037 A4               [48]  143 	mul	ab
      000038 F6               [12]  144 	mov	@r0,a
      000039 08               [12]  145 	inc	r0
      00003A A6 F0            [24]  146 	mov	@r0,b
                                    147 ;	_mullong.c:739: t.i.lo = bcast(a)->b.b0 * bcast(b)->b.b0;           // A
      00003C 8F 06            [24]  148 	mov	ar6,r7
      00003E 8E 00            [24]  149 	mov	ar0,r6
      000040 86 06            [24]  150 	mov	ar6,@r0
      000042 8D 04            [24]  151 	mov	ar4,r5
      000044 8C 00            [24]  152 	mov	ar0,r4
      000046 86 04            [24]  153 	mov	ar4,@r0
      000048 8E F0            [24]  154 	mov	b,r6
      00004A EC               [12]  155 	mov	a,r4
      00004B A4               [48]  156 	mul	ab
      00004C F7               [12]  157 	mov	@r1,a
      00004D 09               [12]  158 	inc	r1
      00004E A7 F0            [24]  159 	mov	@r1,b
                                    160 ;	_mullong.c:740: t.b.b3 += bcast(a)->b.b3 * bcast(b)->b.b0;          // G
      000050 E5*00            [12]  161 	mov	a,_bp
      000052 24 09            [12]  162 	add	a,#0x09
      000054 24 03            [12]  163 	add	a,#0x03
      000056 F9               [12]  164 	mov	r1,a
      000057 87 06            [24]  165 	mov	ar6,@r1
      000059 8F 04            [24]  166 	mov	ar4,r7
      00005B 74 03            [12]  167 	mov	a,#0x03
      00005D 2C               [12]  168 	add	a,r4
      00005E F8               [12]  169 	mov	r0,a
      00005F 86 04            [24]  170 	mov	ar4,@r0
      000061 8D 03            [24]  171 	mov	ar3,r5
      000063 8B 00            [24]  172 	mov	ar0,r3
      000065 86 03            [24]  173 	mov	ar3,@r0
      000067 8C F0            [24]  174 	mov	b,r4
      000069 EB               [12]  175 	mov	a,r3
      00006A A4               [48]  176 	mul	ab
      00006B 2E               [12]  177 	add	a,r6
      00006C F7               [12]  178 	mov	@r1,a
                                    179 ;	_mullong.c:741: t.b.b3 += bcast(a)->b.b2 * bcast(b)->b.b1;          // F
      00006D 87 06            [24]  180 	mov	ar6,@r1
      00006F 8F 04            [24]  181 	mov	ar4,r7
      000071 74 02            [12]  182 	mov	a,#0x02
      000073 2C               [12]  183 	add	a,r4
      000074 F8               [12]  184 	mov	r0,a
      000075 86 04            [24]  185 	mov	ar4,@r0
      000077 8D 03            [24]  186 	mov	ar3,r5
      000079 EB               [12]  187 	mov	a,r3
      00007A 04               [12]  188 	inc	a
      00007B F8               [12]  189 	mov	r0,a
      00007C 86 03            [24]  190 	mov	ar3,@r0
      00007E 8C F0            [24]  191 	mov	b,r4
      000080 EB               [12]  192 	mov	a,r3
      000081 A4               [48]  193 	mul	ab
      000082 2E               [12]  194 	add	a,r6
      000083 F7               [12]  195 	mov	@r1,a
                                    196 ;	_mullong.c:742: t.i.hi += bcast(a)->b.b2 * bcast(b)->b.b0;          // E <- b lost in .lst
      000084 E5*00            [12]  197 	mov	a,_bp
      000086 24 09            [12]  198 	add	a,#0x09
      000088 24 02            [12]  199 	add	a,#0x02
      00008A F9               [12]  200 	mov	r1,a
      00008B 87 04            [24]  201 	mov	ar4,@r1
      00008D 09               [12]  202 	inc	r1
      00008E 87 06            [24]  203 	mov	ar6,@r1
      000090 19               [12]  204 	dec	r1
      000091 8F 03            [24]  205 	mov	ar3,r7
      000093 74 02            [12]  206 	mov	a,#0x02
      000095 2B               [12]  207 	add	a,r3
      000096 F8               [12]  208 	mov	r0,a
      000097 86 03            [24]  209 	mov	ar3,@r0
      000099 8D 02            [24]  210 	mov	ar2,r5
      00009B 8A 00            [24]  211 	mov	ar0,r2
      00009D 86 02            [24]  212 	mov	ar2,@r0
      00009F 8B F0            [24]  213 	mov	b,r3
      0000A1 EA               [12]  214 	mov	a,r2
      0000A2 A4               [48]  215 	mul	ab
      0000A3 AB F0            [24]  216 	mov	r3,b
      0000A5 2C               [12]  217 	add	a,r4
      0000A6 FC               [12]  218 	mov	r4,a
      0000A7 EB               [12]  219 	mov	a,r3
      0000A8 3E               [12]  220 	addc	a,r6
      0000A9 FE               [12]  221 	mov	r6,a
      0000AA A7 04            [24]  222 	mov	@r1,ar4
      0000AC 09               [12]  223 	inc	r1
      0000AD A7 06            [24]  224 	mov	@r1,ar6
      0000AF 19               [12]  225 	dec	r1
                                    226 ;	_mullong.c:744: t.i.hi += bcast(a)->b.b1 * bcast(b)->b.b1;          // D <- b lost in .lst
      0000B0 87 04            [24]  227 	mov	ar4,@r1
      0000B2 09               [12]  228 	inc	r1
      0000B3 87 06            [24]  229 	mov	ar6,@r1
      0000B5 19               [12]  230 	dec	r1
      0000B6 8F 03            [24]  231 	mov	ar3,r7
      0000B8 EB               [12]  232 	mov	a,r3
      0000B9 04               [12]  233 	inc	a
      0000BA F8               [12]  234 	mov	r0,a
      0000BB 86 03            [24]  235 	mov	ar3,@r0
      0000BD 8D 02            [24]  236 	mov	ar2,r5
      0000BF EA               [12]  237 	mov	a,r2
      0000C0 04               [12]  238 	inc	a
      0000C1 F8               [12]  239 	mov	r0,a
      0000C2 86 02            [24]  240 	mov	ar2,@r0
      0000C4 8B F0            [24]  241 	mov	b,r3
      0000C6 EA               [12]  242 	mov	a,r2
      0000C7 A4               [48]  243 	mul	ab
      0000C8 AB F0            [24]  244 	mov	r3,b
      0000CA 2C               [12]  245 	add	a,r4
      0000CB FC               [12]  246 	mov	r4,a
      0000CC EB               [12]  247 	mov	a,r3
      0000CD 3E               [12]  248 	addc	a,r6
      0000CE FE               [12]  249 	mov	r6,a
      0000CF A7 04            [24]  250 	mov	@r1,ar4
      0000D1 09               [12]  251 	inc	r1
      0000D2 A7 06            [24]  252 	mov	@r1,ar6
                                    253 ;	_mullong.c:746: bcast(a)->bi.b3 = bcast(a)->b.b1 * bcast(b)->b.b2;  // C
      0000D4 8F 06            [24]  254 	mov	ar6,r7
      0000D6 74 03            [12]  255 	mov	a,#0x03
      0000D8 2E               [12]  256 	add	a,r6
      0000D9 F9               [12]  257 	mov	r1,a
      0000DA 8F 06            [24]  258 	mov	ar6,r7
      0000DC EE               [12]  259 	mov	a,r6
      0000DD 04               [12]  260 	inc	a
      0000DE F8               [12]  261 	mov	r0,a
      0000DF 86 06            [24]  262 	mov	ar6,@r0
      0000E1 8D 04            [24]  263 	mov	ar4,r5
      0000E3 74 02            [12]  264 	mov	a,#0x02
      0000E5 2C               [12]  265 	add	a,r4
      0000E6 F8               [12]  266 	mov	r0,a
      0000E7 86 04            [24]  267 	mov	ar4,@r0
      0000E9 8E F0            [24]  268 	mov	b,r6
      0000EB EC               [12]  269 	mov	a,r4
      0000EC A4               [48]  270 	mul	ab
      0000ED F7               [12]  271 	mov	@r1,a
                                    272 ;	_mullong.c:747: bcast(a)->bi.i12 = bcast(a)->b.b1 * bcast(b)->b.b0; // C
      0000EE 8F 06            [24]  273 	mov	ar6,r7
      0000F0 EE               [12]  274 	mov	a,r6
      0000F1 04               [12]  275 	inc	a
      0000F2 F9               [12]  276 	mov	r1,a
      0000F3 8F 06            [24]  277 	mov	ar6,r7
      0000F5 EE               [12]  278 	mov	a,r6
      0000F6 04               [12]  279 	inc	a
      0000F7 F8               [12]  280 	mov	r0,a
      0000F8 86 06            [24]  281 	mov	ar6,@r0
      0000FA 8D 04            [24]  282 	mov	ar4,r5
      0000FC 8C 00            [24]  283 	mov	ar0,r4
      0000FE 86 04            [24]  284 	mov	ar4,@r0
      000100 8E F0            [24]  285 	mov	b,r6
      000102 EC               [12]  286 	mov	a,r4
      000103 A4               [48]  287 	mul	ab
      000104 F7               [12]  288 	mov	@r1,a
      000105 09               [12]  289 	inc	r1
      000106 A7 F0            [24]  290 	mov	@r1,b
                                    291 ;	_mullong.c:749: bcast(b)->bi.b3 = bcast(a)->b.b0 * bcast(b)->b.b3;  // B
      000108 8D 06            [24]  292 	mov	ar6,r5
      00010A 74 03            [12]  293 	mov	a,#0x03
      00010C 2E               [12]  294 	add	a,r6
      00010D F9               [12]  295 	mov	r1,a
      00010E 8F 06            [24]  296 	mov	ar6,r7
      000110 8E 00            [24]  297 	mov	ar0,r6
      000112 86 06            [24]  298 	mov	ar6,@r0
      000114 8D 04            [24]  299 	mov	ar4,r5
      000116 74 03            [12]  300 	mov	a,#0x03
      000118 2C               [12]  301 	add	a,r4
      000119 F8               [12]  302 	mov	r0,a
      00011A 86 04            [24]  303 	mov	ar4,@r0
      00011C 8E F0            [24]  304 	mov	b,r6
      00011E EC               [12]  305 	mov	a,r4
      00011F A4               [48]  306 	mul	ab
      000120 F7               [12]  307 	mov	@r1,a
                                    308 ;	_mullong.c:750: bcast(b)->bi.i12 = bcast(a)->b.b0 * bcast(b)->b.b1; // B
      000121 8D 06            [24]  309 	mov	ar6,r5
      000123 EE               [12]  310 	mov	a,r6
      000124 04               [12]  311 	inc	a
      000125 F9               [12]  312 	mov	r1,a
      000126 8F 06            [24]  313 	mov	ar6,r7
      000128 8E 00            [24]  314 	mov	ar0,r6
      00012A 86 06            [24]  315 	mov	ar6,@r0
      00012C 8D 04            [24]  316 	mov	ar4,r5
      00012E EC               [12]  317 	mov	a,r4
      00012F 04               [12]  318 	inc	a
      000130 F8               [12]  319 	mov	r0,a
      000131 86 04            [24]  320 	mov	ar4,@r0
      000133 8E F0            [24]  321 	mov	b,r6
      000135 EC               [12]  322 	mov	a,r4
      000136 A4               [48]  323 	mul	ab
      000137 F7               [12]  324 	mov	@r1,a
      000138 09               [12]  325 	inc	r1
      000139 A7 F0            [24]  326 	mov	@r1,b
                                    327 ;	_mullong.c:752: bcast(b)->bi.b0 = 0;                                // B
      00013B 8D 01            [24]  328 	mov	ar1,r5
      00013D 77 00            [12]  329 	mov	@r1,#0x00
                                    330 ;	_mullong.c:753: bcast(a)->bi.b0 = 0;                                // C
      00013F 8F 01            [24]  331 	mov	ar1,r7
      000141 77 00            [12]  332 	mov	@r1,#0x00
                                    333 ;	_mullong.c:754: t.l += a;
      000143 E5*00            [12]  334 	mov	a,_bp
      000145 24 09            [12]  335 	add	a,#0x09
      000147 F9               [12]  336 	mov	r1,a
      000148 E5*00            [12]  337 	mov	a,_bp
      00014A 24 05            [12]  338 	add	a,#0x05
      00014C F8               [12]  339 	mov	r0,a
      00014D E7               [12]  340 	mov	a,@r1
      00014E F6               [12]  341 	mov	@r0,a
      00014F 09               [12]  342 	inc	r1
      000150 E7               [12]  343 	mov	a,@r1
      000151 08               [12]  344 	inc	r0
      000152 F6               [12]  345 	mov	@r0,a
      000153 09               [12]  346 	inc	r1
      000154 E7               [12]  347 	mov	a,@r1
      000155 08               [12]  348 	inc	r0
      000156 F6               [12]  349 	mov	@r0,a
      000157 09               [12]  350 	inc	r1
      000158 E7               [12]  351 	mov	a,@r1
      000159 08               [12]  352 	inc	r0
      00015A F6               [12]  353 	mov	@r0,a
      00015B 19               [12]  354 	dec	r1
      00015C 19               [12]  355 	dec	r1
      00015D 19               [12]  356 	dec	r1
      00015E A8*00            [24]  357 	mov	r0,_bp
      000160 08               [12]  358 	inc	r0
      000161 86 02            [24]  359 	mov	ar2,@r0
      000163 08               [12]  360 	inc	r0
      000164 86 03            [24]  361 	mov	ar3,@r0
      000166 08               [12]  362 	inc	r0
      000167 86 06            [24]  363 	mov	ar6,@r0
      000169 08               [12]  364 	inc	r0
      00016A 86 07            [24]  365 	mov	ar7,@r0
      00016C E5*00            [12]  366 	mov	a,_bp
      00016E 24 05            [12]  367 	add	a,#0x05
      000170 F8               [12]  368 	mov	r0,a
      000171 EA               [12]  369 	mov	a,r2
      000172 26               [12]  370 	add	a,@r0
      000173 F6               [12]  371 	mov	@r0,a
      000174 EB               [12]  372 	mov	a,r3
      000175 08               [12]  373 	inc	r0
      000176 36               [12]  374 	addc	a,@r0
      000177 F6               [12]  375 	mov	@r0,a
      000178 EE               [12]  376 	mov	a,r6
      000179 08               [12]  377 	inc	r0
      00017A 36               [12]  378 	addc	a,@r0
      00017B F6               [12]  379 	mov	@r0,a
      00017C EF               [12]  380 	mov	a,r7
      00017D 08               [12]  381 	inc	r0
      00017E 36               [12]  382 	addc	a,@r0
      00017F F6               [12]  383 	mov	@r0,a
      000180 E5*00            [12]  384 	mov	a,_bp
      000182 24 05            [12]  385 	add	a,#0x05
      000184 F8               [12]  386 	mov	r0,a
      000185 E6               [12]  387 	mov	a,@r0
      000186 F7               [12]  388 	mov	@r1,a
      000187 09               [12]  389 	inc	r1
      000188 08               [12]  390 	inc	r0
      000189 E6               [12]  391 	mov	a,@r0
      00018A F7               [12]  392 	mov	@r1,a
      00018B 09               [12]  393 	inc	r1
      00018C 08               [12]  394 	inc	r0
      00018D E6               [12]  395 	mov	a,@r0
      00018E F7               [12]  396 	mov	@r1,a
      00018F 09               [12]  397 	inc	r1
      000190 08               [12]  398 	inc	r0
      000191 E6               [12]  399 	mov	a,@r0
      000192 F7               [12]  400 	mov	@r1,a
      000193 19               [12]  401 	dec	r1
      000194 19               [12]  402 	dec	r1
      000195 19               [12]  403 	dec	r1
                                    404 ;	_mullong.c:756: return t.l + b;
      000196 E7               [12]  405 	mov	a,@r1
      000197 09               [12]  406 	inc	r1
      000198 E7               [12]  407 	mov	a,@r1
      000199 09               [12]  408 	inc	r1
      00019A E7               [12]  409 	mov	a,@r1
      00019B 09               [12]  410 	inc	r1
      00019C E7               [12]  411 	mov	a,@r1
      00019D E5*00            [12]  412 	mov	a,_bp
      00019F 24 FA            [12]  413 	add	a,#0xfa
      0001A1 F8               [12]  414 	mov	r0,a
      0001A2 86 04            [24]  415 	mov	ar4,@r0
      0001A4 08               [12]  416 	inc	r0
      0001A5 86 05            [24]  417 	mov	ar5,@r0
      0001A7 08               [12]  418 	inc	r0
      0001A8 86 06            [24]  419 	mov	ar6,@r0
      0001AA 08               [12]  420 	inc	r0
      0001AB 86 07            [24]  421 	mov	ar7,@r0
      0001AD E5*00            [12]  422 	mov	a,_bp
      0001AF 24 05            [12]  423 	add	a,#0x05
      0001B1 F8               [12]  424 	mov	r0,a
      0001B2 EC               [12]  425 	mov	a,r4
      0001B3 26               [12]  426 	add	a,@r0
      0001B4 FC               [12]  427 	mov	r4,a
      0001B5 ED               [12]  428 	mov	a,r5
      0001B6 08               [12]  429 	inc	r0
      0001B7 36               [12]  430 	addc	a,@r0
      0001B8 FD               [12]  431 	mov	r5,a
      0001B9 EE               [12]  432 	mov	a,r6
      0001BA 08               [12]  433 	inc	r0
      0001BB 36               [12]  434 	addc	a,@r0
      0001BC FE               [12]  435 	mov	r6,a
      0001BD EF               [12]  436 	mov	a,r7
      0001BE 08               [12]  437 	inc	r0
      0001BF 36               [12]  438 	addc	a,@r0
      0001C0 8C 82            [24]  439 	mov	dpl,r4
      0001C2 8D 83            [24]  440 	mov	dph,r5
      0001C4 8E F0            [24]  441 	mov	b,r6
      0001C6 85*00 81         [24]  442 	mov	sp,_bp
      0001C9 D0*00            [24]  443 	pop	_bp
      0001CB 22               [24]  444 	ret
                                    445 	.area CSEG    (CODE)
                                    446 	.area CONST   (CODE)
                                    447 	.area XINIT   (CODE)
                                    448 	.area CABS    (ABS,CODE)
