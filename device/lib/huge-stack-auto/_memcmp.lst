                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:14 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _memcmp
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _memcmp
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'memcmp'
                                     92 ;------------------------------------------------------------
                                     93 ;buf2                      Allocated to stack - _bp -6
                                     94 ;count                     Allocated to stack - _bp -8
                                     95 ;buf1                      Allocated to registers r5 r6 r7 
                                     96 ;sloc0                     Allocated to stack - _bp +1
                                     97 ;sloc1                     Allocated to stack - _bp +4
                                     98 ;------------------------------------------------------------
                                     99 ;	_memcmp.c:31: int memcmp (
                                    100 ;	-----------------------------------------
                                    101 ;	 function memcmp
                                    102 ;	-----------------------------------------
      000000                        103 _memcmp:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
      000000 C0*00            [24]  112 	push	_bp
      000002 E5 81            [12]  113 	mov	a,sp
      000004 F5*00            [12]  114 	mov	_bp,a
      000006 24 06            [12]  115 	add	a,#0x06
      000008 F5 81            [12]  116 	mov	sp,a
      00000A AD 82            [24]  117 	mov	r5,dpl
      00000C AE 83            [24]  118 	mov	r6,dph
      00000E AF F0            [24]  119 	mov	r7,b
                                    120 ;	_memcmp.c:37: if (!count)
      000010 E5*00            [12]  121 	mov	a,_bp
      000012 24 F8            [12]  122 	add	a,#0xf8
      000014 F8               [12]  123 	mov	r0,a
      000015 E6               [12]  124 	mov	a,@r0
      000016 08               [12]  125 	inc	r0
      000017 46               [12]  126 	orl	a,@r0
      000018 70 06            [24]  127 	jnz	00112$
                                    128 ;	_memcmp.c:38: return(0);
      00001A 90 00 00         [24]  129 	mov	dptr,#0x0000
      00001D 02r00rED         [24]  130 	ljmp	00107$
                                    131 ;	_memcmp.c:40: while ( --count && *((char *)buf1) == *((char *)buf2) ) {
      000020                        132 00112$:
      000020 E5*00            [12]  133 	mov	a,_bp
      000022 24 F8            [12]  134 	add	a,#0xf8
      000024 F8               [12]  135 	mov	r0,a
      000025 86 03            [24]  136 	mov	ar3,@r0
      000027 08               [12]  137 	inc	r0
      000028 86 04            [24]  138 	mov	ar4,@r0
      00002A                        139 00104$:
      00002A 1B               [12]  140 	dec	r3
      00002B BB FF 01         [24]  141 	cjne	r3,#0xFF,00123$
      00002E 1C               [12]  142 	dec	r4
      00002F                        143 00123$:
      00002F EB               [12]  144 	mov	a,r3
      000030 4C               [12]  145 	orl	a,r4
      000031 70 03            [24]  146 	jnz	00124$
      000033 02r00rBD         [24]  147 	ljmp	00106$
      000036                        148 00124$:
      000036 C0 03            [24]  149 	push	ar3
      000038 C0 04            [24]  150 	push	ar4
      00003A A8*00            [24]  151 	mov	r0,_bp
      00003C 08               [12]  152 	inc	r0
      00003D A6 05            [24]  153 	mov	@r0,ar5
      00003F 08               [12]  154 	inc	r0
      000040 A6 06            [24]  155 	mov	@r0,ar6
      000042 08               [12]  156 	inc	r0
      000043 A6 07            [24]  157 	mov	@r0,ar7
      000045 A8*00            [24]  158 	mov	r0,_bp
      000047 08               [12]  159 	inc	r0
      000048 86 82            [24]  160 	mov	dpl,@r0
      00004A 08               [12]  161 	inc	r0
      00004B 86 83            [24]  162 	mov	dph,@r0
      00004D 08               [12]  163 	inc	r0
      00004E 86 F0            [24]  164 	mov	b,@r0
      000050 12r00r00         [24]  165 	lcall	__gptrget
      000053 FA               [12]  166 	mov	r2,a
      000054 E5*00            [12]  167 	mov	a,_bp
      000056 24 FA            [12]  168 	add	a,#0xfa
      000058 F8               [12]  169 	mov	r0,a
      000059 E5*00            [12]  170 	mov	a,_bp
      00005B 24 04            [12]  171 	add	a,#0x04
      00005D F9               [12]  172 	mov	r1,a
      00005E E6               [12]  173 	mov	a,@r0
      00005F F7               [12]  174 	mov	@r1,a
      000060 08               [12]  175 	inc	r0
      000061 09               [12]  176 	inc	r1
      000062 E6               [12]  177 	mov	a,@r0
      000063 F7               [12]  178 	mov	@r1,a
      000064 08               [12]  179 	inc	r0
      000065 09               [12]  180 	inc	r1
      000066 E6               [12]  181 	mov	a,@r0
      000067 F7               [12]  182 	mov	@r1,a
      000068 E5*00            [12]  183 	mov	a,_bp
      00006A 24 04            [12]  184 	add	a,#0x04
      00006C F8               [12]  185 	mov	r0,a
      00006D 86 82            [24]  186 	mov	dpl,@r0
      00006F 08               [12]  187 	inc	r0
      000070 86 83            [24]  188 	mov	dph,@r0
      000072 08               [12]  189 	inc	r0
      000073 86 F0            [24]  190 	mov	b,@r0
      000075 12r00r00         [24]  191 	lcall	__gptrget
      000078 FC               [12]  192 	mov	r4,a
      000079 EA               [12]  193 	mov	a,r2
      00007A B5 04 02         [24]  194 	cjne	a,ar4,00125$
      00007D 80 06            [24]  195 	sjmp	00126$
      00007F                        196 00125$:
      00007F D0 04            [24]  197 	pop	ar4
      000081 D0 03            [24]  198 	pop	ar3
      000083 80 38            [24]  199 	sjmp	00106$
      000085                        200 00126$:
                                    201 ;	_memcmp.c:41: buf1 = (char *)buf1 + 1;
      000085 A8*00            [24]  202 	mov	r0,_bp
      000087 08               [12]  203 	inc	r0
      000088 74 01            [12]  204 	mov	a,#0x01
      00008A 26               [12]  205 	add	a,@r0
      00008B FA               [12]  206 	mov	r2,a
      00008C E4               [12]  207 	clr	a
      00008D 08               [12]  208 	inc	r0
      00008E 36               [12]  209 	addc	a,@r0
      00008F FB               [12]  210 	mov	r3,a
      000090 08               [12]  211 	inc	r0
      000091 86 04            [24]  212 	mov	ar4,@r0
      000093 8A 05            [24]  213 	mov	ar5,r2
      000095 8B 06            [24]  214 	mov	ar6,r3
      000097 8C 07            [24]  215 	mov	ar7,r4
                                    216 ;	_memcmp.c:42: buf2 = (char *)buf2 + 1;
      000099 E5*00            [12]  217 	mov	a,_bp
      00009B 24 04            [12]  218 	add	a,#0x04
      00009D F8               [12]  219 	mov	r0,a
      00009E 74 01            [12]  220 	mov	a,#0x01
      0000A0 26               [12]  221 	add	a,@r0
      0000A1 FA               [12]  222 	mov	r2,a
      0000A2 E4               [12]  223 	clr	a
      0000A3 08               [12]  224 	inc	r0
      0000A4 36               [12]  225 	addc	a,@r0
      0000A5 FB               [12]  226 	mov	r3,a
      0000A6 08               [12]  227 	inc	r0
      0000A7 86 04            [24]  228 	mov	ar4,@r0
      0000A9 E5*00            [12]  229 	mov	a,_bp
      0000AB 24 FA            [12]  230 	add	a,#0xfa
      0000AD F8               [12]  231 	mov	r0,a
      0000AE A6 02            [24]  232 	mov	@r0,ar2
      0000B0 08               [12]  233 	inc	r0
      0000B1 A6 03            [24]  234 	mov	@r0,ar3
      0000B3 08               [12]  235 	inc	r0
      0000B4 A6 04            [24]  236 	mov	@r0,ar4
      0000B6 D0 04            [24]  237 	pop	ar4
      0000B8 D0 03            [24]  238 	pop	ar3
      0000BA 02r00r2A         [24]  239 	ljmp	00104$
      0000BD                        240 00106$:
                                    241 ;	_memcmp.c:45: return( *((unsigned char *)buf1) - *((unsigned char *)buf2) );
      0000BD 8D 82            [24]  242 	mov	dpl,r5
      0000BF 8E 83            [24]  243 	mov	dph,r6
      0000C1 8F F0            [24]  244 	mov	b,r7
      0000C3 12r00r00         [24]  245 	lcall	__gptrget
      0000C6 FD               [12]  246 	mov	r5,a
      0000C7 7F 00            [12]  247 	mov	r7,#0x00
      0000C9 E5*00            [12]  248 	mov	a,_bp
      0000CB 24 FA            [12]  249 	add	a,#0xfa
      0000CD F8               [12]  250 	mov	r0,a
      0000CE 86 03            [24]  251 	mov	ar3,@r0
      0000D0 08               [12]  252 	inc	r0
      0000D1 86 04            [24]  253 	mov	ar4,@r0
      0000D3 08               [12]  254 	inc	r0
      0000D4 86 06            [24]  255 	mov	ar6,@r0
      0000D6 8B 82            [24]  256 	mov	dpl,r3
      0000D8 8C 83            [24]  257 	mov	dph,r4
      0000DA 8E F0            [24]  258 	mov	b,r6
      0000DC 12r00r00         [24]  259 	lcall	__gptrget
      0000DF FB               [12]  260 	mov	r3,a
      0000E0 7E 00            [12]  261 	mov	r6,#0x00
      0000E2 ED               [12]  262 	mov	a,r5
      0000E3 C3               [12]  263 	clr	c
      0000E4 9B               [12]  264 	subb	a,r3
      0000E5 FD               [12]  265 	mov	r5,a
      0000E6 EF               [12]  266 	mov	a,r7
      0000E7 9E               [12]  267 	subb	a,r6
      0000E8 FF               [12]  268 	mov	r7,a
      0000E9 8D 82            [24]  269 	mov	dpl,r5
      0000EB 8F 83            [24]  270 	mov	dph,r7
      0000ED                        271 00107$:
      0000ED 85*00 81         [24]  272 	mov	sp,_bp
      0000F0 D0*00            [24]  273 	pop	_bp
      0000F2 02r00r00         [24]  274 	ljmp	__sdcc_banked_ret
                                    275 	.area CSEG    (CODE)
                                    276 	.area CONST   (CODE)
                                    277 	.area XINIT   (CODE)
                                    278 	.area CABS    (ABS,CODE)
