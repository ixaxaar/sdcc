                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:13 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sincoshf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincoshf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincoshf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscosh                    Allocated to stack - _bp -5
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;y                         Allocated to registers r7 r6 r5 r4 
                                    111 ;w                         Allocated to registers r7 r6 r5 r4 
                                    112 ;z                         Allocated to stack - _bp +9
                                    113 ;sign                      Allocated to registers b0 
                                    114 ;sloc0                     Allocated to stack - _bp +5
                                    115 ;------------------------------------------------------------
                                    116 ;	sincoshf.c:56: float sincoshf(const float x, const int iscosh)
                                    117 ;	-----------------------------------------
                                    118 ;	 function sincoshf
                                    119 ;	-----------------------------------------
      000000                        120 _sincoshf:
                           000007   121 	ar7 = 0x07
                           000006   122 	ar6 = 0x06
                           000005   123 	ar5 = 0x05
                           000004   124 	ar4 = 0x04
                           000003   125 	ar3 = 0x03
                           000002   126 	ar2 = 0x02
                           000001   127 	ar1 = 0x01
                           000000   128 	ar0 = 0x00
      000000 C0*00            [24]  129 	push	_bp
      000002 85 81*00         [24]  130 	mov	_bp,sp
      000005 C0 82            [24]  131 	push	dpl
      000007 C0 83            [24]  132 	push	dph
      000009 C0 F0            [24]  133 	push	b
      00000B C0 E0            [24]  134 	push	acc
      00000D E5 81            [12]  135 	mov	a,sp
      00000F 24 08            [12]  136 	add	a,#0x08
      000011 F5 81            [12]  137 	mov	sp,a
                                    138 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      000013 E4               [12]  139 	clr	a
      000014 C0 E0            [24]  140 	push	acc
      000016 C0 E0            [24]  141 	push	acc
      000018 C0 E0            [24]  142 	push	acc
      00001A C0 E0            [24]  143 	push	acc
      00001C A8*00            [24]  144 	mov	r0,_bp
      00001E 08               [12]  145 	inc	r0
      00001F 86 82            [24]  146 	mov	dpl,@r0
      000021 08               [12]  147 	inc	r0
      000022 86 83            [24]  148 	mov	dph,@r0
      000024 08               [12]  149 	inc	r0
      000025 86 F0            [24]  150 	mov	b,@r0
      000027 08               [12]  151 	inc	r0
      000028 E6               [12]  152 	mov	a,@r0
      000029 12r00r00         [24]  153 	lcall	___fslt
      00002C AB 82            [24]  154 	mov	r3,dpl
      00002E E5 81            [12]  155 	mov	a,sp
      000030 24 FC            [12]  156 	add	a,#0xfc
      000032 F5 81            [12]  157 	mov	sp,a
      000034 EB               [12]  158 	mov	a,r3
      000035 60 14            [24]  159 	jz	00102$
      000037 A8*00            [24]  160 	mov	r0,_bp
      000039 08               [12]  161 	inc	r0
      00003A 86 07            [24]  162 	mov	ar7,@r0
      00003C 08               [12]  163 	inc	r0
      00003D 86 06            [24]  164 	mov	ar6,@r0
      00003F 08               [12]  165 	inc	r0
      000040 86 05            [24]  166 	mov	ar5,@r0
      000042 08               [12]  167 	inc	r0
      000043 E6               [12]  168 	mov	a,@r0
      000044 B2 E7            [12]  169 	cpl	acc.7
      000046 FC               [12]  170 	mov	r4,a
      000047 D2*00            [12]  171 	setb	b0
      000049 80 10            [24]  172 	sjmp	00103$
      00004B                        173 00102$:
                                    174 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00004B A8*00            [24]  175 	mov	r0,_bp
      00004D 08               [12]  176 	inc	r0
      00004E 86 07            [24]  177 	mov	ar7,@r0
      000050 08               [12]  178 	inc	r0
      000051 86 06            [24]  179 	mov	ar6,@r0
      000053 08               [12]  180 	inc	r0
      000054 86 05            [24]  181 	mov	ar5,@r0
      000056 08               [12]  182 	inc	r0
      000057 86 04            [24]  183 	mov	ar4,@r0
      000059 C2*00            [12]  184 	clr	b0
      00005B                        185 00103$:
                                    186 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      00005B C0 07            [24]  187 	push	ar7
      00005D C0 06            [24]  188 	push	ar6
      00005F C0 05            [24]  189 	push	ar5
      000061 C0 04            [24]  190 	push	ar4
      000063 C0*00            [24]  191 	push	bits
      000065 E4               [12]  192 	clr	a
      000066 C0 E0            [24]  193 	push	acc
      000068 C0 E0            [24]  194 	push	acc
      00006A 74 80            [12]  195 	mov	a,#0x80
      00006C C0 E0            [24]  196 	push	acc
      00006E 74 3F            [12]  197 	mov	a,#0x3F
      000070 C0 E0            [24]  198 	push	acc
      000072 8F 82            [24]  199 	mov	dpl,r7
      000074 8E 83            [24]  200 	mov	dph,r6
      000076 8D F0            [24]  201 	mov	b,r5
      000078 EC               [12]  202 	mov	a,r4
      000079 12r00r00         [24]  203 	lcall	___fsgt
      00007C AB 82            [24]  204 	mov	r3,dpl
      00007E E5 81            [12]  205 	mov	a,sp
      000080 24 FC            [12]  206 	add	a,#0xfc
      000082 F5 81            [12]  207 	mov	sp,a
      000084 D0*00            [24]  208 	pop	bits
      000086 D0 04            [24]  209 	pop	ar4
      000088 D0 05            [24]  210 	pop	ar5
      00008A D0 06            [24]  211 	pop	ar6
      00008C D0 07            [24]  212 	pop	ar7
      00008E EB               [12]  213 	mov	a,r3
      00008F 70 0D            [24]  214 	jnz	00117$
      000091 E5*00            [12]  215 	mov	a,_bp
      000093 24 FB            [12]  216 	add	a,#0xfb
      000095 F8               [12]  217 	mov	r0,a
      000096 E6               [12]  218 	mov	a,@r0
      000097 08               [12]  219 	inc	r0
      000098 46               [12]  220 	orl	a,@r0
      000099 70 03            [24]  221 	jnz	00146$
      00009B 02r02rEB         [24]  222 	ljmp	00118$
      00009E                        223 00146$:
      00009E                        224 00117$:
                                    225 ;	sincoshf.c:66: if(y>YBAR)
      00009E C0 07            [24]  226 	push	ar7
      0000A0 C0 06            [24]  227 	push	ar6
      0000A2 C0 05            [24]  228 	push	ar5
      0000A4 C0 04            [24]  229 	push	ar4
      0000A6 C0*00            [24]  230 	push	bits
      0000A8 E4               [12]  231 	clr	a
      0000A9 C0 E0            [24]  232 	push	acc
      0000AB C0 E0            [24]  233 	push	acc
      0000AD 74 10            [12]  234 	mov	a,#0x10
      0000AF C0 E0            [24]  235 	push	acc
      0000B1 74 41            [12]  236 	mov	a,#0x41
      0000B3 C0 E0            [24]  237 	push	acc
      0000B5 8F 82            [24]  238 	mov	dpl,r7
      0000B7 8E 83            [24]  239 	mov	dph,r6
      0000B9 8D F0            [24]  240 	mov	b,r5
      0000BB EC               [12]  241 	mov	a,r4
      0000BC 12r00r00         [24]  242 	lcall	___fsgt
      0000BF AB 82            [24]  243 	mov	r3,dpl
      0000C1 E5 81            [12]  244 	mov	a,sp
      0000C3 24 FC            [12]  245 	add	a,#0xfc
      0000C5 F5 81            [12]  246 	mov	sp,a
      0000C7 D0*00            [24]  247 	pop	bits
      0000C9 D0 04            [24]  248 	pop	ar4
      0000CB D0 05            [24]  249 	pop	ar5
      0000CD D0 06            [24]  250 	pop	ar6
      0000CF D0 07            [24]  251 	pop	ar7
      0000D1 EB               [12]  252 	mov	a,r3
      0000D2 70 03            [24]  253 	jnz	00147$
      0000D4 02r01rEF         [24]  254 	ljmp	00110$
      0000D7                        255 00147$:
                                    256 ;	sincoshf.c:68: w=y-K1;
      0000D7 C0*00            [24]  257 	push	bits
      0000D9 E4               [12]  258 	clr	a
      0000DA C0 E0            [24]  259 	push	acc
      0000DC 74 73            [12]  260 	mov	a,#0x73
      0000DE C0 E0            [24]  261 	push	acc
      0000E0 74 31            [12]  262 	mov	a,#0x31
      0000E2 C0 E0            [24]  263 	push	acc
      0000E4 74 3F            [12]  264 	mov	a,#0x3F
      0000E6 C0 E0            [24]  265 	push	acc
      0000E8 8F 82            [24]  266 	mov	dpl,r7
      0000EA 8E 83            [24]  267 	mov	dph,r6
      0000EC 8D F0            [24]  268 	mov	b,r5
      0000EE EC               [12]  269 	mov	a,r4
      0000EF 12r00r00         [24]  270 	lcall	___fssub
      0000F2 AF 82            [24]  271 	mov	r7,dpl
      0000F4 AE 83            [24]  272 	mov	r6,dph
      0000F6 AD F0            [24]  273 	mov	r5,b
      0000F8 FC               [12]  274 	mov	r4,a
      0000F9 E5 81            [12]  275 	mov	a,sp
      0000FB 24 FC            [12]  276 	add	a,#0xfc
      0000FD F5 81            [12]  277 	mov	sp,a
      0000FF D0*00            [24]  278 	pop	bits
                                    279 ;	sincoshf.c:69: if (w>WMAX)
      000101 C0 07            [24]  280 	push	ar7
      000103 C0 06            [24]  281 	push	ar6
      000105 C0 05            [24]  282 	push	ar5
      000107 C0 04            [24]  283 	push	ar4
      000109 C0*00            [24]  284 	push	bits
      00010B 74 CF            [12]  285 	mov	a,#0xCF
      00010D C0 E0            [24]  286 	push	acc
      00010F 74 BD            [12]  287 	mov	a,#0xBD
      000111 C0 E0            [24]  288 	push	acc
      000113 74 33            [12]  289 	mov	a,#0x33
      000115 C0 E0            [24]  290 	push	acc
      000117 74 42            [12]  291 	mov	a,#0x42
      000119 C0 E0            [24]  292 	push	acc
      00011B 8F 82            [24]  293 	mov	dpl,r7
      00011D 8E 83            [24]  294 	mov	dph,r6
      00011F 8D F0            [24]  295 	mov	b,r5
      000121 EC               [12]  296 	mov	a,r4
      000122 12r00r00         [24]  297 	lcall	___fsgt
      000125 AB 82            [24]  298 	mov	r3,dpl
      000127 E5 81            [12]  299 	mov	a,sp
      000129 24 FC            [12]  300 	add	a,#0xfc
      00012B F5 81            [12]  301 	mov	sp,a
      00012D D0*00            [24]  302 	pop	bits
      00012F D0 04            [24]  303 	pop	ar4
      000131 D0 05            [24]  304 	pop	ar5
      000133 D0 06            [24]  305 	pop	ar6
      000135 D0 07            [24]  306 	pop	ar7
      000137 EB               [12]  307 	mov	a,r3
      000138 60 1C            [24]  308 	jz	00105$
                                    309 ;	sincoshf.c:71: errno=ERANGE;
      00013A 90r00r00         [24]  310 	mov	dptr,#_errno
      00013D 74 22            [12]  311 	mov	a,#0x22
      00013F F0               [24]  312 	movx	@dptr,a
      000140 E4               [12]  313 	clr	a
      000141 A3               [24]  314 	inc	dptr
      000142 F0               [24]  315 	movx	@dptr,a
                                    316 ;	sincoshf.c:72: z=HUGE_VALF;
      000143 E5*00            [12]  317 	mov	a,_bp
      000145 24 09            [12]  318 	add	a,#0x09
      000147 F8               [12]  319 	mov	r0,a
      000148 76 FF            [12]  320 	mov	@r0,#0xFF
      00014A 08               [12]  321 	inc	r0
      00014B 76 FF            [12]  322 	mov	@r0,#0xFF
      00014D 08               [12]  323 	inc	r0
      00014E 76 7F            [12]  324 	mov	@r0,#0x7F
      000150 08               [12]  325 	inc	r0
      000151 76 7F            [12]  326 	mov	@r0,#0x7F
      000153 02r02rD0         [24]  327 	ljmp	00111$
      000156                        328 00105$:
                                    329 ;	sincoshf.c:76: z=expf(w);
      000156 8F 82            [24]  330 	mov	dpl,r7
      000158 8E 83            [24]  331 	mov	dph,r6
      00015A 8D F0            [24]  332 	mov	b,r5
      00015C EC               [12]  333 	mov	a,r4
      00015D C0*00            [24]  334 	push	bits
      00015F 78r00            [12]  335 	mov	r0,#_expf
      000161 79s00            [12]  336 	mov	r1,#(_expf >> 8)
      000163 7As00            [12]  337 	mov	r2,#(_expf >> 16)
      000165 12r00r00         [24]  338 	lcall	__sdcc_banked_call
      000168 AF 82            [24]  339 	mov	r7,dpl
      00016A AE 83            [24]  340 	mov	r6,dph
      00016C AD F0            [24]  341 	mov	r5,b
      00016E FC               [12]  342 	mov	r4,a
      00016F D0*00            [24]  343 	pop	bits
      000171 E5*00            [12]  344 	mov	a,_bp
      000173 24 09            [12]  345 	add	a,#0x09
      000175 F8               [12]  346 	mov	r0,a
      000176 A6 07            [24]  347 	mov	@r0,ar7
      000178 08               [12]  348 	inc	r0
      000179 A6 06            [24]  349 	mov	@r0,ar6
      00017B 08               [12]  350 	inc	r0
      00017C A6 05            [24]  351 	mov	@r0,ar5
      00017E 08               [12]  352 	inc	r0
      00017F A6 04            [24]  353 	mov	@r0,ar4
                                    354 ;	sincoshf.c:77: z+=K3*z;
      000181 C0*00            [24]  355 	push	bits
      000183 E5*00            [12]  356 	mov	a,_bp
      000185 24 09            [12]  357 	add	a,#0x09
      000187 F8               [12]  358 	mov	r0,a
      000188 E6               [12]  359 	mov	a,@r0
      000189 C0 E0            [24]  360 	push	acc
      00018B 08               [12]  361 	inc	r0
      00018C E6               [12]  362 	mov	a,@r0
      00018D C0 E0            [24]  363 	push	acc
      00018F 08               [12]  364 	inc	r0
      000190 E6               [12]  365 	mov	a,@r0
      000191 C0 E0            [24]  366 	push	acc
      000193 08               [12]  367 	inc	r0
      000194 E6               [12]  368 	mov	a,@r0
      000195 C0 E0            [24]  369 	push	acc
      000197 90 08 97         [24]  370 	mov	dptr,#0x0897
      00019A 75 F0 68         [24]  371 	mov	b,#0x68
      00019D 74 37            [12]  372 	mov	a,#0x37
      00019F 12r00r00         [24]  373 	lcall	___fsmul
      0001A2 AF 82            [24]  374 	mov	r7,dpl
      0001A4 AE 83            [24]  375 	mov	r6,dph
      0001A6 AD F0            [24]  376 	mov	r5,b
      0001A8 FC               [12]  377 	mov	r4,a
      0001A9 E5 81            [12]  378 	mov	a,sp
      0001AB 24 FC            [12]  379 	add	a,#0xfc
      0001AD F5 81            [12]  380 	mov	sp,a
      0001AF D0*00            [24]  381 	pop	bits
      0001B1 C0*00            [24]  382 	push	bits
      0001B3 C0 07            [24]  383 	push	ar7
      0001B5 C0 06            [24]  384 	push	ar6
      0001B7 C0 05            [24]  385 	push	ar5
      0001B9 C0 04            [24]  386 	push	ar4
      0001BB E5*00            [12]  387 	mov	a,_bp
      0001BD 24 09            [12]  388 	add	a,#0x09
      0001BF F8               [12]  389 	mov	r0,a
      0001C0 86 82            [24]  390 	mov	dpl,@r0
      0001C2 08               [12]  391 	inc	r0
      0001C3 86 83            [24]  392 	mov	dph,@r0
      0001C5 08               [12]  393 	inc	r0
      0001C6 86 F0            [24]  394 	mov	b,@r0
      0001C8 08               [12]  395 	inc	r0
      0001C9 E6               [12]  396 	mov	a,@r0
      0001CA 12r00r00         [24]  397 	lcall	___fsadd
      0001CD AF 82            [24]  398 	mov	r7,dpl
      0001CF AE 83            [24]  399 	mov	r6,dph
      0001D1 AD F0            [24]  400 	mov	r5,b
      0001D3 FC               [12]  401 	mov	r4,a
      0001D4 E5 81            [12]  402 	mov	a,sp
      0001D6 24 FC            [12]  403 	add	a,#0xfc
      0001D8 F5 81            [12]  404 	mov	sp,a
      0001DA D0*00            [24]  405 	pop	bits
      0001DC E5*00            [12]  406 	mov	a,_bp
      0001DE 24 09            [12]  407 	add	a,#0x09
      0001E0 F8               [12]  408 	mov	r0,a
      0001E1 A6 07            [24]  409 	mov	@r0,ar7
      0001E3 08               [12]  410 	inc	r0
      0001E4 A6 06            [24]  411 	mov	@r0,ar6
      0001E6 08               [12]  412 	inc	r0
      0001E7 A6 05            [24]  413 	mov	@r0,ar5
      0001E9 08               [12]  414 	inc	r0
      0001EA A6 04            [24]  415 	mov	@r0,ar4
      0001EC 02r02rD0         [24]  416 	ljmp	00111$
      0001EF                        417 00110$:
                                    418 ;	sincoshf.c:82: z=expf(y);
      0001EF 8F 82            [24]  419 	mov	dpl,r7
      0001F1 8E 83            [24]  420 	mov	dph,r6
      0001F3 8D F0            [24]  421 	mov	b,r5
      0001F5 EC               [12]  422 	mov	a,r4
      0001F6 C0*00            [24]  423 	push	bits
      0001F8 78r00            [12]  424 	mov	r0,#_expf
      0001FA 79s00            [12]  425 	mov	r1,#(_expf >> 8)
      0001FC 7As00            [12]  426 	mov	r2,#(_expf >> 16)
      0001FE 12r00r00         [24]  427 	lcall	__sdcc_banked_call
      000201 AF 82            [24]  428 	mov	r7,dpl
      000203 AE 83            [24]  429 	mov	r6,dph
      000205 AD F0            [24]  430 	mov	r5,b
      000207 FC               [12]  431 	mov	r4,a
      000208 D0*00            [24]  432 	pop	bits
      00020A E5*00            [12]  433 	mov	a,_bp
      00020C 24 09            [12]  434 	add	a,#0x09
      00020E F8               [12]  435 	mov	r0,a
      00020F A6 07            [24]  436 	mov	@r0,ar7
      000211 08               [12]  437 	inc	r0
      000212 A6 06            [24]  438 	mov	@r0,ar6
      000214 08               [12]  439 	inc	r0
      000215 A6 05            [24]  440 	mov	@r0,ar5
      000217 08               [12]  441 	inc	r0
      000218 A6 04            [24]  442 	mov	@r0,ar4
                                    443 ;	sincoshf.c:83: w=1.0/z;
      00021A C0*00            [24]  444 	push	bits
      00021C E5*00            [12]  445 	mov	a,_bp
      00021E 24 09            [12]  446 	add	a,#0x09
      000220 F8               [12]  447 	mov	r0,a
      000221 E6               [12]  448 	mov	a,@r0
      000222 C0 E0            [24]  449 	push	acc
      000224 08               [12]  450 	inc	r0
      000225 E6               [12]  451 	mov	a,@r0
      000226 C0 E0            [24]  452 	push	acc
      000228 08               [12]  453 	inc	r0
      000229 E6               [12]  454 	mov	a,@r0
      00022A C0 E0            [24]  455 	push	acc
      00022C 08               [12]  456 	inc	r0
      00022D E6               [12]  457 	mov	a,@r0
      00022E C0 E0            [24]  458 	push	acc
      000230 90 00 00         [24]  459 	mov	dptr,#0x0000
      000233 75 F0 80         [24]  460 	mov	b,#0x80
      000236 74 3F            [12]  461 	mov	a,#0x3F
      000238 12r00r00         [24]  462 	lcall	___fsdiv
      00023B C8               [12]  463 	xch	a,r0
      00023C E5*00            [12]  464 	mov	a,_bp
      00023E 24 05            [12]  465 	add	a,#0x05
      000240 C8               [12]  466 	xch	a,r0
      000241 A6 82            [24]  467 	mov	@r0,dpl
      000243 08               [12]  468 	inc	r0
      000244 A6 83            [24]  469 	mov	@r0,dph
      000246 08               [12]  470 	inc	r0
      000247 A6 F0            [24]  471 	mov	@r0,b
      000249 08               [12]  472 	inc	r0
      00024A F6               [12]  473 	mov	@r0,a
      00024B E5 81            [12]  474 	mov	a,sp
      00024D 24 FC            [12]  475 	add	a,#0xfc
      00024F F5 81            [12]  476 	mov	sp,a
      000251 D0*00            [24]  477 	pop	bits
      000253 E5*00            [12]  478 	mov	a,_bp
      000255 24 05            [12]  479 	add	a,#0x05
      000257 F8               [12]  480 	mov	r0,a
      000258 86 07            [24]  481 	mov	ar7,@r0
      00025A 08               [12]  482 	inc	r0
      00025B 86 06            [24]  483 	mov	ar6,@r0
      00025D 08               [12]  484 	inc	r0
      00025E 86 05            [24]  485 	mov	ar5,@r0
      000260 08               [12]  486 	inc	r0
      000261 86 04            [24]  487 	mov	ar4,@r0
                                    488 ;	sincoshf.c:84: if(!iscosh) w=-w;
      000263 E5*00            [12]  489 	mov	a,_bp
      000265 24 FB            [12]  490 	add	a,#0xfb
      000267 F8               [12]  491 	mov	r0,a
      000268 E6               [12]  492 	mov	a,@r0
      000269 08               [12]  493 	inc	r0
      00026A 46               [12]  494 	orl	a,@r0
      00026B 70 04            [24]  495 	jnz	00108$
      00026D EC               [12]  496 	mov	a,r4
      00026E B2 E7            [12]  497 	cpl	acc.7
      000270 FC               [12]  498 	mov	r4,a
      000271                        499 00108$:
                                    500 ;	sincoshf.c:85: z=(z+w)*0.5;
      000271 C0*00            [24]  501 	push	bits
      000273 C0 07            [24]  502 	push	ar7
      000275 C0 06            [24]  503 	push	ar6
      000277 C0 05            [24]  504 	push	ar5
      000279 C0 04            [24]  505 	push	ar4
      00027B E5*00            [12]  506 	mov	a,_bp
      00027D 24 09            [12]  507 	add	a,#0x09
      00027F F8               [12]  508 	mov	r0,a
      000280 86 82            [24]  509 	mov	dpl,@r0
      000282 08               [12]  510 	inc	r0
      000283 86 83            [24]  511 	mov	dph,@r0
      000285 08               [12]  512 	inc	r0
      000286 86 F0            [24]  513 	mov	b,@r0
      000288 08               [12]  514 	inc	r0
      000289 E6               [12]  515 	mov	a,@r0
      00028A 12r00r00         [24]  516 	lcall	___fsadd
      00028D AF 82            [24]  517 	mov	r7,dpl
      00028F AE 83            [24]  518 	mov	r6,dph
      000291 AD F0            [24]  519 	mov	r5,b
      000293 FC               [12]  520 	mov	r4,a
      000294 E5 81            [12]  521 	mov	a,sp
      000296 24 FC            [12]  522 	add	a,#0xfc
      000298 F5 81            [12]  523 	mov	sp,a
      00029A D0*00            [24]  524 	pop	bits
      00029C C0*00            [24]  525 	push	bits
      00029E C0 07            [24]  526 	push	ar7
      0002A0 C0 06            [24]  527 	push	ar6
      0002A2 C0 05            [24]  528 	push	ar5
      0002A4 C0 04            [24]  529 	push	ar4
      0002A6 90 00 00         [24]  530 	mov	dptr,#(0x00&0x00ff)
      0002A9 E4               [12]  531 	clr	a
      0002AA F5 F0            [12]  532 	mov	b,a
      0002AC 74 3F            [12]  533 	mov	a,#0x3F
      0002AE 12r00r00         [24]  534 	lcall	___fsmul
      0002B1 AF 82            [24]  535 	mov	r7,dpl
      0002B3 AE 83            [24]  536 	mov	r6,dph
      0002B5 AD F0            [24]  537 	mov	r5,b
      0002B7 FC               [12]  538 	mov	r4,a
      0002B8 E5 81            [12]  539 	mov	a,sp
      0002BA 24 FC            [12]  540 	add	a,#0xfc
      0002BC F5 81            [12]  541 	mov	sp,a
      0002BE D0*00            [24]  542 	pop	bits
      0002C0 E5*00            [12]  543 	mov	a,_bp
      0002C2 24 09            [12]  544 	add	a,#0x09
      0002C4 F8               [12]  545 	mov	r0,a
      0002C5 A6 07            [24]  546 	mov	@r0,ar7
      0002C7 08               [12]  547 	inc	r0
      0002C8 A6 06            [24]  548 	mov	@r0,ar6
      0002CA 08               [12]  549 	inc	r0
      0002CB A6 05            [24]  550 	mov	@r0,ar5
      0002CD 08               [12]  551 	inc	r0
      0002CE A6 04            [24]  552 	mov	@r0,ar4
      0002D0                        553 00111$:
                                    554 ;	sincoshf.c:87: if(sign) z=-z;
      0002D0 20*00 03         [24]  555 	jb	b0,00150$
      0002D3 02r04rAD         [24]  556 	ljmp	00119$
      0002D6                        557 00150$:
      0002D6 E5*00            [12]  558 	mov	a,_bp
      0002D8 24 09            [12]  559 	add	a,#0x09
      0002DA F8               [12]  560 	mov	r0,a
      0002DB E6               [12]  561 	mov	a,@r0
      0002DC F6               [12]  562 	mov	@r0,a
      0002DD 08               [12]  563 	inc	r0
      0002DE E6               [12]  564 	mov	a,@r0
      0002DF F6               [12]  565 	mov	@r0,a
      0002E0 08               [12]  566 	inc	r0
      0002E1 E6               [12]  567 	mov	a,@r0
      0002E2 F6               [12]  568 	mov	@r0,a
      0002E3 08               [12]  569 	inc	r0
      0002E4 E6               [12]  570 	mov	a,@r0
      0002E5 B2 E7            [12]  571 	cpl	acc.7
      0002E7 F6               [12]  572 	mov	@r0,a
      0002E8 02r04rAD         [24]  573 	ljmp	00119$
      0002EB                        574 00118$:
                                    575 ;	sincoshf.c:91: if (y<EPS)
      0002EB E4               [12]  576 	clr	a
      0002EC C0 E0            [24]  577 	push	acc
      0002EE C0 E0            [24]  578 	push	acc
      0002F0 74 80            [12]  579 	mov	a,#0x80
      0002F2 C0 E0            [24]  580 	push	acc
      0002F4 74 39            [12]  581 	mov	a,#0x39
      0002F6 C0 E0            [24]  582 	push	acc
      0002F8 8F 82            [24]  583 	mov	dpl,r7
      0002FA 8E 83            [24]  584 	mov	dph,r6
      0002FC 8D F0            [24]  585 	mov	b,r5
      0002FE EC               [12]  586 	mov	a,r4
      0002FF 12r00r00         [24]  587 	lcall	___fslt
      000302 AB 82            [24]  588 	mov	r3,dpl
      000304 E5 81            [12]  589 	mov	a,sp
      000306 24 FC            [12]  590 	add	a,#0xfc
      000308 F5 81            [12]  591 	mov	sp,a
      00030A EB               [12]  592 	mov	a,r3
      00030B 60 19            [24]  593 	jz	00115$
                                    594 ;	sincoshf.c:92: z=x;
      00030D A8*00            [24]  595 	mov	r0,_bp
      00030F 08               [12]  596 	inc	r0
      000310 E5*00            [12]  597 	mov	a,_bp
      000312 24 09            [12]  598 	add	a,#0x09
      000314 F9               [12]  599 	mov	r1,a
      000315 E6               [12]  600 	mov	a,@r0
      000316 F7               [12]  601 	mov	@r1,a
      000317 08               [12]  602 	inc	r0
      000318 09               [12]  603 	inc	r1
      000319 E6               [12]  604 	mov	a,@r0
      00031A F7               [12]  605 	mov	@r1,a
      00031B 08               [12]  606 	inc	r0
      00031C 09               [12]  607 	inc	r1
      00031D E6               [12]  608 	mov	a,@r0
      00031E F7               [12]  609 	mov	@r1,a
      00031F 08               [12]  610 	inc	r0
      000320 09               [12]  611 	inc	r1
      000321 E6               [12]  612 	mov	a,@r0
      000322 F7               [12]  613 	mov	@r1,a
      000323 02r04rAD         [24]  614 	ljmp	00119$
      000326                        615 00115$:
                                    616 ;	sincoshf.c:95: z=x*x;
      000326 A8*00            [24]  617 	mov	r0,_bp
      000328 08               [12]  618 	inc	r0
      000329 E6               [12]  619 	mov	a,@r0
      00032A C0 E0            [24]  620 	push	acc
      00032C 08               [12]  621 	inc	r0
      00032D E6               [12]  622 	mov	a,@r0
      00032E C0 E0            [24]  623 	push	acc
      000330 08               [12]  624 	inc	r0
      000331 E6               [12]  625 	mov	a,@r0
      000332 C0 E0            [24]  626 	push	acc
      000334 08               [12]  627 	inc	r0
      000335 E6               [12]  628 	mov	a,@r0
      000336 C0 E0            [24]  629 	push	acc
      000338 A8*00            [24]  630 	mov	r0,_bp
      00033A 08               [12]  631 	inc	r0
      00033B 86 82            [24]  632 	mov	dpl,@r0
      00033D 08               [12]  633 	inc	r0
      00033E 86 83            [24]  634 	mov	dph,@r0
      000340 08               [12]  635 	inc	r0
      000341 86 F0            [24]  636 	mov	b,@r0
      000343 08               [12]  637 	inc	r0
      000344 E6               [12]  638 	mov	a,@r0
      000345 12r00r00         [24]  639 	lcall	___fsmul
      000348 AA 82            [24]  640 	mov	r2,dpl
      00034A AB 83            [24]  641 	mov	r3,dph
      00034C AE F0            [24]  642 	mov	r6,b
      00034E FF               [12]  643 	mov	r7,a
      00034F E5 81            [12]  644 	mov	a,sp
      000351 24 FC            [12]  645 	add	a,#0xfc
      000353 F5 81            [12]  646 	mov	sp,a
      000355 E5*00            [12]  647 	mov	a,_bp
      000357 24 09            [12]  648 	add	a,#0x09
      000359 F8               [12]  649 	mov	r0,a
      00035A A6 02            [24]  650 	mov	@r0,ar2
      00035C 08               [12]  651 	inc	r0
      00035D A6 03            [24]  652 	mov	@r0,ar3
      00035F 08               [12]  653 	inc	r0
      000360 A6 06            [24]  654 	mov	@r0,ar6
      000362 08               [12]  655 	inc	r0
      000363 A6 07            [24]  656 	mov	@r0,ar7
                                    657 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      000365 E5*00            [12]  658 	mov	a,_bp
      000367 24 09            [12]  659 	add	a,#0x09
      000369 F8               [12]  660 	mov	r0,a
      00036A E6               [12]  661 	mov	a,@r0
      00036B C0 E0            [24]  662 	push	acc
      00036D 08               [12]  663 	inc	r0
      00036E E6               [12]  664 	mov	a,@r0
      00036F C0 E0            [24]  665 	push	acc
      000371 08               [12]  666 	inc	r0
      000372 E6               [12]  667 	mov	a,@r0
      000373 C0 E0            [24]  668 	push	acc
      000375 08               [12]  669 	inc	r0
      000376 E6               [12]  670 	mov	a,@r0
      000377 C0 E0            [24]  671 	push	acc
      000379 A8*00            [24]  672 	mov	r0,_bp
      00037B 08               [12]  673 	inc	r0
      00037C 86 82            [24]  674 	mov	dpl,@r0
      00037E 08               [12]  675 	inc	r0
      00037F 86 83            [24]  676 	mov	dph,@r0
      000381 08               [12]  677 	inc	r0
      000382 86 F0            [24]  678 	mov	b,@r0
      000384 08               [12]  679 	inc	r0
      000385 E6               [12]  680 	mov	a,@r0
      000386 12r00r00         [24]  681 	lcall	___fsmul
      000389 C8               [12]  682 	xch	a,r0
      00038A E5*00            [12]  683 	mov	a,_bp
      00038C 24 05            [12]  684 	add	a,#0x05
      00038E C8               [12]  685 	xch	a,r0
      00038F A6 82            [24]  686 	mov	@r0,dpl
      000391 08               [12]  687 	inc	r0
      000392 A6 83            [24]  688 	mov	@r0,dph
      000394 08               [12]  689 	inc	r0
      000395 A6 F0            [24]  690 	mov	@r0,b
      000397 08               [12]  691 	inc	r0
      000398 F6               [12]  692 	mov	@r0,a
      000399 E5 81            [12]  693 	mov	a,sp
      00039B 24 FC            [12]  694 	add	a,#0xfc
      00039D F5 81            [12]  695 	mov	sp,a
      00039F E5*00            [12]  696 	mov	a,_bp
      0003A1 24 09            [12]  697 	add	a,#0x09
      0003A3 F8               [12]  698 	mov	r0,a
      0003A4 E6               [12]  699 	mov	a,@r0
      0003A5 C0 E0            [24]  700 	push	acc
      0003A7 08               [12]  701 	inc	r0
      0003A8 E6               [12]  702 	mov	a,@r0
      0003A9 C0 E0            [24]  703 	push	acc
      0003AB 08               [12]  704 	inc	r0
      0003AC E6               [12]  705 	mov	a,@r0
      0003AD C0 E0            [24]  706 	push	acc
      0003AF 08               [12]  707 	inc	r0
      0003B0 E6               [12]  708 	mov	a,@r0
      0003B1 C0 E0            [24]  709 	push	acc
      0003B3 90 E6 EA         [24]  710 	mov	dptr,#0xE6EA
      0003B6 75 F0 42         [24]  711 	mov	b,#0x42
      0003B9 74 BE            [12]  712 	mov	a,#0xBE
      0003BB 12r00r00         [24]  713 	lcall	___fsmul
      0003BE AA 82            [24]  714 	mov	r2,dpl
      0003C0 AB 83            [24]  715 	mov	r3,dph
      0003C2 AE F0            [24]  716 	mov	r6,b
      0003C4 FF               [12]  717 	mov	r7,a
      0003C5 E5 81            [12]  718 	mov	a,sp
      0003C7 24 FC            [12]  719 	add	a,#0xfc
      0003C9 F5 81            [12]  720 	mov	sp,a
      0003CB 74 F0            [12]  721 	mov	a,#0xF0
      0003CD C0 E0            [24]  722 	push	acc
      0003CF 74 69            [12]  723 	mov	a,#0x69
      0003D1 C0 E0            [24]  724 	push	acc
      0003D3 74 E4            [12]  725 	mov	a,#0xE4
      0003D5 C0 E0            [24]  726 	push	acc
      0003D7 74 C0            [12]  727 	mov	a,#0xC0
      0003D9 C0 E0            [24]  728 	push	acc
      0003DB 8A 82            [24]  729 	mov	dpl,r2
      0003DD 8B 83            [24]  730 	mov	dph,r3
      0003DF 8E F0            [24]  731 	mov	b,r6
      0003E1 EF               [12]  732 	mov	a,r7
      0003E2 12r00r00         [24]  733 	lcall	___fsadd
      0003E5 AC 82            [24]  734 	mov	r4,dpl
      0003E7 AD 83            [24]  735 	mov	r5,dph
      0003E9 AE F0            [24]  736 	mov	r6,b
      0003EB FF               [12]  737 	mov	r7,a
      0003EC E5 81            [12]  738 	mov	a,sp
      0003EE 24 FC            [12]  739 	add	a,#0xfc
      0003F0 F5 81            [12]  740 	mov	sp,a
      0003F2 C0 04            [24]  741 	push	ar4
      0003F4 C0 05            [24]  742 	push	ar5
      0003F6 C0 06            [24]  743 	push	ar6
      0003F8 C0 07            [24]  744 	push	ar7
      0003FA E5*00            [12]  745 	mov	a,_bp
      0003FC 24 05            [12]  746 	add	a,#0x05
      0003FE F8               [12]  747 	mov	r0,a
      0003FF 86 82            [24]  748 	mov	dpl,@r0
      000401 08               [12]  749 	inc	r0
      000402 86 83            [24]  750 	mov	dph,@r0
      000404 08               [12]  751 	inc	r0
      000405 86 F0            [24]  752 	mov	b,@r0
      000407 08               [12]  753 	inc	r0
      000408 E6               [12]  754 	mov	a,@r0
      000409 12r00r00         [24]  755 	lcall	___fsmul
      00040C C8               [12]  756 	xch	a,r0
      00040D E5*00            [12]  757 	mov	a,_bp
      00040F 24 05            [12]  758 	add	a,#0x05
      000411 C8               [12]  759 	xch	a,r0
      000412 A6 82            [24]  760 	mov	@r0,dpl
      000414 08               [12]  761 	inc	r0
      000415 A6 83            [24]  762 	mov	@r0,dph
      000417 08               [12]  763 	inc	r0
      000418 A6 F0            [24]  764 	mov	@r0,b
      00041A 08               [12]  765 	inc	r0
      00041B F6               [12]  766 	mov	@r0,a
      00041C E5 81            [12]  767 	mov	a,sp
      00041E 24 FC            [12]  768 	add	a,#0xfc
      000420 F5 81            [12]  769 	mov	sp,a
      000422 74 93            [12]  770 	mov	a,#0x93
      000424 C0 E0            [24]  771 	push	acc
      000426 74 4F            [12]  772 	mov	a,#0x4F
      000428 C0 E0            [24]  773 	push	acc
      00042A 74 2B            [12]  774 	mov	a,#0x2B
      00042C C0 E0            [24]  775 	push	acc
      00042E 74 C2            [12]  776 	mov	a,#0xC2
      000430 C0 E0            [24]  777 	push	acc
      000432 E5*00            [12]  778 	mov	a,_bp
      000434 24 09            [12]  779 	add	a,#0x09
      000436 F8               [12]  780 	mov	r0,a
      000437 86 82            [24]  781 	mov	dpl,@r0
      000439 08               [12]  782 	inc	r0
      00043A 86 83            [24]  783 	mov	dph,@r0
      00043C 08               [12]  784 	inc	r0
      00043D 86 F0            [24]  785 	mov	b,@r0
      00043F 08               [12]  786 	inc	r0
      000440 E6               [12]  787 	mov	a,@r0
      000441 12r00r00         [24]  788 	lcall	___fsadd
      000444 AA 82            [24]  789 	mov	r2,dpl
      000446 AB 83            [24]  790 	mov	r3,dph
      000448 AE F0            [24]  791 	mov	r6,b
      00044A FF               [12]  792 	mov	r7,a
      00044B E5 81            [12]  793 	mov	a,sp
      00044D 24 FC            [12]  794 	add	a,#0xfc
      00044F F5 81            [12]  795 	mov	sp,a
      000451 C0 02            [24]  796 	push	ar2
      000453 C0 03            [24]  797 	push	ar3
      000455 C0 06            [24]  798 	push	ar6
      000457 C0 07            [24]  799 	push	ar7
      000459 E5*00            [12]  800 	mov	a,_bp
      00045B 24 05            [12]  801 	add	a,#0x05
      00045D F8               [12]  802 	mov	r0,a
      00045E 86 82            [24]  803 	mov	dpl,@r0
      000460 08               [12]  804 	inc	r0
      000461 86 83            [24]  805 	mov	dph,@r0
      000463 08               [12]  806 	inc	r0
      000464 86 F0            [24]  807 	mov	b,@r0
      000466 08               [12]  808 	inc	r0
      000467 E6               [12]  809 	mov	a,@r0
      000468 12r00r00         [24]  810 	lcall	___fsdiv
      00046B AC 82            [24]  811 	mov	r4,dpl
      00046D AD 83            [24]  812 	mov	r5,dph
      00046F AE F0            [24]  813 	mov	r6,b
      000471 FF               [12]  814 	mov	r7,a
      000472 E5 81            [12]  815 	mov	a,sp
      000474 24 FC            [12]  816 	add	a,#0xfc
      000476 F5 81            [12]  817 	mov	sp,a
      000478 C0 04            [24]  818 	push	ar4
      00047A C0 05            [24]  819 	push	ar5
      00047C C0 06            [24]  820 	push	ar6
      00047E C0 07            [24]  821 	push	ar7
      000480 A8*00            [24]  822 	mov	r0,_bp
      000482 08               [12]  823 	inc	r0
      000483 86 82            [24]  824 	mov	dpl,@r0
      000485 08               [12]  825 	inc	r0
      000486 86 83            [24]  826 	mov	dph,@r0
      000488 08               [12]  827 	inc	r0
      000489 86 F0            [24]  828 	mov	b,@r0
      00048B 08               [12]  829 	inc	r0
      00048C E6               [12]  830 	mov	a,@r0
      00048D 12r00r00         [24]  831 	lcall	___fsadd
      000490 AC 82            [24]  832 	mov	r4,dpl
      000492 AD 83            [24]  833 	mov	r5,dph
      000494 AE F0            [24]  834 	mov	r6,b
      000496 FF               [12]  835 	mov	r7,a
      000497 E5 81            [12]  836 	mov	a,sp
      000499 24 FC            [12]  837 	add	a,#0xfc
      00049B F5 81            [12]  838 	mov	sp,a
      00049D E5*00            [12]  839 	mov	a,_bp
      00049F 24 09            [12]  840 	add	a,#0x09
      0004A1 F8               [12]  841 	mov	r0,a
      0004A2 A6 04            [24]  842 	mov	@r0,ar4
      0004A4 08               [12]  843 	inc	r0
      0004A5 A6 05            [24]  844 	mov	@r0,ar5
      0004A7 08               [12]  845 	inc	r0
      0004A8 A6 06            [24]  846 	mov	@r0,ar6
      0004AA 08               [12]  847 	inc	r0
      0004AB A6 07            [24]  848 	mov	@r0,ar7
      0004AD                        849 00119$:
                                    850 ;	sincoshf.c:99: return z;
      0004AD E5*00            [12]  851 	mov	a,_bp
      0004AF 24 09            [12]  852 	add	a,#0x09
      0004B1 F8               [12]  853 	mov	r0,a
      0004B2 86 82            [24]  854 	mov	dpl,@r0
      0004B4 08               [12]  855 	inc	r0
      0004B5 86 83            [24]  856 	mov	dph,@r0
      0004B7 08               [12]  857 	inc	r0
      0004B8 86 F0            [24]  858 	mov	b,@r0
      0004BA 08               [12]  859 	inc	r0
      0004BB E6               [12]  860 	mov	a,@r0
      0004BC 85*00 81         [24]  861 	mov	sp,_bp
      0004BF D0*00            [24]  862 	pop	_bp
      0004C1 02r00r00         [24]  863 	ljmp	__sdcc_banked_ret
                                    864 	.area CSEG    (CODE)
                                    865 	.area CONST   (CODE)
                                    866 	.area XINIT   (CODE)
                                    867 	.area CABS    (ABS,CODE)
