                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:13 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sqrtf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _ldexpf
                                     13 	.globl _frexpf
                                     14 	.globl _sqrtf
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram 
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; external initialized ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'sqrtf'
                                     94 ;------------------------------------------------------------
                                     95 ;x                         Allocated to stack - _bp +1
                                     96 ;f                         Allocated to stack - _bp +9
                                     97 ;y                         Allocated to stack - _bp +13
                                     98 ;n                         Allocated to stack - _bp +17
                                     99 ;sloc0                     Allocated to stack - _bp +5
                                    100 ;------------------------------------------------------------
                                    101 ;	sqrtf.c:37: float sqrtf(const float x) _FLOAT_FUNC_REENTRANT
                                    102 ;	-----------------------------------------
                                    103 ;	 function sqrtf
                                    104 ;	-----------------------------------------
      000000                        105 _sqrtf:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
      000005 C0 82            [24]  116 	push	dpl
      000007 C0 83            [24]  117 	push	dph
      000009 C0 F0            [24]  118 	push	b
      00000B C0 E0            [24]  119 	push	acc
      00000D E5 81            [12]  120 	mov	a,sp
      00000F 24 0E            [12]  121 	add	a,#0x0E
      000011 F5 81            [12]  122 	mov	sp,a
                                    123 ;	sqrtf.c:42: if (x==0.0) return x;
      000013 A8*00            [24]  124 	mov	r0,_bp
      000015 08               [12]  125 	inc	r0
      000016 86 F0            [24]  126 	mov	b,@r0
      000018 08               [12]  127 	inc	r0
      000019 E6               [12]  128 	mov	a,@r0
      00001A 42 F0            [12]  129 	orl	b,a
      00001C 08               [12]  130 	inc	r0
      00001D E6               [12]  131 	mov	a,@r0
      00001E 42 F0            [12]  132 	orl	b,a
      000020 08               [12]  133 	inc	r0
      000021 E6               [12]  134 	mov	a,@r0
      000022 54 7F            [12]  135 	anl	a,#0x7F
      000024 45 F0            [12]  136 	orl	a,b
      000026 70 10            [24]  137 	jnz	00107$
      000028 A8*00            [24]  138 	mov	r0,_bp
      00002A 08               [12]  139 	inc	r0
      00002B 86 82            [24]  140 	mov	dpl,@r0
      00002D 08               [12]  141 	inc	r0
      00002E 86 83            [24]  142 	mov	dph,@r0
      000030 08               [12]  143 	inc	r0
      000031 86 F0            [24]  144 	mov	b,@r0
      000033 08               [12]  145 	inc	r0
      000034 E6               [12]  146 	mov	a,@r0
      000035 02r02rE6         [24]  147 	ljmp	00111$
      000038                        148 00107$:
                                    149 ;	sqrtf.c:43: else if (x==1.0) return 1.0;
      000038 E4               [12]  150 	clr	a
      000039 C0 E0            [24]  151 	push	acc
      00003B C0 E0            [24]  152 	push	acc
      00003D 74 80            [12]  153 	mov	a,#0x80
      00003F C0 E0            [24]  154 	push	acc
      000041 74 3F            [12]  155 	mov	a,#0x3F
      000043 C0 E0            [24]  156 	push	acc
      000045 A8*00            [24]  157 	mov	r0,_bp
      000047 08               [12]  158 	inc	r0
      000048 86 82            [24]  159 	mov	dpl,@r0
      00004A 08               [12]  160 	inc	r0
      00004B 86 83            [24]  161 	mov	dph,@r0
      00004D 08               [12]  162 	inc	r0
      00004E 86 F0            [24]  163 	mov	b,@r0
      000050 08               [12]  164 	inc	r0
      000051 E6               [12]  165 	mov	a,@r0
      000052 12r00r00         [24]  166 	lcall	___fseq
      000055 AB 82            [24]  167 	mov	r3,dpl
      000057 E5 81            [12]  168 	mov	a,sp
      000059 24 FC            [12]  169 	add	a,#0xfc
      00005B F5 81            [12]  170 	mov	sp,a
      00005D EB               [12]  171 	mov	a,r3
      00005E 60 0B            [24]  172 	jz	00104$
      000060 90 00 00         [24]  173 	mov	dptr,#0x0000
      000063 75 F0 80         [24]  174 	mov	b,#0x80
      000066 74 3F            [12]  175 	mov	a,#0x3F
      000068 02r02rE6         [24]  176 	ljmp	00111$
      00006B                        177 00104$:
                                    178 ;	sqrtf.c:44: else if (x<0.0)
      00006B E4               [12]  179 	clr	a
      00006C C0 E0            [24]  180 	push	acc
      00006E C0 E0            [24]  181 	push	acc
      000070 C0 E0            [24]  182 	push	acc
      000072 C0 E0            [24]  183 	push	acc
      000074 A8*00            [24]  184 	mov	r0,_bp
      000076 08               [12]  185 	inc	r0
      000077 86 82            [24]  186 	mov	dpl,@r0
      000079 08               [12]  187 	inc	r0
      00007A 86 83            [24]  188 	mov	dph,@r0
      00007C 08               [12]  189 	inc	r0
      00007D 86 F0            [24]  190 	mov	b,@r0
      00007F 08               [12]  191 	inc	r0
      000080 E6               [12]  192 	mov	a,@r0
      000081 12r00r00         [24]  193 	lcall	___fslt
      000084 AB 82            [24]  194 	mov	r3,dpl
      000086 E5 81            [12]  195 	mov	a,sp
      000088 24 FC            [12]  196 	add	a,#0xfc
      00008A F5 81            [12]  197 	mov	sp,a
      00008C EB               [12]  198 	mov	a,r3
      00008D 60 12            [24]  199 	jz	00108$
                                    200 ;	sqrtf.c:46: errno=EDOM;
      00008F 90r00r00         [24]  201 	mov	dptr,#_errno
      000092 74 21            [12]  202 	mov	a,#0x21
      000094 F0               [24]  203 	movx	@dptr,a
      000095 E4               [12]  204 	clr	a
      000096 A3               [24]  205 	inc	dptr
      000097 F0               [24]  206 	movx	@dptr,a
                                    207 ;	sqrtf.c:47: return 0.0;
      000098 90 00 00         [24]  208 	mov	dptr,#(0x00&0x00ff)
      00009B E4               [12]  209 	clr	a
      00009C F5 F0            [12]  210 	mov	b,a
      00009E 02r02rE6         [24]  211 	ljmp	00111$
      0000A1                        212 00108$:
                                    213 ;	sqrtf.c:49: f=frexpf(x, &n);
      0000A1 E5*00            [12]  214 	mov	a,_bp
      0000A3 24 11            [12]  215 	add	a,#0x11
      0000A5 FA               [12]  216 	mov	r2,a
      0000A6 7B 00            [12]  217 	mov	r3,#0x00
      0000A8 7F 40            [12]  218 	mov	r7,#0x40
      0000AA C0 02            [24]  219 	push	ar2
      0000AC C0 03            [24]  220 	push	ar3
      0000AE C0 07            [24]  221 	push	ar7
      0000B0 A8*00            [24]  222 	mov	r0,_bp
      0000B2 08               [12]  223 	inc	r0
      0000B3 86 82            [24]  224 	mov	dpl,@r0
      0000B5 08               [12]  225 	inc	r0
      0000B6 86 83            [24]  226 	mov	dph,@r0
      0000B8 08               [12]  227 	inc	r0
      0000B9 86 F0            [24]  228 	mov	b,@r0
      0000BB 08               [12]  229 	inc	r0
      0000BC E6               [12]  230 	mov	a,@r0
      0000BD 78r00            [12]  231 	mov	r0,#_frexpf
      0000BF 79s00            [12]  232 	mov	r1,#(_frexpf >> 8)
      0000C1 7As00            [12]  233 	mov	r2,#(_frexpf >> 16)
      0000C3 12r00r00         [24]  234 	lcall	__sdcc_banked_call
      0000C6 AC 82            [24]  235 	mov	r4,dpl
      0000C8 AD 83            [24]  236 	mov	r5,dph
      0000CA AE F0            [24]  237 	mov	r6,b
      0000CC FF               [12]  238 	mov	r7,a
      0000CD 15 81            [12]  239 	dec	sp
      0000CF 15 81            [12]  240 	dec	sp
      0000D1 15 81            [12]  241 	dec	sp
      0000D3 E5*00            [12]  242 	mov	a,_bp
      0000D5 24 09            [12]  243 	add	a,#0x09
      0000D7 F8               [12]  244 	mov	r0,a
      0000D8 A6 04            [24]  245 	mov	@r0,ar4
      0000DA 08               [12]  246 	inc	r0
      0000DB A6 05            [24]  247 	mov	@r0,ar5
      0000DD 08               [12]  248 	inc	r0
      0000DE A6 06            [24]  249 	mov	@r0,ar6
      0000E0 08               [12]  250 	inc	r0
      0000E1 A6 07            [24]  251 	mov	@r0,ar7
                                    252 ;	sqrtf.c:50: y=0.41731+0.59016*f; /*Educated guess*/
      0000E3 E5*00            [12]  253 	mov	a,_bp
      0000E5 24 09            [12]  254 	add	a,#0x09
      0000E7 F8               [12]  255 	mov	r0,a
      0000E8 E6               [12]  256 	mov	a,@r0
      0000E9 C0 E0            [24]  257 	push	acc
      0000EB 08               [12]  258 	inc	r0
      0000EC E6               [12]  259 	mov	a,@r0
      0000ED C0 E0            [24]  260 	push	acc
      0000EF 08               [12]  261 	inc	r0
      0000F0 E6               [12]  262 	mov	a,@r0
      0000F1 C0 E0            [24]  263 	push	acc
      0000F3 08               [12]  264 	inc	r0
      0000F4 E6               [12]  265 	mov	a,@r0
      0000F5 C0 E0            [24]  266 	push	acc
      0000F7 90 14 BA         [24]  267 	mov	dptr,#0x14BA
      0000FA 75 F0 17         [24]  268 	mov	b,#0x17
      0000FD 74 3F            [12]  269 	mov	a,#0x3F
      0000FF 12r00r00         [24]  270 	lcall	___fsmul
      000102 AA 82            [24]  271 	mov	r2,dpl
      000104 AB 83            [24]  272 	mov	r3,dph
      000106 AE F0            [24]  273 	mov	r6,b
      000108 FF               [12]  274 	mov	r7,a
      000109 E5 81            [12]  275 	mov	a,sp
      00010B 24 FC            [12]  276 	add	a,#0xfc
      00010D F5 81            [12]  277 	mov	sp,a
      00010F 74 A8            [12]  278 	mov	a,#0xA8
      000111 C0 E0            [24]  279 	push	acc
      000113 04               [12]  280 	inc	a
      000114 C0 E0            [24]  281 	push	acc
      000116 74 D5            [12]  282 	mov	a,#0xD5
      000118 C0 E0            [24]  283 	push	acc
      00011A 74 3E            [12]  284 	mov	a,#0x3E
      00011C C0 E0            [24]  285 	push	acc
      00011E 8A 82            [24]  286 	mov	dpl,r2
      000120 8B 83            [24]  287 	mov	dph,r3
      000122 8E F0            [24]  288 	mov	b,r6
      000124 EF               [12]  289 	mov	a,r7
      000125 12r00r00         [24]  290 	lcall	___fsadd
      000128 AC 82            [24]  291 	mov	r4,dpl
      00012A AD 83            [24]  292 	mov	r5,dph
      00012C AE F0            [24]  293 	mov	r6,b
      00012E FF               [12]  294 	mov	r7,a
      00012F E5 81            [12]  295 	mov	a,sp
      000131 24 FC            [12]  296 	add	a,#0xfc
      000133 F5 81            [12]  297 	mov	sp,a
      000135 E5*00            [12]  298 	mov	a,_bp
      000137 24 0D            [12]  299 	add	a,#0x0d
      000139 F8               [12]  300 	mov	r0,a
      00013A A6 04            [24]  301 	mov	@r0,ar4
      00013C 08               [12]  302 	inc	r0
      00013D A6 05            [24]  303 	mov	@r0,ar5
      00013F 08               [12]  304 	inc	r0
      000140 A6 06            [24]  305 	mov	@r0,ar6
      000142 08               [12]  306 	inc	r0
      000143 A6 07            [24]  307 	mov	@r0,ar7
                                    308 ;	sqrtf.c:52: y+=f/y;
      000145 E5*00            [12]  309 	mov	a,_bp
      000147 24 0D            [12]  310 	add	a,#0x0d
      000149 F8               [12]  311 	mov	r0,a
      00014A E6               [12]  312 	mov	a,@r0
      00014B C0 E0            [24]  313 	push	acc
      00014D 08               [12]  314 	inc	r0
      00014E E6               [12]  315 	mov	a,@r0
      00014F C0 E0            [24]  316 	push	acc
      000151 08               [12]  317 	inc	r0
      000152 E6               [12]  318 	mov	a,@r0
      000153 C0 E0            [24]  319 	push	acc
      000155 08               [12]  320 	inc	r0
      000156 E6               [12]  321 	mov	a,@r0
      000157 C0 E0            [24]  322 	push	acc
      000159 E5*00            [12]  323 	mov	a,_bp
      00015B 24 09            [12]  324 	add	a,#0x09
      00015D F8               [12]  325 	mov	r0,a
      00015E 86 82            [24]  326 	mov	dpl,@r0
      000160 08               [12]  327 	inc	r0
      000161 86 83            [24]  328 	mov	dph,@r0
      000163 08               [12]  329 	inc	r0
      000164 86 F0            [24]  330 	mov	b,@r0
      000166 08               [12]  331 	inc	r0
      000167 E6               [12]  332 	mov	a,@r0
      000168 12r00r00         [24]  333 	lcall	___fsdiv
      00016B AA 82            [24]  334 	mov	r2,dpl
      00016D AB 83            [24]  335 	mov	r3,dph
      00016F AE F0            [24]  336 	mov	r6,b
      000171 FF               [12]  337 	mov	r7,a
      000172 E5 81            [12]  338 	mov	a,sp
      000174 24 FC            [12]  339 	add	a,#0xfc
      000176 F5 81            [12]  340 	mov	sp,a
      000178 C0 02            [24]  341 	push	ar2
      00017A C0 03            [24]  342 	push	ar3
      00017C C0 06            [24]  343 	push	ar6
      00017E C0 07            [24]  344 	push	ar7
      000180 E5*00            [12]  345 	mov	a,_bp
      000182 24 0D            [12]  346 	add	a,#0x0d
      000184 F8               [12]  347 	mov	r0,a
      000185 86 82            [24]  348 	mov	dpl,@r0
      000187 08               [12]  349 	inc	r0
      000188 86 83            [24]  350 	mov	dph,@r0
      00018A 08               [12]  351 	inc	r0
      00018B 86 F0            [24]  352 	mov	b,@r0
      00018D 08               [12]  353 	inc	r0
      00018E E6               [12]  354 	mov	a,@r0
      00018F 12r00r00         [24]  355 	lcall	___fsadd
      000192 AC 82            [24]  356 	mov	r4,dpl
      000194 AD 83            [24]  357 	mov	r5,dph
      000196 AE F0            [24]  358 	mov	r6,b
      000198 FF               [12]  359 	mov	r7,a
      000199 E5 81            [12]  360 	mov	a,sp
      00019B 24 FC            [12]  361 	add	a,#0xfc
      00019D F5 81            [12]  362 	mov	sp,a
      00019F E5*00            [12]  363 	mov	a,_bp
      0001A1 24 0D            [12]  364 	add	a,#0x0d
      0001A3 F8               [12]  365 	mov	r0,a
      0001A4 A6 04            [24]  366 	mov	@r0,ar4
      0001A6 08               [12]  367 	inc	r0
      0001A7 A6 05            [24]  368 	mov	@r0,ar5
      0001A9 08               [12]  369 	inc	r0
      0001AA A6 06            [24]  370 	mov	@r0,ar6
      0001AC 08               [12]  371 	inc	r0
      0001AD A6 07            [24]  372 	mov	@r0,ar7
                                    373 ;	sqrtf.c:53: y=ldexpf(y, -2) + f/y; /*Faster version of 0.25 * y + f/y*/
      0001AF 74 FE            [12]  374 	mov	a,#0xFE
      0001B1 C0 E0            [24]  375 	push	acc
      0001B3 04               [12]  376 	inc	a
      0001B4 C0 E0            [24]  377 	push	acc
      0001B6 E5*00            [12]  378 	mov	a,_bp
      0001B8 24 0D            [12]  379 	add	a,#0x0d
      0001BA F8               [12]  380 	mov	r0,a
      0001BB 86 82            [24]  381 	mov	dpl,@r0
      0001BD 08               [12]  382 	inc	r0
      0001BE 86 83            [24]  383 	mov	dph,@r0
      0001C0 08               [12]  384 	inc	r0
      0001C1 86 F0            [24]  385 	mov	b,@r0
      0001C3 08               [12]  386 	inc	r0
      0001C4 E6               [12]  387 	mov	a,@r0
      0001C5 78r00            [12]  388 	mov	r0,#_ldexpf
      0001C7 79s00            [12]  389 	mov	r1,#(_ldexpf >> 8)
      0001C9 7As00            [12]  390 	mov	r2,#(_ldexpf >> 16)
      0001CB 12r00r00         [24]  391 	lcall	__sdcc_banked_call
      0001CE C8               [12]  392 	xch	a,r0
      0001CF E5*00            [12]  393 	mov	a,_bp
      0001D1 24 05            [12]  394 	add	a,#0x05
      0001D3 C8               [12]  395 	xch	a,r0
      0001D4 A6 82            [24]  396 	mov	@r0,dpl
      0001D6 08               [12]  397 	inc	r0
      0001D7 A6 83            [24]  398 	mov	@r0,dph
      0001D9 08               [12]  399 	inc	r0
      0001DA A6 F0            [24]  400 	mov	@r0,b
      0001DC 08               [12]  401 	inc	r0
      0001DD F6               [12]  402 	mov	@r0,a
      0001DE 15 81            [12]  403 	dec	sp
      0001E0 15 81            [12]  404 	dec	sp
      0001E2 E5*00            [12]  405 	mov	a,_bp
      0001E4 24 0D            [12]  406 	add	a,#0x0d
      0001E6 F8               [12]  407 	mov	r0,a
      0001E7 E6               [12]  408 	mov	a,@r0
      0001E8 C0 E0            [24]  409 	push	acc
      0001EA 08               [12]  410 	inc	r0
      0001EB E6               [12]  411 	mov	a,@r0
      0001EC C0 E0            [24]  412 	push	acc
      0001EE 08               [12]  413 	inc	r0
      0001EF E6               [12]  414 	mov	a,@r0
      0001F0 C0 E0            [24]  415 	push	acc
      0001F2 08               [12]  416 	inc	r0
      0001F3 E6               [12]  417 	mov	a,@r0
      0001F4 C0 E0            [24]  418 	push	acc
      0001F6 E5*00            [12]  419 	mov	a,_bp
      0001F8 24 09            [12]  420 	add	a,#0x09
      0001FA F8               [12]  421 	mov	r0,a
      0001FB 86 82            [24]  422 	mov	dpl,@r0
      0001FD 08               [12]  423 	inc	r0
      0001FE 86 83            [24]  424 	mov	dph,@r0
      000200 08               [12]  425 	inc	r0
      000201 86 F0            [24]  426 	mov	b,@r0
      000203 08               [12]  427 	inc	r0
      000204 E6               [12]  428 	mov	a,@r0
      000205 12r00r00         [24]  429 	lcall	___fsdiv
      000208 AA 82            [24]  430 	mov	r2,dpl
      00020A AB 83            [24]  431 	mov	r3,dph
      00020C AE F0            [24]  432 	mov	r6,b
      00020E FF               [12]  433 	mov	r7,a
      00020F E5 81            [12]  434 	mov	a,sp
      000211 24 FC            [12]  435 	add	a,#0xfc
      000213 F5 81            [12]  436 	mov	sp,a
      000215 C0 02            [24]  437 	push	ar2
      000217 C0 03            [24]  438 	push	ar3
      000219 C0 06            [24]  439 	push	ar6
      00021B C0 07            [24]  440 	push	ar7
      00021D E5*00            [12]  441 	mov	a,_bp
      00021F 24 05            [12]  442 	add	a,#0x05
      000221 F8               [12]  443 	mov	r0,a
      000222 86 82            [24]  444 	mov	dpl,@r0
      000224 08               [12]  445 	inc	r0
      000225 86 83            [24]  446 	mov	dph,@r0
      000227 08               [12]  447 	inc	r0
      000228 86 F0            [24]  448 	mov	b,@r0
      00022A 08               [12]  449 	inc	r0
      00022B E6               [12]  450 	mov	a,@r0
      00022C 12r00r00         [24]  451 	lcall	___fsadd
      00022F AC 82            [24]  452 	mov	r4,dpl
      000231 AD 83            [24]  453 	mov	r5,dph
      000233 AE F0            [24]  454 	mov	r6,b
      000235 FF               [12]  455 	mov	r7,a
      000236 E5 81            [12]  456 	mov	a,sp
      000238 24 FC            [12]  457 	add	a,#0xfc
      00023A F5 81            [12]  458 	mov	sp,a
      00023C E5*00            [12]  459 	mov	a,_bp
      00023E 24 0D            [12]  460 	add	a,#0x0d
      000240 F8               [12]  461 	mov	r0,a
      000241 A6 04            [24]  462 	mov	@r0,ar4
      000243 08               [12]  463 	inc	r0
      000244 A6 05            [24]  464 	mov	@r0,ar5
      000246 08               [12]  465 	inc	r0
      000247 A6 06            [24]  466 	mov	@r0,ar6
      000249 08               [12]  467 	inc	r0
      00024A A6 07            [24]  468 	mov	@r0,ar7
                                    469 ;	sqrtf.c:55: if (n&1)
      00024C E5*00            [12]  470 	mov	a,_bp
      00024E 24 11            [12]  471 	add	a,#0x11
      000250 F8               [12]  472 	mov	r0,a
      000251 E6               [12]  473 	mov	a,@r0
      000252 30 E0 47         [24]  474 	jnb	acc.0,00110$
                                    475 ;	sqrtf.c:57: y*=0.7071067812;
      000255 E5*00            [12]  476 	mov	a,_bp
      000257 24 0D            [12]  477 	add	a,#0x0d
      000259 F8               [12]  478 	mov	r0,a
      00025A E6               [12]  479 	mov	a,@r0
      00025B C0 E0            [24]  480 	push	acc
      00025D 08               [12]  481 	inc	r0
      00025E E6               [12]  482 	mov	a,@r0
      00025F C0 E0            [24]  483 	push	acc
      000261 08               [12]  484 	inc	r0
      000262 E6               [12]  485 	mov	a,@r0
      000263 C0 E0            [24]  486 	push	acc
      000265 08               [12]  487 	inc	r0
      000266 E6               [12]  488 	mov	a,@r0
      000267 C0 E0            [24]  489 	push	acc
      000269 90 04 F3         [24]  490 	mov	dptr,#0x04F3
      00026C 75 F0 35         [24]  491 	mov	b,#0x35
      00026F 74 3F            [12]  492 	mov	a,#0x3F
      000271 12r00r00         [24]  493 	lcall	___fsmul
      000274 AC 82            [24]  494 	mov	r4,dpl
      000276 AD 83            [24]  495 	mov	r5,dph
      000278 AE F0            [24]  496 	mov	r6,b
      00027A FF               [12]  497 	mov	r7,a
      00027B E5 81            [12]  498 	mov	a,sp
      00027D 24 FC            [12]  499 	add	a,#0xfc
      00027F F5 81            [12]  500 	mov	sp,a
      000281 E5*00            [12]  501 	mov	a,_bp
      000283 24 0D            [12]  502 	add	a,#0x0d
      000285 F8               [12]  503 	mov	r0,a
      000286 A6 04            [24]  504 	mov	@r0,ar4
      000288 08               [12]  505 	inc	r0
      000289 A6 05            [24]  506 	mov	@r0,ar5
      00028B 08               [12]  507 	inc	r0
      00028C A6 06            [24]  508 	mov	@r0,ar6
      00028E 08               [12]  509 	inc	r0
      00028F A6 07            [24]  510 	mov	@r0,ar7
                                    511 ;	sqrtf.c:58: ++n;
      000291 E5*00            [12]  512 	mov	a,_bp
      000293 24 11            [12]  513 	add	a,#0x11
      000295 F8               [12]  514 	mov	r0,a
      000296 06               [12]  515 	inc	@r0
      000297 B6 00 02         [24]  516 	cjne	@r0,#0x00,00129$
      00029A 08               [12]  517 	inc	r0
      00029B 06               [12]  518 	inc	@r0
      00029C                        519 00129$:
      00029C                        520 00110$:
                                    521 ;	sqrtf.c:60: return ldexpf(y, n/2);
      00029C 74 02            [12]  522 	mov	a,#0x02
      00029E C0 E0            [24]  523 	push	acc
      0002A0 E4               [12]  524 	clr	a
      0002A1 C0 E0            [24]  525 	push	acc
      0002A3 E5*00            [12]  526 	mov	a,_bp
      0002A5 24 11            [12]  527 	add	a,#0x11
      0002A7 F8               [12]  528 	mov	r0,a
      0002A8 86 82            [24]  529 	mov	dpl,@r0
      0002AA 08               [12]  530 	inc	r0
      0002AB 86 83            [24]  531 	mov	dph,@r0
      0002AD 12r00r00         [24]  532 	lcall	__divsint
      0002B0 AE 82            [24]  533 	mov	r6,dpl
      0002B2 AF 83            [24]  534 	mov	r7,dph
      0002B4 15 81            [12]  535 	dec	sp
      0002B6 15 81            [12]  536 	dec	sp
      0002B8 C0 06            [24]  537 	push	ar6
      0002BA C0 07            [24]  538 	push	ar7
      0002BC E5*00            [12]  539 	mov	a,_bp
      0002BE 24 0D            [12]  540 	add	a,#0x0d
      0002C0 F8               [12]  541 	mov	r0,a
      0002C1 86 82            [24]  542 	mov	dpl,@r0
      0002C3 08               [12]  543 	inc	r0
      0002C4 86 83            [24]  544 	mov	dph,@r0
      0002C6 08               [12]  545 	inc	r0
      0002C7 86 F0            [24]  546 	mov	b,@r0
      0002C9 08               [12]  547 	inc	r0
      0002CA E6               [12]  548 	mov	a,@r0
      0002CB 78r00            [12]  549 	mov	r0,#_ldexpf
      0002CD 79s00            [12]  550 	mov	r1,#(_ldexpf >> 8)
      0002CF 7As00            [12]  551 	mov	r2,#(_ldexpf >> 16)
      0002D1 12r00r00         [24]  552 	lcall	__sdcc_banked_call
      0002D4 AC 82            [24]  553 	mov	r4,dpl
      0002D6 AD 83            [24]  554 	mov	r5,dph
      0002D8 AE F0            [24]  555 	mov	r6,b
      0002DA FF               [12]  556 	mov	r7,a
      0002DB 15 81            [12]  557 	dec	sp
      0002DD 15 81            [12]  558 	dec	sp
      0002DF 8C 82            [24]  559 	mov	dpl,r4
      0002E1 8D 83            [24]  560 	mov	dph,r5
      0002E3 8E F0            [24]  561 	mov	b,r6
      0002E5 EF               [12]  562 	mov	a,r7
      0002E6                        563 00111$:
      0002E6 85*00 81         [24]  564 	mov	sp,_bp
      0002E9 D0*00            [24]  565 	pop	_bp
      0002EB 02r00r00         [24]  566 	ljmp	__sdcc_banked_ret
                                    567 	.area CSEG    (CODE)
                                    568 	.area CONST   (CODE)
                                    569 	.area XINIT   (CODE)
                                    570 	.area CABS    (ABS,CODE)
