                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:12 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atof
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 	.globl _isspace
                                     14 	.globl _islower
                                     15 	.globl _isdigit
                                     16 	.globl _atof
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable bit register bank
                                     34 ;--------------------------------------------------------
                                     35 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         36 bits:
      000000                         37 	.ds 1
                           008000    38 	b0 = bits[0]
                           008100    39 	b1 = bits[1]
                           008200    40 	b2 = bits[2]
                           008300    41 	b3 = bits[3]
                           008400    42 	b4 = bits[4]
                           008500    43 	b5 = bits[5]
                           008600    44 	b6 = bits[6]
                           008700    45 	b7 = bits[7]
                                     46 ;--------------------------------------------------------
                                     47 ; internal ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DSEG    (DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; overlayable items in internal ram 
                                     52 ;--------------------------------------------------------
                                     53 ;--------------------------------------------------------
                                     54 ; indirectly addressable internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area ISEG    (DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area IABS    (ABS,DATA)
                                     61 	.area IABS    (ABS,DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; bit data
                                     64 ;--------------------------------------------------------
                                     65 	.area BSEG    (BIT)
                                     66 ;--------------------------------------------------------
                                     67 ; paged external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area PSEG    (PAG,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XSEG    (XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; absolute external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XABS    (ABS,XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; external initialized ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XISEG   (XDATA)
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT0 (CODE)
                                     84 	.area GSINIT1 (CODE)
                                     85 	.area GSINIT2 (CODE)
                                     86 	.area GSINIT3 (CODE)
                                     87 	.area GSINIT4 (CODE)
                                     88 	.area GSINIT5 (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area CSEG    (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; global & static initialisations
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 	.area GSFINAL (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME    (CODE)
                                    103 	.area HOME    (CODE)
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CSEG    (CODE)
                                    108 ;------------------------------------------------------------
                                    109 ;Allocation info for local variables in function 'atof'
                                    110 ;------------------------------------------------------------
                                    111 ;s                         Allocated to registers r6 r5 r3 
                                    112 ;value                     Allocated to stack - _bp +8
                                    113 ;fraction                  Allocated to stack - _bp +12
                                    114 ;iexp                      Allocated to registers r6 
                                    115 ;sign                      Allocated to registers b0 
                                    116 ;sloc0                     Allocated to stack - _bp +1
                                    117 ;sloc1                     Allocated to stack - _bp +4
                                    118 ;------------------------------------------------------------
                                    119 ;	_atof.c:33: float atof(const char * s)
                                    120 ;	-----------------------------------------
                                    121 ;	 function atof
                                    122 ;	-----------------------------------------
      000000                        123 _atof:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
      000000 C0*00            [24]  132 	push	_bp
      000002 E5 81            [12]  133 	mov	a,sp
      000004 F5*00            [12]  134 	mov	_bp,a
      000006 24 0F            [12]  135 	add	a,#0x0F
      000008 F5 81            [12]  136 	mov	sp,a
      00000A AE 82            [24]  137 	mov	r6,dpl
      00000C AD 83            [24]  138 	mov	r5,dph
      00000E AB F0            [24]  139 	mov	r3,b
                                    140 ;	_atof.c:40: while (isspace(*s)) s++;
      000010 A8*00            [24]  141 	mov	r0,_bp
      000012 08               [12]  142 	inc	r0
      000013 A6 06            [24]  143 	mov	@r0,ar6
      000015 08               [12]  144 	inc	r0
      000016 A6 05            [24]  145 	mov	@r0,ar5
      000018 08               [12]  146 	inc	r0
      000019 A6 03            [24]  147 	mov	@r0,ar3
      00001B                        148 00101$:
      00001B A8*00            [24]  149 	mov	r0,_bp
      00001D 08               [12]  150 	inc	r0
      00001E 86 82            [24]  151 	mov	dpl,@r0
      000020 08               [12]  152 	inc	r0
      000021 86 83            [24]  153 	mov	dph,@r0
      000023 08               [12]  154 	inc	r0
      000024 86 F0            [24]  155 	mov	b,@r0
      000026 12r00r00         [24]  156 	lcall	__gptrget
      000029 F5 82            [12]  157 	mov	dpl,a
      00002B 78r00            [12]  158 	mov	r0,#_isspace
      00002D 79s00            [12]  159 	mov	r1,#(_isspace >> 8)
      00002F 7As00            [12]  160 	mov	r2,#(_isspace >> 16)
      000031 12r00r00         [24]  161 	lcall	__sdcc_banked_call
      000034 E5 82            [12]  162 	mov	a,dpl
      000036 60 0B            [24]  163 	jz	00148$
      000038 A8*00            [24]  164 	mov	r0,_bp
      00003A 08               [12]  165 	inc	r0
      00003B 06               [12]  166 	inc	@r0
      00003C B6 00 02         [24]  167 	cjne	@r0,#0x00,00182$
      00003F 08               [12]  168 	inc	r0
      000040 06               [12]  169 	inc	@r0
      000041                        170 00182$:
      000041 80 D8            [24]  171 	sjmp	00101$
      000043                        172 00148$:
      000043 A8*00            [24]  173 	mov	r0,_bp
      000045 08               [12]  174 	inc	r0
      000046 86 06            [24]  175 	mov	ar6,@r0
      000048 08               [12]  176 	inc	r0
      000049 86 05            [24]  177 	mov	ar5,@r0
      00004B 08               [12]  178 	inc	r0
      00004C 86 03            [24]  179 	mov	ar3,@r0
                                    180 ;	_atof.c:43: if (*s == '-')
      00004E A8*00            [24]  181 	mov	r0,_bp
      000050 08               [12]  182 	inc	r0
      000051 86 82            [24]  183 	mov	dpl,@r0
      000053 08               [12]  184 	inc	r0
      000054 86 83            [24]  185 	mov	dph,@r0
      000056 08               [12]  186 	inc	r0
      000057 86 F0            [24]  187 	mov	b,@r0
      000059 12r00r00         [24]  188 	lcall	__gptrget
      00005C FC               [12]  189 	mov	r4,a
      00005D BC 2D 12         [24]  190 	cjne	r4,#0x2D,00107$
                                    191 ;	_atof.c:45: sign=1;
      000060 D2*00            [12]  192 	setb	b0
                                    193 ;	_atof.c:46: s++;
      000062 A8*00            [24]  194 	mov	r0,_bp
      000064 08               [12]  195 	inc	r0
      000065 74 01            [12]  196 	mov	a,#0x01
      000067 26               [12]  197 	add	a,@r0
      000068 FE               [12]  198 	mov	r6,a
      000069 E4               [12]  199 	clr	a
      00006A 08               [12]  200 	inc	r0
      00006B 36               [12]  201 	addc	a,@r0
      00006C FD               [12]  202 	mov	r5,a
      00006D 08               [12]  203 	inc	r0
      00006E 86 03            [24]  204 	mov	ar3,@r0
      000070 80 13            [24]  205 	sjmp	00108$
      000072                        206 00107$:
                                    207 ;	_atof.c:50: sign=0;
      000072 C2*00            [12]  208 	clr	b0
                                    209 ;	_atof.c:51: if (*s == '+') s++;
      000074 BC 2B 0E         [24]  210 	cjne	r4,#0x2B,00108$
      000077 A8*00            [24]  211 	mov	r0,_bp
      000079 08               [12]  212 	inc	r0
      00007A 74 01            [12]  213 	mov	a,#0x01
      00007C 26               [12]  214 	add	a,@r0
      00007D FE               [12]  215 	mov	r6,a
      00007E E4               [12]  216 	clr	a
      00007F 08               [12]  217 	inc	r0
      000080 36               [12]  218 	addc	a,@r0
      000081 FD               [12]  219 	mov	r5,a
      000082 08               [12]  220 	inc	r0
      000083 86 03            [24]  221 	mov	ar3,@r0
      000085                        222 00108$:
                                    223 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      000085 E5*00            [12]  224 	mov	a,_bp
      000087 24 08            [12]  225 	add	a,#0x08
      000089 F8               [12]  226 	mov	r0,a
      00008A E4               [12]  227 	clr	a
      00008B F6               [12]  228 	mov	@r0,a
      00008C 08               [12]  229 	inc	r0
      00008D F6               [12]  230 	mov	@r0,a
      00008E 08               [12]  231 	inc	r0
      00008F F6               [12]  232 	mov	@r0,a
      000090 08               [12]  233 	inc	r0
      000091 F6               [12]  234 	mov	@r0,a
      000092 A8*00            [24]  235 	mov	r0,_bp
      000094 08               [12]  236 	inc	r0
      000095 A6 06            [24]  237 	mov	@r0,ar6
      000097 08               [12]  238 	inc	r0
      000098 A6 05            [24]  239 	mov	@r0,ar5
      00009A 08               [12]  240 	inc	r0
      00009B A6 03            [24]  241 	mov	@r0,ar3
      00009D                        242 00124$:
      00009D A8*00            [24]  243 	mov	r0,_bp
      00009F 08               [12]  244 	inc	r0
      0000A0 86 82            [24]  245 	mov	dpl,@r0
      0000A2 08               [12]  246 	inc	r0
      0000A3 86 83            [24]  247 	mov	dph,@r0
      0000A5 08               [12]  248 	inc	r0
      0000A6 86 F0            [24]  249 	mov	b,@r0
      0000A8 12r00r00         [24]  250 	lcall	__gptrget
      0000AB F5 82            [12]  251 	mov	dpl,a
      0000AD C0*00            [24]  252 	push	bits
      0000AF 78r00            [12]  253 	mov	r0,#_isdigit
      0000B1 79s00            [12]  254 	mov	r1,#(_isdigit >> 8)
      0000B3 7As00            [12]  255 	mov	r2,#(_isdigit >> 16)
      0000B5 12r00r00         [24]  256 	lcall	__sdcc_banked_call
      0000B8 E5 82            [12]  257 	mov	a,dpl
      0000BA D0*00            [24]  258 	pop	bits
      0000BC 70 03            [24]  259 	jnz	00187$
      0000BE 02r01r6E         [24]  260 	ljmp	00149$
      0000C1                        261 00187$:
                                    262 ;	_atof.c:57: value=10.0*value+(*s-'0');
      0000C1 C0*00            [24]  263 	push	bits
      0000C3 E5*00            [12]  264 	mov	a,_bp
      0000C5 24 08            [12]  265 	add	a,#0x08
      0000C7 F8               [12]  266 	mov	r0,a
      0000C8 E6               [12]  267 	mov	a,@r0
      0000C9 C0 E0            [24]  268 	push	acc
      0000CB 08               [12]  269 	inc	r0
      0000CC E6               [12]  270 	mov	a,@r0
      0000CD C0 E0            [24]  271 	push	acc
      0000CF 08               [12]  272 	inc	r0
      0000D0 E6               [12]  273 	mov	a,@r0
      0000D1 C0 E0            [24]  274 	push	acc
      0000D3 08               [12]  275 	inc	r0
      0000D4 E6               [12]  276 	mov	a,@r0
      0000D5 C0 E0            [24]  277 	push	acc
      0000D7 90 00 00         [24]  278 	mov	dptr,#0x0000
      0000DA 75 F0 20         [24]  279 	mov	b,#0x20
      0000DD 74 41            [12]  280 	mov	a,#0x41
      0000DF 12r00r00         [24]  281 	lcall	___fsmul
      0000E2 C8               [12]  282 	xch	a,r0
      0000E3 E5*00            [12]  283 	mov	a,_bp
      0000E5 24 04            [12]  284 	add	a,#0x04
      0000E7 C8               [12]  285 	xch	a,r0
      0000E8 A6 82            [24]  286 	mov	@r0,dpl
      0000EA 08               [12]  287 	inc	r0
      0000EB A6 83            [24]  288 	mov	@r0,dph
      0000ED 08               [12]  289 	inc	r0
      0000EE A6 F0            [24]  290 	mov	@r0,b
      0000F0 08               [12]  291 	inc	r0
      0000F1 F6               [12]  292 	mov	@r0,a
      0000F2 E5 81            [12]  293 	mov	a,sp
      0000F4 24 FC            [12]  294 	add	a,#0xfc
      0000F6 F5 81            [12]  295 	mov	sp,a
      0000F8 D0*00            [24]  296 	pop	bits
      0000FA A8*00            [24]  297 	mov	r0,_bp
      0000FC 08               [12]  298 	inc	r0
      0000FD 86 82            [24]  299 	mov	dpl,@r0
      0000FF 08               [12]  300 	inc	r0
      000100 86 83            [24]  301 	mov	dph,@r0
      000102 08               [12]  302 	inc	r0
      000103 86 F0            [24]  303 	mov	b,@r0
      000105 12r00r00         [24]  304 	lcall	__gptrget
      000108 FE               [12]  305 	mov	r6,a
      000109 A3               [24]  306 	inc	dptr
      00010A 18               [12]  307 	dec	r0
      00010B 18               [12]  308 	dec	r0
      00010C A6 82            [24]  309 	mov	@r0,dpl
      00010E 08               [12]  310 	inc	r0
      00010F A6 83            [24]  311 	mov	@r0,dph
      000111 EE               [12]  312 	mov	a,r6
      000112 33               [12]  313 	rlc	a
      000113 95 E0            [12]  314 	subb	a,acc
      000115 FD               [12]  315 	mov	r5,a
      000116 EE               [12]  316 	mov	a,r6
      000117 24 D0            [12]  317 	add	a,#0xD0
      000119 FE               [12]  318 	mov	r6,a
      00011A ED               [12]  319 	mov	a,r5
      00011B 34 FF            [12]  320 	addc	a,#0xFF
      00011D FD               [12]  321 	mov	r5,a
      00011E 8E 82            [24]  322 	mov	dpl,r6
      000120 8D 83            [24]  323 	mov	dph,r5
      000122 C0*00            [24]  324 	push	bits
      000124 12r00r00         [24]  325 	lcall	___sint2fs
      000127 AC 82            [24]  326 	mov	r4,dpl
      000129 AD 83            [24]  327 	mov	r5,dph
      00012B AE F0            [24]  328 	mov	r6,b
      00012D FF               [12]  329 	mov	r7,a
      00012E D0*00            [24]  330 	pop	bits
      000130 C0*00            [24]  331 	push	bits
      000132 C0 04            [24]  332 	push	ar4
      000134 C0 05            [24]  333 	push	ar5
      000136 C0 06            [24]  334 	push	ar6
      000138 C0 07            [24]  335 	push	ar7
      00013A E5*00            [12]  336 	mov	a,_bp
      00013C 24 04            [12]  337 	add	a,#0x04
      00013E F8               [12]  338 	mov	r0,a
      00013F 86 82            [24]  339 	mov	dpl,@r0
      000141 08               [12]  340 	inc	r0
      000142 86 83            [24]  341 	mov	dph,@r0
      000144 08               [12]  342 	inc	r0
      000145 86 F0            [24]  343 	mov	b,@r0
      000147 08               [12]  344 	inc	r0
      000148 E6               [12]  345 	mov	a,@r0
      000149 12r00r00         [24]  346 	lcall	___fsadd
      00014C AC 82            [24]  347 	mov	r4,dpl
      00014E AD 83            [24]  348 	mov	r5,dph
      000150 AE F0            [24]  349 	mov	r6,b
      000152 FF               [12]  350 	mov	r7,a
      000153 E5 81            [12]  351 	mov	a,sp
      000155 24 FC            [12]  352 	add	a,#0xfc
      000157 F5 81            [12]  353 	mov	sp,a
      000159 D0*00            [24]  354 	pop	bits
      00015B E5*00            [12]  355 	mov	a,_bp
      00015D 24 08            [12]  356 	add	a,#0x08
      00015F F8               [12]  357 	mov	r0,a
      000160 A6 04            [24]  358 	mov	@r0,ar4
      000162 08               [12]  359 	inc	r0
      000163 A6 05            [24]  360 	mov	@r0,ar5
      000165 08               [12]  361 	inc	r0
      000166 A6 06            [24]  362 	mov	@r0,ar6
      000168 08               [12]  363 	inc	r0
      000169 A6 07            [24]  364 	mov	@r0,ar7
                                    365 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00016B 02r00r9D         [24]  366 	ljmp	00124$
      00016E                        367 00149$:
      00016E A8*00            [24]  368 	mov	r0,_bp
      000170 08               [12]  369 	inc	r0
      000171 86 06            [24]  370 	mov	ar6,@r0
      000173 08               [12]  371 	inc	r0
      000174 86 05            [24]  372 	mov	ar5,@r0
      000176 08               [12]  373 	inc	r0
      000177 86 03            [24]  374 	mov	ar3,@r0
                                    375 ;	_atof.c:61: if (*s == '.')
      000179 A8*00            [24]  376 	mov	r0,_bp
      00017B 08               [12]  377 	inc	r0
      00017C 86 82            [24]  378 	mov	dpl,@r0
      00017E 08               [12]  379 	inc	r0
      00017F 86 83            [24]  380 	mov	dph,@r0
      000181 08               [12]  381 	inc	r0
      000182 86 F0            [24]  382 	mov	b,@r0
      000184 12r00r00         [24]  383 	lcall	__gptrget
      000187 FF               [12]  384 	mov	r7,a
      000188 BF 2E 02         [24]  385 	cjne	r7,#0x2E,00188$
      00018B 80 03            [24]  386 	sjmp	00189$
      00018D                        387 00188$:
      00018D 02r02rD3         [24]  388 	ljmp	00112$
      000190                        389 00189$:
                                    390 ;	_atof.c:63: s++;
      000190 A8*00            [24]  391 	mov	r0,_bp
      000192 08               [12]  392 	inc	r0
      000193 74 01            [12]  393 	mov	a,#0x01
      000195 26               [12]  394 	add	a,@r0
      000196 FE               [12]  395 	mov	r6,a
      000197 E4               [12]  396 	clr	a
      000198 08               [12]  397 	inc	r0
      000199 36               [12]  398 	addc	a,@r0
      00019A FD               [12]  399 	mov	r5,a
      00019B 08               [12]  400 	inc	r0
      00019C 86 03            [24]  401 	mov	ar3,@r0
                                    402 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      00019E E5*00            [12]  403 	mov	a,_bp
      0001A0 24 0C            [12]  404 	add	a,#0x0c
      0001A2 F8               [12]  405 	mov	r0,a
      0001A3 76 CD            [12]  406 	mov	@r0,#0xCD
      0001A5 08               [12]  407 	inc	r0
      0001A6 76 CC            [12]  408 	mov	@r0,#0xCC
      0001A8 08               [12]  409 	inc	r0
      0001A9 76 CC            [12]  410 	mov	@r0,#0xCC
      0001AB 08               [12]  411 	inc	r0
      0001AC 76 3D            [12]  412 	mov	@r0,#0x3D
      0001AE E5*00            [12]  413 	mov	a,_bp
      0001B0 24 04            [12]  414 	add	a,#0x04
      0001B2 F8               [12]  415 	mov	r0,a
      0001B3 A6 06            [24]  416 	mov	@r0,ar6
      0001B5 08               [12]  417 	inc	r0
      0001B6 A6 05            [24]  418 	mov	@r0,ar5
      0001B8 08               [12]  419 	inc	r0
      0001B9 A6 03            [24]  420 	mov	@r0,ar3
      0001BB                        421 00127$:
      0001BB E5*00            [12]  422 	mov	a,_bp
      0001BD 24 04            [12]  423 	add	a,#0x04
      0001BF F8               [12]  424 	mov	r0,a
      0001C0 86 82            [24]  425 	mov	dpl,@r0
      0001C2 08               [12]  426 	inc	r0
      0001C3 86 83            [24]  427 	mov	dph,@r0
      0001C5 08               [12]  428 	inc	r0
      0001C6 86 F0            [24]  429 	mov	b,@r0
      0001C8 12r00r00         [24]  430 	lcall	__gptrget
      0001CB F5 82            [12]  431 	mov	dpl,a
      0001CD C0*00            [24]  432 	push	bits
      0001CF 78r00            [12]  433 	mov	r0,#_isdigit
      0001D1 79s00            [12]  434 	mov	r1,#(_isdigit >> 8)
      0001D3 7As00            [12]  435 	mov	r2,#(_isdigit >> 16)
      0001D5 12r00r00         [24]  436 	lcall	__sdcc_banked_call
      0001D8 E5 82            [12]  437 	mov	a,dpl
      0001DA D0*00            [24]  438 	pop	bits
      0001DC 70 03            [24]  439 	jnz	00190$
      0001DE 02r02rC6         [24]  440 	ljmp	00150$
      0001E1                        441 00190$:
                                    442 ;	_atof.c:66: value+=(*s-'0')*fraction;
      0001E1 E5*00            [12]  443 	mov	a,_bp
      0001E3 24 04            [12]  444 	add	a,#0x04
      0001E5 F8               [12]  445 	mov	r0,a
      0001E6 86 82            [24]  446 	mov	dpl,@r0
      0001E8 08               [12]  447 	inc	r0
      0001E9 86 83            [24]  448 	mov	dph,@r0
      0001EB 08               [12]  449 	inc	r0
      0001EC 86 F0            [24]  450 	mov	b,@r0
      0001EE 12r00r00         [24]  451 	lcall	__gptrget
      0001F1 FE               [12]  452 	mov	r6,a
      0001F2 A3               [24]  453 	inc	dptr
      0001F3 18               [12]  454 	dec	r0
      0001F4 18               [12]  455 	dec	r0
      0001F5 A6 82            [24]  456 	mov	@r0,dpl
      0001F7 08               [12]  457 	inc	r0
      0001F8 A6 83            [24]  458 	mov	@r0,dph
      0001FA EE               [12]  459 	mov	a,r6
      0001FB 33               [12]  460 	rlc	a
      0001FC 95 E0            [12]  461 	subb	a,acc
      0001FE FD               [12]  462 	mov	r5,a
      0001FF EE               [12]  463 	mov	a,r6
      000200 24 D0            [12]  464 	add	a,#0xD0
      000202 FE               [12]  465 	mov	r6,a
      000203 ED               [12]  466 	mov	a,r5
      000204 34 FF            [12]  467 	addc	a,#0xFF
      000206 FD               [12]  468 	mov	r5,a
      000207 8E 82            [24]  469 	mov	dpl,r6
      000209 8D 83            [24]  470 	mov	dph,r5
      00020B C0*00            [24]  471 	push	bits
      00020D 12r00r00         [24]  472 	lcall	___sint2fs
      000210 AC 82            [24]  473 	mov	r4,dpl
      000212 AD 83            [24]  474 	mov	r5,dph
      000214 AE F0            [24]  475 	mov	r6,b
      000216 FF               [12]  476 	mov	r7,a
      000217 D0*00            [24]  477 	pop	bits
      000219 C0*00            [24]  478 	push	bits
      00021B E5*00            [12]  479 	mov	a,_bp
      00021D 24 0C            [12]  480 	add	a,#0x0c
      00021F F8               [12]  481 	mov	r0,a
      000220 E6               [12]  482 	mov	a,@r0
      000221 C0 E0            [24]  483 	push	acc
      000223 08               [12]  484 	inc	r0
      000224 E6               [12]  485 	mov	a,@r0
      000225 C0 E0            [24]  486 	push	acc
      000227 08               [12]  487 	inc	r0
      000228 E6               [12]  488 	mov	a,@r0
      000229 C0 E0            [24]  489 	push	acc
      00022B 08               [12]  490 	inc	r0
      00022C E6               [12]  491 	mov	a,@r0
      00022D C0 E0            [24]  492 	push	acc
      00022F 8C 82            [24]  493 	mov	dpl,r4
      000231 8D 83            [24]  494 	mov	dph,r5
      000233 8E F0            [24]  495 	mov	b,r6
      000235 EF               [12]  496 	mov	a,r7
      000236 12r00r00         [24]  497 	lcall	___fsmul
      000239 AC 82            [24]  498 	mov	r4,dpl
      00023B AD 83            [24]  499 	mov	r5,dph
      00023D AE F0            [24]  500 	mov	r6,b
      00023F FF               [12]  501 	mov	r7,a
      000240 E5 81            [12]  502 	mov	a,sp
      000242 24 FC            [12]  503 	add	a,#0xfc
      000244 F5 81            [12]  504 	mov	sp,a
      000246 D0*00            [24]  505 	pop	bits
      000248 C0*00            [24]  506 	push	bits
      00024A C0 04            [24]  507 	push	ar4
      00024C C0 05            [24]  508 	push	ar5
      00024E C0 06            [24]  509 	push	ar6
      000250 C0 07            [24]  510 	push	ar7
      000252 E5*00            [12]  511 	mov	a,_bp
      000254 24 08            [12]  512 	add	a,#0x08
      000256 F8               [12]  513 	mov	r0,a
      000257 86 82            [24]  514 	mov	dpl,@r0
      000259 08               [12]  515 	inc	r0
      00025A 86 83            [24]  516 	mov	dph,@r0
      00025C 08               [12]  517 	inc	r0
      00025D 86 F0            [24]  518 	mov	b,@r0
      00025F 08               [12]  519 	inc	r0
      000260 E6               [12]  520 	mov	a,@r0
      000261 12r00r00         [24]  521 	lcall	___fsadd
      000264 AC 82            [24]  522 	mov	r4,dpl
      000266 AD 83            [24]  523 	mov	r5,dph
      000268 AE F0            [24]  524 	mov	r6,b
      00026A FF               [12]  525 	mov	r7,a
      00026B E5 81            [12]  526 	mov	a,sp
      00026D 24 FC            [12]  527 	add	a,#0xfc
      00026F F5 81            [12]  528 	mov	sp,a
      000271 D0*00            [24]  529 	pop	bits
      000273 E5*00            [12]  530 	mov	a,_bp
      000275 24 08            [12]  531 	add	a,#0x08
      000277 F8               [12]  532 	mov	r0,a
      000278 A6 04            [24]  533 	mov	@r0,ar4
      00027A 08               [12]  534 	inc	r0
      00027B A6 05            [24]  535 	mov	@r0,ar5
      00027D 08               [12]  536 	inc	r0
      00027E A6 06            [24]  537 	mov	@r0,ar6
      000280 08               [12]  538 	inc	r0
      000281 A6 07            [24]  539 	mov	@r0,ar7
                                    540 ;	_atof.c:67: fraction*=0.1;
      000283 C0*00            [24]  541 	push	bits
      000285 E5*00            [12]  542 	mov	a,_bp
      000287 24 0C            [12]  543 	add	a,#0x0c
      000289 F8               [12]  544 	mov	r0,a
      00028A E6               [12]  545 	mov	a,@r0
      00028B C0 E0            [24]  546 	push	acc
      00028D 08               [12]  547 	inc	r0
      00028E E6               [12]  548 	mov	a,@r0
      00028F C0 E0            [24]  549 	push	acc
      000291 08               [12]  550 	inc	r0
      000292 E6               [12]  551 	mov	a,@r0
      000293 C0 E0            [24]  552 	push	acc
      000295 08               [12]  553 	inc	r0
      000296 E6               [12]  554 	mov	a,@r0
      000297 C0 E0            [24]  555 	push	acc
      000299 90 CC CD         [24]  556 	mov	dptr,#0xCCCD
      00029C 75 F0 CC         [24]  557 	mov	b,#0xCC
      00029F 74 3D            [12]  558 	mov	a,#0x3D
      0002A1 12r00r00         [24]  559 	lcall	___fsmul
      0002A4 AC 82            [24]  560 	mov	r4,dpl
      0002A6 AD 83            [24]  561 	mov	r5,dph
      0002A8 AE F0            [24]  562 	mov	r6,b
      0002AA FF               [12]  563 	mov	r7,a
      0002AB E5 81            [12]  564 	mov	a,sp
      0002AD 24 FC            [12]  565 	add	a,#0xfc
      0002AF F5 81            [12]  566 	mov	sp,a
      0002B1 D0*00            [24]  567 	pop	bits
      0002B3 E5*00            [12]  568 	mov	a,_bp
      0002B5 24 0C            [12]  569 	add	a,#0x0c
      0002B7 F8               [12]  570 	mov	r0,a
      0002B8 A6 04            [24]  571 	mov	@r0,ar4
      0002BA 08               [12]  572 	inc	r0
      0002BB A6 05            [24]  573 	mov	@r0,ar5
      0002BD 08               [12]  574 	inc	r0
      0002BE A6 06            [24]  575 	mov	@r0,ar6
      0002C0 08               [12]  576 	inc	r0
      0002C1 A6 07            [24]  577 	mov	@r0,ar7
                                    578 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0002C3 02r01rBB         [24]  579 	ljmp	00127$
      0002C6                        580 00150$:
      0002C6 E5*00            [12]  581 	mov	a,_bp
      0002C8 24 04            [12]  582 	add	a,#0x04
      0002CA F8               [12]  583 	mov	r0,a
      0002CB 86 06            [24]  584 	mov	ar6,@r0
      0002CD 08               [12]  585 	inc	r0
      0002CE 86 05            [24]  586 	mov	ar5,@r0
      0002D0 08               [12]  587 	inc	r0
      0002D1 86 03            [24]  588 	mov	ar3,@r0
      0002D3                        589 00112$:
                                    590 ;	_atof.c:72: if (toupper(*s)=='E')
      0002D3 8E 82            [24]  591 	mov	dpl,r6
      0002D5 8D 83            [24]  592 	mov	dph,r5
      0002D7 8B F0            [24]  593 	mov	b,r3
      0002D9 12r00r00         [24]  594 	lcall	__gptrget
      0002DC F5 82            [12]  595 	mov	dpl,a
      0002DE C0 06            [24]  596 	push	ar6
      0002E0 C0 05            [24]  597 	push	ar5
      0002E2 C0 03            [24]  598 	push	ar3
      0002E4 C0*00            [24]  599 	push	bits
      0002E6 78r00            [12]  600 	mov	r0,#_islower
      0002E8 79s00            [12]  601 	mov	r1,#(_islower >> 8)
      0002EA 7As00            [12]  602 	mov	r2,#(_islower >> 16)
      0002EC 12r00r00         [24]  603 	lcall	__sdcc_banked_call
      0002EF E5 82            [12]  604 	mov	a,dpl
      0002F1 D0*00            [24]  605 	pop	bits
      0002F3 D0 03            [24]  606 	pop	ar3
      0002F5 D0 05            [24]  607 	pop	ar5
      0002F7 D0 06            [24]  608 	pop	ar6
      0002F9 60 0F            [24]  609 	jz	00131$
      0002FB 8E 82            [24]  610 	mov	dpl,r6
      0002FD 8D 83            [24]  611 	mov	dph,r5
      0002FF 8B F0            [24]  612 	mov	b,r3
      000301 12r00r00         [24]  613 	lcall	__gptrget
      000304 FF               [12]  614 	mov	r7,a
      000305 53 07 DF         [24]  615 	anl	ar7,#0xDF
      000308 80 0A            [24]  616 	sjmp	00132$
      00030A                        617 00131$:
      00030A 8E 82            [24]  618 	mov	dpl,r6
      00030C 8D 83            [24]  619 	mov	dph,r5
      00030E 8B F0            [24]  620 	mov	b,r3
      000310 12r00r00         [24]  621 	lcall	__gptrget
      000313 FF               [12]  622 	mov	r7,a
      000314                        623 00132$:
      000314 BF 45 02         [24]  624 	cjne	r7,#0x45,00192$
      000317 80 03            [24]  625 	sjmp	00193$
      000319                        626 00192$:
      000319 02r03rD1         [24]  627 	ljmp	00120$
      00031C                        628 00193$:
                                    629 ;	_atof.c:74: s++;
      00031C 0E               [12]  630 	inc	r6
      00031D BE 00 01         [24]  631 	cjne	r6,#0x00,00194$
      000320 0D               [12]  632 	inc	r5
      000321                        633 00194$:
                                    634 ;	_atof.c:75: iexp=(signed char)atoi(s);
      000321 8E 82            [24]  635 	mov	dpl,r6
      000323 8D 83            [24]  636 	mov	dph,r5
      000325 8B F0            [24]  637 	mov	b,r3
      000327 C0*00            [24]  638 	push	bits
      000329 78r00            [12]  639 	mov	r0,#_atoi
      00032B 79s00            [12]  640 	mov	r1,#(_atoi >> 8)
      00032D 7As00            [12]  641 	mov	r2,#(_atoi >> 16)
      00032F 12r00r00         [24]  642 	lcall	__sdcc_banked_call
      000332 AE 82            [24]  643 	mov	r6,dpl
      000334 AF 83            [24]  644 	mov	r7,dph
      000336 D0*00            [24]  645 	pop	bits
                                    646 ;	_atof.c:77: while(iexp!=0)
      000338                        647 00116$:
      000338 EE               [12]  648 	mov	a,r6
      000339 70 03            [24]  649 	jnz	00195$
      00033B 02r03rD1         [24]  650 	ljmp	00120$
      00033E                        651 00195$:
                                    652 ;	_atof.c:79: if(iexp<0)
      00033E EE               [12]  653 	mov	a,r6
      00033F 30 E7 47         [24]  654 	jnb	acc.7,00114$
                                    655 ;	_atof.c:81: value*=0.1;
      000342 C0 06            [24]  656 	push	ar6
      000344 C0*00            [24]  657 	push	bits
      000346 E5*00            [12]  658 	mov	a,_bp
      000348 24 08            [12]  659 	add	a,#0x08
      00034A F8               [12]  660 	mov	r0,a
      00034B E6               [12]  661 	mov	a,@r0
      00034C C0 E0            [24]  662 	push	acc
      00034E 08               [12]  663 	inc	r0
      00034F E6               [12]  664 	mov	a,@r0
      000350 C0 E0            [24]  665 	push	acc
      000352 08               [12]  666 	inc	r0
      000353 E6               [12]  667 	mov	a,@r0
      000354 C0 E0            [24]  668 	push	acc
      000356 08               [12]  669 	inc	r0
      000357 E6               [12]  670 	mov	a,@r0
      000358 C0 E0            [24]  671 	push	acc
      00035A 90 CC CD         [24]  672 	mov	dptr,#0xCCCD
      00035D 75 F0 CC         [24]  673 	mov	b,#0xCC
      000360 74 3D            [12]  674 	mov	a,#0x3D
      000362 12r00r00         [24]  675 	lcall	___fsmul
      000365 AB 82            [24]  676 	mov	r3,dpl
      000367 AC 83            [24]  677 	mov	r4,dph
      000369 AD F0            [24]  678 	mov	r5,b
      00036B FF               [12]  679 	mov	r7,a
      00036C E5 81            [12]  680 	mov	a,sp
      00036E 24 FC            [12]  681 	add	a,#0xfc
      000370 F5 81            [12]  682 	mov	sp,a
      000372 D0*00            [24]  683 	pop	bits
      000374 D0 06            [24]  684 	pop	ar6
      000376 E5*00            [12]  685 	mov	a,_bp
      000378 24 08            [12]  686 	add	a,#0x08
      00037A F8               [12]  687 	mov	r0,a
      00037B A6 03            [24]  688 	mov	@r0,ar3
      00037D 08               [12]  689 	inc	r0
      00037E A6 04            [24]  690 	mov	@r0,ar4
      000380 08               [12]  691 	inc	r0
      000381 A6 05            [24]  692 	mov	@r0,ar5
      000383 08               [12]  693 	inc	r0
      000384 A6 07            [24]  694 	mov	@r0,ar7
                                    695 ;	_atof.c:82: iexp++;
      000386 0E               [12]  696 	inc	r6
      000387 80 AF            [24]  697 	sjmp	00116$
      000389                        698 00114$:
                                    699 ;	_atof.c:86: value*=10.0;
      000389 C0 06            [24]  700 	push	ar6
      00038B C0*00            [24]  701 	push	bits
      00038D E5*00            [12]  702 	mov	a,_bp
      00038F 24 08            [12]  703 	add	a,#0x08
      000391 F8               [12]  704 	mov	r0,a
      000392 E6               [12]  705 	mov	a,@r0
      000393 C0 E0            [24]  706 	push	acc
      000395 08               [12]  707 	inc	r0
      000396 E6               [12]  708 	mov	a,@r0
      000397 C0 E0            [24]  709 	push	acc
      000399 08               [12]  710 	inc	r0
      00039A E6               [12]  711 	mov	a,@r0
      00039B C0 E0            [24]  712 	push	acc
      00039D 08               [12]  713 	inc	r0
      00039E E6               [12]  714 	mov	a,@r0
      00039F C0 E0            [24]  715 	push	acc
      0003A1 90 00 00         [24]  716 	mov	dptr,#0x0000
      0003A4 75 F0 20         [24]  717 	mov	b,#0x20
      0003A7 74 41            [12]  718 	mov	a,#0x41
      0003A9 12r00r00         [24]  719 	lcall	___fsmul
      0003AC AB 82            [24]  720 	mov	r3,dpl
      0003AE AC 83            [24]  721 	mov	r4,dph
      0003B0 AD F0            [24]  722 	mov	r5,b
      0003B2 FF               [12]  723 	mov	r7,a
      0003B3 E5 81            [12]  724 	mov	a,sp
      0003B5 24 FC            [12]  725 	add	a,#0xfc
      0003B7 F5 81            [12]  726 	mov	sp,a
      0003B9 D0*00            [24]  727 	pop	bits
      0003BB D0 06            [24]  728 	pop	ar6
      0003BD E5*00            [12]  729 	mov	a,_bp
      0003BF 24 08            [12]  730 	add	a,#0x08
      0003C1 F8               [12]  731 	mov	r0,a
      0003C2 A6 03            [24]  732 	mov	@r0,ar3
      0003C4 08               [12]  733 	inc	r0
      0003C5 A6 04            [24]  734 	mov	@r0,ar4
      0003C7 08               [12]  735 	inc	r0
      0003C8 A6 05            [24]  736 	mov	@r0,ar5
      0003CA 08               [12]  737 	inc	r0
      0003CB A6 07            [24]  738 	mov	@r0,ar7
                                    739 ;	_atof.c:87: iexp--;
      0003CD 1E               [12]  740 	dec	r6
      0003CE 02r03r38         [24]  741 	ljmp	00116$
      0003D1                        742 00120$:
                                    743 ;	_atof.c:93: if(sign) value*=-1.0;
      0003D1 30*00 12         [24]  744 	jnb	b0,00122$
      0003D4 E5*00            [12]  745 	mov	a,_bp
      0003D6 24 08            [12]  746 	add	a,#0x08
      0003D8 F8               [12]  747 	mov	r0,a
      0003D9 E6               [12]  748 	mov	a,@r0
      0003DA F6               [12]  749 	mov	@r0,a
      0003DB 08               [12]  750 	inc	r0
      0003DC E6               [12]  751 	mov	a,@r0
      0003DD F6               [12]  752 	mov	@r0,a
      0003DE 08               [12]  753 	inc	r0
      0003DF E6               [12]  754 	mov	a,@r0
      0003E0 F6               [12]  755 	mov	@r0,a
      0003E1 08               [12]  756 	inc	r0
      0003E2 E6               [12]  757 	mov	a,@r0
      0003E3 B2 E7            [12]  758 	cpl	acc.7
      0003E5 F6               [12]  759 	mov	@r0,a
      0003E6                        760 00122$:
                                    761 ;	_atof.c:94: return (value);
      0003E6 E5*00            [12]  762 	mov	a,_bp
      0003E8 24 08            [12]  763 	add	a,#0x08
      0003EA F8               [12]  764 	mov	r0,a
      0003EB 86 82            [24]  765 	mov	dpl,@r0
      0003ED 08               [12]  766 	inc	r0
      0003EE 86 83            [24]  767 	mov	dph,@r0
      0003F0 08               [12]  768 	inc	r0
      0003F1 86 F0            [24]  769 	mov	b,@r0
      0003F3 08               [12]  770 	inc	r0
      0003F4 E6               [12]  771 	mov	a,@r0
      0003F5 85*00 81         [24]  772 	mov	sp,_bp
      0003F8 D0*00            [24]  773 	pop	_bp
      0003FA 02r00r00         [24]  774 	ljmp	__sdcc_banked_ret
                                    775 	.area CSEG    (CODE)
                                    776 	.area CONST   (CODE)
                                    777 	.area XINIT   (CODE)
                                    778 	.area CABS    (ABS,CODE)
