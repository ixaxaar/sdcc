                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:14 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _memchr
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _memchr
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'memchr'
                                     92 ;------------------------------------------------------------
                                     93 ;c                         Allocated to stack - _bp -5
                                     94 ;n                         Allocated to stack - _bp -7
                                     95 ;s                         Allocated to registers r5 r6 r7 
                                     96 ;p                         Allocated to stack - _bp +1
                                     97 ;end                       Allocated to stack - _bp +4
                                     98 ;------------------------------------------------------------
                                     99 ;	_memchr.c:31: void *memchr(const void *s, int c, size_t n)
                                    100 ;	-----------------------------------------
                                    101 ;	 function memchr
                                    102 ;	-----------------------------------------
      000000                        103 _memchr:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
      000000 C0*00            [24]  112 	push	_bp
      000002 E5 81            [12]  113 	mov	a,sp
      000004 F5*00            [12]  114 	mov	_bp,a
      000006 24 06            [12]  115 	add	a,#0x06
      000008 F5 81            [12]  116 	mov	sp,a
      00000A AD 82            [24]  117 	mov	r5,dpl
      00000C AE 83            [24]  118 	mov	r6,dph
      00000E AF F0            [24]  119 	mov	r7,b
                                    120 ;	_memchr.c:33: unsigned char *p = (unsigned char *)s;
      000010 A8*00            [24]  121 	mov	r0,_bp
      000012 08               [12]  122 	inc	r0
      000013 A6 05            [24]  123 	mov	@r0,ar5
      000015 08               [12]  124 	inc	r0
      000016 A6 06            [24]  125 	mov	@r0,ar6
      000018 08               [12]  126 	inc	r0
      000019 A6 07            [24]  127 	mov	@r0,ar7
                                    128 ;	_memchr.c:34: unsigned char *end = p + n;
      00001B A8*00            [24]  129 	mov	r0,_bp
      00001D 08               [12]  130 	inc	r0
      00001E E5*00            [12]  131 	mov	a,_bp
      000020 24 F9            [12]  132 	add	a,#0xf9
      000022 F9               [12]  133 	mov	r1,a
      000023 E7               [12]  134 	mov	a,@r1
      000024 26               [12]  135 	add	a,@r0
      000025 FA               [12]  136 	mov	r2,a
      000026 09               [12]  137 	inc	r1
      000027 E7               [12]  138 	mov	a,@r1
      000028 08               [12]  139 	inc	r0
      000029 36               [12]  140 	addc	a,@r0
      00002A FB               [12]  141 	mov	r3,a
      00002B 08               [12]  142 	inc	r0
      00002C 86 04            [24]  143 	mov	ar4,@r0
      00002E E5*00            [12]  144 	mov	a,_bp
      000030 24 04            [12]  145 	add	a,#0x04
      000032 F8               [12]  146 	mov	r0,a
      000033 A6 02            [24]  147 	mov	@r0,ar2
      000035 08               [12]  148 	inc	r0
      000036 A6 03            [24]  149 	mov	@r0,ar3
      000038 08               [12]  150 	inc	r0
      000039 A6 04            [24]  151 	mov	@r0,ar4
                                    152 ;	_memchr.c:38: return(0);
      00003B A8*00            [24]  153 	mov	r0,_bp
      00003D 08               [12]  154 	inc	r0
      00003E 86 02            [24]  155 	mov	ar2,@r0
      000040 08               [12]  156 	inc	r0
      000041 86 03            [24]  157 	mov	ar3,@r0
      000043 08               [12]  158 	inc	r0
      000044 86 04            [24]  159 	mov	ar4,@r0
      000046                        160 00105$:
                                    161 ;	_memchr.c:35: for(; p != end; p++)
      000046 E5*00            [12]  162 	mov	a,_bp
      000048 24 04            [12]  163 	add	a,#0x04
      00004A F8               [12]  164 	mov	r0,a
      00004B C0 02            [24]  165 	push	ar2
      00004D C0 03            [24]  166 	push	ar3
      00004F C0 04            [24]  167 	push	ar4
      000051 86 82            [24]  168 	mov	dpl,@r0
      000053 08               [12]  169 	inc	r0
      000054 86 83            [24]  170 	mov	dph,@r0
      000056 08               [12]  171 	inc	r0
      000057 86 F0            [24]  172 	mov	b,@r0
      000059 12r00r00         [24]  173 	lcall	___gptr_cmp
      00005C 15 81            [12]  174 	dec	sp
      00005E 15 81            [12]  175 	dec	sp
      000060 15 81            [12]  176 	dec	sp
      000062 60 43            [24]  177 	jz	00103$
                                    178 ;	_memchr.c:36: if(*p == c)
      000064 8A 82            [24]  179 	mov	dpl,r2
      000066 8B 83            [24]  180 	mov	dph,r3
      000068 8C F0            [24]  181 	mov	b,r4
      00006A 12r00r00         [24]  182 	lcall	__gptrget
      00006D FF               [12]  183 	mov	r7,a
      00006E 7E 00            [12]  184 	mov	r6,#0x00
      000070 E5*00            [12]  185 	mov	a,_bp
      000072 24 FB            [12]  186 	add	a,#0xfb
      000074 F8               [12]  187 	mov	r0,a
      000075 E6               [12]  188 	mov	a,@r0
      000076 B5 07 07         [24]  189 	cjne	a,ar7,00119$
      000079 08               [12]  190 	inc	r0
      00007A E6               [12]  191 	mov	a,@r0
      00007B B5 06 02         [24]  192 	cjne	a,ar6,00119$
      00007E 80 02            [24]  193 	sjmp	00120$
      000080                        194 00119$:
      000080 80 13            [24]  195 	sjmp	00106$
      000082                        196 00120$:
                                    197 ;	_memchr.c:37: return((void *)p);
      000082 A8*00            [24]  198 	mov	r0,_bp
      000084 08               [12]  199 	inc	r0
      000085 86 05            [24]  200 	mov	ar5,@r0
      000087 08               [12]  201 	inc	r0
      000088 86 06            [24]  202 	mov	ar6,@r0
      00008A 08               [12]  203 	inc	r0
      00008B 86 07            [24]  204 	mov	ar7,@r0
      00008D 8D 82            [24]  205 	mov	dpl,r5
      00008F 8E 83            [24]  206 	mov	dph,r6
      000091 8F F0            [24]  207 	mov	b,r7
      000093 80 18            [24]  208 	sjmp	00107$
      000095                        209 00106$:
                                    210 ;	_memchr.c:35: for(; p != end; p++)
      000095 0A               [12]  211 	inc	r2
      000096 BA 00 01         [24]  212 	cjne	r2,#0x00,00121$
      000099 0B               [12]  213 	inc	r3
      00009A                        214 00121$:
      00009A A8*00            [24]  215 	mov	r0,_bp
      00009C 08               [12]  216 	inc	r0
      00009D A6 02            [24]  217 	mov	@r0,ar2
      00009F 08               [12]  218 	inc	r0
      0000A0 A6 03            [24]  219 	mov	@r0,ar3
      0000A2 08               [12]  220 	inc	r0
      0000A3 A6 04            [24]  221 	mov	@r0,ar4
      0000A5 80 9F            [24]  222 	sjmp	00105$
      0000A7                        223 00103$:
                                    224 ;	_memchr.c:38: return(0);
      0000A7 90 00 00         [24]  225 	mov	dptr,#0x0000
      0000AA 75 F0 00         [24]  226 	mov	b,#0x00
      0000AD                        227 00107$:
      0000AD 85*00 81         [24]  228 	mov	sp,_bp
      0000B0 D0*00            [24]  229 	pop	_bp
      0000B2 02r00r00         [24]  230 	ljmp	__sdcc_banked_ret
                                    231 	.area CSEG    (CODE)
                                    232 	.area CONST   (CODE)
                                    233 	.area XINIT   (CODE)
                                    234 	.area CABS    (ABS,CODE)
