                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:13 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module tancotf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tancotf
                                     13 	.globl _fabsf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'tancotf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscotan                   Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;f                         Allocated to stack - _bp +9
                                    111 ;g                         Allocated to stack - _bp +13
                                    112 ;xn                        Allocated to stack - _bp +17
                                    113 ;xnum                      Allocated to stack - _bp +21
                                    114 ;xden                      Allocated to stack - _bp +25
                                    115 ;n                         Allocated to stack - _bp +29
                                    116 ;sloc0                     Allocated to stack - _bp +5
                                    117 ;------------------------------------------------------------
                                    118 ;	tancotf.c:53: float tancotf(const float x, const bool iscotan)
                                    119 ;	-----------------------------------------
                                    120 ;	 function tancotf
                                    121 ;	-----------------------------------------
      000000                        122 _tancotf:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 85 81*00         [24]  132 	mov	_bp,sp
      000005 C0 82            [24]  133 	push	dpl
      000007 C0 83            [24]  134 	push	dph
      000009 C0 F0            [24]  135 	push	b
      00000B C0 E0            [24]  136 	push	acc
      00000D E5 81            [12]  137 	mov	a,sp
      00000F 24 1A            [12]  138 	add	a,#0x1A
      000011 F5 81            [12]  139 	mov	sp,a
                                    140 ;	tancotf.c:58: if (fabsf(x) > YMAX)
      000013 A8*00            [24]  141 	mov	r0,_bp
      000015 08               [12]  142 	inc	r0
      000016 86 82            [24]  143 	mov	dpl,@r0
      000018 08               [12]  144 	inc	r0
      000019 86 83            [24]  145 	mov	dph,@r0
      00001B 08               [12]  146 	inc	r0
      00001C 86 F0            [24]  147 	mov	b,@r0
      00001E 08               [12]  148 	inc	r0
      00001F E6               [12]  149 	mov	a,@r0
      000020 C0*00            [24]  150 	push	bits
      000022 78r00            [12]  151 	mov	r0,#_fabsf
      000024 79s00            [12]  152 	mov	r1,#(_fabsf >> 8)
      000026 7As00            [12]  153 	mov	r2,#(_fabsf >> 16)
      000028 12r00r00         [24]  154 	lcall	__sdcc_banked_call
      00002B AA 82            [24]  155 	mov	r2,dpl
      00002D AB 83            [24]  156 	mov	r3,dph
      00002F AE F0            [24]  157 	mov	r6,b
      000031 FF               [12]  158 	mov	r7,a
      000032 D0*00            [24]  159 	pop	bits
      000034 C0*00            [24]  160 	push	bits
      000036 E4               [12]  161 	clr	a
      000037 C0 E0            [24]  162 	push	acc
      000039 74 08            [12]  163 	mov	a,#0x08
      00003B C0 E0            [24]  164 	push	acc
      00003D 74 C9            [12]  165 	mov	a,#0xC9
      00003F C0 E0            [24]  166 	push	acc
      000041 74 45            [12]  167 	mov	a,#0x45
      000043 C0 E0            [24]  168 	push	acc
      000045 8A 82            [24]  169 	mov	dpl,r2
      000047 8B 83            [24]  170 	mov	dph,r3
      000049 8E F0            [24]  171 	mov	b,r6
      00004B EF               [12]  172 	mov	a,r7
      00004C 12r00r00         [24]  173 	lcall	___fsgt
      00004F AF 82            [24]  174 	mov	r7,dpl
      000051 E5 81            [12]  175 	mov	a,sp
      000053 24 FC            [12]  176 	add	a,#0xfc
      000055 F5 81            [12]  177 	mov	sp,a
      000057 D0*00            [24]  178 	pop	bits
      000059 EF               [12]  179 	mov	a,r7
      00005A 60 12            [24]  180 	jz	00102$
                                    181 ;	tancotf.c:60: errno = ERANGE;
      00005C 90r00r00         [24]  182 	mov	dptr,#_errno
      00005F 74 22            [12]  183 	mov	a,#0x22
      000061 F0               [24]  184 	movx	@dptr,a
      000062 E4               [12]  185 	clr	a
      000063 A3               [24]  186 	inc	dptr
      000064 F0               [24]  187 	movx	@dptr,a
                                    188 ;	tancotf.c:61: return 0.0;
      000065 90 00 00         [24]  189 	mov	dptr,#(0x00&0x00ff)
      000068 E4               [12]  190 	clr	a
      000069 F5 F0            [12]  191 	mov	b,a
      00006B 02r06r10         [24]  192 	ljmp	00115$
      00006E                        193 00102$:
                                    194 ;	tancotf.c:65: n=(x*TWO_O_PI+(x>0.0?0.5:-0.5)); /*works for +-x*/
      00006E C0*00            [24]  195 	push	bits
      000070 A8*00            [24]  196 	mov	r0,_bp
      000072 08               [12]  197 	inc	r0
      000073 E6               [12]  198 	mov	a,@r0
      000074 C0 E0            [24]  199 	push	acc
      000076 08               [12]  200 	inc	r0
      000077 E6               [12]  201 	mov	a,@r0
      000078 C0 E0            [24]  202 	push	acc
      00007A 08               [12]  203 	inc	r0
      00007B E6               [12]  204 	mov	a,@r0
      00007C C0 E0            [24]  205 	push	acc
      00007E 08               [12]  206 	inc	r0
      00007F E6               [12]  207 	mov	a,@r0
      000080 C0 E0            [24]  208 	push	acc
      000082 90 F9 83         [24]  209 	mov	dptr,#0xF983
      000085 75 F0 22         [24]  210 	mov	b,#0x22
      000088 74 3F            [12]  211 	mov	a,#0x3F
      00008A 12r00r00         [24]  212 	lcall	___fsmul
      00008D AC 82            [24]  213 	mov	r4,dpl
      00008F AD 83            [24]  214 	mov	r5,dph
      000091 AE F0            [24]  215 	mov	r6,b
      000093 FF               [12]  216 	mov	r7,a
      000094 E5 81            [12]  217 	mov	a,sp
      000096 24 FC            [12]  218 	add	a,#0xfc
      000098 F5 81            [12]  219 	mov	sp,a
      00009A D0*00            [24]  220 	pop	bits
      00009C C0 07            [24]  221 	push	ar7
      00009E C0 06            [24]  222 	push	ar6
      0000A0 C0 05            [24]  223 	push	ar5
      0000A2 C0 04            [24]  224 	push	ar4
      0000A4 C0*00            [24]  225 	push	bits
      0000A6 E4               [12]  226 	clr	a
      0000A7 C0 E0            [24]  227 	push	acc
      0000A9 C0 E0            [24]  228 	push	acc
      0000AB C0 E0            [24]  229 	push	acc
      0000AD C0 E0            [24]  230 	push	acc
      0000AF A8*00            [24]  231 	mov	r0,_bp
      0000B1 08               [12]  232 	inc	r0
      0000B2 86 82            [24]  233 	mov	dpl,@r0
      0000B4 08               [12]  234 	inc	r0
      0000B5 86 83            [24]  235 	mov	dph,@r0
      0000B7 08               [12]  236 	inc	r0
      0000B8 86 F0            [24]  237 	mov	b,@r0
      0000BA 08               [12]  238 	inc	r0
      0000BB E6               [12]  239 	mov	a,@r0
      0000BC 12r00r00         [24]  240 	lcall	___fsgt
      0000BF AB 82            [24]  241 	mov	r3,dpl
      0000C1 E5 81            [12]  242 	mov	a,sp
      0000C3 24 FC            [12]  243 	add	a,#0xfc
      0000C5 F5 81            [12]  244 	mov	sp,a
      0000C7 D0*00            [24]  245 	pop	bits
      0000C9 D0 04            [24]  246 	pop	ar4
      0000CB D0 05            [24]  247 	pop	ar5
      0000CD D0 06            [24]  248 	pop	ar6
      0000CF D0 07            [24]  249 	pop	ar7
      0000D1 EB               [12]  250 	mov	a,r3
      0000D2 60 10            [24]  251 	jz	00117$
      0000D4 E5*00            [12]  252 	mov	a,_bp
      0000D6 24 05            [12]  253 	add	a,#0x05
      0000D8 F8               [12]  254 	mov	r0,a
      0000D9 E4               [12]  255 	clr	a
      0000DA F6               [12]  256 	mov	@r0,a
      0000DB 08               [12]  257 	inc	r0
      0000DC F6               [12]  258 	mov	@r0,a
      0000DD 08               [12]  259 	inc	r0
      0000DE F6               [12]  260 	mov	@r0,a
      0000DF 08               [12]  261 	inc	r0
      0000E0 76 3F            [12]  262 	mov	@r0,#0x3F
      0000E2 80 0E            [24]  263 	sjmp	00118$
      0000E4                        264 00117$:
      0000E4 E5*00            [12]  265 	mov	a,_bp
      0000E6 24 05            [12]  266 	add	a,#0x05
      0000E8 F8               [12]  267 	mov	r0,a
      0000E9 E4               [12]  268 	clr	a
      0000EA F6               [12]  269 	mov	@r0,a
      0000EB 08               [12]  270 	inc	r0
      0000EC F6               [12]  271 	mov	@r0,a
      0000ED 08               [12]  272 	inc	r0
      0000EE F6               [12]  273 	mov	@r0,a
      0000EF 08               [12]  274 	inc	r0
      0000F0 76 BF            [12]  275 	mov	@r0,#0xBF
      0000F2                        276 00118$:
      0000F2 C0*00            [24]  277 	push	bits
      0000F4 E5*00            [12]  278 	mov	a,_bp
      0000F6 24 05            [12]  279 	add	a,#0x05
      0000F8 F8               [12]  280 	mov	r0,a
      0000F9 E6               [12]  281 	mov	a,@r0
      0000FA C0 E0            [24]  282 	push	acc
      0000FC 08               [12]  283 	inc	r0
      0000FD E6               [12]  284 	mov	a,@r0
      0000FE C0 E0            [24]  285 	push	acc
      000100 08               [12]  286 	inc	r0
      000101 E6               [12]  287 	mov	a,@r0
      000102 C0 E0            [24]  288 	push	acc
      000104 08               [12]  289 	inc	r0
      000105 E6               [12]  290 	mov	a,@r0
      000106 C0 E0            [24]  291 	push	acc
      000108 8C 82            [24]  292 	mov	dpl,r4
      00010A 8D 83            [24]  293 	mov	dph,r5
      00010C 8E F0            [24]  294 	mov	b,r6
      00010E EF               [12]  295 	mov	a,r7
      00010F 12r00r00         [24]  296 	lcall	___fsadd
      000112 AC 82            [24]  297 	mov	r4,dpl
      000114 AD 83            [24]  298 	mov	r5,dph
      000116 AE F0            [24]  299 	mov	r6,b
      000118 FF               [12]  300 	mov	r7,a
      000119 E5 81            [12]  301 	mov	a,sp
      00011B 24 FC            [12]  302 	add	a,#0xfc
      00011D F5 81            [12]  303 	mov	sp,a
      00011F D0*00            [24]  304 	pop	bits
      000121 8C 82            [24]  305 	mov	dpl,r4
      000123 8D 83            [24]  306 	mov	dph,r5
      000125 8E F0            [24]  307 	mov	b,r6
      000127 EF               [12]  308 	mov	a,r7
      000128 C0*00            [24]  309 	push	bits
      00012A 12r00r00         [24]  310 	lcall	___fs2sint
      00012D AE 82            [24]  311 	mov	r6,dpl
      00012F AF 83            [24]  312 	mov	r7,dph
      000131 D0*00            [24]  313 	pop	bits
      000133 E5*00            [12]  314 	mov	a,_bp
      000135 24 1D            [12]  315 	add	a,#0x1d
      000137 F8               [12]  316 	mov	r0,a
      000138 A6 06            [24]  317 	mov	@r0,ar6
      00013A 08               [12]  318 	inc	r0
      00013B A6 07            [24]  319 	mov	@r0,ar7
                                    320 ;	tancotf.c:66: xn=n;
      00013D E5*00            [12]  321 	mov	a,_bp
      00013F 24 1D            [12]  322 	add	a,#0x1d
      000141 F8               [12]  323 	mov	r0,a
      000142 86 82            [24]  324 	mov	dpl,@r0
      000144 08               [12]  325 	inc	r0
      000145 86 83            [24]  326 	mov	dph,@r0
      000147 C0*00            [24]  327 	push	bits
      000149 12r00r00         [24]  328 	lcall	___sint2fs
      00014C AA 82            [24]  329 	mov	r2,dpl
      00014E AB 83            [24]  330 	mov	r3,dph
      000150 AC F0            [24]  331 	mov	r4,b
      000152 FD               [12]  332 	mov	r5,a
      000153 D0*00            [24]  333 	pop	bits
      000155 E5*00            [12]  334 	mov	a,_bp
      000157 24 11            [12]  335 	add	a,#0x11
      000159 F8               [12]  336 	mov	r0,a
      00015A A6 02            [24]  337 	mov	@r0,ar2
      00015C 08               [12]  338 	inc	r0
      00015D A6 03            [24]  339 	mov	@r0,ar3
      00015F 08               [12]  340 	inc	r0
      000160 A6 04            [24]  341 	mov	@r0,ar4
      000162 08               [12]  342 	inc	r0
      000163 A6 05            [24]  343 	mov	@r0,ar5
                                    344 ;	tancotf.c:68: xnum=(int)x;
      000165 A8*00            [24]  345 	mov	r0,_bp
      000167 08               [12]  346 	inc	r0
      000168 86 82            [24]  347 	mov	dpl,@r0
      00016A 08               [12]  348 	inc	r0
      00016B 86 83            [24]  349 	mov	dph,@r0
      00016D 08               [12]  350 	inc	r0
      00016E 86 F0            [24]  351 	mov	b,@r0
      000170 08               [12]  352 	inc	r0
      000171 E6               [12]  353 	mov	a,@r0
      000172 C0*00            [24]  354 	push	bits
      000174 12r00r00         [24]  355 	lcall	___fs2sint
      000177 AE 82            [24]  356 	mov	r6,dpl
      000179 AF 83            [24]  357 	mov	r7,dph
      00017B D0*00            [24]  358 	pop	bits
      00017D 8E 82            [24]  359 	mov	dpl,r6
      00017F 8F 83            [24]  360 	mov	dph,r7
      000181 C0*00            [24]  361 	push	bits
      000183 12r00r00         [24]  362 	lcall	___sint2fs
      000186 AF 82            [24]  363 	mov	r7,dpl
      000188 AE 83            [24]  364 	mov	r6,dph
      00018A AD F0            [24]  365 	mov	r5,b
      00018C FC               [12]  366 	mov	r4,a
      00018D D0*00            [24]  367 	pop	bits
      00018F E5*00            [12]  368 	mov	a,_bp
      000191 24 15            [12]  369 	add	a,#0x15
      000193 F8               [12]  370 	mov	r0,a
      000194 A6 07            [24]  371 	mov	@r0,ar7
      000196 08               [12]  372 	inc	r0
      000197 A6 06            [24]  373 	mov	@r0,ar6
      000199 08               [12]  374 	inc	r0
      00019A A6 05            [24]  375 	mov	@r0,ar5
      00019C 08               [12]  376 	inc	r0
      00019D A6 04            [24]  377 	mov	@r0,ar4
                                    378 ;	tancotf.c:69: xden=x-xnum;
      00019F C0*00            [24]  379 	push	bits
      0001A1 E5*00            [12]  380 	mov	a,_bp
      0001A3 24 15            [12]  381 	add	a,#0x15
      0001A5 F8               [12]  382 	mov	r0,a
      0001A6 E6               [12]  383 	mov	a,@r0
      0001A7 C0 E0            [24]  384 	push	acc
      0001A9 08               [12]  385 	inc	r0
      0001AA E6               [12]  386 	mov	a,@r0
      0001AB C0 E0            [24]  387 	push	acc
      0001AD 08               [12]  388 	inc	r0
      0001AE E6               [12]  389 	mov	a,@r0
      0001AF C0 E0            [24]  390 	push	acc
      0001B1 08               [12]  391 	inc	r0
      0001B2 E6               [12]  392 	mov	a,@r0
      0001B3 C0 E0            [24]  393 	push	acc
      0001B5 A8*00            [24]  394 	mov	r0,_bp
      0001B7 08               [12]  395 	inc	r0
      0001B8 86 82            [24]  396 	mov	dpl,@r0
      0001BA 08               [12]  397 	inc	r0
      0001BB 86 83            [24]  398 	mov	dph,@r0
      0001BD 08               [12]  399 	inc	r0
      0001BE 86 F0            [24]  400 	mov	b,@r0
      0001C0 08               [12]  401 	inc	r0
      0001C1 E6               [12]  402 	mov	a,@r0
      0001C2 12r00r00         [24]  403 	lcall	___fssub
      0001C5 AF 82            [24]  404 	mov	r7,dpl
      0001C7 AE 83            [24]  405 	mov	r6,dph
      0001C9 AD F0            [24]  406 	mov	r5,b
      0001CB FC               [12]  407 	mov	r4,a
      0001CC E5 81            [12]  408 	mov	a,sp
      0001CE 24 FC            [12]  409 	add	a,#0xfc
      0001D0 F5 81            [12]  410 	mov	sp,a
      0001D2 D0*00            [24]  411 	pop	bits
      0001D4 E5*00            [12]  412 	mov	a,_bp
      0001D6 24 19            [12]  413 	add	a,#0x19
      0001D8 F8               [12]  414 	mov	r0,a
      0001D9 A6 07            [24]  415 	mov	@r0,ar7
      0001DB 08               [12]  416 	inc	r0
      0001DC A6 06            [24]  417 	mov	@r0,ar6
      0001DE 08               [12]  418 	inc	r0
      0001DF A6 05            [24]  419 	mov	@r0,ar5
      0001E1 08               [12]  420 	inc	r0
      0001E2 A6 04            [24]  421 	mov	@r0,ar4
                                    422 ;	tancotf.c:70: f=((xnum-xn*C1)+xden)-xn*C2;
      0001E4 C0*00            [24]  423 	push	bits
      0001E6 E5*00            [12]  424 	mov	a,_bp
      0001E8 24 11            [12]  425 	add	a,#0x11
      0001EA F8               [12]  426 	mov	r0,a
      0001EB E6               [12]  427 	mov	a,@r0
      0001EC C0 E0            [24]  428 	push	acc
      0001EE 08               [12]  429 	inc	r0
      0001EF E6               [12]  430 	mov	a,@r0
      0001F0 C0 E0            [24]  431 	push	acc
      0001F2 08               [12]  432 	inc	r0
      0001F3 E6               [12]  433 	mov	a,@r0
      0001F4 C0 E0            [24]  434 	push	acc
      0001F6 08               [12]  435 	inc	r0
      0001F7 E6               [12]  436 	mov	a,@r0
      0001F8 C0 E0            [24]  437 	push	acc
      0001FA 90 00 00         [24]  438 	mov	dptr,#0x0000
      0001FD 75 F0 C9         [24]  439 	mov	b,#0xC9
      000200 74 3F            [12]  440 	mov	a,#0x3F
      000202 12r00r00         [24]  441 	lcall	___fsmul
      000205 AC 82            [24]  442 	mov	r4,dpl
      000207 AD 83            [24]  443 	mov	r5,dph
      000209 AE F0            [24]  444 	mov	r6,b
      00020B FF               [12]  445 	mov	r7,a
      00020C E5 81            [12]  446 	mov	a,sp
      00020E 24 FC            [12]  447 	add	a,#0xfc
      000210 F5 81            [12]  448 	mov	sp,a
      000212 D0*00            [24]  449 	pop	bits
      000214 C0*00            [24]  450 	push	bits
      000216 C0 04            [24]  451 	push	ar4
      000218 C0 05            [24]  452 	push	ar5
      00021A C0 06            [24]  453 	push	ar6
      00021C C0 07            [24]  454 	push	ar7
      00021E E5*00            [12]  455 	mov	a,_bp
      000220 24 15            [12]  456 	add	a,#0x15
      000222 F8               [12]  457 	mov	r0,a
      000223 86 82            [24]  458 	mov	dpl,@r0
      000225 08               [12]  459 	inc	r0
      000226 86 83            [24]  460 	mov	dph,@r0
      000228 08               [12]  461 	inc	r0
      000229 86 F0            [24]  462 	mov	b,@r0
      00022B 08               [12]  463 	inc	r0
      00022C E6               [12]  464 	mov	a,@r0
      00022D 12r00r00         [24]  465 	lcall	___fssub
      000230 AC 82            [24]  466 	mov	r4,dpl
      000232 AD 83            [24]  467 	mov	r5,dph
      000234 AE F0            [24]  468 	mov	r6,b
      000236 FF               [12]  469 	mov	r7,a
      000237 E5 81            [12]  470 	mov	a,sp
      000239 24 FC            [12]  471 	add	a,#0xfc
      00023B F5 81            [12]  472 	mov	sp,a
      00023D D0*00            [24]  473 	pop	bits
      00023F C0*00            [24]  474 	push	bits
      000241 E5*00            [12]  475 	mov	a,_bp
      000243 24 19            [12]  476 	add	a,#0x19
      000245 F8               [12]  477 	mov	r0,a
      000246 E6               [12]  478 	mov	a,@r0
      000247 C0 E0            [24]  479 	push	acc
      000249 08               [12]  480 	inc	r0
      00024A E6               [12]  481 	mov	a,@r0
      00024B C0 E0            [24]  482 	push	acc
      00024D 08               [12]  483 	inc	r0
      00024E E6               [12]  484 	mov	a,@r0
      00024F C0 E0            [24]  485 	push	acc
      000251 08               [12]  486 	inc	r0
      000252 E6               [12]  487 	mov	a,@r0
      000253 C0 E0            [24]  488 	push	acc
      000255 8C 82            [24]  489 	mov	dpl,r4
      000257 8D 83            [24]  490 	mov	dph,r5
      000259 8E F0            [24]  491 	mov	b,r6
      00025B EF               [12]  492 	mov	a,r7
      00025C 12r00r00         [24]  493 	lcall	___fsadd
      00025F C8               [12]  494 	xch	a,r0
      000260 E5*00            [12]  495 	mov	a,_bp
      000262 24 05            [12]  496 	add	a,#0x05
      000264 C8               [12]  497 	xch	a,r0
      000265 A6 82            [24]  498 	mov	@r0,dpl
      000267 08               [12]  499 	inc	r0
      000268 A6 83            [24]  500 	mov	@r0,dph
      00026A 08               [12]  501 	inc	r0
      00026B A6 F0            [24]  502 	mov	@r0,b
      00026D 08               [12]  503 	inc	r0
      00026E F6               [12]  504 	mov	@r0,a
      00026F E5 81            [12]  505 	mov	a,sp
      000271 24 FC            [12]  506 	add	a,#0xfc
      000273 F5 81            [12]  507 	mov	sp,a
      000275 D0*00            [24]  508 	pop	bits
      000277 C0*00            [24]  509 	push	bits
      000279 E5*00            [12]  510 	mov	a,_bp
      00027B 24 11            [12]  511 	add	a,#0x11
      00027D F8               [12]  512 	mov	r0,a
      00027E E6               [12]  513 	mov	a,@r0
      00027F C0 E0            [24]  514 	push	acc
      000281 08               [12]  515 	inc	r0
      000282 E6               [12]  516 	mov	a,@r0
      000283 C0 E0            [24]  517 	push	acc
      000285 08               [12]  518 	inc	r0
      000286 E6               [12]  519 	mov	a,@r0
      000287 C0 E0            [24]  520 	push	acc
      000289 08               [12]  521 	inc	r0
      00028A E6               [12]  522 	mov	a,@r0
      00028B C0 E0            [24]  523 	push	acc
      00028D 90 AA 22         [24]  524 	mov	dptr,#0xAA22
      000290 75 F0 FD         [24]  525 	mov	b,#0xFD
      000293 74 39            [12]  526 	mov	a,#0x39
      000295 12r00r00         [24]  527 	lcall	___fsmul
      000298 AA 82            [24]  528 	mov	r2,dpl
      00029A AB 83            [24]  529 	mov	r3,dph
      00029C AE F0            [24]  530 	mov	r6,b
      00029E FF               [12]  531 	mov	r7,a
      00029F E5 81            [12]  532 	mov	a,sp
      0002A1 24 FC            [12]  533 	add	a,#0xfc
      0002A3 F5 81            [12]  534 	mov	sp,a
      0002A5 D0*00            [24]  535 	pop	bits
      0002A7 C0*00            [24]  536 	push	bits
      0002A9 C0 02            [24]  537 	push	ar2
      0002AB C0 03            [24]  538 	push	ar3
      0002AD C0 06            [24]  539 	push	ar6
      0002AF C0 07            [24]  540 	push	ar7
      0002B1 E5*00            [12]  541 	mov	a,_bp
      0002B3 24 05            [12]  542 	add	a,#0x05
      0002B5 F8               [12]  543 	mov	r0,a
      0002B6 86 82            [24]  544 	mov	dpl,@r0
      0002B8 08               [12]  545 	inc	r0
      0002B9 86 83            [24]  546 	mov	dph,@r0
      0002BB 08               [12]  547 	inc	r0
      0002BC 86 F0            [24]  548 	mov	b,@r0
      0002BE 08               [12]  549 	inc	r0
      0002BF E6               [12]  550 	mov	a,@r0
      0002C0 12r00r00         [24]  551 	lcall	___fssub
      0002C3 AC 82            [24]  552 	mov	r4,dpl
      0002C5 AD 83            [24]  553 	mov	r5,dph
      0002C7 AE F0            [24]  554 	mov	r6,b
      0002C9 FF               [12]  555 	mov	r7,a
      0002CA E5 81            [12]  556 	mov	a,sp
      0002CC 24 FC            [12]  557 	add	a,#0xfc
      0002CE F5 81            [12]  558 	mov	sp,a
      0002D0 D0*00            [24]  559 	pop	bits
      0002D2 E5*00            [12]  560 	mov	a,_bp
      0002D4 24 09            [12]  561 	add	a,#0x09
      0002D6 F8               [12]  562 	mov	r0,a
      0002D7 A6 04            [24]  563 	mov	@r0,ar4
      0002D9 08               [12]  564 	inc	r0
      0002DA A6 05            [24]  565 	mov	@r0,ar5
      0002DC 08               [12]  566 	inc	r0
      0002DD A6 06            [24]  567 	mov	@r0,ar6
      0002DF 08               [12]  568 	inc	r0
      0002E0 A6 07            [24]  569 	mov	@r0,ar7
                                    570 ;	tancotf.c:72: if (fabsf(f) < EPS)
      0002E2 E5*00            [12]  571 	mov	a,_bp
      0002E4 24 09            [12]  572 	add	a,#0x09
      0002E6 F8               [12]  573 	mov	r0,a
      0002E7 86 82            [24]  574 	mov	dpl,@r0
      0002E9 08               [12]  575 	inc	r0
      0002EA 86 83            [24]  576 	mov	dph,@r0
      0002EC 08               [12]  577 	inc	r0
      0002ED 86 F0            [24]  578 	mov	b,@r0
      0002EF 08               [12]  579 	inc	r0
      0002F0 E6               [12]  580 	mov	a,@r0
      0002F1 C0*00            [24]  581 	push	bits
      0002F3 78r00            [12]  582 	mov	r0,#_fabsf
      0002F5 79s00            [12]  583 	mov	r1,#(_fabsf >> 8)
      0002F7 7As00            [12]  584 	mov	r2,#(_fabsf >> 16)
      0002F9 12r00r00         [24]  585 	lcall	__sdcc_banked_call
      0002FC AA 82            [24]  586 	mov	r2,dpl
      0002FE AB 83            [24]  587 	mov	r3,dph
      000300 AE F0            [24]  588 	mov	r6,b
      000302 FF               [12]  589 	mov	r7,a
      000303 D0*00            [24]  590 	pop	bits
      000305 C0*00            [24]  591 	push	bits
      000307 E4               [12]  592 	clr	a
      000308 C0 E0            [24]  593 	push	acc
      00030A C0 E0            [24]  594 	push	acc
      00030C 74 80            [12]  595 	mov	a,#0x80
      00030E C0 E0            [24]  596 	push	acc
      000310 74 39            [12]  597 	mov	a,#0x39
      000312 C0 E0            [24]  598 	push	acc
      000314 8A 82            [24]  599 	mov	dpl,r2
      000316 8B 83            [24]  600 	mov	dph,r3
      000318 8E F0            [24]  601 	mov	b,r6
      00031A EF               [12]  602 	mov	a,r7
      00031B 12r00r00         [24]  603 	lcall	___fslt
      00031E AF 82            [24]  604 	mov	r7,dpl
      000320 E5 81            [12]  605 	mov	a,sp
      000322 24 FC            [12]  606 	add	a,#0xfc
      000324 F5 81            [12]  607 	mov	sp,a
      000326 D0*00            [24]  608 	pop	bits
      000328 EF               [12]  609 	mov	a,r7
      000329 60 2A            [24]  610 	jz	00104$
                                    611 ;	tancotf.c:74: xnum = f;
      00032B E5*00            [12]  612 	mov	a,_bp
      00032D 24 09            [12]  613 	add	a,#0x09
      00032F F8               [12]  614 	mov	r0,a
      000330 E5*00            [12]  615 	mov	a,_bp
      000332 24 15            [12]  616 	add	a,#0x15
      000334 F9               [12]  617 	mov	r1,a
      000335 E6               [12]  618 	mov	a,@r0
      000336 F7               [12]  619 	mov	@r1,a
      000337 08               [12]  620 	inc	r0
      000338 09               [12]  621 	inc	r1
      000339 E6               [12]  622 	mov	a,@r0
      00033A F7               [12]  623 	mov	@r1,a
      00033B 08               [12]  624 	inc	r0
      00033C 09               [12]  625 	inc	r1
      00033D E6               [12]  626 	mov	a,@r0
      00033E F7               [12]  627 	mov	@r1,a
      00033F 08               [12]  628 	inc	r0
      000340 09               [12]  629 	inc	r1
      000341 E6               [12]  630 	mov	a,@r0
      000342 F7               [12]  631 	mov	@r1,a
                                    632 ;	tancotf.c:75: xden = 1.0;
      000343 E5*00            [12]  633 	mov	a,_bp
      000345 24 19            [12]  634 	add	a,#0x19
      000347 F8               [12]  635 	mov	r0,a
      000348 E4               [12]  636 	clr	a
      000349 F6               [12]  637 	mov	@r0,a
      00034A 08               [12]  638 	inc	r0
      00034B F6               [12]  639 	mov	@r0,a
      00034C 08               [12]  640 	inc	r0
      00034D 76 80            [12]  641 	mov	@r0,#0x80
      00034F 08               [12]  642 	inc	r0
      000350 76 3F            [12]  643 	mov	@r0,#0x3F
      000352 02r04rFB         [24]  644 	ljmp	00105$
      000355                        645 00104$:
                                    646 ;	tancotf.c:79: g = f*f;
      000355 C0*00            [24]  647 	push	bits
      000357 E5*00            [12]  648 	mov	a,_bp
      000359 24 09            [12]  649 	add	a,#0x09
      00035B F8               [12]  650 	mov	r0,a
      00035C E6               [12]  651 	mov	a,@r0
      00035D C0 E0            [24]  652 	push	acc
      00035F 08               [12]  653 	inc	r0
      000360 E6               [12]  654 	mov	a,@r0
      000361 C0 E0            [24]  655 	push	acc
      000363 08               [12]  656 	inc	r0
      000364 E6               [12]  657 	mov	a,@r0
      000365 C0 E0            [24]  658 	push	acc
      000367 08               [12]  659 	inc	r0
      000368 E6               [12]  660 	mov	a,@r0
      000369 C0 E0            [24]  661 	push	acc
      00036B E5*00            [12]  662 	mov	a,_bp
      00036D 24 09            [12]  663 	add	a,#0x09
      00036F F8               [12]  664 	mov	r0,a
      000370 86 82            [24]  665 	mov	dpl,@r0
      000372 08               [12]  666 	inc	r0
      000373 86 83            [24]  667 	mov	dph,@r0
      000375 08               [12]  668 	inc	r0
      000376 86 F0            [24]  669 	mov	b,@r0
      000378 08               [12]  670 	inc	r0
      000379 E6               [12]  671 	mov	a,@r0
      00037A 12r00r00         [24]  672 	lcall	___fsmul
      00037D AC 82            [24]  673 	mov	r4,dpl
      00037F AD 83            [24]  674 	mov	r5,dph
      000381 AE F0            [24]  675 	mov	r6,b
      000383 FF               [12]  676 	mov	r7,a
      000384 E5 81            [12]  677 	mov	a,sp
      000386 24 FC            [12]  678 	add	a,#0xfc
      000388 F5 81            [12]  679 	mov	sp,a
      00038A D0*00            [24]  680 	pop	bits
      00038C E5*00            [12]  681 	mov	a,_bp
      00038E 24 0D            [12]  682 	add	a,#0x0d
      000390 F8               [12]  683 	mov	r0,a
      000391 A6 04            [24]  684 	mov	@r0,ar4
      000393 08               [12]  685 	inc	r0
      000394 A6 05            [24]  686 	mov	@r0,ar5
      000396 08               [12]  687 	inc	r0
      000397 A6 06            [24]  688 	mov	@r0,ar6
      000399 08               [12]  689 	inc	r0
      00039A A6 07            [24]  690 	mov	@r0,ar7
                                    691 ;	tancotf.c:80: xnum = P(f,g);
      00039C C0*00            [24]  692 	push	bits
      00039E E5*00            [12]  693 	mov	a,_bp
      0003A0 24 0D            [12]  694 	add	a,#0x0d
      0003A2 F8               [12]  695 	mov	r0,a
      0003A3 E6               [12]  696 	mov	a,@r0
      0003A4 C0 E0            [24]  697 	push	acc
      0003A6 08               [12]  698 	inc	r0
      0003A7 E6               [12]  699 	mov	a,@r0
      0003A8 C0 E0            [24]  700 	push	acc
      0003AA 08               [12]  701 	inc	r0
      0003AB E6               [12]  702 	mov	a,@r0
      0003AC C0 E0            [24]  703 	push	acc
      0003AE 08               [12]  704 	inc	r0
      0003AF E6               [12]  705 	mov	a,@r0
      0003B0 C0 E0            [24]  706 	push	acc
      0003B2 90 33 B8         [24]  707 	mov	dptr,#0x33B8
      0003B5 75 F0 C4         [24]  708 	mov	b,#0xC4
      0003B8 74 BD            [12]  709 	mov	a,#0xBD
      0003BA 12r00r00         [24]  710 	lcall	___fsmul
      0003BD AA 82            [24]  711 	mov	r2,dpl
      0003BF AB 83            [24]  712 	mov	r3,dph
      0003C1 AE F0            [24]  713 	mov	r6,b
      0003C3 FF               [12]  714 	mov	r7,a
      0003C4 E5 81            [12]  715 	mov	a,sp
      0003C6 24 FC            [12]  716 	add	a,#0xfc
      0003C8 F5 81            [12]  717 	mov	sp,a
      0003CA D0*00            [24]  718 	pop	bits
      0003CC C0*00            [24]  719 	push	bits
      0003CE E5*00            [12]  720 	mov	a,_bp
      0003D0 24 09            [12]  721 	add	a,#0x09
      0003D2 F8               [12]  722 	mov	r0,a
      0003D3 E6               [12]  723 	mov	a,@r0
      0003D4 C0 E0            [24]  724 	push	acc
      0003D6 08               [12]  725 	inc	r0
      0003D7 E6               [12]  726 	mov	a,@r0
      0003D8 C0 E0            [24]  727 	push	acc
      0003DA 08               [12]  728 	inc	r0
      0003DB E6               [12]  729 	mov	a,@r0
      0003DC C0 E0            [24]  730 	push	acc
      0003DE 08               [12]  731 	inc	r0
      0003DF E6               [12]  732 	mov	a,@r0
      0003E0 C0 E0            [24]  733 	push	acc
      0003E2 8A 82            [24]  734 	mov	dpl,r2
      0003E4 8B 83            [24]  735 	mov	dph,r3
      0003E6 8E F0            [24]  736 	mov	b,r6
      0003E8 EF               [12]  737 	mov	a,r7
      0003E9 12r00r00         [24]  738 	lcall	___fsmul
      0003EC AC 82            [24]  739 	mov	r4,dpl
      0003EE AD 83            [24]  740 	mov	r5,dph
      0003F0 AE F0            [24]  741 	mov	r6,b
      0003F2 FF               [12]  742 	mov	r7,a
      0003F3 E5 81            [12]  743 	mov	a,sp
      0003F5 24 FC            [12]  744 	add	a,#0xfc
      0003F7 F5 81            [12]  745 	mov	sp,a
      0003F9 D0*00            [24]  746 	pop	bits
      0003FB C0*00            [24]  747 	push	bits
      0003FD E5*00            [12]  748 	mov	a,_bp
      0003FF 24 09            [12]  749 	add	a,#0x09
      000401 F8               [12]  750 	mov	r0,a
      000402 E6               [12]  751 	mov	a,@r0
      000403 C0 E0            [24]  752 	push	acc
      000405 08               [12]  753 	inc	r0
      000406 E6               [12]  754 	mov	a,@r0
      000407 C0 E0            [24]  755 	push	acc
      000409 08               [12]  756 	inc	r0
      00040A E6               [12]  757 	mov	a,@r0
      00040B C0 E0            [24]  758 	push	acc
      00040D 08               [12]  759 	inc	r0
      00040E E6               [12]  760 	mov	a,@r0
      00040F C0 E0            [24]  761 	push	acc
      000411 8C 82            [24]  762 	mov	dpl,r4
      000413 8D 83            [24]  763 	mov	dph,r5
      000415 8E F0            [24]  764 	mov	b,r6
      000417 EF               [12]  765 	mov	a,r7
      000418 12r00r00         [24]  766 	lcall	___fsadd
      00041B AC 82            [24]  767 	mov	r4,dpl
      00041D AD 83            [24]  768 	mov	r5,dph
      00041F AE F0            [24]  769 	mov	r6,b
      000421 FF               [12]  770 	mov	r7,a
      000422 E5 81            [12]  771 	mov	a,sp
      000424 24 FC            [12]  772 	add	a,#0xfc
      000426 F5 81            [12]  773 	mov	sp,a
      000428 D0*00            [24]  774 	pop	bits
      00042A E5*00            [12]  775 	mov	a,_bp
      00042C 24 15            [12]  776 	add	a,#0x15
      00042E F8               [12]  777 	mov	r0,a
      00042F A6 04            [24]  778 	mov	@r0,ar4
      000431 08               [12]  779 	inc	r0
      000432 A6 05            [24]  780 	mov	@r0,ar5
      000434 08               [12]  781 	inc	r0
      000435 A6 06            [24]  782 	mov	@r0,ar6
      000437 08               [12]  783 	inc	r0
      000438 A6 07            [24]  784 	mov	@r0,ar7
                                    785 ;	tancotf.c:81: xden = Q(g);
      00043A C0*00            [24]  786 	push	bits
      00043C E5*00            [12]  787 	mov	a,_bp
      00043E 24 0D            [12]  788 	add	a,#0x0d
      000440 F8               [12]  789 	mov	r0,a
      000441 E6               [12]  790 	mov	a,@r0
      000442 C0 E0            [24]  791 	push	acc
      000444 08               [12]  792 	inc	r0
      000445 E6               [12]  793 	mov	a,@r0
      000446 C0 E0            [24]  794 	push	acc
      000448 08               [12]  795 	inc	r0
      000449 E6               [12]  796 	mov	a,@r0
      00044A C0 E0            [24]  797 	push	acc
      00044C 08               [12]  798 	inc	r0
      00044D E6               [12]  799 	mov	a,@r0
      00044E C0 E0            [24]  800 	push	acc
      000450 90 33 75         [24]  801 	mov	dptr,#0x3375
      000453 75 F0 1F         [24]  802 	mov	b,#0x1F
      000456 74 3C            [12]  803 	mov	a,#0x3C
      000458 12r00r00         [24]  804 	lcall	___fsmul
      00045B AC 82            [24]  805 	mov	r4,dpl
      00045D AD 83            [24]  806 	mov	r5,dph
      00045F AE F0            [24]  807 	mov	r6,b
      000461 FF               [12]  808 	mov	r7,a
      000462 E5 81            [12]  809 	mov	a,sp
      000464 24 FC            [12]  810 	add	a,#0xfc
      000466 F5 81            [12]  811 	mov	sp,a
      000468 D0*00            [24]  812 	pop	bits
      00046A C0*00            [24]  813 	push	bits
      00046C 74 AF            [12]  814 	mov	a,#0xAF
      00046E C0 E0            [24]  815 	push	acc
      000470 74 B7            [12]  816 	mov	a,#0xB7
      000472 C0 E0            [24]  817 	push	acc
      000474 03               [12]  818 	rr	a
      000475 C0 E0            [24]  819 	push	acc
      000477 74 BE            [12]  820 	mov	a,#0xBE
      000479 C0 E0            [24]  821 	push	acc
      00047B 8C 82            [24]  822 	mov	dpl,r4
      00047D 8D 83            [24]  823 	mov	dph,r5
      00047F 8E F0            [24]  824 	mov	b,r6
      000481 EF               [12]  825 	mov	a,r7
      000482 12r00r00         [24]  826 	lcall	___fsadd
      000485 AC 82            [24]  827 	mov	r4,dpl
      000487 AD 83            [24]  828 	mov	r5,dph
      000489 AE F0            [24]  829 	mov	r6,b
      00048B FF               [12]  830 	mov	r7,a
      00048C E5 81            [12]  831 	mov	a,sp
      00048E 24 FC            [12]  832 	add	a,#0xfc
      000490 F5 81            [12]  833 	mov	sp,a
      000492 D0*00            [24]  834 	pop	bits
      000494 C0*00            [24]  835 	push	bits
      000496 E5*00            [12]  836 	mov	a,_bp
      000498 24 0D            [12]  837 	add	a,#0x0d
      00049A F8               [12]  838 	mov	r0,a
      00049B E6               [12]  839 	mov	a,@r0
      00049C C0 E0            [24]  840 	push	acc
      00049E 08               [12]  841 	inc	r0
      00049F E6               [12]  842 	mov	a,@r0
      0004A0 C0 E0            [24]  843 	push	acc
      0004A2 08               [12]  844 	inc	r0
      0004A3 E6               [12]  845 	mov	a,@r0
      0004A4 C0 E0            [24]  846 	push	acc
      0004A6 08               [12]  847 	inc	r0
      0004A7 E6               [12]  848 	mov	a,@r0
      0004A8 C0 E0            [24]  849 	push	acc
      0004AA 8C 82            [24]  850 	mov	dpl,r4
      0004AC 8D 83            [24]  851 	mov	dph,r5
      0004AE 8E F0            [24]  852 	mov	b,r6
      0004B0 EF               [12]  853 	mov	a,r7
      0004B1 12r00r00         [24]  854 	lcall	___fsmul
      0004B4 AC 82            [24]  855 	mov	r4,dpl
      0004B6 AD 83            [24]  856 	mov	r5,dph
      0004B8 AE F0            [24]  857 	mov	r6,b
      0004BA FF               [12]  858 	mov	r7,a
      0004BB E5 81            [12]  859 	mov	a,sp
      0004BD 24 FC            [12]  860 	add	a,#0xfc
      0004BF F5 81            [12]  861 	mov	sp,a
      0004C1 D0*00            [24]  862 	pop	bits
      0004C3 C0*00            [24]  863 	push	bits
      0004C5 E4               [12]  864 	clr	a
      0004C6 C0 E0            [24]  865 	push	acc
      0004C8 C0 E0            [24]  866 	push	acc
      0004CA 74 80            [12]  867 	mov	a,#0x80
      0004CC C0 E0            [24]  868 	push	acc
      0004CE 74 3F            [12]  869 	mov	a,#0x3F
      0004D0 C0 E0            [24]  870 	push	acc
      0004D2 8C 82            [24]  871 	mov	dpl,r4
      0004D4 8D 83            [24]  872 	mov	dph,r5
      0004D6 8E F0            [24]  873 	mov	b,r6
      0004D8 EF               [12]  874 	mov	a,r7
      0004D9 12r00r00         [24]  875 	lcall	___fsadd
      0004DC AC 82            [24]  876 	mov	r4,dpl
      0004DE AD 83            [24]  877 	mov	r5,dph
      0004E0 AE F0            [24]  878 	mov	r6,b
      0004E2 FF               [12]  879 	mov	r7,a
      0004E3 E5 81            [12]  880 	mov	a,sp
      0004E5 24 FC            [12]  881 	add	a,#0xfc
      0004E7 F5 81            [12]  882 	mov	sp,a
      0004E9 D0*00            [24]  883 	pop	bits
      0004EB E5*00            [12]  884 	mov	a,_bp
      0004ED 24 19            [12]  885 	add	a,#0x19
      0004EF F8               [12]  886 	mov	r0,a
      0004F0 A6 04            [24]  887 	mov	@r0,ar4
      0004F2 08               [12]  888 	inc	r0
      0004F3 A6 05            [24]  889 	mov	@r0,ar5
      0004F5 08               [12]  890 	inc	r0
      0004F6 A6 06            [24]  891 	mov	@r0,ar6
      0004F8 08               [12]  892 	inc	r0
      0004F9 A6 07            [24]  893 	mov	@r0,ar7
      0004FB                        894 00105$:
                                    895 ;	tancotf.c:84: if(n&1)
      0004FB E5*00            [12]  896 	mov	a,_bp
      0004FD 24 1D            [12]  897 	add	a,#0x1d
      0004FF F8               [12]  898 	mov	r0,a
      000500 E6               [12]  899 	mov	a,@r0
      000501 20 E0 03         [24]  900 	jb	acc.0,00140$
      000504 02r05r97         [24]  901 	ljmp	00113$
      000507                        902 00140$:
                                    903 ;	tancotf.c:87: if(iscotan) return (-xnum/xden);
      000507 30*00 47         [24]  904 	jnb	b0,00107$
      00050A E5*00            [12]  905 	mov	a,_bp
      00050C 24 15            [12]  906 	add	a,#0x15
      00050E F8               [12]  907 	mov	r0,a
      00050F 86 04            [24]  908 	mov	ar4,@r0
      000511 08               [12]  909 	inc	r0
      000512 86 05            [24]  910 	mov	ar5,@r0
      000514 08               [12]  911 	inc	r0
      000515 86 06            [24]  912 	mov	ar6,@r0
      000517 08               [12]  913 	inc	r0
      000518 E6               [12]  914 	mov	a,@r0
      000519 B2 E7            [12]  915 	cpl	acc.7
      00051B FF               [12]  916 	mov	r7,a
      00051C E5*00            [12]  917 	mov	a,_bp
      00051E 24 19            [12]  918 	add	a,#0x19
      000520 F8               [12]  919 	mov	r0,a
      000521 E6               [12]  920 	mov	a,@r0
      000522 C0 E0            [24]  921 	push	acc
      000524 08               [12]  922 	inc	r0
      000525 E6               [12]  923 	mov	a,@r0
      000526 C0 E0            [24]  924 	push	acc
      000528 08               [12]  925 	inc	r0
      000529 E6               [12]  926 	mov	a,@r0
      00052A C0 E0            [24]  927 	push	acc
      00052C 08               [12]  928 	inc	r0
      00052D E6               [12]  929 	mov	a,@r0
      00052E C0 E0            [24]  930 	push	acc
      000530 8C 82            [24]  931 	mov	dpl,r4
      000532 8D 83            [24]  932 	mov	dph,r5
      000534 8E F0            [24]  933 	mov	b,r6
      000536 EF               [12]  934 	mov	a,r7
      000537 12r00r00         [24]  935 	lcall	___fsdiv
      00053A AC 82            [24]  936 	mov	r4,dpl
      00053C AD 83            [24]  937 	mov	r5,dph
      00053E AE F0            [24]  938 	mov	r6,b
      000540 FF               [12]  939 	mov	r7,a
      000541 E5 81            [12]  940 	mov	a,sp
      000543 24 FC            [12]  941 	add	a,#0xfc
      000545 F5 81            [12]  942 	mov	sp,a
      000547 8C 82            [24]  943 	mov	dpl,r4
      000549 8D 83            [24]  944 	mov	dph,r5
      00054B 8E F0            [24]  945 	mov	b,r6
      00054D EF               [12]  946 	mov	a,r7
      00054E 02r06r10         [24]  947 	ljmp	00115$
      000551                        948 00107$:
                                    949 ;	tancotf.c:88: else return (-xden/xnum);
      000551 E5*00            [12]  950 	mov	a,_bp
      000553 24 19            [12]  951 	add	a,#0x19
      000555 F8               [12]  952 	mov	r0,a
      000556 86 04            [24]  953 	mov	ar4,@r0
      000558 08               [12]  954 	inc	r0
      000559 86 05            [24]  955 	mov	ar5,@r0
      00055B 08               [12]  956 	inc	r0
      00055C 86 06            [24]  957 	mov	ar6,@r0
      00055E 08               [12]  958 	inc	r0
      00055F E6               [12]  959 	mov	a,@r0
      000560 B2 E7            [12]  960 	cpl	acc.7
      000562 FF               [12]  961 	mov	r7,a
      000563 E5*00            [12]  962 	mov	a,_bp
      000565 24 15            [12]  963 	add	a,#0x15
      000567 F8               [12]  964 	mov	r0,a
      000568 E6               [12]  965 	mov	a,@r0
      000569 C0 E0            [24]  966 	push	acc
      00056B 08               [12]  967 	inc	r0
      00056C E6               [12]  968 	mov	a,@r0
      00056D C0 E0            [24]  969 	push	acc
      00056F 08               [12]  970 	inc	r0
      000570 E6               [12]  971 	mov	a,@r0
      000571 C0 E0            [24]  972 	push	acc
      000573 08               [12]  973 	inc	r0
      000574 E6               [12]  974 	mov	a,@r0
      000575 C0 E0            [24]  975 	push	acc
      000577 8C 82            [24]  976 	mov	dpl,r4
      000579 8D 83            [24]  977 	mov	dph,r5
      00057B 8E F0            [24]  978 	mov	b,r6
      00057D EF               [12]  979 	mov	a,r7
      00057E 12r00r00         [24]  980 	lcall	___fsdiv
      000581 AC 82            [24]  981 	mov	r4,dpl
      000583 AD 83            [24]  982 	mov	r5,dph
      000585 AE F0            [24]  983 	mov	r6,b
      000587 FF               [12]  984 	mov	r7,a
      000588 E5 81            [12]  985 	mov	a,sp
      00058A 24 FC            [12]  986 	add	a,#0xfc
      00058C F5 81            [12]  987 	mov	sp,a
      00058E 8C 82            [24]  988 	mov	dpl,r4
      000590 8D 83            [24]  989 	mov	dph,r5
      000592 8E F0            [24]  990 	mov	b,r6
      000594 EF               [12]  991 	mov	a,r7
      000595 80 79            [24]  992 	sjmp	00115$
      000597                        993 00113$:
                                    994 ;	tancotf.c:92: if(iscotan) return (xden/xnum);
      000597 30*00 3C         [24]  995 	jnb	b0,00110$
      00059A E5*00            [12]  996 	mov	a,_bp
      00059C 24 15            [12]  997 	add	a,#0x15
      00059E F8               [12]  998 	mov	r0,a
      00059F E6               [12]  999 	mov	a,@r0
      0005A0 C0 E0            [24] 1000 	push	acc
      0005A2 08               [12] 1001 	inc	r0
      0005A3 E6               [12] 1002 	mov	a,@r0
      0005A4 C0 E0            [24] 1003 	push	acc
      0005A6 08               [12] 1004 	inc	r0
      0005A7 E6               [12] 1005 	mov	a,@r0
      0005A8 C0 E0            [24] 1006 	push	acc
      0005AA 08               [12] 1007 	inc	r0
      0005AB E6               [12] 1008 	mov	a,@r0
      0005AC C0 E0            [24] 1009 	push	acc
      0005AE E5*00            [12] 1010 	mov	a,_bp
      0005B0 24 19            [12] 1011 	add	a,#0x19
      0005B2 F8               [12] 1012 	mov	r0,a
      0005B3 86 82            [24] 1013 	mov	dpl,@r0
      0005B5 08               [12] 1014 	inc	r0
      0005B6 86 83            [24] 1015 	mov	dph,@r0
      0005B8 08               [12] 1016 	inc	r0
      0005B9 86 F0            [24] 1017 	mov	b,@r0
      0005BB 08               [12] 1018 	inc	r0
      0005BC E6               [12] 1019 	mov	a,@r0
      0005BD 12r00r00         [24] 1020 	lcall	___fsdiv
      0005C0 AC 82            [24] 1021 	mov	r4,dpl
      0005C2 AD 83            [24] 1022 	mov	r5,dph
      0005C4 AE F0            [24] 1023 	mov	r6,b
      0005C6 FF               [12] 1024 	mov	r7,a
      0005C7 E5 81            [12] 1025 	mov	a,sp
      0005C9 24 FC            [12] 1026 	add	a,#0xfc
      0005CB F5 81            [12] 1027 	mov	sp,a
      0005CD 8C 82            [24] 1028 	mov	dpl,r4
      0005CF 8D 83            [24] 1029 	mov	dph,r5
      0005D1 8E F0            [24] 1030 	mov	b,r6
      0005D3 EF               [12] 1031 	mov	a,r7
      0005D4 80 3A            [24] 1032 	sjmp	00115$
      0005D6                       1033 00110$:
                                   1034 ;	tancotf.c:93: else return (xnum/xden);
      0005D6 E5*00            [12] 1035 	mov	a,_bp
      0005D8 24 19            [12] 1036 	add	a,#0x19
      0005DA F8               [12] 1037 	mov	r0,a
      0005DB E6               [12] 1038 	mov	a,@r0
      0005DC C0 E0            [24] 1039 	push	acc
      0005DE 08               [12] 1040 	inc	r0
      0005DF E6               [12] 1041 	mov	a,@r0
      0005E0 C0 E0            [24] 1042 	push	acc
      0005E2 08               [12] 1043 	inc	r0
      0005E3 E6               [12] 1044 	mov	a,@r0
      0005E4 C0 E0            [24] 1045 	push	acc
      0005E6 08               [12] 1046 	inc	r0
      0005E7 E6               [12] 1047 	mov	a,@r0
      0005E8 C0 E0            [24] 1048 	push	acc
      0005EA E5*00            [12] 1049 	mov	a,_bp
      0005EC 24 15            [12] 1050 	add	a,#0x15
      0005EE F8               [12] 1051 	mov	r0,a
      0005EF 86 82            [24] 1052 	mov	dpl,@r0
      0005F1 08               [12] 1053 	inc	r0
      0005F2 86 83            [24] 1054 	mov	dph,@r0
      0005F4 08               [12] 1055 	inc	r0
      0005F5 86 F0            [24] 1056 	mov	b,@r0
      0005F7 08               [12] 1057 	inc	r0
      0005F8 E6               [12] 1058 	mov	a,@r0
      0005F9 12r00r00         [24] 1059 	lcall	___fsdiv
      0005FC AC 82            [24] 1060 	mov	r4,dpl
      0005FE AD 83            [24] 1061 	mov	r5,dph
      000600 AE F0            [24] 1062 	mov	r6,b
      000602 FF               [12] 1063 	mov	r7,a
      000603 E5 81            [12] 1064 	mov	a,sp
      000605 24 FC            [12] 1065 	add	a,#0xfc
      000607 F5 81            [12] 1066 	mov	sp,a
      000609 8C 82            [24] 1067 	mov	dpl,r4
      00060B 8D 83            [24] 1068 	mov	dph,r5
      00060D 8E F0            [24] 1069 	mov	b,r6
      00060F EF               [12] 1070 	mov	a,r7
      000610                       1071 00115$:
      000610 85*00 81         [24] 1072 	mov	sp,_bp
      000613 D0*00            [24] 1073 	pop	_bp
      000615 02r00r00         [24] 1074 	ljmp	__sdcc_banked_ret
                                   1075 	.area CSEG    (CODE)
                                   1076 	.area CONST   (CODE)
                                   1077 	.area XINIT   (CODE)
                                   1078 	.area CABS    (ABS,CODE)
