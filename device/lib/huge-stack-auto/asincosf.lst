                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:13 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module asincosf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _asincosf
                                     13 	.globl _ldexpf
                                     14 	.globl _fabsf
                                     15 	.globl _sqrtf
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable bit register bank
                                     33 ;--------------------------------------------------------
                                     34 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         35 bits:
      000000                         36 	.ds 1
                           008000    37 	b0 = bits[0]
                           008100    38 	b1 = bits[1]
                           008200    39 	b2 = bits[2]
                           008300    40 	b3 = bits[3]
                           008400    41 	b4 = bits[4]
                           008500    42 	b5 = bits[5]
                           008600    43 	b6 = bits[6]
                           008700    44 	b7 = bits[7]
                                     45 ;--------------------------------------------------------
                                     46 ; internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DSEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; overlayable items in internal ram 
                                     51 ;--------------------------------------------------------
                                     52 ;--------------------------------------------------------
                                     53 ; indirectly addressable internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area ISEG    (DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area IABS    (ABS,DATA)
                                     60 	.area IABS    (ABS,DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; bit data
                                     63 ;--------------------------------------------------------
                                     64 	.area BSEG    (BIT)
                                     65 ;--------------------------------------------------------
                                     66 ; paged external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area PSEG    (PAG,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XSEG    (XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XABS    (ABS,XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; external initialized ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XISEG   (XDATA)
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT0 (CODE)
                                     83 	.area GSINIT1 (CODE)
                                     84 	.area GSINIT2 (CODE)
                                     85 	.area GSINIT3 (CODE)
                                     86 	.area GSINIT4 (CODE)
                                     87 	.area GSINIT5 (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area CSEG    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; global & static initialisations
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.area GSFINAL (CODE)
                                     97 	.area GSINIT  (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; Home
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME    (CODE)
                                    102 	.area HOME    (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; code
                                    105 ;--------------------------------------------------------
                                    106 	.area CSEG    (CODE)
                                    107 ;------------------------------------------------------------
                                    108 ;Allocation info for local variables in function 'asincosf'
                                    109 ;------------------------------------------------------------
                                    110 ;isacos                    Allocated to registers b0 
                                    111 ;x                         Allocated to stack - _bp +1
                                    112 ;y                         Allocated to registers r2 r4 r6 r7 
                                    113 ;g                         Allocated to stack - _bp +13
                                    114 ;r                         Allocated to stack - _bp +17
                                    115 ;i                         Allocated to registers r5 
                                    116 ;quartPI                   Allocated to registers b1 
                                    117 ;sloc0                     Allocated to stack - _bp +5
                                    118 ;sloc1                     Allocated to stack - _bp +9
                                    119 ;------------------------------------------------------------
                                    120 ;	asincosf.c:47: float asincosf(const float x, const bool isacos)
                                    121 ;	-----------------------------------------
                                    122 ;	 function asincosf
                                    123 ;	-----------------------------------------
      000000                        124 _asincosf:
                           000007   125 	ar7 = 0x07
                           000006   126 	ar6 = 0x06
                           000005   127 	ar5 = 0x05
                           000004   128 	ar4 = 0x04
                           000003   129 	ar3 = 0x03
                           000002   130 	ar2 = 0x02
                           000001   131 	ar1 = 0x01
                           000000   132 	ar0 = 0x00
      000000 C0*00            [24]  133 	push	_bp
      000002 85 81*00         [24]  134 	mov	_bp,sp
      000005 C0 82            [24]  135 	push	dpl
      000007 C0 83            [24]  136 	push	dph
      000009 C0 F0            [24]  137 	push	b
      00000B C0 E0            [24]  138 	push	acc
      00000D E5 81            [12]  139 	mov	a,sp
      00000F 24 10            [12]  140 	add	a,#0x10
      000011 F5 81            [12]  141 	mov	sp,a
                                    142 ;	asincosf.c:51: bool quartPI = isacos;
      000013 A2*00            [12]  143 	mov	c,b0
      000015 92*00            [24]  144 	mov	b1,c
                                    145 ;	asincosf.c:56: y = fabsf(x);
      000017 A8*00            [24]  146 	mov	r0,_bp
      000019 08               [12]  147 	inc	r0
      00001A 86 82            [24]  148 	mov	dpl,@r0
      00001C 08               [12]  149 	inc	r0
      00001D 86 83            [24]  150 	mov	dph,@r0
      00001F 08               [12]  151 	inc	r0
      000020 86 F0            [24]  152 	mov	b,@r0
      000022 08               [12]  153 	inc	r0
      000023 E6               [12]  154 	mov	a,@r0
      000024 C0*00            [24]  155 	push	bits
      000026 78r00            [12]  156 	mov	r0,#_fabsf
      000028 79s00            [12]  157 	mov	r1,#(_fabsf >> 8)
      00002A 7As00            [12]  158 	mov	r2,#(_fabsf >> 16)
      00002C 12r00r00         [24]  159 	lcall	__sdcc_banked_call
      00002F AA 82            [24]  160 	mov	r2,dpl
      000031 AB 83            [24]  161 	mov	r3,dph
      000033 AE F0            [24]  162 	mov	r6,b
      000035 FF               [12]  163 	mov	r7,a
      000036 D0*00            [24]  164 	pop	bits
      000038 8B 04            [24]  165 	mov	ar4,r3
                                    166 ;	asincosf.c:57: if (y < EPS)
      00003A C0 07            [24]  167 	push	ar7
      00003C C0 06            [24]  168 	push	ar6
      00003E C0 04            [24]  169 	push	ar4
      000040 C0 02            [24]  170 	push	ar2
      000042 C0*00            [24]  171 	push	bits
      000044 E4               [12]  172 	clr	a
      000045 C0 E0            [24]  173 	push	acc
      000047 C0 E0            [24]  174 	push	acc
      000049 74 80            [12]  175 	mov	a,#0x80
      00004B C0 E0            [24]  176 	push	acc
      00004D 74 39            [12]  177 	mov	a,#0x39
      00004F C0 E0            [24]  178 	push	acc
      000051 8A 82            [24]  179 	mov	dpl,r2
      000053 8C 83            [24]  180 	mov	dph,r4
      000055 8E F0            [24]  181 	mov	b,r6
      000057 EF               [12]  182 	mov	a,r7
      000058 12r00r00         [24]  183 	lcall	___fslt
      00005B AB 82            [24]  184 	mov	r3,dpl
      00005D E5 81            [12]  185 	mov	a,sp
      00005F 24 FC            [12]  186 	add	a,#0xfc
      000061 F5 81            [12]  187 	mov	sp,a
      000063 D0*00            [24]  188 	pop	bits
      000065 D0 02            [24]  189 	pop	ar2
      000067 D0 04            [24]  190 	pop	ar4
      000069 D0 06            [24]  191 	pop	ar6
      00006B D0 07            [24]  192 	pop	ar7
      00006D EB               [12]  193 	mov	a,r3
      00006E 60 13            [24]  194 	jz	00107$
                                    195 ;	asincosf.c:59: r = y;
      000070 E5*00            [12]  196 	mov	a,_bp
      000072 24 11            [12]  197 	add	a,#0x11
      000074 F8               [12]  198 	mov	r0,a
      000075 A6 02            [24]  199 	mov	@r0,ar2
      000077 08               [12]  200 	inc	r0
      000078 A6 04            [24]  201 	mov	@r0,ar4
      00007A 08               [12]  202 	inc	r0
      00007B A6 06            [24]  203 	mov	@r0,ar6
      00007D 08               [12]  204 	inc	r0
      00007E A6 07            [24]  205 	mov	@r0,ar7
      000080 02r04r95         [24]  206 	ljmp	00108$
      000083                        207 00107$:
                                    208 ;	asincosf.c:63: if (y > 0.5)
      000083 C0 07            [24]  209 	push	ar7
      000085 C0 06            [24]  210 	push	ar6
      000087 C0 04            [24]  211 	push	ar4
      000089 C0 02            [24]  212 	push	ar2
      00008B C0*00            [24]  213 	push	bits
      00008D E4               [12]  214 	clr	a
      00008E C0 E0            [24]  215 	push	acc
      000090 C0 E0            [24]  216 	push	acc
      000092 C0 E0            [24]  217 	push	acc
      000094 74 3F            [12]  218 	mov	a,#0x3F
      000096 C0 E0            [24]  219 	push	acc
      000098 8A 82            [24]  220 	mov	dpl,r2
      00009A 8C 83            [24]  221 	mov	dph,r4
      00009C 8E F0            [24]  222 	mov	b,r6
      00009E EF               [12]  223 	mov	a,r7
      00009F 12r00r00         [24]  224 	lcall	___fsgt
      0000A2 AD 82            [24]  225 	mov	r5,dpl
      0000A4 E5 81            [12]  226 	mov	a,sp
      0000A6 24 FC            [12]  227 	add	a,#0xfc
      0000A8 F5 81            [12]  228 	mov	sp,a
      0000AA D0*00            [24]  229 	pop	bits
      0000AC D0 02            [24]  230 	pop	ar2
      0000AE D0 04            [24]  231 	pop	ar4
      0000B0 D0 06            [24]  232 	pop	ar6
      0000B2 D0 07            [24]  233 	pop	ar7
      0000B4 ED               [12]  234 	mov	a,r5
      0000B5 70 03            [24]  235 	jnz	00138$
      0000B7 02r01rFD         [24]  236 	ljmp	00104$
      0000BA                        237 00138$:
                                    238 ;	asincosf.c:65: quartPI = !isacos;
      0000BA A2*00            [12]  239 	mov	c,b0
      0000BC B3               [12]  240 	cpl	c
      0000BD 92*00            [24]  241 	mov  b2,c
      0000BF 92*00            [24]  242 	mov	b1,c
                                    243 ;	asincosf.c:66: if (y > 1.0)
      0000C1 C0 07            [24]  244 	push	ar7
      0000C3 C0 06            [24]  245 	push	ar6
      0000C5 C0 04            [24]  246 	push	ar4
      0000C7 C0 02            [24]  247 	push	ar2
      0000C9 C0*00            [24]  248 	push	bits
      0000CB E4               [12]  249 	clr	a
      0000CC C0 E0            [24]  250 	push	acc
      0000CE C0 E0            [24]  251 	push	acc
      0000D0 74 80            [12]  252 	mov	a,#0x80
      0000D2 C0 E0            [24]  253 	push	acc
      0000D4 74 3F            [12]  254 	mov	a,#0x3F
      0000D6 C0 E0            [24]  255 	push	acc
      0000D8 8A 82            [24]  256 	mov	dpl,r2
      0000DA 8C 83            [24]  257 	mov	dph,r4
      0000DC 8E F0            [24]  258 	mov	b,r6
      0000DE EF               [12]  259 	mov	a,r7
      0000DF 12r00r00         [24]  260 	lcall	___fsgt
      0000E2 AD 82            [24]  261 	mov	r5,dpl
      0000E4 E5 81            [12]  262 	mov	a,sp
      0000E6 24 FC            [12]  263 	add	a,#0xfc
      0000E8 F5 81            [12]  264 	mov	sp,a
      0000EA D0*00            [24]  265 	pop	bits
      0000EC D0 02            [24]  266 	pop	ar2
      0000EE D0 04            [24]  267 	pop	ar4
      0000F0 D0 06            [24]  268 	pop	ar6
      0000F2 D0 07            [24]  269 	pop	ar7
      0000F4 ED               [12]  270 	mov	a,r5
      0000F5 60 12            [24]  271 	jz	00102$
                                    272 ;	asincosf.c:68: errno = EDOM;
      0000F7 90r00r00         [24]  273 	mov	dptr,#_errno
      0000FA 74 21            [12]  274 	mov	a,#0x21
      0000FC F0               [24]  275 	movx	@dptr,a
      0000FD E4               [12]  276 	clr	a
      0000FE A3               [24]  277 	inc	dptr
      0000FF F0               [24]  278 	movx	@dptr,a
                                    279 ;	asincosf.c:69: return 0.0;
      000100 90 00 00         [24]  280 	mov	dptr,#(0x00&0x00ff)
      000103 E4               [12]  281 	clr	a
      000104 F5 F0            [12]  282 	mov	b,a
      000106 02r06rD2         [24]  283 	ljmp	00117$
      000109                        284 00102$:
                                    285 ;	asincosf.c:71: g = (0.5 - y) + 0.5;
      000109 C0*00            [24]  286 	push	bits
      00010B C0 02            [24]  287 	push	ar2
      00010D C0 04            [24]  288 	push	ar4
      00010F C0 06            [24]  289 	push	ar6
      000111 C0 07            [24]  290 	push	ar7
      000113 90 00 00         [24]  291 	mov	dptr,#0x0000
      000116 75 F0 80         [24]  292 	mov	b,#0x80
      000119 74 3F            [12]  293 	mov	a,#0x3F
      00011B 12r00r00         [24]  294 	lcall	___fssub
      00011E AF 82            [24]  295 	mov	r7,dpl
      000120 AE 83            [24]  296 	mov	r6,dph
      000122 AD F0            [24]  297 	mov	r5,b
      000124 FC               [12]  298 	mov	r4,a
      000125 E5 81            [12]  299 	mov	a,sp
      000127 24 FC            [12]  300 	add	a,#0xfc
      000129 F5 81            [12]  301 	mov	sp,a
      00012B D0*00            [24]  302 	pop	bits
      00012D E5*00            [12]  303 	mov	a,_bp
      00012F 24 0D            [12]  304 	add	a,#0x0d
      000131 F8               [12]  305 	mov	r0,a
      000132 A6 07            [24]  306 	mov	@r0,ar7
      000134 08               [12]  307 	inc	r0
      000135 A6 06            [24]  308 	mov	@r0,ar6
      000137 08               [12]  309 	inc	r0
      000138 A6 05            [24]  310 	mov	@r0,ar5
      00013A 08               [12]  311 	inc	r0
      00013B A6 04            [24]  312 	mov	@r0,ar4
                                    313 ;	asincosf.c:72: g = ldexpf(g, -1);
      00013D C0*00            [24]  314 	push	bits
      00013F 74 FF            [12]  315 	mov	a,#0xFF
      000141 C0 E0            [24]  316 	push	acc
      000143 C0 E0            [24]  317 	push	acc
      000145 E5*00            [12]  318 	mov	a,_bp
      000147 24 0D            [12]  319 	add	a,#0x0d
      000149 F8               [12]  320 	mov	r0,a
      00014A 86 82            [24]  321 	mov	dpl,@r0
      00014C 08               [12]  322 	inc	r0
      00014D 86 83            [24]  323 	mov	dph,@r0
      00014F 08               [12]  324 	inc	r0
      000150 86 F0            [24]  325 	mov	b,@r0
      000152 08               [12]  326 	inc	r0
      000153 E6               [12]  327 	mov	a,@r0
      000154 78r00            [12]  328 	mov	r0,#_ldexpf
      000156 79s00            [12]  329 	mov	r1,#(_ldexpf >> 8)
      000158 7As00            [12]  330 	mov	r2,#(_ldexpf >> 16)
      00015A 12r00r00         [24]  331 	lcall	__sdcc_banked_call
      00015D AF 82            [24]  332 	mov	r7,dpl
      00015F AE 83            [24]  333 	mov	r6,dph
      000161 AD F0            [24]  334 	mov	r5,b
      000163 FC               [12]  335 	mov	r4,a
      000164 15 81            [12]  336 	dec	sp
      000166 15 81            [12]  337 	dec	sp
      000168 D0*00            [24]  338 	pop	bits
      00016A E5*00            [12]  339 	mov	a,_bp
      00016C 24 0D            [12]  340 	add	a,#0x0d
      00016E F8               [12]  341 	mov	r0,a
      00016F A6 07            [24]  342 	mov	@r0,ar7
      000171 08               [12]  343 	inc	r0
      000172 A6 06            [24]  344 	mov	@r0,ar6
      000174 08               [12]  345 	inc	r0
      000175 A6 05            [24]  346 	mov	@r0,ar5
      000177 08               [12]  347 	inc	r0
      000178 A6 04            [24]  348 	mov	@r0,ar4
                                    349 ;	asincosf.c:73: y = sqrtf(g);
      00017A E5*00            [12]  350 	mov	a,_bp
      00017C 24 0D            [12]  351 	add	a,#0x0d
      00017E F8               [12]  352 	mov	r0,a
      00017F 86 82            [24]  353 	mov	dpl,@r0
      000181 08               [12]  354 	inc	r0
      000182 86 83            [24]  355 	mov	dph,@r0
      000184 08               [12]  356 	inc	r0
      000185 86 F0            [24]  357 	mov	b,@r0
      000187 08               [12]  358 	inc	r0
      000188 E6               [12]  359 	mov	a,@r0
      000189 C0*00            [24]  360 	push	bits
      00018B 78r00            [12]  361 	mov	r0,#_sqrtf
      00018D 79s00            [12]  362 	mov	r1,#(_sqrtf >> 8)
      00018F 7As00            [12]  363 	mov	r2,#(_sqrtf >> 16)
      000191 12r00r00         [24]  364 	lcall	__sdcc_banked_call
      000194 C8               [12]  365 	xch	a,r0
      000195 E5*00            [12]  366 	mov	a,_bp
      000197 24 05            [12]  367 	add	a,#0x05
      000199 C8               [12]  368 	xch	a,r0
      00019A A6 82            [24]  369 	mov	@r0,dpl
      00019C 08               [12]  370 	inc	r0
      00019D A6 83            [24]  371 	mov	@r0,dph
      00019F 08               [12]  372 	inc	r0
      0001A0 A6 F0            [24]  373 	mov	@r0,b
      0001A2 08               [12]  374 	inc	r0
      0001A3 F6               [12]  375 	mov	@r0,a
      0001A4 D0*00            [24]  376 	pop	bits
      0001A6 E5*00            [12]  377 	mov	a,_bp
      0001A8 24 05            [12]  378 	add	a,#0x05
      0001AA F8               [12]  379 	mov	r0,a
      0001AB 86 02            [24]  380 	mov	ar2,@r0
      0001AD 08               [12]  381 	inc	r0
      0001AE 86 04            [24]  382 	mov	ar4,@r0
      0001B0 08               [12]  383 	inc	r0
      0001B1 86 06            [24]  384 	mov	ar6,@r0
      0001B3 08               [12]  385 	inc	r0
      0001B4 86 07            [24]  386 	mov	ar7,@r0
                                    387 ;	asincosf.c:74: y = -(y + y);
      0001B6 C0*00            [24]  388 	push	bits
      0001B8 C0 02            [24]  389 	push	ar2
      0001BA C0 04            [24]  390 	push	ar4
      0001BC C0 06            [24]  391 	push	ar6
      0001BE C0 07            [24]  392 	push	ar7
      0001C0 8A 82            [24]  393 	mov	dpl,r2
      0001C2 8C 83            [24]  394 	mov	dph,r4
      0001C4 8E F0            [24]  395 	mov	b,r6
      0001C6 EF               [12]  396 	mov	a,r7
      0001C7 12r00r00         [24]  397 	lcall	___fsadd
      0001CA AF 82            [24]  398 	mov	r7,dpl
      0001CC AE 83            [24]  399 	mov	r6,dph
      0001CE AD F0            [24]  400 	mov	r5,b
      0001D0 FC               [12]  401 	mov	r4,a
      0001D1 E5 81            [12]  402 	mov	a,sp
      0001D3 24 FC            [12]  403 	add	a,#0xfc
      0001D5 F5 81            [12]  404 	mov	sp,a
      0001D7 D0*00            [24]  405 	pop	bits
      0001D9 E5*00            [12]  406 	mov	a,_bp
      0001DB 24 05            [12]  407 	add	a,#0x05
      0001DD F8               [12]  408 	mov	r0,a
      0001DE A6 07            [24]  409 	mov	@r0,ar7
      0001E0 08               [12]  410 	inc	r0
      0001E1 A6 06            [24]  411 	mov	@r0,ar6
      0001E3 08               [12]  412 	inc	r0
      0001E4 A6 05            [24]  413 	mov	@r0,ar5
      0001E6 EC               [12]  414 	mov	a,r4
      0001E7 B2 E7            [12]  415 	cpl	acc.7
      0001E9 08               [12]  416 	inc	r0
      0001EA F6               [12]  417 	mov	@r0,a
      0001EB E5*00            [12]  418 	mov	a,_bp
      0001ED 24 05            [12]  419 	add	a,#0x05
      0001EF F8               [12]  420 	mov	r0,a
      0001F0 86 02            [24]  421 	mov	ar2,@r0
      0001F2 08               [12]  422 	inc	r0
      0001F3 86 04            [24]  423 	mov	ar4,@r0
      0001F5 08               [12]  424 	inc	r0
      0001F6 86 06            [24]  425 	mov	ar6,@r0
      0001F8 08               [12]  426 	inc	r0
      0001F9 86 07            [24]  427 	mov	ar7,@r0
      0001FB 80 54            [24]  428 	sjmp	00105$
      0001FD                        429 00104$:
                                    430 ;	asincosf.c:78: g = y * y;
      0001FD C0 07            [24]  431 	push	ar7
      0001FF C0 06            [24]  432 	push	ar6
      000201 C0 04            [24]  433 	push	ar4
      000203 C0 02            [24]  434 	push	ar2
      000205 C0*00            [24]  435 	push	bits
      000207 C0 02            [24]  436 	push	ar2
      000209 C0 04            [24]  437 	push	ar4
      00020B C0 06            [24]  438 	push	ar6
      00020D C0 07            [24]  439 	push	ar7
      00020F 8A 82            [24]  440 	mov	dpl,r2
      000211 8C 83            [24]  441 	mov	dph,r4
      000213 8E F0            [24]  442 	mov	b,r6
      000215 EF               [12]  443 	mov	a,r7
      000216 12r00r00         [24]  444 	lcall	___fsmul
      000219 C8               [12]  445 	xch	a,r0
      00021A E5*00            [12]  446 	mov	a,_bp
      00021C 24 05            [12]  447 	add	a,#0x05
      00021E C8               [12]  448 	xch	a,r0
      00021F A6 82            [24]  449 	mov	@r0,dpl
      000221 08               [12]  450 	inc	r0
      000222 A6 83            [24]  451 	mov	@r0,dph
      000224 08               [12]  452 	inc	r0
      000225 A6 F0            [24]  453 	mov	@r0,b
      000227 08               [12]  454 	inc	r0
      000228 F6               [12]  455 	mov	@r0,a
      000229 E5 81            [12]  456 	mov	a,sp
      00022B 24 FC            [12]  457 	add	a,#0xfc
      00022D F5 81            [12]  458 	mov	sp,a
      00022F D0*00            [24]  459 	pop	bits
      000231 D0 02            [24]  460 	pop	ar2
      000233 D0 04            [24]  461 	pop	ar4
      000235 D0 06            [24]  462 	pop	ar6
      000237 D0 07            [24]  463 	pop	ar7
      000239 E5*00            [12]  464 	mov	a,_bp
      00023B 24 05            [12]  465 	add	a,#0x05
      00023D F8               [12]  466 	mov	r0,a
      00023E E5*00            [12]  467 	mov	a,_bp
      000240 24 0D            [12]  468 	add	a,#0x0d
      000242 F9               [12]  469 	mov	r1,a
      000243 E6               [12]  470 	mov	a,@r0
      000244 F7               [12]  471 	mov	@r1,a
      000245 08               [12]  472 	inc	r0
      000246 09               [12]  473 	inc	r1
      000247 E6               [12]  474 	mov	a,@r0
      000248 F7               [12]  475 	mov	@r1,a
      000249 08               [12]  476 	inc	r0
      00024A 09               [12]  477 	inc	r1
      00024B E6               [12]  478 	mov	a,@r0
      00024C F7               [12]  479 	mov	@r1,a
      00024D 08               [12]  480 	inc	r0
      00024E 09               [12]  481 	inc	r1
      00024F E6               [12]  482 	mov	a,@r0
      000250 F7               [12]  483 	mov	@r1,a
      000251                        484 00105$:
                                    485 ;	asincosf.c:80: r = y + y * ((P(g) * g) / Q(g));
      000251 C0 07            [24]  486 	push	ar7
      000253 C0 06            [24]  487 	push	ar6
      000255 C0 04            [24]  488 	push	ar4
      000257 C0 02            [24]  489 	push	ar2
      000259 C0*00            [24]  490 	push	bits
      00025B E5*00            [12]  491 	mov	a,_bp
      00025D 24 0D            [12]  492 	add	a,#0x0d
      00025F F8               [12]  493 	mov	r0,a
      000260 E6               [12]  494 	mov	a,@r0
      000261 C0 E0            [24]  495 	push	acc
      000263 08               [12]  496 	inc	r0
      000264 E6               [12]  497 	mov	a,@r0
      000265 C0 E0            [24]  498 	push	acc
      000267 08               [12]  499 	inc	r0
      000268 E6               [12]  500 	mov	a,@r0
      000269 C0 E0            [24]  501 	push	acc
      00026B 08               [12]  502 	inc	r0
      00026C E6               [12]  503 	mov	a,@r0
      00026D C0 E0            [24]  504 	push	acc
      00026F 90 20 65         [24]  505 	mov	dptr,#0x2065
      000272 75 F0 01         [24]  506 	mov	b,#0x01
      000275 74 BF            [12]  507 	mov	a,#0xBF
      000277 12r00r00         [24]  508 	lcall	___fsmul
      00027A C8               [12]  509 	xch	a,r0
      00027B E5*00            [12]  510 	mov	a,_bp
      00027D 24 05            [12]  511 	add	a,#0x05
      00027F C8               [12]  512 	xch	a,r0
      000280 A6 82            [24]  513 	mov	@r0,dpl
      000282 08               [12]  514 	inc	r0
      000283 A6 83            [24]  515 	mov	@r0,dph
      000285 08               [12]  516 	inc	r0
      000286 A6 F0            [24]  517 	mov	@r0,b
      000288 08               [12]  518 	inc	r0
      000289 F6               [12]  519 	mov	@r0,a
      00028A E5 81            [12]  520 	mov	a,sp
      00028C 24 FC            [12]  521 	add	a,#0xfc
      00028E F5 81            [12]  522 	mov	sp,a
      000290 D0*00            [24]  523 	pop	bits
      000292 C0*00            [24]  524 	push	bits
      000294 74 6B            [12]  525 	mov	a,#0x6B
      000296 C0 E0            [24]  526 	push	acc
      000298 74 16            [12]  527 	mov	a,#0x16
      00029A C0 E0            [24]  528 	push	acc
      00029C 74 6F            [12]  529 	mov	a,#0x6F
      00029E C0 E0            [24]  530 	push	acc
      0002A0 74 3F            [12]  531 	mov	a,#0x3F
      0002A2 C0 E0            [24]  532 	push	acc
      0002A4 E5*00            [12]  533 	mov	a,_bp
      0002A6 24 05            [12]  534 	add	a,#0x05
      0002A8 F8               [12]  535 	mov	r0,a
      0002A9 86 82            [24]  536 	mov	dpl,@r0
      0002AB 08               [12]  537 	inc	r0
      0002AC 86 83            [24]  538 	mov	dph,@r0
      0002AE 08               [12]  539 	inc	r0
      0002AF 86 F0            [24]  540 	mov	b,@r0
      0002B1 08               [12]  541 	inc	r0
      0002B2 E6               [12]  542 	mov	a,@r0
      0002B3 12r00r00         [24]  543 	lcall	___fsadd
      0002B6 C8               [12]  544 	xch	a,r0
      0002B7 E5*00            [12]  545 	mov	a,_bp
      0002B9 24 05            [12]  546 	add	a,#0x05
      0002BB C8               [12]  547 	xch	a,r0
      0002BC A6 82            [24]  548 	mov	@r0,dpl
      0002BE 08               [12]  549 	inc	r0
      0002BF A6 83            [24]  550 	mov	@r0,dph
      0002C1 08               [12]  551 	inc	r0
      0002C2 A6 F0            [24]  552 	mov	@r0,b
      0002C4 08               [12]  553 	inc	r0
      0002C5 F6               [12]  554 	mov	@r0,a
      0002C6 E5 81            [12]  555 	mov	a,sp
      0002C8 24 FC            [12]  556 	add	a,#0xfc
      0002CA F5 81            [12]  557 	mov	sp,a
      0002CC D0*00            [24]  558 	pop	bits
      0002CE C0*00            [24]  559 	push	bits
      0002D0 E5*00            [12]  560 	mov	a,_bp
      0002D2 24 0D            [12]  561 	add	a,#0x0d
      0002D4 F8               [12]  562 	mov	r0,a
      0002D5 E6               [12]  563 	mov	a,@r0
      0002D6 C0 E0            [24]  564 	push	acc
      0002D8 08               [12]  565 	inc	r0
      0002D9 E6               [12]  566 	mov	a,@r0
      0002DA C0 E0            [24]  567 	push	acc
      0002DC 08               [12]  568 	inc	r0
      0002DD E6               [12]  569 	mov	a,@r0
      0002DE C0 E0            [24]  570 	push	acc
      0002E0 08               [12]  571 	inc	r0
      0002E1 E6               [12]  572 	mov	a,@r0
      0002E2 C0 E0            [24]  573 	push	acc
      0002E4 E5*00            [12]  574 	mov	a,_bp
      0002E6 24 05            [12]  575 	add	a,#0x05
      0002E8 F8               [12]  576 	mov	r0,a
      0002E9 86 82            [24]  577 	mov	dpl,@r0
      0002EB 08               [12]  578 	inc	r0
      0002EC 86 83            [24]  579 	mov	dph,@r0
      0002EE 08               [12]  580 	inc	r0
      0002EF 86 F0            [24]  581 	mov	b,@r0
      0002F1 08               [12]  582 	inc	r0
      0002F2 E6               [12]  583 	mov	a,@r0
      0002F3 12r00r00         [24]  584 	lcall	___fsmul
      0002F6 C8               [12]  585 	xch	a,r0
      0002F7 E5*00            [12]  586 	mov	a,_bp
      0002F9 24 05            [12]  587 	add	a,#0x05
      0002FB C8               [12]  588 	xch	a,r0
      0002FC A6 82            [24]  589 	mov	@r0,dpl
      0002FE 08               [12]  590 	inc	r0
      0002FF A6 83            [24]  591 	mov	@r0,dph
      000301 08               [12]  592 	inc	r0
      000302 A6 F0            [24]  593 	mov	@r0,b
      000304 08               [12]  594 	inc	r0
      000305 F6               [12]  595 	mov	@r0,a
      000306 E5 81            [12]  596 	mov	a,sp
      000308 24 FC            [12]  597 	add	a,#0xfc
      00030A F5 81            [12]  598 	mov	sp,a
      00030C D0*00            [24]  599 	pop	bits
      00030E C0*00            [24]  600 	push	bits
      000310 74 0B            [12]  601 	mov	a,#0x0B
      000312 C0 E0            [24]  602 	push	acc
      000314 74 8D            [12]  603 	mov	a,#0x8D
      000316 C0 E0            [24]  604 	push	acc
      000318 74 B1            [12]  605 	mov	a,#0xB1
      00031A C0 E0            [24]  606 	push	acc
      00031C 74 C0            [12]  607 	mov	a,#0xC0
      00031E C0 E0            [24]  608 	push	acc
      000320 E5*00            [12]  609 	mov	a,_bp
      000322 24 0D            [12]  610 	add	a,#0x0d
      000324 F8               [12]  611 	mov	r0,a
      000325 86 82            [24]  612 	mov	dpl,@r0
      000327 08               [12]  613 	inc	r0
      000328 86 83            [24]  614 	mov	dph,@r0
      00032A 08               [12]  615 	inc	r0
      00032B 86 F0            [24]  616 	mov	b,@r0
      00032D 08               [12]  617 	inc	r0
      00032E E6               [12]  618 	mov	a,@r0
      00032F 12r00r00         [24]  619 	lcall	___fsadd
      000332 C8               [12]  620 	xch	a,r0
      000333 E5*00            [12]  621 	mov	a,_bp
      000335 24 09            [12]  622 	add	a,#0x09
      000337 C8               [12]  623 	xch	a,r0
      000338 A6 82            [24]  624 	mov	@r0,dpl
      00033A 08               [12]  625 	inc	r0
      00033B A6 83            [24]  626 	mov	@r0,dph
      00033D 08               [12]  627 	inc	r0
      00033E A6 F0            [24]  628 	mov	@r0,b
      000340 08               [12]  629 	inc	r0
      000341 F6               [12]  630 	mov	@r0,a
      000342 E5 81            [12]  631 	mov	a,sp
      000344 24 FC            [12]  632 	add	a,#0xfc
      000346 F5 81            [12]  633 	mov	sp,a
      000348 D0*00            [24]  634 	pop	bits
      00034A C0*00            [24]  635 	push	bits
      00034C E5*00            [12]  636 	mov	a,_bp
      00034E 24 0D            [12]  637 	add	a,#0x0d
      000350 F8               [12]  638 	mov	r0,a
      000351 E6               [12]  639 	mov	a,@r0
      000352 C0 E0            [24]  640 	push	acc
      000354 08               [12]  641 	inc	r0
      000355 E6               [12]  642 	mov	a,@r0
      000356 C0 E0            [24]  643 	push	acc
      000358 08               [12]  644 	inc	r0
      000359 E6               [12]  645 	mov	a,@r0
      00035A C0 E0            [24]  646 	push	acc
      00035C 08               [12]  647 	inc	r0
      00035D E6               [12]  648 	mov	a,@r0
      00035E C0 E0            [24]  649 	push	acc
      000360 E5*00            [12]  650 	mov	a,_bp
      000362 24 09            [12]  651 	add	a,#0x09
      000364 F8               [12]  652 	mov	r0,a
      000365 86 82            [24]  653 	mov	dpl,@r0
      000367 08               [12]  654 	inc	r0
      000368 86 83            [24]  655 	mov	dph,@r0
      00036A 08               [12]  656 	inc	r0
      00036B 86 F0            [24]  657 	mov	b,@r0
      00036D 08               [12]  658 	inc	r0
      00036E E6               [12]  659 	mov	a,@r0
      00036F 12r00r00         [24]  660 	lcall	___fsmul
      000372 C8               [12]  661 	xch	a,r0
      000373 E5*00            [12]  662 	mov	a,_bp
      000375 24 09            [12]  663 	add	a,#0x09
      000377 C8               [12]  664 	xch	a,r0
      000378 A6 82            [24]  665 	mov	@r0,dpl
      00037A 08               [12]  666 	inc	r0
      00037B A6 83            [24]  667 	mov	@r0,dph
      00037D 08               [12]  668 	inc	r0
      00037E A6 F0            [24]  669 	mov	@r0,b
      000380 08               [12]  670 	inc	r0
      000381 F6               [12]  671 	mov	@r0,a
      000382 E5 81            [12]  672 	mov	a,sp
      000384 24 FC            [12]  673 	add	a,#0xfc
      000386 F5 81            [12]  674 	mov	sp,a
      000388 D0*00            [24]  675 	pop	bits
      00038A C0*00            [24]  676 	push	bits
      00038C 74 F0            [12]  677 	mov	a,#0xF0
      00038E C0 E0            [24]  678 	push	acc
      000390 74 50            [12]  679 	mov	a,#0x50
      000392 C0 E0            [24]  680 	push	acc
      000394 74 B3            [12]  681 	mov	a,#0xB3
      000396 C0 E0            [24]  682 	push	acc
      000398 74 40            [12]  683 	mov	a,#0x40
      00039A C0 E0            [24]  684 	push	acc
      00039C E5*00            [12]  685 	mov	a,_bp
      00039E 24 09            [12]  686 	add	a,#0x09
      0003A0 F8               [12]  687 	mov	r0,a
      0003A1 86 82            [24]  688 	mov	dpl,@r0
      0003A3 08               [12]  689 	inc	r0
      0003A4 86 83            [24]  690 	mov	dph,@r0
      0003A6 08               [12]  691 	inc	r0
      0003A7 86 F0            [24]  692 	mov	b,@r0
      0003A9 08               [12]  693 	inc	r0
      0003AA E6               [12]  694 	mov	a,@r0
      0003AB 12r00r00         [24]  695 	lcall	___fsadd
      0003AE C8               [12]  696 	xch	a,r0
      0003AF E5*00            [12]  697 	mov	a,_bp
      0003B1 24 09            [12]  698 	add	a,#0x09
      0003B3 C8               [12]  699 	xch	a,r0
      0003B4 A6 82            [24]  700 	mov	@r0,dpl
      0003B6 08               [12]  701 	inc	r0
      0003B7 A6 83            [24]  702 	mov	@r0,dph
      0003B9 08               [12]  703 	inc	r0
      0003BA A6 F0            [24]  704 	mov	@r0,b
      0003BC 08               [12]  705 	inc	r0
      0003BD F6               [12]  706 	mov	@r0,a
      0003BE E5 81            [12]  707 	mov	a,sp
      0003C0 24 FC            [12]  708 	add	a,#0xfc
      0003C2 F5 81            [12]  709 	mov	sp,a
      0003C4 D0*00            [24]  710 	pop	bits
      0003C6 C0*00            [24]  711 	push	bits
      0003C8 E5*00            [12]  712 	mov	a,_bp
      0003CA 24 09            [12]  713 	add	a,#0x09
      0003CC F8               [12]  714 	mov	r0,a
      0003CD E6               [12]  715 	mov	a,@r0
      0003CE C0 E0            [24]  716 	push	acc
      0003D0 08               [12]  717 	inc	r0
      0003D1 E6               [12]  718 	mov	a,@r0
      0003D2 C0 E0            [24]  719 	push	acc
      0003D4 08               [12]  720 	inc	r0
      0003D5 E6               [12]  721 	mov	a,@r0
      0003D6 C0 E0            [24]  722 	push	acc
      0003D8 08               [12]  723 	inc	r0
      0003D9 E6               [12]  724 	mov	a,@r0
      0003DA C0 E0            [24]  725 	push	acc
      0003DC E5*00            [12]  726 	mov	a,_bp
      0003DE 24 05            [12]  727 	add	a,#0x05
      0003E0 F8               [12]  728 	mov	r0,a
      0003E1 86 82            [24]  729 	mov	dpl,@r0
      0003E3 08               [12]  730 	inc	r0
      0003E4 86 83            [24]  731 	mov	dph,@r0
      0003E6 08               [12]  732 	inc	r0
      0003E7 86 F0            [24]  733 	mov	b,@r0
      0003E9 08               [12]  734 	inc	r0
      0003EA E6               [12]  735 	mov	a,@r0
      0003EB 12r00r00         [24]  736 	lcall	___fsdiv
      0003EE C8               [12]  737 	xch	a,r0
      0003EF E5*00            [12]  738 	mov	a,_bp
      0003F1 24 09            [12]  739 	add	a,#0x09
      0003F3 C8               [12]  740 	xch	a,r0
      0003F4 A6 82            [24]  741 	mov	@r0,dpl
      0003F6 08               [12]  742 	inc	r0
      0003F7 A6 83            [24]  743 	mov	@r0,dph
      0003F9 08               [12]  744 	inc	r0
      0003FA A6 F0            [24]  745 	mov	@r0,b
      0003FC 08               [12]  746 	inc	r0
      0003FD F6               [12]  747 	mov	@r0,a
      0003FE E5 81            [12]  748 	mov	a,sp
      000400 24 FC            [12]  749 	add	a,#0xfc
      000402 F5 81            [12]  750 	mov	sp,a
      000404 D0*00            [24]  751 	pop	bits
      000406 D0 02            [24]  752 	pop	ar2
      000408 D0 04            [24]  753 	pop	ar4
      00040A D0 06            [24]  754 	pop	ar6
      00040C D0 07            [24]  755 	pop	ar7
      00040E C0 07            [24]  756 	push	ar7
      000410 C0 06            [24]  757 	push	ar6
      000412 C0 04            [24]  758 	push	ar4
      000414 C0 02            [24]  759 	push	ar2
      000416 C0*00            [24]  760 	push	bits
      000418 E5*00            [12]  761 	mov	a,_bp
      00041A 24 09            [12]  762 	add	a,#0x09
      00041C F8               [12]  763 	mov	r0,a
      00041D E6               [12]  764 	mov	a,@r0
      00041E C0 E0            [24]  765 	push	acc
      000420 08               [12]  766 	inc	r0
      000421 E6               [12]  767 	mov	a,@r0
      000422 C0 E0            [24]  768 	push	acc
      000424 08               [12]  769 	inc	r0
      000425 E6               [12]  770 	mov	a,@r0
      000426 C0 E0            [24]  771 	push	acc
      000428 08               [12]  772 	inc	r0
      000429 E6               [12]  773 	mov	a,@r0
      00042A C0 E0            [24]  774 	push	acc
      00042C 8A 82            [24]  775 	mov	dpl,r2
      00042E 8C 83            [24]  776 	mov	dph,r4
      000430 8E F0            [24]  777 	mov	b,r6
      000432 EF               [12]  778 	mov	a,r7
      000433 12r00r00         [24]  779 	lcall	___fsmul
      000436 C8               [12]  780 	xch	a,r0
      000437 E5*00            [12]  781 	mov	a,_bp
      000439 24 09            [12]  782 	add	a,#0x09
      00043B C8               [12]  783 	xch	a,r0
      00043C A6 82            [24]  784 	mov	@r0,dpl
      00043E 08               [12]  785 	inc	r0
      00043F A6 83            [24]  786 	mov	@r0,dph
      000441 08               [12]  787 	inc	r0
      000442 A6 F0            [24]  788 	mov	@r0,b
      000444 08               [12]  789 	inc	r0
      000445 F6               [12]  790 	mov	@r0,a
      000446 E5 81            [12]  791 	mov	a,sp
      000448 24 FC            [12]  792 	add	a,#0xfc
      00044A F5 81            [12]  793 	mov	sp,a
      00044C D0*00            [24]  794 	pop	bits
      00044E D0 02            [24]  795 	pop	ar2
      000450 D0 04            [24]  796 	pop	ar4
      000452 D0 06            [24]  797 	pop	ar6
      000454 D0 07            [24]  798 	pop	ar7
      000456 C0*00            [24]  799 	push	bits
      000458 E5*00            [12]  800 	mov	a,_bp
      00045A 24 09            [12]  801 	add	a,#0x09
      00045C F8               [12]  802 	mov	r0,a
      00045D E6               [12]  803 	mov	a,@r0
      00045E C0 E0            [24]  804 	push	acc
      000460 08               [12]  805 	inc	r0
      000461 E6               [12]  806 	mov	a,@r0
      000462 C0 E0            [24]  807 	push	acc
      000464 08               [12]  808 	inc	r0
      000465 E6               [12]  809 	mov	a,@r0
      000466 C0 E0            [24]  810 	push	acc
      000468 08               [12]  811 	inc	r0
      000469 E6               [12]  812 	mov	a,@r0
      00046A C0 E0            [24]  813 	push	acc
      00046C 8A 82            [24]  814 	mov	dpl,r2
      00046E 8C 83            [24]  815 	mov	dph,r4
      000470 8E F0            [24]  816 	mov	b,r6
      000472 EF               [12]  817 	mov	a,r7
      000473 12r00r00         [24]  818 	lcall	___fsadd
      000476 AF 82            [24]  819 	mov	r7,dpl
      000478 AE 83            [24]  820 	mov	r6,dph
      00047A AD F0            [24]  821 	mov	r5,b
      00047C FC               [12]  822 	mov	r4,a
      00047D E5 81            [12]  823 	mov	a,sp
      00047F 24 FC            [12]  824 	add	a,#0xfc
      000481 F5 81            [12]  825 	mov	sp,a
      000483 D0*00            [24]  826 	pop	bits
      000485 E5*00            [12]  827 	mov	a,_bp
      000487 24 11            [12]  828 	add	a,#0x11
      000489 F8               [12]  829 	mov	r0,a
      00048A A6 07            [24]  830 	mov	@r0,ar7
      00048C 08               [12]  831 	inc	r0
      00048D A6 06            [24]  832 	mov	@r0,ar6
      00048F 08               [12]  833 	inc	r0
      000490 A6 05            [24]  834 	mov	@r0,ar5
      000492 08               [12]  835 	inc	r0
      000493 A6 04            [24]  836 	mov	@r0,ar4
      000495                        837 00108$:
                                    838 ;	asincosf.c:82: i = quartPI;
      000495 A2*00            [12]  839 	mov	c,b1
      000497 E4               [12]  840 	clr	a
      000498 33               [12]  841 	rlc	a
      000499 FD               [12]  842 	mov	r5,a
                                    843 ;	asincosf.c:83: if (isacos)
      00049A 20*00 03         [24]  844 	jb	b0,00140$
      00049D 02r05rF9         [24]  845 	ljmp	00115$
      0004A0                        846 00140$:
                                    847 ;	asincosf.c:85: if (x < 0.0)
      0004A0 C0 05            [24]  848 	push	ar5
      0004A2 E4               [12]  849 	clr	a
      0004A3 C0 E0            [24]  850 	push	acc
      0004A5 C0 E0            [24]  851 	push	acc
      0004A7 C0 E0            [24]  852 	push	acc
      0004A9 C0 E0            [24]  853 	push	acc
      0004AB A8*00            [24]  854 	mov	r0,_bp
      0004AD 08               [12]  855 	inc	r0
      0004AE 86 82            [24]  856 	mov	dpl,@r0
      0004B0 08               [12]  857 	inc	r0
      0004B1 86 83            [24]  858 	mov	dph,@r0
      0004B3 08               [12]  859 	inc	r0
      0004B4 86 F0            [24]  860 	mov	b,@r0
      0004B6 08               [12]  861 	inc	r0
      0004B7 E6               [12]  862 	mov	a,@r0
      0004B8 12r00r00         [24]  863 	lcall	___fslt
      0004BB AC 82            [24]  864 	mov	r4,dpl
      0004BD E5 81            [12]  865 	mov	a,sp
      0004BF 24 FC            [12]  866 	add	a,#0xfc
      0004C1 F5 81            [12]  867 	mov	sp,a
      0004C3 D0 05            [24]  868 	pop	ar5
      0004C5 EC               [12]  869 	mov	a,r4
      0004C6 70 03            [24]  870 	jnz	00141$
      0004C8 02r05r62         [24]  871 	ljmp	00110$
      0004CB                        872 00141$:
                                    873 ;	asincosf.c:86: r = (b[i] + r) + b[i];
      0004CB ED               [12]  874 	mov	a,r5
      0004CC 75 F0 04         [24]  875 	mov	b,#0x04
      0004CF A4               [48]  876 	mul	ab
      0004D0 24r08            [12]  877 	add	a,#_asincosf_b_1_24
      0004D2 F5 82            [12]  878 	mov	dpl,a
      0004D4 74s00            [12]  879 	mov	a,#(_asincosf_b_1_24 >> 8)
      0004D6 35 F0            [12]  880 	addc	a,b
      0004D8 F5 83            [12]  881 	mov	dph,a
      0004DA E5*00            [12]  882 	mov	a,_bp
      0004DC 24 09            [12]  883 	add	a,#0x09
      0004DE F8               [12]  884 	mov	r0,a
      0004DF E4               [12]  885 	clr	a
      0004E0 93               [24]  886 	movc	a,@a+dptr
      0004E1 F6               [12]  887 	mov	@r0,a
      0004E2 A3               [24]  888 	inc	dptr
      0004E3 E4               [12]  889 	clr	a
      0004E4 93               [24]  890 	movc	a,@a+dptr
      0004E5 08               [12]  891 	inc	r0
      0004E6 F6               [12]  892 	mov	@r0,a
      0004E7 A3               [24]  893 	inc	dptr
      0004E8 E4               [12]  894 	clr	a
      0004E9 93               [24]  895 	movc	a,@a+dptr
      0004EA 08               [12]  896 	inc	r0
      0004EB F6               [12]  897 	mov	@r0,a
      0004EC A3               [24]  898 	inc	dptr
      0004ED E4               [12]  899 	clr	a
      0004EE 93               [24]  900 	movc	a,@a+dptr
      0004EF 08               [12]  901 	inc	r0
      0004F0 F6               [12]  902 	mov	@r0,a
      0004F1 E5*00            [12]  903 	mov	a,_bp
      0004F3 24 11            [12]  904 	add	a,#0x11
      0004F5 F8               [12]  905 	mov	r0,a
      0004F6 E6               [12]  906 	mov	a,@r0
      0004F7 C0 E0            [24]  907 	push	acc
      0004F9 08               [12]  908 	inc	r0
      0004FA E6               [12]  909 	mov	a,@r0
      0004FB C0 E0            [24]  910 	push	acc
      0004FD 08               [12]  911 	inc	r0
      0004FE E6               [12]  912 	mov	a,@r0
      0004FF C0 E0            [24]  913 	push	acc
      000501 08               [12]  914 	inc	r0
      000502 E6               [12]  915 	mov	a,@r0
      000503 C0 E0            [24]  916 	push	acc
      000505 E5*00            [12]  917 	mov	a,_bp
      000507 24 09            [12]  918 	add	a,#0x09
      000509 F8               [12]  919 	mov	r0,a
      00050A 86 82            [24]  920 	mov	dpl,@r0
      00050C 08               [12]  921 	inc	r0
      00050D 86 83            [24]  922 	mov	dph,@r0
      00050F 08               [12]  923 	inc	r0
      000510 86 F0            [24]  924 	mov	b,@r0
      000512 08               [12]  925 	inc	r0
      000513 E6               [12]  926 	mov	a,@r0
      000514 12r00r00         [24]  927 	lcall	___fsadd
      000517 AA 82            [24]  928 	mov	r2,dpl
      000519 AC 83            [24]  929 	mov	r4,dph
      00051B AE F0            [24]  930 	mov	r6,b
      00051D FF               [12]  931 	mov	r7,a
      00051E E5 81            [12]  932 	mov	a,sp
      000520 24 FC            [12]  933 	add	a,#0xfc
      000522 F5 81            [12]  934 	mov	sp,a
      000524 E5*00            [12]  935 	mov	a,_bp
      000526 24 09            [12]  936 	add	a,#0x09
      000528 F8               [12]  937 	mov	r0,a
      000529 E6               [12]  938 	mov	a,@r0
      00052A C0 E0            [24]  939 	push	acc
      00052C 08               [12]  940 	inc	r0
      00052D E6               [12]  941 	mov	a,@r0
      00052E C0 E0            [24]  942 	push	acc
      000530 08               [12]  943 	inc	r0
      000531 E6               [12]  944 	mov	a,@r0
      000532 C0 E0            [24]  945 	push	acc
      000534 08               [12]  946 	inc	r0
      000535 E6               [12]  947 	mov	a,@r0
      000536 C0 E0            [24]  948 	push	acc
      000538 8A 82            [24]  949 	mov	dpl,r2
      00053A 8C 83            [24]  950 	mov	dph,r4
      00053C 8E F0            [24]  951 	mov	b,r6
      00053E EF               [12]  952 	mov	a,r7
      00053F 12r00r00         [24]  953 	lcall	___fsadd
      000542 AB 82            [24]  954 	mov	r3,dpl
      000544 AC 83            [24]  955 	mov	r4,dph
      000546 AE F0            [24]  956 	mov	r6,b
      000548 FF               [12]  957 	mov	r7,a
      000549 E5 81            [12]  958 	mov	a,sp
      00054B 24 FC            [12]  959 	add	a,#0xfc
      00054D F5 81            [12]  960 	mov	sp,a
      00054F E5*00            [12]  961 	mov	a,_bp
      000551 24 11            [12]  962 	add	a,#0x11
      000553 F8               [12]  963 	mov	r0,a
      000554 A6 03            [24]  964 	mov	@r0,ar3
      000556 08               [12]  965 	inc	r0
      000557 A6 04            [24]  966 	mov	@r0,ar4
      000559 08               [12]  967 	inc	r0
      00055A A6 06            [24]  968 	mov	@r0,ar6
      00055C 08               [12]  969 	inc	r0
      00055D A6 07            [24]  970 	mov	@r0,ar7
      00055F 02r06rC3         [24]  971 	ljmp	00116$
      000562                        972 00110$:
                                    973 ;	asincosf.c:88: r = (a[i] - r) + a[i];
      000562 ED               [12]  974 	mov	a,r5
      000563 75 F0 04         [24]  975 	mov	b,#0x04
      000566 A4               [48]  976 	mul	ab
      000567 24r00            [12]  977 	add	a,#_asincosf_a_1_24
      000569 F5 82            [12]  978 	mov	dpl,a
      00056B 74s00            [12]  979 	mov	a,#(_asincosf_a_1_24 >> 8)
      00056D 35 F0            [12]  980 	addc	a,b
      00056F F5 83            [12]  981 	mov	dph,a
      000571 E5*00            [12]  982 	mov	a,_bp
      000573 24 09            [12]  983 	add	a,#0x09
      000575 F8               [12]  984 	mov	r0,a
      000576 E4               [12]  985 	clr	a
      000577 93               [24]  986 	movc	a,@a+dptr
      000578 F6               [12]  987 	mov	@r0,a
      000579 A3               [24]  988 	inc	dptr
      00057A E4               [12]  989 	clr	a
      00057B 93               [24]  990 	movc	a,@a+dptr
      00057C 08               [12]  991 	inc	r0
      00057D F6               [12]  992 	mov	@r0,a
      00057E A3               [24]  993 	inc	dptr
      00057F E4               [12]  994 	clr	a
      000580 93               [24]  995 	movc	a,@a+dptr
      000581 08               [12]  996 	inc	r0
      000582 F6               [12]  997 	mov	@r0,a
      000583 A3               [24]  998 	inc	dptr
      000584 E4               [12]  999 	clr	a
      000585 93               [24] 1000 	movc	a,@a+dptr
      000586 08               [12] 1001 	inc	r0
      000587 F6               [12] 1002 	mov	@r0,a
      000588 E5*00            [12] 1003 	mov	a,_bp
      00058A 24 11            [12] 1004 	add	a,#0x11
      00058C F8               [12] 1005 	mov	r0,a
      00058D E6               [12] 1006 	mov	a,@r0
      00058E C0 E0            [24] 1007 	push	acc
      000590 08               [12] 1008 	inc	r0
      000591 E6               [12] 1009 	mov	a,@r0
      000592 C0 E0            [24] 1010 	push	acc
      000594 08               [12] 1011 	inc	r0
      000595 E6               [12] 1012 	mov	a,@r0
      000596 C0 E0            [24] 1013 	push	acc
      000598 08               [12] 1014 	inc	r0
      000599 E6               [12] 1015 	mov	a,@r0
      00059A C0 E0            [24] 1016 	push	acc
      00059C E5*00            [12] 1017 	mov	a,_bp
      00059E 24 09            [12] 1018 	add	a,#0x09
      0005A0 F8               [12] 1019 	mov	r0,a
      0005A1 86 82            [24] 1020 	mov	dpl,@r0
      0005A3 08               [12] 1021 	inc	r0
      0005A4 86 83            [24] 1022 	mov	dph,@r0
      0005A6 08               [12] 1023 	inc	r0
      0005A7 86 F0            [24] 1024 	mov	b,@r0
      0005A9 08               [12] 1025 	inc	r0
      0005AA E6               [12] 1026 	mov	a,@r0
      0005AB 12r00r00         [24] 1027 	lcall	___fssub
      0005AE AA 82            [24] 1028 	mov	r2,dpl
      0005B0 AC 83            [24] 1029 	mov	r4,dph
      0005B2 AE F0            [24] 1030 	mov	r6,b
      0005B4 FF               [12] 1031 	mov	r7,a
      0005B5 E5 81            [12] 1032 	mov	a,sp
      0005B7 24 FC            [12] 1033 	add	a,#0xfc
      0005B9 F5 81            [12] 1034 	mov	sp,a
      0005BB E5*00            [12] 1035 	mov	a,_bp
      0005BD 24 09            [12] 1036 	add	a,#0x09
      0005BF F8               [12] 1037 	mov	r0,a
      0005C0 E6               [12] 1038 	mov	a,@r0
      0005C1 C0 E0            [24] 1039 	push	acc
      0005C3 08               [12] 1040 	inc	r0
      0005C4 E6               [12] 1041 	mov	a,@r0
      0005C5 C0 E0            [24] 1042 	push	acc
      0005C7 08               [12] 1043 	inc	r0
      0005C8 E6               [12] 1044 	mov	a,@r0
      0005C9 C0 E0            [24] 1045 	push	acc
      0005CB 08               [12] 1046 	inc	r0
      0005CC E6               [12] 1047 	mov	a,@r0
      0005CD C0 E0            [24] 1048 	push	acc
      0005CF 8A 82            [24] 1049 	mov	dpl,r2
      0005D1 8C 83            [24] 1050 	mov	dph,r4
      0005D3 8E F0            [24] 1051 	mov	b,r6
      0005D5 EF               [12] 1052 	mov	a,r7
      0005D6 12r00r00         [24] 1053 	lcall	___fsadd
      0005D9 AB 82            [24] 1054 	mov	r3,dpl
      0005DB AC 83            [24] 1055 	mov	r4,dph
      0005DD AE F0            [24] 1056 	mov	r6,b
      0005DF FF               [12] 1057 	mov	r7,a
      0005E0 E5 81            [12] 1058 	mov	a,sp
      0005E2 24 FC            [12] 1059 	add	a,#0xfc
      0005E4 F5 81            [12] 1060 	mov	sp,a
      0005E6 E5*00            [12] 1061 	mov	a,_bp
      0005E8 24 11            [12] 1062 	add	a,#0x11
      0005EA F8               [12] 1063 	mov	r0,a
      0005EB A6 03            [24] 1064 	mov	@r0,ar3
      0005ED 08               [12] 1065 	inc	r0
      0005EE A6 04            [24] 1066 	mov	@r0,ar4
      0005F0 08               [12] 1067 	inc	r0
      0005F1 A6 06            [24] 1068 	mov	@r0,ar6
      0005F3 08               [12] 1069 	inc	r0
      0005F4 A6 07            [24] 1070 	mov	@r0,ar7
      0005F6 02r06rC3         [24] 1071 	ljmp	00116$
      0005F9                       1072 00115$:
                                   1073 ;	asincosf.c:92: r = (a[i] + r) + a[i];
      0005F9 ED               [12] 1074 	mov	a,r5
      0005FA 75 F0 04         [24] 1075 	mov	b,#0x04
      0005FD A4               [48] 1076 	mul	ab
      0005FE 24r00            [12] 1077 	add	a,#_asincosf_a_1_24
      000600 F5 82            [12] 1078 	mov	dpl,a
      000602 74s00            [12] 1079 	mov	a,#(_asincosf_a_1_24 >> 8)
      000604 35 F0            [12] 1080 	addc	a,b
      000606 F5 83            [12] 1081 	mov	dph,a
      000608 E5*00            [12] 1082 	mov	a,_bp
      00060A 24 09            [12] 1083 	add	a,#0x09
      00060C F8               [12] 1084 	mov	r0,a
      00060D E4               [12] 1085 	clr	a
      00060E 93               [24] 1086 	movc	a,@a+dptr
      00060F F6               [12] 1087 	mov	@r0,a
      000610 A3               [24] 1088 	inc	dptr
      000611 E4               [12] 1089 	clr	a
      000612 93               [24] 1090 	movc	a,@a+dptr
      000613 08               [12] 1091 	inc	r0
      000614 F6               [12] 1092 	mov	@r0,a
      000615 A3               [24] 1093 	inc	dptr
      000616 E4               [12] 1094 	clr	a
      000617 93               [24] 1095 	movc	a,@a+dptr
      000618 08               [12] 1096 	inc	r0
      000619 F6               [12] 1097 	mov	@r0,a
      00061A A3               [24] 1098 	inc	dptr
      00061B E4               [12] 1099 	clr	a
      00061C 93               [24] 1100 	movc	a,@a+dptr
      00061D 08               [12] 1101 	inc	r0
      00061E F6               [12] 1102 	mov	@r0,a
      00061F E5*00            [12] 1103 	mov	a,_bp
      000621 24 11            [12] 1104 	add	a,#0x11
      000623 F8               [12] 1105 	mov	r0,a
      000624 E6               [12] 1106 	mov	a,@r0
      000625 C0 E0            [24] 1107 	push	acc
      000627 08               [12] 1108 	inc	r0
      000628 E6               [12] 1109 	mov	a,@r0
      000629 C0 E0            [24] 1110 	push	acc
      00062B 08               [12] 1111 	inc	r0
      00062C E6               [12] 1112 	mov	a,@r0
      00062D C0 E0            [24] 1113 	push	acc
      00062F 08               [12] 1114 	inc	r0
      000630 E6               [12] 1115 	mov	a,@r0
      000631 C0 E0            [24] 1116 	push	acc
      000633 E5*00            [12] 1117 	mov	a,_bp
      000635 24 09            [12] 1118 	add	a,#0x09
      000637 F8               [12] 1119 	mov	r0,a
      000638 86 82            [24] 1120 	mov	dpl,@r0
      00063A 08               [12] 1121 	inc	r0
      00063B 86 83            [24] 1122 	mov	dph,@r0
      00063D 08               [12] 1123 	inc	r0
      00063E 86 F0            [24] 1124 	mov	b,@r0
      000640 08               [12] 1125 	inc	r0
      000641 E6               [12] 1126 	mov	a,@r0
      000642 12r00r00         [24] 1127 	lcall	___fsadd
      000645 AA 82            [24] 1128 	mov	r2,dpl
      000647 AB 83            [24] 1129 	mov	r3,dph
      000649 AE F0            [24] 1130 	mov	r6,b
      00064B FF               [12] 1131 	mov	r7,a
      00064C E5 81            [12] 1132 	mov	a,sp
      00064E 24 FC            [12] 1133 	add	a,#0xfc
      000650 F5 81            [12] 1134 	mov	sp,a
      000652 E5*00            [12] 1135 	mov	a,_bp
      000654 24 09            [12] 1136 	add	a,#0x09
      000656 F8               [12] 1137 	mov	r0,a
      000657 E6               [12] 1138 	mov	a,@r0
      000658 C0 E0            [24] 1139 	push	acc
      00065A 08               [12] 1140 	inc	r0
      00065B E6               [12] 1141 	mov	a,@r0
      00065C C0 E0            [24] 1142 	push	acc
      00065E 08               [12] 1143 	inc	r0
      00065F E6               [12] 1144 	mov	a,@r0
      000660 C0 E0            [24] 1145 	push	acc
      000662 08               [12] 1146 	inc	r0
      000663 E6               [12] 1147 	mov	a,@r0
      000664 C0 E0            [24] 1148 	push	acc
      000666 8A 82            [24] 1149 	mov	dpl,r2
      000668 8B 83            [24] 1150 	mov	dph,r3
      00066A 8E F0            [24] 1151 	mov	b,r6
      00066C EF               [12] 1152 	mov	a,r7
      00066D 12r00r00         [24] 1153 	lcall	___fsadd
      000670 AC 82            [24] 1154 	mov	r4,dpl
      000672 AD 83            [24] 1155 	mov	r5,dph
      000674 AE F0            [24] 1156 	mov	r6,b
      000676 FF               [12] 1157 	mov	r7,a
      000677 E5 81            [12] 1158 	mov	a,sp
      000679 24 FC            [12] 1159 	add	a,#0xfc
      00067B F5 81            [12] 1160 	mov	sp,a
      00067D E5*00            [12] 1161 	mov	a,_bp
      00067F 24 11            [12] 1162 	add	a,#0x11
      000681 F8               [12] 1163 	mov	r0,a
      000682 A6 04            [24] 1164 	mov	@r0,ar4
      000684 08               [12] 1165 	inc	r0
      000685 A6 05            [24] 1166 	mov	@r0,ar5
      000687 08               [12] 1167 	inc	r0
      000688 A6 06            [24] 1168 	mov	@r0,ar6
      00068A 08               [12] 1169 	inc	r0
      00068B A6 07            [24] 1170 	mov	@r0,ar7
                                   1171 ;	asincosf.c:93: if (x < 0.0)
      00068D E4               [12] 1172 	clr	a
      00068E C0 E0            [24] 1173 	push	acc
      000690 C0 E0            [24] 1174 	push	acc
      000692 C0 E0            [24] 1175 	push	acc
      000694 C0 E0            [24] 1176 	push	acc
      000696 A8*00            [24] 1177 	mov	r0,_bp
      000698 08               [12] 1178 	inc	r0
      000699 86 82            [24] 1179 	mov	dpl,@r0
      00069B 08               [12] 1180 	inc	r0
      00069C 86 83            [24] 1181 	mov	dph,@r0
      00069E 08               [12] 1182 	inc	r0
      00069F 86 F0            [24] 1183 	mov	b,@r0
      0006A1 08               [12] 1184 	inc	r0
      0006A2 E6               [12] 1185 	mov	a,@r0
      0006A3 12r00r00         [24] 1186 	lcall	___fslt
      0006A6 AF 82            [24] 1187 	mov	r7,dpl
      0006A8 E5 81            [12] 1188 	mov	a,sp
      0006AA 24 FC            [12] 1189 	add	a,#0xfc
      0006AC F5 81            [12] 1190 	mov	sp,a
      0006AE EF               [12] 1191 	mov	a,r7
      0006AF 60 12            [24] 1192 	jz	00116$
                                   1193 ;	asincosf.c:94: r = -r;
      0006B1 E5*00            [12] 1194 	mov	a,_bp
      0006B3 24 11            [12] 1195 	add	a,#0x11
      0006B5 F8               [12] 1196 	mov	r0,a
      0006B6 E6               [12] 1197 	mov	a,@r0
      0006B7 F6               [12] 1198 	mov	@r0,a
      0006B8 08               [12] 1199 	inc	r0
      0006B9 E6               [12] 1200 	mov	a,@r0
      0006BA F6               [12] 1201 	mov	@r0,a
      0006BB 08               [12] 1202 	inc	r0
      0006BC E6               [12] 1203 	mov	a,@r0
      0006BD F6               [12] 1204 	mov	@r0,a
      0006BE 08               [12] 1205 	inc	r0
      0006BF E6               [12] 1206 	mov	a,@r0
      0006C0 B2 E7            [12] 1207 	cpl	acc.7
      0006C2 F6               [12] 1208 	mov	@r0,a
      0006C3                       1209 00116$:
                                   1210 ;	asincosf.c:96: return r;
      0006C3 E5*00            [12] 1211 	mov	a,_bp
      0006C5 24 11            [12] 1212 	add	a,#0x11
      0006C7 F8               [12] 1213 	mov	r0,a
      0006C8 86 82            [24] 1214 	mov	dpl,@r0
      0006CA 08               [12] 1215 	inc	r0
      0006CB 86 83            [24] 1216 	mov	dph,@r0
      0006CD 08               [12] 1217 	inc	r0
      0006CE 86 F0            [24] 1218 	mov	b,@r0
      0006D0 08               [12] 1219 	inc	r0
      0006D1 E6               [12] 1220 	mov	a,@r0
      0006D2                       1221 00117$:
      0006D2 85*00 81         [24] 1222 	mov	sp,_bp
      0006D5 D0*00            [24] 1223 	pop	_bp
      0006D7 02r00r00         [24] 1224 	ljmp	__sdcc_banked_ret
                                   1225 	.area CSEG    (CODE)
                                   1226 	.area CONST   (CODE)
      000000                       1227 _asincosf_a_1_24:
      000000 00 00 00 00           1228 	.byte #0x00,#0x00,#0x00,#0x00	;  0.000000e+00
      000004 DB 0F 49 3F           1229 	.byte #0xDB,#0x0F,#0x49,#0x3F	;  7.853982e-01
      000008                       1230 _asincosf_b_1_24:
      000008 DB 0F C9 3F           1231 	.byte #0xDB,#0x0F,#0xC9,#0x3F	;  1.570796e+00
      00000C DB 0F 49 3F           1232 	.byte #0xDB,#0x0F,#0x49,#0x3F	;  7.853982e-01
                                   1233 	.area XINIT   (CODE)
                                   1234 	.area CABS    (ABS,CODE)
