                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:15 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module gets
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _gets
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram 
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; external initialized ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'gets'
                                     94 ;------------------------------------------------------------
                                     95 ;s                         Allocated to registers r5 r6 r7 
                                     96 ;c                         Allocated to registers r2 
                                     97 ;count                     Allocated to registers r3 r4 
                                     98 ;------------------------------------------------------------
                                     99 ;	gets.c:32: gets (char *s)
                                    100 ;	-----------------------------------------
                                    101 ;	 function gets
                                    102 ;	-----------------------------------------
      000000                        103 _gets:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
      000000 AD 82            [24]  112 	mov	r5,dpl
      000002 AE 83            [24]  113 	mov	r6,dph
      000004 AF F0            [24]  114 	mov	r7,b
                                    115 ;	gets.c:35: unsigned int count = 0;
      000006 7B 00            [12]  116 	mov	r3,#0x00
      000008 7C 00            [12]  117 	mov	r4,#0x00
                                    118 ;	gets.c:37: while (1)
      00000A                        119 00109$:
                                    120 ;	gets.c:39: c = getchar ();
      00000A C0 07            [24]  121 	push	ar7
      00000C C0 06            [24]  122 	push	ar6
      00000E C0 05            [24]  123 	push	ar5
      000010 C0 04            [24]  124 	push	ar4
      000012 C0 03            [24]  125 	push	ar3
      000014 78r00            [12]  126 	mov	r0,#_getchar
      000016 79s00            [12]  127 	mov	r1,#(_getchar >> 8)
      000018 7As00            [12]  128 	mov	r2,#(_getchar >> 16)
      00001A 12r00r00         [24]  129 	lcall	__sdcc_banked_call
      00001D AA 82            [24]  130 	mov	r2,dpl
      00001F D0 03            [24]  131 	pop	ar3
      000021 D0 04            [24]  132 	pop	ar4
      000023 D0 05            [24]  133 	pop	ar5
      000025 D0 06            [24]  134 	pop	ar6
      000027 D0 07            [24]  135 	pop	ar7
                                    136 ;	gets.c:40: switch(c)
      000029 BA 08 02         [24]  137 	cjne	r2,#0x08,00128$
      00002C 80 0D            [24]  138 	sjmp	00101$
      00002E                        139 00128$:
      00002E BA 0A 02         [24]  140 	cjne	r2,#0x0A,00129$
      000031 80 50            [24]  141 	sjmp	00105$
      000033                        142 00129$:
      000033 BA 0D 02         [24]  143 	cjne	r2,#0x0D,00130$
      000036 80 4B            [24]  144 	sjmp	00105$
      000038                        145 00130$:
      000038 02r00rB9         [24]  146 	ljmp	00106$
                                    147 ;	gets.c:42: case '\b': /* backspace */
      00003B                        148 00101$:
                                    149 ;	gets.c:43: if (count)
      00003B EB               [12]  150 	mov	a,r3
      00003C 4C               [12]  151 	orl	a,r4
      00003D 60 CB            [24]  152 	jz	00109$
                                    153 ;	gets.c:45: putchar ('\b');
      00003F 75 82 08         [24]  154 	mov	dpl,#0x08
      000042 C0 07            [24]  155 	push	ar7
      000044 C0 06            [24]  156 	push	ar6
      000046 C0 05            [24]  157 	push	ar5
      000048 C0 04            [24]  158 	push	ar4
      00004A C0 03            [24]  159 	push	ar3
      00004C 78r00            [12]  160 	mov	r0,#_putchar
      00004E 79s00            [12]  161 	mov	r1,#(_putchar >> 8)
      000050 7As00            [12]  162 	mov	r2,#(_putchar >> 16)
      000052 12r00r00         [24]  163 	lcall	__sdcc_banked_call
                                    164 ;	gets.c:46: putchar (' ');
      000055 75 82 20         [24]  165 	mov	dpl,#0x20
      000058 78r00            [12]  166 	mov	r0,#_putchar
      00005A 79s00            [12]  167 	mov	r1,#(_putchar >> 8)
      00005C 7As00            [12]  168 	mov	r2,#(_putchar >> 16)
      00005E 12r00r00         [24]  169 	lcall	__sdcc_banked_call
                                    170 ;	gets.c:47: putchar ('\b');
      000061 75 82 08         [24]  171 	mov	dpl,#0x08
      000064 78r00            [12]  172 	mov	r0,#_putchar
      000066 79s00            [12]  173 	mov	r1,#(_putchar >> 8)
      000068 7As00            [12]  174 	mov	r2,#(_putchar >> 16)
      00006A 12r00r00         [24]  175 	lcall	__sdcc_banked_call
      00006D D0 03            [24]  176 	pop	ar3
      00006F D0 04            [24]  177 	pop	ar4
      000071 D0 05            [24]  178 	pop	ar5
      000073 D0 06            [24]  179 	pop	ar6
      000075 D0 07            [24]  180 	pop	ar7
                                    181 ;	gets.c:48: --s;
      000077 1D               [12]  182 	dec	r5
      000078 BD FF 01         [24]  183 	cjne	r5,#0xFF,00132$
      00007B 1E               [12]  184 	dec	r6
      00007C                        185 00132$:
                                    186 ;	gets.c:49: --count;
      00007C 1B               [12]  187 	dec	r3
      00007D BB FF 01         [24]  188 	cjne	r3,#0xFF,00133$
      000080 1C               [12]  189 	dec	r4
      000081                        190 00133$:
                                    191 ;	gets.c:51: break;
                                    192 ;	gets.c:54: case '\r': /* CR or LF */
      000081 80 87            [24]  193 	sjmp	00109$
      000083                        194 00105$:
                                    195 ;	gets.c:55: putchar ('\r');
      000083 75 82 0D         [24]  196 	mov	dpl,#0x0D
      000086 C0 07            [24]  197 	push	ar7
      000088 C0 06            [24]  198 	push	ar6
      00008A C0 05            [24]  199 	push	ar5
      00008C 78r00            [12]  200 	mov	r0,#_putchar
      00008E 79s00            [12]  201 	mov	r1,#(_putchar >> 8)
      000090 7As00            [12]  202 	mov	r2,#(_putchar >> 16)
      000092 12r00r00         [24]  203 	lcall	__sdcc_banked_call
                                    204 ;	gets.c:56: putchar ('\n');
      000095 75 82 0A         [24]  205 	mov	dpl,#0x0A
      000098 78r00            [12]  206 	mov	r0,#_putchar
      00009A 79s00            [12]  207 	mov	r1,#(_putchar >> 8)
      00009C 7As00            [12]  208 	mov	r2,#(_putchar >> 16)
      00009E 12r00r00         [24]  209 	lcall	__sdcc_banked_call
      0000A1 D0 05            [24]  210 	pop	ar5
      0000A3 D0 06            [24]  211 	pop	ar6
      0000A5 D0 07            [24]  212 	pop	ar7
                                    213 ;	gets.c:57: *s = 0;
      0000A7 8D 82            [24]  214 	mov	dpl,r5
      0000A9 8E 83            [24]  215 	mov	dph,r6
      0000AB 8F F0            [24]  216 	mov	b,r7
      0000AD E4               [12]  217 	clr	a
      0000AE 12r00r00         [24]  218 	lcall	__gptrput
                                    219 ;	gets.c:58: return s;
      0000B1 8D 82            [24]  220 	mov	dpl,r5
      0000B3 8E 83            [24]  221 	mov	dph,r6
      0000B5 8F F0            [24]  222 	mov	b,r7
                                    223 ;	gets.c:60: default:
      0000B7 80 36            [24]  224 	sjmp	00111$
      0000B9                        225 00106$:
                                    226 ;	gets.c:61: *s++ = c;
      0000B9 8D 82            [24]  227 	mov	dpl,r5
      0000BB 8E 83            [24]  228 	mov	dph,r6
      0000BD 8F F0            [24]  229 	mov	b,r7
      0000BF EA               [12]  230 	mov	a,r2
      0000C0 12r00r00         [24]  231 	lcall	__gptrput
      0000C3 A3               [24]  232 	inc	dptr
      0000C4 AD 82            [24]  233 	mov	r5,dpl
      0000C6 AE 83            [24]  234 	mov	r6,dph
                                    235 ;	gets.c:62: ++count;
      0000C8 0B               [12]  236 	inc	r3
      0000C9 BB 00 01         [24]  237 	cjne	r3,#0x00,00134$
      0000CC 0C               [12]  238 	inc	r4
      0000CD                        239 00134$:
                                    240 ;	gets.c:63: putchar (c);
      0000CD 8A 82            [24]  241 	mov	dpl,r2
      0000CF C0 07            [24]  242 	push	ar7
      0000D1 C0 06            [24]  243 	push	ar6
      0000D3 C0 05            [24]  244 	push	ar5
      0000D5 C0 04            [24]  245 	push	ar4
      0000D7 C0 03            [24]  246 	push	ar3
      0000D9 78r00            [12]  247 	mov	r0,#_putchar
      0000DB 79s00            [12]  248 	mov	r1,#(_putchar >> 8)
      0000DD 7As00            [12]  249 	mov	r2,#(_putchar >> 16)
      0000DF 12r00r00         [24]  250 	lcall	__sdcc_banked_call
      0000E2 D0 03            [24]  251 	pop	ar3
      0000E4 D0 04            [24]  252 	pop	ar4
      0000E6 D0 05            [24]  253 	pop	ar5
      0000E8 D0 06            [24]  254 	pop	ar6
      0000EA D0 07            [24]  255 	pop	ar7
                                    256 ;	gets.c:65: }
      0000EC 02r00r0A         [24]  257 	ljmp	00109$
      0000EF                        258 00111$:
      0000EF 02r00r00         [24]  259 	ljmp	__sdcc_banked_ret
                                    260 	.area CSEG    (CODE)
                                    261 	.area CONST   (CODE)
                                    262 	.area XINIT   (CODE)
                                    263 	.area CABS    (ABS,CODE)
