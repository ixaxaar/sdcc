                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:13 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module cotf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tancotf
                                     13 	.globl _fabsf
                                     14 	.globl _cotf
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; overlayable bit register bank
                                     32 ;--------------------------------------------------------
                                     33 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         34 bits:
      000000                         35 	.ds 1
                           008000    36 	b0 = bits[0]
                           008100    37 	b1 = bits[1]
                           008200    38 	b2 = bits[2]
                           008300    39 	b3 = bits[3]
                           008400    40 	b4 = bits[4]
                           008500    41 	b5 = bits[5]
                           008600    42 	b6 = bits[6]
                           008700    43 	b7 = bits[7]
                                     44 ;--------------------------------------------------------
                                     45 ; internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DSEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; overlayable items in internal ram 
                                     50 ;--------------------------------------------------------
                                     51 ;--------------------------------------------------------
                                     52 ; indirectly addressable internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area ISEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area IABS    (ABS,DATA)
                                     59 	.area IABS    (ABS,DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; bit data
                                     62 ;--------------------------------------------------------
                                     63 	.area BSEG    (BIT)
                                     64 ;--------------------------------------------------------
                                     65 ; paged external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area PSEG    (PAG,XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XSEG    (XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; absolute external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XABS    (ABS,XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; external initialized ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XISEG   (XDATA)
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT0 (CODE)
                                     82 	.area GSINIT1 (CODE)
                                     83 	.area GSINIT2 (CODE)
                                     84 	.area GSINIT3 (CODE)
                                     85 	.area GSINIT4 (CODE)
                                     86 	.area GSINIT5 (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area CSEG    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function 'cotf'
                                    108 ;------------------------------------------------------------
                                    109 ;x                         Allocated to registers r4 r5 r6 r7 
                                    110 ;y                         Allocated to stack - _bp +1
                                    111 ;------------------------------------------------------------
                                    112 ;	cotf.c:37: float cotf(const float x) _FLOAT_FUNC_REENTRANT
                                    113 ;	-----------------------------------------
                                    114 ;	 function cotf
                                    115 ;	-----------------------------------------
      000000                        116 _cotf:
                           000007   117 	ar7 = 0x07
                           000006   118 	ar6 = 0x06
                           000005   119 	ar5 = 0x05
                           000004   120 	ar4 = 0x04
                           000003   121 	ar3 = 0x03
                           000002   122 	ar2 = 0x02
                           000001   123 	ar1 = 0x01
                           000000   124 	ar0 = 0x00
      000000 C0*00            [24]  125 	push	_bp
      000002 85 81*00         [24]  126 	mov	_bp,sp
      000005 AC 82            [24]  127 	mov	r4,dpl
      000007 AD 83            [24]  128 	mov	r5,dph
      000009 AE F0            [24]  129 	mov	r6,b
      00000B FF               [12]  130 	mov	r7,a
      00000C E5 81            [12]  131 	mov	a,sp
      00000E 24 04            [12]  132 	add	a,#0x04
      000010 F5 81            [12]  133 	mov	sp,a
                                    134 ;	cotf.c:41: y=fabsf(x);
      000012 8C 82            [24]  135 	mov	dpl,r4
      000014 8D 83            [24]  136 	mov	dph,r5
      000016 8E F0            [24]  137 	mov	b,r6
      000018 EF               [12]  138 	mov	a,r7
      000019 C0 07            [24]  139 	push	ar7
      00001B C0 06            [24]  140 	push	ar6
      00001D C0 05            [24]  141 	push	ar5
      00001F C0 04            [24]  142 	push	ar4
      000021 78r00            [12]  143 	mov	r0,#_fabsf
      000023 79s00            [12]  144 	mov	r1,#(_fabsf >> 8)
      000025 7As00            [12]  145 	mov	r2,#(_fabsf >> 16)
      000027 12r00r00         [24]  146 	lcall	__sdcc_banked_call
      00002A A8*00            [24]  147 	mov	r0,_bp
      00002C 08               [12]  148 	inc	r0
      00002D A6 82            [24]  149 	mov	@r0,dpl
      00002F 08               [12]  150 	inc	r0
      000030 A6 83            [24]  151 	mov	@r0,dph
      000032 08               [12]  152 	inc	r0
      000033 A6 F0            [24]  153 	mov	@r0,b
      000035 08               [12]  154 	inc	r0
      000036 F6               [12]  155 	mov	@r0,a
      000037 A8*00            [24]  156 	mov	r0,_bp
      000039 08               [12]  157 	inc	r0
                                    158 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
      00003A 74 60            [12]  159 	mov	a,#0x60
      00003C C0 E0            [24]  160 	push	acc
      00003E 74 42            [12]  161 	mov	a,#0x42
      000040 C0 E0            [24]  162 	push	acc
      000042 74 A2            [12]  163 	mov	a,#0xA2
      000044 C0 E0            [24]  164 	push	acc
      000046 74 0D            [12]  165 	mov	a,#0x0D
      000048 C0 E0            [24]  166 	push	acc
      00004A A8*00            [24]  167 	mov	r0,_bp
      00004C 08               [12]  168 	inc	r0
      00004D 86 82            [24]  169 	mov	dpl,@r0
      00004F 08               [12]  170 	inc	r0
      000050 86 83            [24]  171 	mov	dph,@r0
      000052 08               [12]  172 	inc	r0
      000053 86 F0            [24]  173 	mov	b,@r0
      000055 08               [12]  174 	inc	r0
      000056 E6               [12]  175 	mov	a,@r0
      000057 12r00r00         [24]  176 	lcall	___fslt
      00005A AB 82            [24]  177 	mov	r3,dpl
      00005C E5 81            [12]  178 	mov	a,sp
      00005E 24 FC            [12]  179 	add	a,#0xfc
      000060 F5 81            [12]  180 	mov	sp,a
      000062 D0 04            [24]  181 	pop	ar4
      000064 D0 05            [24]  182 	pop	ar5
      000066 D0 06            [24]  183 	pop	ar6
      000068 D0 07            [24]  184 	pop	ar7
      00006A EB               [12]  185 	mov	a,r3
      00006B 60 39            [24]  186 	jz	00105$
                                    187 ;	cotf.c:44: errno = ERANGE;
      00006D 90r00r00         [24]  188 	mov	dptr,#_errno
      000070 74 22            [12]  189 	mov	a,#0x22
      000072 F0               [24]  190 	movx	@dptr,a
      000073 E4               [12]  191 	clr	a
      000074 A3               [24]  192 	inc	dptr
      000075 F0               [24]  193 	movx	@dptr,a
                                    194 ;	cotf.c:45: if (x<0.0)
      000076 C0 E0            [24]  195 	push	acc
      000078 C0 E0            [24]  196 	push	acc
      00007A C0 E0            [24]  197 	push	acc
      00007C C0 E0            [24]  198 	push	acc
      00007E 8C 82            [24]  199 	mov	dpl,r4
      000080 8D 83            [24]  200 	mov	dph,r5
      000082 8E F0            [24]  201 	mov	b,r6
      000084 EF               [12]  202 	mov	a,r7
      000085 12r00r00         [24]  203 	lcall	___fslt
      000088 AB 82            [24]  204 	mov	r3,dpl
      00008A E5 81            [12]  205 	mov	a,sp
      00008C 24 FC            [12]  206 	add	a,#0xfc
      00008E F5 81            [12]  207 	mov	sp,a
      000090 EB               [12]  208 	mov	a,r3
      000091 60 0A            [24]  209 	jz	00102$
                                    210 ;	cotf.c:46: return -HUGE_VALF;
      000093 90 FF FF         [24]  211 	mov	dptr,#0xFFFF
      000096 75 F0 7F         [24]  212 	mov	b,#0x7F
      000099 74 FF            [12]  213 	mov	a,#0xFF
      00009B 80 25            [24]  214 	sjmp	00106$
      00009D                        215 00102$:
                                    216 ;	cotf.c:48: return +HUGE_VALF;
      00009D 90 FF FF         [24]  217 	mov	dptr,#0xFFFF
      0000A0 74 7F            [12]  218 	mov	a,#0x7F
      0000A2 F5 F0            [12]  219 	mov	b,a
      0000A4 80 1C            [24]  220 	sjmp	00106$
      0000A6                        221 00105$:
                                    222 ;	cotf.c:50: return tancotf(x, 1);
      0000A6 D2 F0            [12]  223 	setb	b[0]
      0000A8 85 F0*00         [24]  224 	mov	bits,b
      0000AB 8C 82            [24]  225 	mov	dpl,r4
      0000AD 8D 83            [24]  226 	mov	dph,r5
      0000AF 8E F0            [24]  227 	mov	b,r6
      0000B1 EF               [12]  228 	mov	a,r7
      0000B2 78r00            [12]  229 	mov	r0,#_tancotf
      0000B4 79s00            [12]  230 	mov	r1,#(_tancotf >> 8)
      0000B6 7As00            [12]  231 	mov	r2,#(_tancotf >> 16)
      0000B8 12r00r00         [24]  232 	lcall	__sdcc_banked_call
      0000BB AC 82            [24]  233 	mov	r4,dpl
      0000BD AD 83            [24]  234 	mov	r5,dph
      0000BF AE F0            [24]  235 	mov	r6,b
      0000C1 FF               [12]  236 	mov	r7,a
      0000C2                        237 00106$:
      0000C2 85*00 81         [24]  238 	mov	sp,_bp
      0000C5 D0*00            [24]  239 	pop	_bp
      0000C7 02r00r00         [24]  240 	ljmp	__sdcc_banked_ret
                                    241 	.area CSEG    (CODE)
                                    242 	.area CONST   (CODE)
                                    243 	.area XINIT   (CODE)
                                    244 	.area CABS    (ABS,CODE)
