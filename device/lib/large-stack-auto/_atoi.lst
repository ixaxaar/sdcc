                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:10 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atoi
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'atoi'
                                     92 ;------------------------------------------------------------
                                     93 ;s                         Allocated to stack - _bp +1
                                     94 ;rv                        Allocated to registers r3 r4 
                                     95 ;sign                      Allocated to registers r5 
                                     96 ;sloc0                     Allocated to stack - _bp +7
                                     97 ;sloc1                     Allocated to stack - _bp +4
                                     98 ;------------------------------------------------------------
                                     99 ;	_atoi.c:29: int atoi(const char * s)
                                    100 ;	-----------------------------------------
                                    101 ;	 function atoi
                                    102 ;	-----------------------------------------
      000000                        103 _atoi:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
      000000 C0*00            [24]  112 	push	_bp
      000002 85 81*00         [24]  113 	mov	_bp,sp
      000005 C0 82            [24]  114 	push	dpl
      000007 C0 83            [24]  115 	push	dph
      000009 C0 F0            [24]  116 	push	b
      00000B 05 81            [12]  117 	inc	sp
      00000D 05 81            [12]  118 	inc	sp
      00000F 05 81            [12]  119 	inc	sp
                                    120 ;	_atoi.c:31: register int rv=0; 
      000011 7B 00            [12]  121 	mov	r3,#0x00
      000013 7C 00            [12]  122 	mov	r4,#0x00
                                    123 ;	_atoi.c:35: while (*s) {
      000015 A8*00            [24]  124 	mov	r0,_bp
      000017 08               [12]  125 	inc	r0
      000018 86 02            [24]  126 	mov	ar2,@r0
      00001A 08               [12]  127 	inc	r0
      00001B 86 06            [24]  128 	mov	ar6,@r0
      00001D 08               [12]  129 	inc	r0
      00001E 86 07            [24]  130 	mov	ar7,@r0
      000020                        131 00107$:
      000020 8A 82            [24]  132 	mov	dpl,r2
      000022 8E 83            [24]  133 	mov	dph,r6
      000024 8F F0            [24]  134 	mov	b,r7
      000026 12r00r00         [24]  135 	lcall	__gptrget
      000029 FD               [12]  136 	mov	r5,a
      00002A 60 2E            [24]  137 	jz	00133$
                                    138 ;	_atoi.c:36: if (*s <= '9' && *s >= '0')
      00002C C3               [12]  139 	clr	c
      00002D 74 B9            [12]  140 	mov	a,#(0x39 ^ 0x80)
      00002F 8D F0            [24]  141 	mov	b,r5
      000031 63 F0 80         [24]  142 	xrl	b,#0x80
      000034 95 F0            [12]  143 	subb	a,b
      000036 40 07            [24]  144 	jc	00102$
      000038 ED               [12]  145 	mov	a,r5
      000039 64 80            [12]  146 	xrl	a,#0x80
      00003B 94 B0            [12]  147 	subb	a,#0xb0
      00003D 50 1B            [24]  148 	jnc	00133$
                                    149 ;	_atoi.c:37: break;
      00003F                        150 00102$:
                                    151 ;	_atoi.c:38: if (*s == '-' || *s == '+') 
      00003F 8A 82            [24]  152 	mov	dpl,r2
      000041 8E 83            [24]  153 	mov	dph,r6
      000043 8F F0            [24]  154 	mov	b,r7
      000045 12r00r00         [24]  155 	lcall	__gptrget
      000048 FD               [12]  156 	mov	r5,a
      000049 BD 2D 02         [24]  157 	cjne	r5,#0x2D,00160$
      00004C 80 0C            [24]  158 	sjmp	00133$
      00004E                        159 00160$:
      00004E BD 2B 02         [24]  160 	cjne	r5,#0x2B,00161$
      000051 80 07            [24]  161 	sjmp	00133$
      000053                        162 00161$:
                                    163 ;	_atoi.c:40: s++;
      000053 0A               [12]  164 	inc	r2
      000054 BA 00 C9         [24]  165 	cjne	r2,#0x00,00107$
      000057 0E               [12]  166 	inc	r6
      000058 80 C6            [24]  167 	sjmp	00107$
      00005A                        168 00133$:
      00005A A8*00            [24]  169 	mov	r0,_bp
      00005C 08               [12]  170 	inc	r0
      00005D A6 02            [24]  171 	mov	@r0,ar2
      00005F 08               [12]  172 	inc	r0
      000060 A6 06            [24]  173 	mov	@r0,ar6
      000062 08               [12]  174 	inc	r0
      000063 A6 07            [24]  175 	mov	@r0,ar7
                                    176 ;	_atoi.c:43: sign = (*s == '-');
      000065 8A 82            [24]  177 	mov	dpl,r2
      000067 8E 83            [24]  178 	mov	dph,r6
      000069 8F F0            [24]  179 	mov	b,r7
      00006B 12r00r00         [24]  180 	lcall	__gptrget
      00006E FF               [12]  181 	mov	r7,a
      00006F E4               [12]  182 	clr	a
      000070 BF 2D 01         [24]  183 	cjne	r7,#0x2D,00163$
      000073 04               [12]  184 	inc	a
      000074                        185 00163$:
                                    186 ;	_atoi.c:44: if (*s == '-' || *s == '+') s++;
      000074 FE               [12]  187 	mov	r6,a
      000075 FD               [12]  188 	mov	r5,a
      000076 70 03            [24]  189 	jnz	00110$
      000078 BF 2B 09         [24]  190 	cjne	r7,#0x2B,00131$
      00007B                        191 00110$:
      00007B A8*00            [24]  192 	mov	r0,_bp
      00007D 08               [12]  193 	inc	r0
      00007E 06               [12]  194 	inc	@r0
      00007F B6 00 02         [24]  195 	cjne	@r0,#0x00,00168$
      000082 08               [12]  196 	inc	r0
      000083 06               [12]  197 	inc	@r0
      000084                        198 00168$:
                                    199 ;	_atoi.c:46: while (*s && *s >= '0' && *s <= '9') {
      000084                        200 00131$:
      000084 A8*00            [24]  201 	mov	r0,_bp
      000086 08               [12]  202 	inc	r0
      000087 E5*00            [12]  203 	mov	a,_bp
      000089 24 04            [12]  204 	add	a,#0x04
      00008B F9               [12]  205 	mov	r1,a
      00008C E6               [12]  206 	mov	a,@r0
      00008D F7               [12]  207 	mov	@r1,a
      00008E 08               [12]  208 	inc	r0
      00008F 09               [12]  209 	inc	r1
      000090 E6               [12]  210 	mov	a,@r0
      000091 F7               [12]  211 	mov	@r1,a
      000092 08               [12]  212 	inc	r0
      000093 09               [12]  213 	inc	r1
      000094 E6               [12]  214 	mov	a,@r0
      000095 F7               [12]  215 	mov	@r1,a
      000096                        216 00115$:
      000096 E5*00            [12]  217 	mov	a,_bp
      000098 24 04            [12]  218 	add	a,#0x04
      00009A F8               [12]  219 	mov	r0,a
      00009B 86 82            [24]  220 	mov	dpl,@r0
      00009D 08               [12]  221 	inc	r0
      00009E 86 83            [24]  222 	mov	dph,@r0
      0000A0 08               [12]  223 	inc	r0
      0000A1 86 F0            [24]  224 	mov	b,@r0
      0000A3 12r00r00         [24]  225 	lcall	__gptrget
      0000A6 FE               [12]  226 	mov	r6,a
      0000A7 60 52            [24]  227 	jz	00117$
      0000A9 C3               [12]  228 	clr	c
      0000AA EE               [12]  229 	mov	a,r6
      0000AB 64 80            [12]  230 	xrl	a,#0x80
      0000AD 94 B0            [12]  231 	subb	a,#0xb0
      0000AF 40 4A            [24]  232 	jc	00117$
      0000B1 74 B9            [12]  233 	mov	a,#(0x39 ^ 0x80)
      0000B3 8E F0            [24]  234 	mov	b,r6
      0000B5 63 F0 80         [24]  235 	xrl	b,#0x80
      0000B8 95 F0            [12]  236 	subb	a,b
      0000BA 40 3F            [24]  237 	jc	00117$
                                    238 ;	_atoi.c:47: rv = (rv * 10) + (*s - '0');
      0000BC C0 05            [24]  239 	push	ar5
      0000BE C0 06            [24]  240 	push	ar6
      0000C0 C0 03            [24]  241 	push	ar3
      0000C2 C0 04            [24]  242 	push	ar4
      0000C4 90 00 0A         [24]  243 	mov	dptr,#0x000A
      0000C7 12r00r00         [24]  244 	lcall	__mulint
      0000CA AD 82            [24]  245 	mov	r5,dpl
      0000CC AF 83            [24]  246 	mov	r7,dph
      0000CE 15 81            [12]  247 	dec	sp
      0000D0 15 81            [12]  248 	dec	sp
      0000D2 D0 06            [24]  249 	pop	ar6
      0000D4 EE               [12]  250 	mov	a,r6
      0000D5 FA               [12]  251 	mov	r2,a
      0000D6 33               [12]  252 	rlc	a
      0000D7 95 E0            [12]  253 	subb	a,acc
      0000D9 FE               [12]  254 	mov	r6,a
      0000DA EA               [12]  255 	mov	a,r2
      0000DB 24 D0            [12]  256 	add	a,#0xD0
      0000DD FA               [12]  257 	mov	r2,a
      0000DE EE               [12]  258 	mov	a,r6
      0000DF 34 FF            [12]  259 	addc	a,#0xFF
      0000E1 FE               [12]  260 	mov	r6,a
      0000E2 EA               [12]  261 	mov	a,r2
      0000E3 2D               [12]  262 	add	a,r5
      0000E4 FD               [12]  263 	mov	r5,a
      0000E5 EE               [12]  264 	mov	a,r6
      0000E6 3F               [12]  265 	addc	a,r7
      0000E7 FF               [12]  266 	mov	r7,a
      0000E8 8D 03            [24]  267 	mov	ar3,r5
      0000EA 8F 04            [24]  268 	mov	ar4,r7
                                    269 ;	_atoi.c:48: s++;
      0000EC E5*00            [12]  270 	mov	a,_bp
      0000EE 24 04            [12]  271 	add	a,#0x04
      0000F0 F8               [12]  272 	mov	r0,a
      0000F1 06               [12]  273 	inc	@r0
      0000F2 B6 00 02         [24]  274 	cjne	@r0,#0x00,00172$
      0000F5 08               [12]  275 	inc	r0
      0000F6 06               [12]  276 	inc	@r0
      0000F7                        277 00172$:
      0000F7 D0 05            [24]  278 	pop	ar5
      0000F9 80 9B            [24]  279 	sjmp	00115$
      0000FB                        280 00117$:
                                    281 ;	_atoi.c:51: return (sign ? -rv : rv);
      0000FB ED               [12]  282 	mov	a,r5
      0000FC 60 09            [24]  283 	jz	00120$
      0000FE C3               [12]  284 	clr	c
      0000FF E4               [12]  285 	clr	a
      000100 9B               [12]  286 	subb	a,r3
      000101 FE               [12]  287 	mov	r6,a
      000102 E4               [12]  288 	clr	a
      000103 9C               [12]  289 	subb	a,r4
      000104 FF               [12]  290 	mov	r7,a
      000105 80 04            [24]  291 	sjmp	00121$
      000107                        292 00120$:
      000107 8B 06            [24]  293 	mov	ar6,r3
      000109 8C 07            [24]  294 	mov	ar7,r4
      00010B                        295 00121$:
      00010B 8E 82            [24]  296 	mov	dpl,r6
      00010D 8F 83            [24]  297 	mov	dph,r7
      00010F 85*00 81         [24]  298 	mov	sp,_bp
      000112 D0*00            [24]  299 	pop	_bp
      000114 22               [24]  300 	ret
                                    301 	.area CSEG    (CODE)
                                    302 	.area CONST   (CODE)
                                    303 	.area XINIT   (CODE)
                                    304 	.area CABS    (ABS,CODE)
