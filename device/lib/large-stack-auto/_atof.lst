                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:09 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atof
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 	.globl _isspace
                                     14 	.globl _islower
                                     15 	.globl _isdigit
                                     16 	.globl _atof
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable bit register bank
                                     34 ;--------------------------------------------------------
                                     35 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         36 bits:
      000000                         37 	.ds 1
                           008000    38 	b0 = bits[0]
                           008100    39 	b1 = bits[1]
                           008200    40 	b2 = bits[2]
                           008300    41 	b3 = bits[3]
                           008400    42 	b4 = bits[4]
                           008500    43 	b5 = bits[5]
                           008600    44 	b6 = bits[6]
                           008700    45 	b7 = bits[7]
                                     46 ;--------------------------------------------------------
                                     47 ; internal ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DSEG    (DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; overlayable items in internal ram 
                                     52 ;--------------------------------------------------------
                                     53 ;--------------------------------------------------------
                                     54 ; indirectly addressable internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area ISEG    (DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area IABS    (ABS,DATA)
                                     61 	.area IABS    (ABS,DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; bit data
                                     64 ;--------------------------------------------------------
                                     65 	.area BSEG    (BIT)
                                     66 ;--------------------------------------------------------
                                     67 ; paged external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area PSEG    (PAG,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XSEG    (XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; absolute external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XABS    (ABS,XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; external initialized ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XISEG   (XDATA)
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT0 (CODE)
                                     84 	.area GSINIT1 (CODE)
                                     85 	.area GSINIT2 (CODE)
                                     86 	.area GSINIT3 (CODE)
                                     87 	.area GSINIT4 (CODE)
                                     88 	.area GSINIT5 (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area CSEG    (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; global & static initialisations
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 	.area GSFINAL (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME    (CODE)
                                    103 	.area HOME    (CODE)
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CSEG    (CODE)
                                    108 ;------------------------------------------------------------
                                    109 ;Allocation info for local variables in function 'atof'
                                    110 ;------------------------------------------------------------
                                    111 ;s                         Allocated to registers r6 r5 r3 
                                    112 ;value                     Allocated to stack - _bp +8
                                    113 ;fraction                  Allocated to stack - _bp +12
                                    114 ;iexp                      Allocated to registers r6 
                                    115 ;sign                      Allocated to registers b0 
                                    116 ;sloc0                     Allocated to stack - _bp +1
                                    117 ;sloc1                     Allocated to stack - _bp +4
                                    118 ;------------------------------------------------------------
                                    119 ;	_atof.c:33: float atof(const char * s)
                                    120 ;	-----------------------------------------
                                    121 ;	 function atof
                                    122 ;	-----------------------------------------
      000000                        123 _atof:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
      000000 C0*00            [24]  132 	push	_bp
      000002 E5 81            [12]  133 	mov	a,sp
      000004 F5*00            [12]  134 	mov	_bp,a
      000006 24 0F            [12]  135 	add	a,#0x0F
      000008 F5 81            [12]  136 	mov	sp,a
      00000A AE 82            [24]  137 	mov	r6,dpl
      00000C AD 83            [24]  138 	mov	r5,dph
      00000E AB F0            [24]  139 	mov	r3,b
                                    140 ;	_atof.c:40: while (isspace(*s)) s++;
      000010 A8*00            [24]  141 	mov	r0,_bp
      000012 08               [12]  142 	inc	r0
      000013 A6 06            [24]  143 	mov	@r0,ar6
      000015 08               [12]  144 	inc	r0
      000016 A6 05            [24]  145 	mov	@r0,ar5
      000018 08               [12]  146 	inc	r0
      000019 A6 03            [24]  147 	mov	@r0,ar3
      00001B                        148 00101$:
      00001B A8*00            [24]  149 	mov	r0,_bp
      00001D 08               [12]  150 	inc	r0
      00001E 86 82            [24]  151 	mov	dpl,@r0
      000020 08               [12]  152 	inc	r0
      000021 86 83            [24]  153 	mov	dph,@r0
      000023 08               [12]  154 	inc	r0
      000024 86 F0            [24]  155 	mov	b,@r0
      000026 12r00r00         [24]  156 	lcall	__gptrget
      000029 F5 82            [12]  157 	mov	dpl,a
      00002B 12r00r00         [24]  158 	lcall	_isspace
      00002E E5 82            [12]  159 	mov	a,dpl
      000030 60 0B            [24]  160 	jz	00148$
      000032 A8*00            [24]  161 	mov	r0,_bp
      000034 08               [12]  162 	inc	r0
      000035 06               [12]  163 	inc	@r0
      000036 B6 00 02         [24]  164 	cjne	@r0,#0x00,00182$
      000039 08               [12]  165 	inc	r0
      00003A 06               [12]  166 	inc	@r0
      00003B                        167 00182$:
      00003B 80 DE            [24]  168 	sjmp	00101$
      00003D                        169 00148$:
      00003D A8*00            [24]  170 	mov	r0,_bp
      00003F 08               [12]  171 	inc	r0
      000040 86 06            [24]  172 	mov	ar6,@r0
      000042 08               [12]  173 	inc	r0
      000043 86 05            [24]  174 	mov	ar5,@r0
      000045 08               [12]  175 	inc	r0
      000046 86 03            [24]  176 	mov	ar3,@r0
                                    177 ;	_atof.c:43: if (*s == '-')
      000048 A8*00            [24]  178 	mov	r0,_bp
      00004A 08               [12]  179 	inc	r0
      00004B 86 82            [24]  180 	mov	dpl,@r0
      00004D 08               [12]  181 	inc	r0
      00004E 86 83            [24]  182 	mov	dph,@r0
      000050 08               [12]  183 	inc	r0
      000051 86 F0            [24]  184 	mov	b,@r0
      000053 12r00r00         [24]  185 	lcall	__gptrget
      000056 FC               [12]  186 	mov	r4,a
      000057 BC 2D 12         [24]  187 	cjne	r4,#0x2D,00107$
                                    188 ;	_atof.c:45: sign=1;
      00005A D2*00            [12]  189 	setb	b0
                                    190 ;	_atof.c:46: s++;
      00005C A8*00            [24]  191 	mov	r0,_bp
      00005E 08               [12]  192 	inc	r0
      00005F 74 01            [12]  193 	mov	a,#0x01
      000061 26               [12]  194 	add	a,@r0
      000062 FE               [12]  195 	mov	r6,a
      000063 E4               [12]  196 	clr	a
      000064 08               [12]  197 	inc	r0
      000065 36               [12]  198 	addc	a,@r0
      000066 FD               [12]  199 	mov	r5,a
      000067 08               [12]  200 	inc	r0
      000068 86 03            [24]  201 	mov	ar3,@r0
      00006A 80 13            [24]  202 	sjmp	00108$
      00006C                        203 00107$:
                                    204 ;	_atof.c:50: sign=0;
      00006C C2*00            [12]  205 	clr	b0
                                    206 ;	_atof.c:51: if (*s == '+') s++;
      00006E BC 2B 0E         [24]  207 	cjne	r4,#0x2B,00108$
      000071 A8*00            [24]  208 	mov	r0,_bp
      000073 08               [12]  209 	inc	r0
      000074 74 01            [12]  210 	mov	a,#0x01
      000076 26               [12]  211 	add	a,@r0
      000077 FE               [12]  212 	mov	r6,a
      000078 E4               [12]  213 	clr	a
      000079 08               [12]  214 	inc	r0
      00007A 36               [12]  215 	addc	a,@r0
      00007B FD               [12]  216 	mov	r5,a
      00007C 08               [12]  217 	inc	r0
      00007D 86 03            [24]  218 	mov	ar3,@r0
      00007F                        219 00108$:
                                    220 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00007F E5*00            [12]  221 	mov	a,_bp
      000081 24 08            [12]  222 	add	a,#0x08
      000083 F8               [12]  223 	mov	r0,a
      000084 E4               [12]  224 	clr	a
      000085 F6               [12]  225 	mov	@r0,a
      000086 08               [12]  226 	inc	r0
      000087 F6               [12]  227 	mov	@r0,a
      000088 08               [12]  228 	inc	r0
      000089 F6               [12]  229 	mov	@r0,a
      00008A 08               [12]  230 	inc	r0
      00008B F6               [12]  231 	mov	@r0,a
      00008C A8*00            [24]  232 	mov	r0,_bp
      00008E 08               [12]  233 	inc	r0
      00008F A6 06            [24]  234 	mov	@r0,ar6
      000091 08               [12]  235 	inc	r0
      000092 A6 05            [24]  236 	mov	@r0,ar5
      000094 08               [12]  237 	inc	r0
      000095 A6 03            [24]  238 	mov	@r0,ar3
      000097                        239 00124$:
      000097 A8*00            [24]  240 	mov	r0,_bp
      000099 08               [12]  241 	inc	r0
      00009A 86 82            [24]  242 	mov	dpl,@r0
      00009C 08               [12]  243 	inc	r0
      00009D 86 83            [24]  244 	mov	dph,@r0
      00009F 08               [12]  245 	inc	r0
      0000A0 86 F0            [24]  246 	mov	b,@r0
      0000A2 12r00r00         [24]  247 	lcall	__gptrget
      0000A5 F5 82            [12]  248 	mov	dpl,a
      0000A7 C0*00            [24]  249 	push	bits
      0000A9 12r00r00         [24]  250 	lcall	_isdigit
      0000AC E5 82            [12]  251 	mov	a,dpl
      0000AE D0*00            [24]  252 	pop	bits
      0000B0 70 03            [24]  253 	jnz	00187$
      0000B2 02r01r62         [24]  254 	ljmp	00149$
      0000B5                        255 00187$:
                                    256 ;	_atof.c:57: value=10.0*value+(*s-'0');
      0000B5 C0*00            [24]  257 	push	bits
      0000B7 E5*00            [12]  258 	mov	a,_bp
      0000B9 24 08            [12]  259 	add	a,#0x08
      0000BB F8               [12]  260 	mov	r0,a
      0000BC E6               [12]  261 	mov	a,@r0
      0000BD C0 E0            [24]  262 	push	acc
      0000BF 08               [12]  263 	inc	r0
      0000C0 E6               [12]  264 	mov	a,@r0
      0000C1 C0 E0            [24]  265 	push	acc
      0000C3 08               [12]  266 	inc	r0
      0000C4 E6               [12]  267 	mov	a,@r0
      0000C5 C0 E0            [24]  268 	push	acc
      0000C7 08               [12]  269 	inc	r0
      0000C8 E6               [12]  270 	mov	a,@r0
      0000C9 C0 E0            [24]  271 	push	acc
      0000CB 90 00 00         [24]  272 	mov	dptr,#0x0000
      0000CE 75 F0 20         [24]  273 	mov	b,#0x20
      0000D1 74 41            [12]  274 	mov	a,#0x41
      0000D3 12r00r00         [24]  275 	lcall	___fsmul
      0000D6 C8               [12]  276 	xch	a,r0
      0000D7 E5*00            [12]  277 	mov	a,_bp
      0000D9 24 04            [12]  278 	add	a,#0x04
      0000DB C8               [12]  279 	xch	a,r0
      0000DC A6 82            [24]  280 	mov	@r0,dpl
      0000DE 08               [12]  281 	inc	r0
      0000DF A6 83            [24]  282 	mov	@r0,dph
      0000E1 08               [12]  283 	inc	r0
      0000E2 A6 F0            [24]  284 	mov	@r0,b
      0000E4 08               [12]  285 	inc	r0
      0000E5 F6               [12]  286 	mov	@r0,a
      0000E6 E5 81            [12]  287 	mov	a,sp
      0000E8 24 FC            [12]  288 	add	a,#0xfc
      0000EA F5 81            [12]  289 	mov	sp,a
      0000EC D0*00            [24]  290 	pop	bits
      0000EE A8*00            [24]  291 	mov	r0,_bp
      0000F0 08               [12]  292 	inc	r0
      0000F1 86 82            [24]  293 	mov	dpl,@r0
      0000F3 08               [12]  294 	inc	r0
      0000F4 86 83            [24]  295 	mov	dph,@r0
      0000F6 08               [12]  296 	inc	r0
      0000F7 86 F0            [24]  297 	mov	b,@r0
      0000F9 12r00r00         [24]  298 	lcall	__gptrget
      0000FC FE               [12]  299 	mov	r6,a
      0000FD A3               [24]  300 	inc	dptr
      0000FE 18               [12]  301 	dec	r0
      0000FF 18               [12]  302 	dec	r0
      000100 A6 82            [24]  303 	mov	@r0,dpl
      000102 08               [12]  304 	inc	r0
      000103 A6 83            [24]  305 	mov	@r0,dph
      000105 EE               [12]  306 	mov	a,r6
      000106 33               [12]  307 	rlc	a
      000107 95 E0            [12]  308 	subb	a,acc
      000109 FD               [12]  309 	mov	r5,a
      00010A EE               [12]  310 	mov	a,r6
      00010B 24 D0            [12]  311 	add	a,#0xD0
      00010D FE               [12]  312 	mov	r6,a
      00010E ED               [12]  313 	mov	a,r5
      00010F 34 FF            [12]  314 	addc	a,#0xFF
      000111 FD               [12]  315 	mov	r5,a
      000112 8E 82            [24]  316 	mov	dpl,r6
      000114 8D 83            [24]  317 	mov	dph,r5
      000116 C0*00            [24]  318 	push	bits
      000118 12r00r00         [24]  319 	lcall	___sint2fs
      00011B AC 82            [24]  320 	mov	r4,dpl
      00011D AD 83            [24]  321 	mov	r5,dph
      00011F AE F0            [24]  322 	mov	r6,b
      000121 FF               [12]  323 	mov	r7,a
      000122 D0*00            [24]  324 	pop	bits
      000124 C0*00            [24]  325 	push	bits
      000126 C0 04            [24]  326 	push	ar4
      000128 C0 05            [24]  327 	push	ar5
      00012A C0 06            [24]  328 	push	ar6
      00012C C0 07            [24]  329 	push	ar7
      00012E E5*00            [12]  330 	mov	a,_bp
      000130 24 04            [12]  331 	add	a,#0x04
      000132 F8               [12]  332 	mov	r0,a
      000133 86 82            [24]  333 	mov	dpl,@r0
      000135 08               [12]  334 	inc	r0
      000136 86 83            [24]  335 	mov	dph,@r0
      000138 08               [12]  336 	inc	r0
      000139 86 F0            [24]  337 	mov	b,@r0
      00013B 08               [12]  338 	inc	r0
      00013C E6               [12]  339 	mov	a,@r0
      00013D 12r00r00         [24]  340 	lcall	___fsadd
      000140 AC 82            [24]  341 	mov	r4,dpl
      000142 AD 83            [24]  342 	mov	r5,dph
      000144 AE F0            [24]  343 	mov	r6,b
      000146 FF               [12]  344 	mov	r7,a
      000147 E5 81            [12]  345 	mov	a,sp
      000149 24 FC            [12]  346 	add	a,#0xfc
      00014B F5 81            [12]  347 	mov	sp,a
      00014D D0*00            [24]  348 	pop	bits
      00014F E5*00            [12]  349 	mov	a,_bp
      000151 24 08            [12]  350 	add	a,#0x08
      000153 F8               [12]  351 	mov	r0,a
      000154 A6 04            [24]  352 	mov	@r0,ar4
      000156 08               [12]  353 	inc	r0
      000157 A6 05            [24]  354 	mov	@r0,ar5
      000159 08               [12]  355 	inc	r0
      00015A A6 06            [24]  356 	mov	@r0,ar6
      00015C 08               [12]  357 	inc	r0
      00015D A6 07            [24]  358 	mov	@r0,ar7
                                    359 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00015F 02r00r97         [24]  360 	ljmp	00124$
      000162                        361 00149$:
      000162 A8*00            [24]  362 	mov	r0,_bp
      000164 08               [12]  363 	inc	r0
      000165 86 06            [24]  364 	mov	ar6,@r0
      000167 08               [12]  365 	inc	r0
      000168 86 05            [24]  366 	mov	ar5,@r0
      00016A 08               [12]  367 	inc	r0
      00016B 86 03            [24]  368 	mov	ar3,@r0
                                    369 ;	_atof.c:61: if (*s == '.')
      00016D A8*00            [24]  370 	mov	r0,_bp
      00016F 08               [12]  371 	inc	r0
      000170 86 82            [24]  372 	mov	dpl,@r0
      000172 08               [12]  373 	inc	r0
      000173 86 83            [24]  374 	mov	dph,@r0
      000175 08               [12]  375 	inc	r0
      000176 86 F0            [24]  376 	mov	b,@r0
      000178 12r00r00         [24]  377 	lcall	__gptrget
      00017B FF               [12]  378 	mov	r7,a
      00017C BF 2E 02         [24]  379 	cjne	r7,#0x2E,00188$
      00017F 80 03            [24]  380 	sjmp	00189$
      000181                        381 00188$:
      000181 02r02rC1         [24]  382 	ljmp	00112$
      000184                        383 00189$:
                                    384 ;	_atof.c:63: s++;
      000184 A8*00            [24]  385 	mov	r0,_bp
      000186 08               [12]  386 	inc	r0
      000187 74 01            [12]  387 	mov	a,#0x01
      000189 26               [12]  388 	add	a,@r0
      00018A FE               [12]  389 	mov	r6,a
      00018B E4               [12]  390 	clr	a
      00018C 08               [12]  391 	inc	r0
      00018D 36               [12]  392 	addc	a,@r0
      00018E FD               [12]  393 	mov	r5,a
      00018F 08               [12]  394 	inc	r0
      000190 86 03            [24]  395 	mov	ar3,@r0
                                    396 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      000192 E5*00            [12]  397 	mov	a,_bp
      000194 24 0C            [12]  398 	add	a,#0x0c
      000196 F8               [12]  399 	mov	r0,a
      000197 76 CD            [12]  400 	mov	@r0,#0xCD
      000199 08               [12]  401 	inc	r0
      00019A 76 CC            [12]  402 	mov	@r0,#0xCC
      00019C 08               [12]  403 	inc	r0
      00019D 76 CC            [12]  404 	mov	@r0,#0xCC
      00019F 08               [12]  405 	inc	r0
      0001A0 76 3D            [12]  406 	mov	@r0,#0x3D
      0001A2 E5*00            [12]  407 	mov	a,_bp
      0001A4 24 04            [12]  408 	add	a,#0x04
      0001A6 F8               [12]  409 	mov	r0,a
      0001A7 A6 06            [24]  410 	mov	@r0,ar6
      0001A9 08               [12]  411 	inc	r0
      0001AA A6 05            [24]  412 	mov	@r0,ar5
      0001AC 08               [12]  413 	inc	r0
      0001AD A6 03            [24]  414 	mov	@r0,ar3
      0001AF                        415 00127$:
      0001AF E5*00            [12]  416 	mov	a,_bp
      0001B1 24 04            [12]  417 	add	a,#0x04
      0001B3 F8               [12]  418 	mov	r0,a
      0001B4 86 82            [24]  419 	mov	dpl,@r0
      0001B6 08               [12]  420 	inc	r0
      0001B7 86 83            [24]  421 	mov	dph,@r0
      0001B9 08               [12]  422 	inc	r0
      0001BA 86 F0            [24]  423 	mov	b,@r0
      0001BC 12r00r00         [24]  424 	lcall	__gptrget
      0001BF F5 82            [12]  425 	mov	dpl,a
      0001C1 C0*00            [24]  426 	push	bits
      0001C3 12r00r00         [24]  427 	lcall	_isdigit
      0001C6 E5 82            [12]  428 	mov	a,dpl
      0001C8 D0*00            [24]  429 	pop	bits
      0001CA 70 03            [24]  430 	jnz	00190$
      0001CC 02r02rB4         [24]  431 	ljmp	00150$
      0001CF                        432 00190$:
                                    433 ;	_atof.c:66: value+=(*s-'0')*fraction;
      0001CF E5*00            [12]  434 	mov	a,_bp
      0001D1 24 04            [12]  435 	add	a,#0x04
      0001D3 F8               [12]  436 	mov	r0,a
      0001D4 86 82            [24]  437 	mov	dpl,@r0
      0001D6 08               [12]  438 	inc	r0
      0001D7 86 83            [24]  439 	mov	dph,@r0
      0001D9 08               [12]  440 	inc	r0
      0001DA 86 F0            [24]  441 	mov	b,@r0
      0001DC 12r00r00         [24]  442 	lcall	__gptrget
      0001DF FE               [12]  443 	mov	r6,a
      0001E0 A3               [24]  444 	inc	dptr
      0001E1 18               [12]  445 	dec	r0
      0001E2 18               [12]  446 	dec	r0
      0001E3 A6 82            [24]  447 	mov	@r0,dpl
      0001E5 08               [12]  448 	inc	r0
      0001E6 A6 83            [24]  449 	mov	@r0,dph
      0001E8 EE               [12]  450 	mov	a,r6
      0001E9 33               [12]  451 	rlc	a
      0001EA 95 E0            [12]  452 	subb	a,acc
      0001EC FD               [12]  453 	mov	r5,a
      0001ED EE               [12]  454 	mov	a,r6
      0001EE 24 D0            [12]  455 	add	a,#0xD0
      0001F0 FE               [12]  456 	mov	r6,a
      0001F1 ED               [12]  457 	mov	a,r5
      0001F2 34 FF            [12]  458 	addc	a,#0xFF
      0001F4 FD               [12]  459 	mov	r5,a
      0001F5 8E 82            [24]  460 	mov	dpl,r6
      0001F7 8D 83            [24]  461 	mov	dph,r5
      0001F9 C0*00            [24]  462 	push	bits
      0001FB 12r00r00         [24]  463 	lcall	___sint2fs
      0001FE AC 82            [24]  464 	mov	r4,dpl
      000200 AD 83            [24]  465 	mov	r5,dph
      000202 AE F0            [24]  466 	mov	r6,b
      000204 FF               [12]  467 	mov	r7,a
      000205 D0*00            [24]  468 	pop	bits
      000207 C0*00            [24]  469 	push	bits
      000209 E5*00            [12]  470 	mov	a,_bp
      00020B 24 0C            [12]  471 	add	a,#0x0c
      00020D F8               [12]  472 	mov	r0,a
      00020E E6               [12]  473 	mov	a,@r0
      00020F C0 E0            [24]  474 	push	acc
      000211 08               [12]  475 	inc	r0
      000212 E6               [12]  476 	mov	a,@r0
      000213 C0 E0            [24]  477 	push	acc
      000215 08               [12]  478 	inc	r0
      000216 E6               [12]  479 	mov	a,@r0
      000217 C0 E0            [24]  480 	push	acc
      000219 08               [12]  481 	inc	r0
      00021A E6               [12]  482 	mov	a,@r0
      00021B C0 E0            [24]  483 	push	acc
      00021D 8C 82            [24]  484 	mov	dpl,r4
      00021F 8D 83            [24]  485 	mov	dph,r5
      000221 8E F0            [24]  486 	mov	b,r6
      000223 EF               [12]  487 	mov	a,r7
      000224 12r00r00         [24]  488 	lcall	___fsmul
      000227 AC 82            [24]  489 	mov	r4,dpl
      000229 AD 83            [24]  490 	mov	r5,dph
      00022B AE F0            [24]  491 	mov	r6,b
      00022D FF               [12]  492 	mov	r7,a
      00022E E5 81            [12]  493 	mov	a,sp
      000230 24 FC            [12]  494 	add	a,#0xfc
      000232 F5 81            [12]  495 	mov	sp,a
      000234 D0*00            [24]  496 	pop	bits
      000236 C0*00            [24]  497 	push	bits
      000238 C0 04            [24]  498 	push	ar4
      00023A C0 05            [24]  499 	push	ar5
      00023C C0 06            [24]  500 	push	ar6
      00023E C0 07            [24]  501 	push	ar7
      000240 E5*00            [12]  502 	mov	a,_bp
      000242 24 08            [12]  503 	add	a,#0x08
      000244 F8               [12]  504 	mov	r0,a
      000245 86 82            [24]  505 	mov	dpl,@r0
      000247 08               [12]  506 	inc	r0
      000248 86 83            [24]  507 	mov	dph,@r0
      00024A 08               [12]  508 	inc	r0
      00024B 86 F0            [24]  509 	mov	b,@r0
      00024D 08               [12]  510 	inc	r0
      00024E E6               [12]  511 	mov	a,@r0
      00024F 12r00r00         [24]  512 	lcall	___fsadd
      000252 AC 82            [24]  513 	mov	r4,dpl
      000254 AD 83            [24]  514 	mov	r5,dph
      000256 AE F0            [24]  515 	mov	r6,b
      000258 FF               [12]  516 	mov	r7,a
      000259 E5 81            [12]  517 	mov	a,sp
      00025B 24 FC            [12]  518 	add	a,#0xfc
      00025D F5 81            [12]  519 	mov	sp,a
      00025F D0*00            [24]  520 	pop	bits
      000261 E5*00            [12]  521 	mov	a,_bp
      000263 24 08            [12]  522 	add	a,#0x08
      000265 F8               [12]  523 	mov	r0,a
      000266 A6 04            [24]  524 	mov	@r0,ar4
      000268 08               [12]  525 	inc	r0
      000269 A6 05            [24]  526 	mov	@r0,ar5
      00026B 08               [12]  527 	inc	r0
      00026C A6 06            [24]  528 	mov	@r0,ar6
      00026E 08               [12]  529 	inc	r0
      00026F A6 07            [24]  530 	mov	@r0,ar7
                                    531 ;	_atof.c:67: fraction*=0.1;
      000271 C0*00            [24]  532 	push	bits
      000273 E5*00            [12]  533 	mov	a,_bp
      000275 24 0C            [12]  534 	add	a,#0x0c
      000277 F8               [12]  535 	mov	r0,a
      000278 E6               [12]  536 	mov	a,@r0
      000279 C0 E0            [24]  537 	push	acc
      00027B 08               [12]  538 	inc	r0
      00027C E6               [12]  539 	mov	a,@r0
      00027D C0 E0            [24]  540 	push	acc
      00027F 08               [12]  541 	inc	r0
      000280 E6               [12]  542 	mov	a,@r0
      000281 C0 E0            [24]  543 	push	acc
      000283 08               [12]  544 	inc	r0
      000284 E6               [12]  545 	mov	a,@r0
      000285 C0 E0            [24]  546 	push	acc
      000287 90 CC CD         [24]  547 	mov	dptr,#0xCCCD
      00028A 75 F0 CC         [24]  548 	mov	b,#0xCC
      00028D 74 3D            [12]  549 	mov	a,#0x3D
      00028F 12r00r00         [24]  550 	lcall	___fsmul
      000292 AC 82            [24]  551 	mov	r4,dpl
      000294 AD 83            [24]  552 	mov	r5,dph
      000296 AE F0            [24]  553 	mov	r6,b
      000298 FF               [12]  554 	mov	r7,a
      000299 E5 81            [12]  555 	mov	a,sp
      00029B 24 FC            [12]  556 	add	a,#0xfc
      00029D F5 81            [12]  557 	mov	sp,a
      00029F D0*00            [24]  558 	pop	bits
      0002A1 E5*00            [12]  559 	mov	a,_bp
      0002A3 24 0C            [12]  560 	add	a,#0x0c
      0002A5 F8               [12]  561 	mov	r0,a
      0002A6 A6 04            [24]  562 	mov	@r0,ar4
      0002A8 08               [12]  563 	inc	r0
      0002A9 A6 05            [24]  564 	mov	@r0,ar5
      0002AB 08               [12]  565 	inc	r0
      0002AC A6 06            [24]  566 	mov	@r0,ar6
      0002AE 08               [12]  567 	inc	r0
      0002AF A6 07            [24]  568 	mov	@r0,ar7
                                    569 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0002B1 02r01rAF         [24]  570 	ljmp	00127$
      0002B4                        571 00150$:
      0002B4 E5*00            [12]  572 	mov	a,_bp
      0002B6 24 04            [12]  573 	add	a,#0x04
      0002B8 F8               [12]  574 	mov	r0,a
      0002B9 86 06            [24]  575 	mov	ar6,@r0
      0002BB 08               [12]  576 	inc	r0
      0002BC 86 05            [24]  577 	mov	ar5,@r0
      0002BE 08               [12]  578 	inc	r0
      0002BF 86 03            [24]  579 	mov	ar3,@r0
      0002C1                        580 00112$:
                                    581 ;	_atof.c:72: if (toupper(*s)=='E')
      0002C1 8E 82            [24]  582 	mov	dpl,r6
      0002C3 8D 83            [24]  583 	mov	dph,r5
      0002C5 8B F0            [24]  584 	mov	b,r3
      0002C7 12r00r00         [24]  585 	lcall	__gptrget
      0002CA F5 82            [12]  586 	mov	dpl,a
      0002CC C0 06            [24]  587 	push	ar6
      0002CE C0 05            [24]  588 	push	ar5
      0002D0 C0 03            [24]  589 	push	ar3
      0002D2 C0*00            [24]  590 	push	bits
      0002D4 12r00r00         [24]  591 	lcall	_islower
      0002D7 E5 82            [12]  592 	mov	a,dpl
      0002D9 D0*00            [24]  593 	pop	bits
      0002DB D0 03            [24]  594 	pop	ar3
      0002DD D0 05            [24]  595 	pop	ar5
      0002DF D0 06            [24]  596 	pop	ar6
      0002E1 60 0F            [24]  597 	jz	00131$
      0002E3 8E 82            [24]  598 	mov	dpl,r6
      0002E5 8D 83            [24]  599 	mov	dph,r5
      0002E7 8B F0            [24]  600 	mov	b,r3
      0002E9 12r00r00         [24]  601 	lcall	__gptrget
      0002EC FF               [12]  602 	mov	r7,a
      0002ED 53 07 DF         [24]  603 	anl	ar7,#0xDF
      0002F0 80 0A            [24]  604 	sjmp	00132$
      0002F2                        605 00131$:
      0002F2 8E 82            [24]  606 	mov	dpl,r6
      0002F4 8D 83            [24]  607 	mov	dph,r5
      0002F6 8B F0            [24]  608 	mov	b,r3
      0002F8 12r00r00         [24]  609 	lcall	__gptrget
      0002FB FF               [12]  610 	mov	r7,a
      0002FC                        611 00132$:
      0002FC BF 45 02         [24]  612 	cjne	r7,#0x45,00192$
      0002FF 80 03            [24]  613 	sjmp	00193$
      000301                        614 00192$:
      000301 02r03rB3         [24]  615 	ljmp	00120$
      000304                        616 00193$:
                                    617 ;	_atof.c:74: s++;
      000304 0E               [12]  618 	inc	r6
      000305 BE 00 01         [24]  619 	cjne	r6,#0x00,00194$
      000308 0D               [12]  620 	inc	r5
      000309                        621 00194$:
                                    622 ;	_atof.c:75: iexp=(signed char)atoi(s);
      000309 8E 82            [24]  623 	mov	dpl,r6
      00030B 8D 83            [24]  624 	mov	dph,r5
      00030D 8B F0            [24]  625 	mov	b,r3
      00030F C0*00            [24]  626 	push	bits
      000311 12r00r00         [24]  627 	lcall	_atoi
      000314 AE 82            [24]  628 	mov	r6,dpl
      000316 AF 83            [24]  629 	mov	r7,dph
      000318 D0*00            [24]  630 	pop	bits
                                    631 ;	_atof.c:77: while(iexp!=0)
      00031A                        632 00116$:
      00031A EE               [12]  633 	mov	a,r6
      00031B 70 03            [24]  634 	jnz	00195$
      00031D 02r03rB3         [24]  635 	ljmp	00120$
      000320                        636 00195$:
                                    637 ;	_atof.c:79: if(iexp<0)
      000320 EE               [12]  638 	mov	a,r6
      000321 30 E7 47         [24]  639 	jnb	acc.7,00114$
                                    640 ;	_atof.c:81: value*=0.1;
      000324 C0 06            [24]  641 	push	ar6
      000326 C0*00            [24]  642 	push	bits
      000328 E5*00            [12]  643 	mov	a,_bp
      00032A 24 08            [12]  644 	add	a,#0x08
      00032C F8               [12]  645 	mov	r0,a
      00032D E6               [12]  646 	mov	a,@r0
      00032E C0 E0            [24]  647 	push	acc
      000330 08               [12]  648 	inc	r0
      000331 E6               [12]  649 	mov	a,@r0
      000332 C0 E0            [24]  650 	push	acc
      000334 08               [12]  651 	inc	r0
      000335 E6               [12]  652 	mov	a,@r0
      000336 C0 E0            [24]  653 	push	acc
      000338 08               [12]  654 	inc	r0
      000339 E6               [12]  655 	mov	a,@r0
      00033A C0 E0            [24]  656 	push	acc
      00033C 90 CC CD         [24]  657 	mov	dptr,#0xCCCD
      00033F 75 F0 CC         [24]  658 	mov	b,#0xCC
      000342 74 3D            [12]  659 	mov	a,#0x3D
      000344 12r00r00         [24]  660 	lcall	___fsmul
      000347 AB 82            [24]  661 	mov	r3,dpl
      000349 AC 83            [24]  662 	mov	r4,dph
      00034B AD F0            [24]  663 	mov	r5,b
      00034D FF               [12]  664 	mov	r7,a
      00034E E5 81            [12]  665 	mov	a,sp
      000350 24 FC            [12]  666 	add	a,#0xfc
      000352 F5 81            [12]  667 	mov	sp,a
      000354 D0*00            [24]  668 	pop	bits
      000356 D0 06            [24]  669 	pop	ar6
      000358 E5*00            [12]  670 	mov	a,_bp
      00035A 24 08            [12]  671 	add	a,#0x08
      00035C F8               [12]  672 	mov	r0,a
      00035D A6 03            [24]  673 	mov	@r0,ar3
      00035F 08               [12]  674 	inc	r0
      000360 A6 04            [24]  675 	mov	@r0,ar4
      000362 08               [12]  676 	inc	r0
      000363 A6 05            [24]  677 	mov	@r0,ar5
      000365 08               [12]  678 	inc	r0
      000366 A6 07            [24]  679 	mov	@r0,ar7
                                    680 ;	_atof.c:82: iexp++;
      000368 0E               [12]  681 	inc	r6
      000369 80 AF            [24]  682 	sjmp	00116$
      00036B                        683 00114$:
                                    684 ;	_atof.c:86: value*=10.0;
      00036B C0 06            [24]  685 	push	ar6
      00036D C0*00            [24]  686 	push	bits
      00036F E5*00            [12]  687 	mov	a,_bp
      000371 24 08            [12]  688 	add	a,#0x08
      000373 F8               [12]  689 	mov	r0,a
      000374 E6               [12]  690 	mov	a,@r0
      000375 C0 E0            [24]  691 	push	acc
      000377 08               [12]  692 	inc	r0
      000378 E6               [12]  693 	mov	a,@r0
      000379 C0 E0            [24]  694 	push	acc
      00037B 08               [12]  695 	inc	r0
      00037C E6               [12]  696 	mov	a,@r0
      00037D C0 E0            [24]  697 	push	acc
      00037F 08               [12]  698 	inc	r0
      000380 E6               [12]  699 	mov	a,@r0
      000381 C0 E0            [24]  700 	push	acc
      000383 90 00 00         [24]  701 	mov	dptr,#0x0000
      000386 75 F0 20         [24]  702 	mov	b,#0x20
      000389 74 41            [12]  703 	mov	a,#0x41
      00038B 12r00r00         [24]  704 	lcall	___fsmul
      00038E AB 82            [24]  705 	mov	r3,dpl
      000390 AC 83            [24]  706 	mov	r4,dph
      000392 AD F0            [24]  707 	mov	r5,b
      000394 FF               [12]  708 	mov	r7,a
      000395 E5 81            [12]  709 	mov	a,sp
      000397 24 FC            [12]  710 	add	a,#0xfc
      000399 F5 81            [12]  711 	mov	sp,a
      00039B D0*00            [24]  712 	pop	bits
      00039D D0 06            [24]  713 	pop	ar6
      00039F E5*00            [12]  714 	mov	a,_bp
      0003A1 24 08            [12]  715 	add	a,#0x08
      0003A3 F8               [12]  716 	mov	r0,a
      0003A4 A6 03            [24]  717 	mov	@r0,ar3
      0003A6 08               [12]  718 	inc	r0
      0003A7 A6 04            [24]  719 	mov	@r0,ar4
      0003A9 08               [12]  720 	inc	r0
      0003AA A6 05            [24]  721 	mov	@r0,ar5
      0003AC 08               [12]  722 	inc	r0
      0003AD A6 07            [24]  723 	mov	@r0,ar7
                                    724 ;	_atof.c:87: iexp--;
      0003AF 1E               [12]  725 	dec	r6
      0003B0 02r03r1A         [24]  726 	ljmp	00116$
      0003B3                        727 00120$:
                                    728 ;	_atof.c:93: if(sign) value*=-1.0;
      0003B3 30*00 12         [24]  729 	jnb	b0,00122$
      0003B6 E5*00            [12]  730 	mov	a,_bp
      0003B8 24 08            [12]  731 	add	a,#0x08
      0003BA F8               [12]  732 	mov	r0,a
      0003BB E6               [12]  733 	mov	a,@r0
      0003BC F6               [12]  734 	mov	@r0,a
      0003BD 08               [12]  735 	inc	r0
      0003BE E6               [12]  736 	mov	a,@r0
      0003BF F6               [12]  737 	mov	@r0,a
      0003C0 08               [12]  738 	inc	r0
      0003C1 E6               [12]  739 	mov	a,@r0
      0003C2 F6               [12]  740 	mov	@r0,a
      0003C3 08               [12]  741 	inc	r0
      0003C4 E6               [12]  742 	mov	a,@r0
      0003C5 B2 E7            [12]  743 	cpl	acc.7
      0003C7 F6               [12]  744 	mov	@r0,a
      0003C8                        745 00122$:
                                    746 ;	_atof.c:94: return (value);
      0003C8 E5*00            [12]  747 	mov	a,_bp
      0003CA 24 08            [12]  748 	add	a,#0x08
      0003CC F8               [12]  749 	mov	r0,a
      0003CD 86 82            [24]  750 	mov	dpl,@r0
      0003CF 08               [12]  751 	inc	r0
      0003D0 86 83            [24]  752 	mov	dph,@r0
      0003D2 08               [12]  753 	inc	r0
      0003D3 86 F0            [24]  754 	mov	b,@r0
      0003D5 08               [12]  755 	inc	r0
      0003D6 E6               [12]  756 	mov	a,@r0
      0003D7 85*00 81         [24]  757 	mov	sp,_bp
      0003DA D0*00            [24]  758 	pop	_bp
      0003DC 22               [24]  759 	ret
                                    760 	.area CSEG    (CODE)
                                    761 	.area CONST   (CODE)
                                    762 	.area XINIT   (CODE)
                                    763 	.area CABS    (ABS,CODE)
