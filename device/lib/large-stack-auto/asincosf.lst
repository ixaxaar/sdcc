                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:10 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module asincosf
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _asincosf
                                     13 	.globl _ldexpf
                                     14 	.globl _fabsf
                                     15 	.globl _sqrtf
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable bit register bank
                                     33 ;--------------------------------------------------------
                                     34 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         35 bits:
      000000                         36 	.ds 1
                           008000    37 	b0 = bits[0]
                           008100    38 	b1 = bits[1]
                           008200    39 	b2 = bits[2]
                           008300    40 	b3 = bits[3]
                           008400    41 	b4 = bits[4]
                           008500    42 	b5 = bits[5]
                           008600    43 	b6 = bits[6]
                           008700    44 	b7 = bits[7]
                                     45 ;--------------------------------------------------------
                                     46 ; internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DSEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; overlayable items in internal ram 
                                     51 ;--------------------------------------------------------
                                     52 ;--------------------------------------------------------
                                     53 ; indirectly addressable internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area ISEG    (DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area IABS    (ABS,DATA)
                                     60 	.area IABS    (ABS,DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; bit data
                                     63 ;--------------------------------------------------------
                                     64 	.area BSEG    (BIT)
                                     65 ;--------------------------------------------------------
                                     66 ; paged external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area PSEG    (PAG,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XSEG    (XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XABS    (ABS,XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; external initialized ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XISEG   (XDATA)
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT0 (CODE)
                                     83 	.area GSINIT1 (CODE)
                                     84 	.area GSINIT2 (CODE)
                                     85 	.area GSINIT3 (CODE)
                                     86 	.area GSINIT4 (CODE)
                                     87 	.area GSINIT5 (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area CSEG    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; global & static initialisations
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.area GSFINAL (CODE)
                                     97 	.area GSINIT  (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; Home
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME    (CODE)
                                    102 	.area HOME    (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; code
                                    105 ;--------------------------------------------------------
                                    106 	.area CSEG    (CODE)
                                    107 ;------------------------------------------------------------
                                    108 ;Allocation info for local variables in function 'asincosf'
                                    109 ;------------------------------------------------------------
                                    110 ;isacos                    Allocated to registers b0 
                                    111 ;x                         Allocated to stack - _bp +1
                                    112 ;y                         Allocated to registers r2 r4 r6 r7 
                                    113 ;g                         Allocated to stack - _bp +13
                                    114 ;r                         Allocated to stack - _bp +17
                                    115 ;i                         Allocated to registers r5 
                                    116 ;quartPI                   Allocated to registers b1 
                                    117 ;sloc0                     Allocated to stack - _bp +5
                                    118 ;sloc1                     Allocated to stack - _bp +9
                                    119 ;------------------------------------------------------------
                                    120 ;	asincosf.c:47: float asincosf(const float x, const bool isacos)
                                    121 ;	-----------------------------------------
                                    122 ;	 function asincosf
                                    123 ;	-----------------------------------------
      000000                        124 _asincosf:
                           000007   125 	ar7 = 0x07
                           000006   126 	ar6 = 0x06
                           000005   127 	ar5 = 0x05
                           000004   128 	ar4 = 0x04
                           000003   129 	ar3 = 0x03
                           000002   130 	ar2 = 0x02
                           000001   131 	ar1 = 0x01
                           000000   132 	ar0 = 0x00
      000000 C0*00            [24]  133 	push	_bp
      000002 85 81*00         [24]  134 	mov	_bp,sp
      000005 C0 82            [24]  135 	push	dpl
      000007 C0 83            [24]  136 	push	dph
      000009 C0 F0            [24]  137 	push	b
      00000B C0 E0            [24]  138 	push	acc
      00000D E5 81            [12]  139 	mov	a,sp
      00000F 24 10            [12]  140 	add	a,#0x10
      000011 F5 81            [12]  141 	mov	sp,a
                                    142 ;	asincosf.c:51: bool quartPI = isacos;
      000013 A2*00            [12]  143 	mov	c,b0
      000015 92*00            [24]  144 	mov	b1,c
                                    145 ;	asincosf.c:56: y = fabsf(x);
      000017 A8*00            [24]  146 	mov	r0,_bp
      000019 08               [12]  147 	inc	r0
      00001A 86 82            [24]  148 	mov	dpl,@r0
      00001C 08               [12]  149 	inc	r0
      00001D 86 83            [24]  150 	mov	dph,@r0
      00001F 08               [12]  151 	inc	r0
      000020 86 F0            [24]  152 	mov	b,@r0
      000022 08               [12]  153 	inc	r0
      000023 E6               [12]  154 	mov	a,@r0
      000024 C0*00            [24]  155 	push	bits
      000026 12r00r00         [24]  156 	lcall	_fabsf
      000029 AA 82            [24]  157 	mov	r2,dpl
      00002B AB 83            [24]  158 	mov	r3,dph
      00002D AE F0            [24]  159 	mov	r6,b
      00002F FF               [12]  160 	mov	r7,a
      000030 D0*00            [24]  161 	pop	bits
      000032 8B 04            [24]  162 	mov	ar4,r3
                                    163 ;	asincosf.c:57: if (y < EPS)
      000034 C0 07            [24]  164 	push	ar7
      000036 C0 06            [24]  165 	push	ar6
      000038 C0 04            [24]  166 	push	ar4
      00003A C0 02            [24]  167 	push	ar2
      00003C C0*00            [24]  168 	push	bits
      00003E E4               [12]  169 	clr	a
      00003F C0 E0            [24]  170 	push	acc
      000041 C0 E0            [24]  171 	push	acc
      000043 74 80            [12]  172 	mov	a,#0x80
      000045 C0 E0            [24]  173 	push	acc
      000047 74 39            [12]  174 	mov	a,#0x39
      000049 C0 E0            [24]  175 	push	acc
      00004B 8A 82            [24]  176 	mov	dpl,r2
      00004D 8C 83            [24]  177 	mov	dph,r4
      00004F 8E F0            [24]  178 	mov	b,r6
      000051 EF               [12]  179 	mov	a,r7
      000052 12r00r00         [24]  180 	lcall	___fslt
      000055 AB 82            [24]  181 	mov	r3,dpl
      000057 E5 81            [12]  182 	mov	a,sp
      000059 24 FC            [12]  183 	add	a,#0xfc
      00005B F5 81            [12]  184 	mov	sp,a
      00005D D0*00            [24]  185 	pop	bits
      00005F D0 02            [24]  186 	pop	ar2
      000061 D0 04            [24]  187 	pop	ar4
      000063 D0 06            [24]  188 	pop	ar6
      000065 D0 07            [24]  189 	pop	ar7
      000067 EB               [12]  190 	mov	a,r3
      000068 60 13            [24]  191 	jz	00107$
                                    192 ;	asincosf.c:59: r = y;
      00006A E5*00            [12]  193 	mov	a,_bp
      00006C 24 11            [12]  194 	add	a,#0x11
      00006E F8               [12]  195 	mov	r0,a
      00006F A6 02            [24]  196 	mov	@r0,ar2
      000071 08               [12]  197 	inc	r0
      000072 A6 04            [24]  198 	mov	@r0,ar4
      000074 08               [12]  199 	inc	r0
      000075 A6 06            [24]  200 	mov	@r0,ar6
      000077 08               [12]  201 	inc	r0
      000078 A6 07            [24]  202 	mov	@r0,ar7
      00007A 02r04r83         [24]  203 	ljmp	00108$
      00007D                        204 00107$:
                                    205 ;	asincosf.c:63: if (y > 0.5)
      00007D C0 07            [24]  206 	push	ar7
      00007F C0 06            [24]  207 	push	ar6
      000081 C0 04            [24]  208 	push	ar4
      000083 C0 02            [24]  209 	push	ar2
      000085 C0*00            [24]  210 	push	bits
      000087 E4               [12]  211 	clr	a
      000088 C0 E0            [24]  212 	push	acc
      00008A C0 E0            [24]  213 	push	acc
      00008C C0 E0            [24]  214 	push	acc
      00008E 74 3F            [12]  215 	mov	a,#0x3F
      000090 C0 E0            [24]  216 	push	acc
      000092 8A 82            [24]  217 	mov	dpl,r2
      000094 8C 83            [24]  218 	mov	dph,r4
      000096 8E F0            [24]  219 	mov	b,r6
      000098 EF               [12]  220 	mov	a,r7
      000099 12r00r00         [24]  221 	lcall	___fsgt
      00009C AD 82            [24]  222 	mov	r5,dpl
      00009E E5 81            [12]  223 	mov	a,sp
      0000A0 24 FC            [12]  224 	add	a,#0xfc
      0000A2 F5 81            [12]  225 	mov	sp,a
      0000A4 D0*00            [24]  226 	pop	bits
      0000A6 D0 02            [24]  227 	pop	ar2
      0000A8 D0 04            [24]  228 	pop	ar4
      0000AA D0 06            [24]  229 	pop	ar6
      0000AC D0 07            [24]  230 	pop	ar7
      0000AE ED               [12]  231 	mov	a,r5
      0000AF 70 03            [24]  232 	jnz	00138$
      0000B1 02r01rEB         [24]  233 	ljmp	00104$
      0000B4                        234 00138$:
                                    235 ;	asincosf.c:65: quartPI = !isacos;
      0000B4 A2*00            [12]  236 	mov	c,b0
      0000B6 B3               [12]  237 	cpl	c
      0000B7 92*00            [24]  238 	mov  b2,c
      0000B9 92*00            [24]  239 	mov	b1,c
                                    240 ;	asincosf.c:66: if (y > 1.0)
      0000BB C0 07            [24]  241 	push	ar7
      0000BD C0 06            [24]  242 	push	ar6
      0000BF C0 04            [24]  243 	push	ar4
      0000C1 C0 02            [24]  244 	push	ar2
      0000C3 C0*00            [24]  245 	push	bits
      0000C5 E4               [12]  246 	clr	a
      0000C6 C0 E0            [24]  247 	push	acc
      0000C8 C0 E0            [24]  248 	push	acc
      0000CA 74 80            [12]  249 	mov	a,#0x80
      0000CC C0 E0            [24]  250 	push	acc
      0000CE 74 3F            [12]  251 	mov	a,#0x3F
      0000D0 C0 E0            [24]  252 	push	acc
      0000D2 8A 82            [24]  253 	mov	dpl,r2
      0000D4 8C 83            [24]  254 	mov	dph,r4
      0000D6 8E F0            [24]  255 	mov	b,r6
      0000D8 EF               [12]  256 	mov	a,r7
      0000D9 12r00r00         [24]  257 	lcall	___fsgt
      0000DC AD 82            [24]  258 	mov	r5,dpl
      0000DE E5 81            [12]  259 	mov	a,sp
      0000E0 24 FC            [12]  260 	add	a,#0xfc
      0000E2 F5 81            [12]  261 	mov	sp,a
      0000E4 D0*00            [24]  262 	pop	bits
      0000E6 D0 02            [24]  263 	pop	ar2
      0000E8 D0 04            [24]  264 	pop	ar4
      0000EA D0 06            [24]  265 	pop	ar6
      0000EC D0 07            [24]  266 	pop	ar7
      0000EE ED               [12]  267 	mov	a,r5
      0000EF 60 12            [24]  268 	jz	00102$
                                    269 ;	asincosf.c:68: errno = EDOM;
      0000F1 90r00r00         [24]  270 	mov	dptr,#_errno
      0000F4 74 21            [12]  271 	mov	a,#0x21
      0000F6 F0               [24]  272 	movx	@dptr,a
      0000F7 E4               [12]  273 	clr	a
      0000F8 A3               [24]  274 	inc	dptr
      0000F9 F0               [24]  275 	movx	@dptr,a
                                    276 ;	asincosf.c:69: return 0.0;
      0000FA 90 00 00         [24]  277 	mov	dptr,#(0x00&0x00ff)
      0000FD E4               [12]  278 	clr	a
      0000FE F5 F0            [12]  279 	mov	b,a
      000100 02r06rC0         [24]  280 	ljmp	00117$
      000103                        281 00102$:
                                    282 ;	asincosf.c:71: g = (0.5 - y) + 0.5;
      000103 C0*00            [24]  283 	push	bits
      000105 C0 02            [24]  284 	push	ar2
      000107 C0 04            [24]  285 	push	ar4
      000109 C0 06            [24]  286 	push	ar6
      00010B C0 07            [24]  287 	push	ar7
      00010D 90 00 00         [24]  288 	mov	dptr,#0x0000
      000110 75 F0 80         [24]  289 	mov	b,#0x80
      000113 74 3F            [12]  290 	mov	a,#0x3F
      000115 12r00r00         [24]  291 	lcall	___fssub
      000118 AF 82            [24]  292 	mov	r7,dpl
      00011A AE 83            [24]  293 	mov	r6,dph
      00011C AD F0            [24]  294 	mov	r5,b
      00011E FC               [12]  295 	mov	r4,a
      00011F E5 81            [12]  296 	mov	a,sp
      000121 24 FC            [12]  297 	add	a,#0xfc
      000123 F5 81            [12]  298 	mov	sp,a
      000125 D0*00            [24]  299 	pop	bits
      000127 E5*00            [12]  300 	mov	a,_bp
      000129 24 0D            [12]  301 	add	a,#0x0d
      00012B F8               [12]  302 	mov	r0,a
      00012C A6 07            [24]  303 	mov	@r0,ar7
      00012E 08               [12]  304 	inc	r0
      00012F A6 06            [24]  305 	mov	@r0,ar6
      000131 08               [12]  306 	inc	r0
      000132 A6 05            [24]  307 	mov	@r0,ar5
      000134 08               [12]  308 	inc	r0
      000135 A6 04            [24]  309 	mov	@r0,ar4
                                    310 ;	asincosf.c:72: g = ldexpf(g, -1);
      000137 C0*00            [24]  311 	push	bits
      000139 74 FF            [12]  312 	mov	a,#0xFF
      00013B C0 E0            [24]  313 	push	acc
      00013D C0 E0            [24]  314 	push	acc
      00013F E5*00            [12]  315 	mov	a,_bp
      000141 24 0D            [12]  316 	add	a,#0x0d
      000143 F8               [12]  317 	mov	r0,a
      000144 86 82            [24]  318 	mov	dpl,@r0
      000146 08               [12]  319 	inc	r0
      000147 86 83            [24]  320 	mov	dph,@r0
      000149 08               [12]  321 	inc	r0
      00014A 86 F0            [24]  322 	mov	b,@r0
      00014C 08               [12]  323 	inc	r0
      00014D E6               [12]  324 	mov	a,@r0
      00014E 12r00r00         [24]  325 	lcall	_ldexpf
      000151 AF 82            [24]  326 	mov	r7,dpl
      000153 AE 83            [24]  327 	mov	r6,dph
      000155 AD F0            [24]  328 	mov	r5,b
      000157 FC               [12]  329 	mov	r4,a
      000158 15 81            [12]  330 	dec	sp
      00015A 15 81            [12]  331 	dec	sp
      00015C D0*00            [24]  332 	pop	bits
      00015E E5*00            [12]  333 	mov	a,_bp
      000160 24 0D            [12]  334 	add	a,#0x0d
      000162 F8               [12]  335 	mov	r0,a
      000163 A6 07            [24]  336 	mov	@r0,ar7
      000165 08               [12]  337 	inc	r0
      000166 A6 06            [24]  338 	mov	@r0,ar6
      000168 08               [12]  339 	inc	r0
      000169 A6 05            [24]  340 	mov	@r0,ar5
      00016B 08               [12]  341 	inc	r0
      00016C A6 04            [24]  342 	mov	@r0,ar4
                                    343 ;	asincosf.c:73: y = sqrtf(g);
      00016E E5*00            [12]  344 	mov	a,_bp
      000170 24 0D            [12]  345 	add	a,#0x0d
      000172 F8               [12]  346 	mov	r0,a
      000173 86 82            [24]  347 	mov	dpl,@r0
      000175 08               [12]  348 	inc	r0
      000176 86 83            [24]  349 	mov	dph,@r0
      000178 08               [12]  350 	inc	r0
      000179 86 F0            [24]  351 	mov	b,@r0
      00017B 08               [12]  352 	inc	r0
      00017C E6               [12]  353 	mov	a,@r0
      00017D C0*00            [24]  354 	push	bits
      00017F 12r00r00         [24]  355 	lcall	_sqrtf
      000182 C8               [12]  356 	xch	a,r0
      000183 E5*00            [12]  357 	mov	a,_bp
      000185 24 05            [12]  358 	add	a,#0x05
      000187 C8               [12]  359 	xch	a,r0
      000188 A6 82            [24]  360 	mov	@r0,dpl
      00018A 08               [12]  361 	inc	r0
      00018B A6 83            [24]  362 	mov	@r0,dph
      00018D 08               [12]  363 	inc	r0
      00018E A6 F0            [24]  364 	mov	@r0,b
      000190 08               [12]  365 	inc	r0
      000191 F6               [12]  366 	mov	@r0,a
      000192 D0*00            [24]  367 	pop	bits
      000194 E5*00            [12]  368 	mov	a,_bp
      000196 24 05            [12]  369 	add	a,#0x05
      000198 F8               [12]  370 	mov	r0,a
      000199 86 02            [24]  371 	mov	ar2,@r0
      00019B 08               [12]  372 	inc	r0
      00019C 86 04            [24]  373 	mov	ar4,@r0
      00019E 08               [12]  374 	inc	r0
      00019F 86 06            [24]  375 	mov	ar6,@r0
      0001A1 08               [12]  376 	inc	r0
      0001A2 86 07            [24]  377 	mov	ar7,@r0
                                    378 ;	asincosf.c:74: y = -(y + y);
      0001A4 C0*00            [24]  379 	push	bits
      0001A6 C0 02            [24]  380 	push	ar2
      0001A8 C0 04            [24]  381 	push	ar4
      0001AA C0 06            [24]  382 	push	ar6
      0001AC C0 07            [24]  383 	push	ar7
      0001AE 8A 82            [24]  384 	mov	dpl,r2
      0001B0 8C 83            [24]  385 	mov	dph,r4
      0001B2 8E F0            [24]  386 	mov	b,r6
      0001B4 EF               [12]  387 	mov	a,r7
      0001B5 12r00r00         [24]  388 	lcall	___fsadd
      0001B8 AF 82            [24]  389 	mov	r7,dpl
      0001BA AE 83            [24]  390 	mov	r6,dph
      0001BC AD F0            [24]  391 	mov	r5,b
      0001BE FC               [12]  392 	mov	r4,a
      0001BF E5 81            [12]  393 	mov	a,sp
      0001C1 24 FC            [12]  394 	add	a,#0xfc
      0001C3 F5 81            [12]  395 	mov	sp,a
      0001C5 D0*00            [24]  396 	pop	bits
      0001C7 E5*00            [12]  397 	mov	a,_bp
      0001C9 24 05            [12]  398 	add	a,#0x05
      0001CB F8               [12]  399 	mov	r0,a
      0001CC A6 07            [24]  400 	mov	@r0,ar7
      0001CE 08               [12]  401 	inc	r0
      0001CF A6 06            [24]  402 	mov	@r0,ar6
      0001D1 08               [12]  403 	inc	r0
      0001D2 A6 05            [24]  404 	mov	@r0,ar5
      0001D4 EC               [12]  405 	mov	a,r4
      0001D5 B2 E7            [12]  406 	cpl	acc.7
      0001D7 08               [12]  407 	inc	r0
      0001D8 F6               [12]  408 	mov	@r0,a
      0001D9 E5*00            [12]  409 	mov	a,_bp
      0001DB 24 05            [12]  410 	add	a,#0x05
      0001DD F8               [12]  411 	mov	r0,a
      0001DE 86 02            [24]  412 	mov	ar2,@r0
      0001E0 08               [12]  413 	inc	r0
      0001E1 86 04            [24]  414 	mov	ar4,@r0
      0001E3 08               [12]  415 	inc	r0
      0001E4 86 06            [24]  416 	mov	ar6,@r0
      0001E6 08               [12]  417 	inc	r0
      0001E7 86 07            [24]  418 	mov	ar7,@r0
      0001E9 80 54            [24]  419 	sjmp	00105$
      0001EB                        420 00104$:
                                    421 ;	asincosf.c:78: g = y * y;
      0001EB C0 07            [24]  422 	push	ar7
      0001ED C0 06            [24]  423 	push	ar6
      0001EF C0 04            [24]  424 	push	ar4
      0001F1 C0 02            [24]  425 	push	ar2
      0001F3 C0*00            [24]  426 	push	bits
      0001F5 C0 02            [24]  427 	push	ar2
      0001F7 C0 04            [24]  428 	push	ar4
      0001F9 C0 06            [24]  429 	push	ar6
      0001FB C0 07            [24]  430 	push	ar7
      0001FD 8A 82            [24]  431 	mov	dpl,r2
      0001FF 8C 83            [24]  432 	mov	dph,r4
      000201 8E F0            [24]  433 	mov	b,r6
      000203 EF               [12]  434 	mov	a,r7
      000204 12r00r00         [24]  435 	lcall	___fsmul
      000207 C8               [12]  436 	xch	a,r0
      000208 E5*00            [12]  437 	mov	a,_bp
      00020A 24 05            [12]  438 	add	a,#0x05
      00020C C8               [12]  439 	xch	a,r0
      00020D A6 82            [24]  440 	mov	@r0,dpl
      00020F 08               [12]  441 	inc	r0
      000210 A6 83            [24]  442 	mov	@r0,dph
      000212 08               [12]  443 	inc	r0
      000213 A6 F0            [24]  444 	mov	@r0,b
      000215 08               [12]  445 	inc	r0
      000216 F6               [12]  446 	mov	@r0,a
      000217 E5 81            [12]  447 	mov	a,sp
      000219 24 FC            [12]  448 	add	a,#0xfc
      00021B F5 81            [12]  449 	mov	sp,a
      00021D D0*00            [24]  450 	pop	bits
      00021F D0 02            [24]  451 	pop	ar2
      000221 D0 04            [24]  452 	pop	ar4
      000223 D0 06            [24]  453 	pop	ar6
      000225 D0 07            [24]  454 	pop	ar7
      000227 E5*00            [12]  455 	mov	a,_bp
      000229 24 05            [12]  456 	add	a,#0x05
      00022B F8               [12]  457 	mov	r0,a
      00022C E5*00            [12]  458 	mov	a,_bp
      00022E 24 0D            [12]  459 	add	a,#0x0d
      000230 F9               [12]  460 	mov	r1,a
      000231 E6               [12]  461 	mov	a,@r0
      000232 F7               [12]  462 	mov	@r1,a
      000233 08               [12]  463 	inc	r0
      000234 09               [12]  464 	inc	r1
      000235 E6               [12]  465 	mov	a,@r0
      000236 F7               [12]  466 	mov	@r1,a
      000237 08               [12]  467 	inc	r0
      000238 09               [12]  468 	inc	r1
      000239 E6               [12]  469 	mov	a,@r0
      00023A F7               [12]  470 	mov	@r1,a
      00023B 08               [12]  471 	inc	r0
      00023C 09               [12]  472 	inc	r1
      00023D E6               [12]  473 	mov	a,@r0
      00023E F7               [12]  474 	mov	@r1,a
      00023F                        475 00105$:
                                    476 ;	asincosf.c:80: r = y + y * ((P(g) * g) / Q(g));
      00023F C0 07            [24]  477 	push	ar7
      000241 C0 06            [24]  478 	push	ar6
      000243 C0 04            [24]  479 	push	ar4
      000245 C0 02            [24]  480 	push	ar2
      000247 C0*00            [24]  481 	push	bits
      000249 E5*00            [12]  482 	mov	a,_bp
      00024B 24 0D            [12]  483 	add	a,#0x0d
      00024D F8               [12]  484 	mov	r0,a
      00024E E6               [12]  485 	mov	a,@r0
      00024F C0 E0            [24]  486 	push	acc
      000251 08               [12]  487 	inc	r0
      000252 E6               [12]  488 	mov	a,@r0
      000253 C0 E0            [24]  489 	push	acc
      000255 08               [12]  490 	inc	r0
      000256 E6               [12]  491 	mov	a,@r0
      000257 C0 E0            [24]  492 	push	acc
      000259 08               [12]  493 	inc	r0
      00025A E6               [12]  494 	mov	a,@r0
      00025B C0 E0            [24]  495 	push	acc
      00025D 90 20 65         [24]  496 	mov	dptr,#0x2065
      000260 75 F0 01         [24]  497 	mov	b,#0x01
      000263 74 BF            [12]  498 	mov	a,#0xBF
      000265 12r00r00         [24]  499 	lcall	___fsmul
      000268 C8               [12]  500 	xch	a,r0
      000269 E5*00            [12]  501 	mov	a,_bp
      00026B 24 05            [12]  502 	add	a,#0x05
      00026D C8               [12]  503 	xch	a,r0
      00026E A6 82            [24]  504 	mov	@r0,dpl
      000270 08               [12]  505 	inc	r0
      000271 A6 83            [24]  506 	mov	@r0,dph
      000273 08               [12]  507 	inc	r0
      000274 A6 F0            [24]  508 	mov	@r0,b
      000276 08               [12]  509 	inc	r0
      000277 F6               [12]  510 	mov	@r0,a
      000278 E5 81            [12]  511 	mov	a,sp
      00027A 24 FC            [12]  512 	add	a,#0xfc
      00027C F5 81            [12]  513 	mov	sp,a
      00027E D0*00            [24]  514 	pop	bits
      000280 C0*00            [24]  515 	push	bits
      000282 74 6B            [12]  516 	mov	a,#0x6B
      000284 C0 E0            [24]  517 	push	acc
      000286 74 16            [12]  518 	mov	a,#0x16
      000288 C0 E0            [24]  519 	push	acc
      00028A 74 6F            [12]  520 	mov	a,#0x6F
      00028C C0 E0            [24]  521 	push	acc
      00028E 74 3F            [12]  522 	mov	a,#0x3F
      000290 C0 E0            [24]  523 	push	acc
      000292 E5*00            [12]  524 	mov	a,_bp
      000294 24 05            [12]  525 	add	a,#0x05
      000296 F8               [12]  526 	mov	r0,a
      000297 86 82            [24]  527 	mov	dpl,@r0
      000299 08               [12]  528 	inc	r0
      00029A 86 83            [24]  529 	mov	dph,@r0
      00029C 08               [12]  530 	inc	r0
      00029D 86 F0            [24]  531 	mov	b,@r0
      00029F 08               [12]  532 	inc	r0
      0002A0 E6               [12]  533 	mov	a,@r0
      0002A1 12r00r00         [24]  534 	lcall	___fsadd
      0002A4 C8               [12]  535 	xch	a,r0
      0002A5 E5*00            [12]  536 	mov	a,_bp
      0002A7 24 05            [12]  537 	add	a,#0x05
      0002A9 C8               [12]  538 	xch	a,r0
      0002AA A6 82            [24]  539 	mov	@r0,dpl
      0002AC 08               [12]  540 	inc	r0
      0002AD A6 83            [24]  541 	mov	@r0,dph
      0002AF 08               [12]  542 	inc	r0
      0002B0 A6 F0            [24]  543 	mov	@r0,b
      0002B2 08               [12]  544 	inc	r0
      0002B3 F6               [12]  545 	mov	@r0,a
      0002B4 E5 81            [12]  546 	mov	a,sp
      0002B6 24 FC            [12]  547 	add	a,#0xfc
      0002B8 F5 81            [12]  548 	mov	sp,a
      0002BA D0*00            [24]  549 	pop	bits
      0002BC C0*00            [24]  550 	push	bits
      0002BE E5*00            [12]  551 	mov	a,_bp
      0002C0 24 0D            [12]  552 	add	a,#0x0d
      0002C2 F8               [12]  553 	mov	r0,a
      0002C3 E6               [12]  554 	mov	a,@r0
      0002C4 C0 E0            [24]  555 	push	acc
      0002C6 08               [12]  556 	inc	r0
      0002C7 E6               [12]  557 	mov	a,@r0
      0002C8 C0 E0            [24]  558 	push	acc
      0002CA 08               [12]  559 	inc	r0
      0002CB E6               [12]  560 	mov	a,@r0
      0002CC C0 E0            [24]  561 	push	acc
      0002CE 08               [12]  562 	inc	r0
      0002CF E6               [12]  563 	mov	a,@r0
      0002D0 C0 E0            [24]  564 	push	acc
      0002D2 E5*00            [12]  565 	mov	a,_bp
      0002D4 24 05            [12]  566 	add	a,#0x05
      0002D6 F8               [12]  567 	mov	r0,a
      0002D7 86 82            [24]  568 	mov	dpl,@r0
      0002D9 08               [12]  569 	inc	r0
      0002DA 86 83            [24]  570 	mov	dph,@r0
      0002DC 08               [12]  571 	inc	r0
      0002DD 86 F0            [24]  572 	mov	b,@r0
      0002DF 08               [12]  573 	inc	r0
      0002E0 E6               [12]  574 	mov	a,@r0
      0002E1 12r00r00         [24]  575 	lcall	___fsmul
      0002E4 C8               [12]  576 	xch	a,r0
      0002E5 E5*00            [12]  577 	mov	a,_bp
      0002E7 24 05            [12]  578 	add	a,#0x05
      0002E9 C8               [12]  579 	xch	a,r0
      0002EA A6 82            [24]  580 	mov	@r0,dpl
      0002EC 08               [12]  581 	inc	r0
      0002ED A6 83            [24]  582 	mov	@r0,dph
      0002EF 08               [12]  583 	inc	r0
      0002F0 A6 F0            [24]  584 	mov	@r0,b
      0002F2 08               [12]  585 	inc	r0
      0002F3 F6               [12]  586 	mov	@r0,a
      0002F4 E5 81            [12]  587 	mov	a,sp
      0002F6 24 FC            [12]  588 	add	a,#0xfc
      0002F8 F5 81            [12]  589 	mov	sp,a
      0002FA D0*00            [24]  590 	pop	bits
      0002FC C0*00            [24]  591 	push	bits
      0002FE 74 0B            [12]  592 	mov	a,#0x0B
      000300 C0 E0            [24]  593 	push	acc
      000302 74 8D            [12]  594 	mov	a,#0x8D
      000304 C0 E0            [24]  595 	push	acc
      000306 74 B1            [12]  596 	mov	a,#0xB1
      000308 C0 E0            [24]  597 	push	acc
      00030A 74 C0            [12]  598 	mov	a,#0xC0
      00030C C0 E0            [24]  599 	push	acc
      00030E E5*00            [12]  600 	mov	a,_bp
      000310 24 0D            [12]  601 	add	a,#0x0d
      000312 F8               [12]  602 	mov	r0,a
      000313 86 82            [24]  603 	mov	dpl,@r0
      000315 08               [12]  604 	inc	r0
      000316 86 83            [24]  605 	mov	dph,@r0
      000318 08               [12]  606 	inc	r0
      000319 86 F0            [24]  607 	mov	b,@r0
      00031B 08               [12]  608 	inc	r0
      00031C E6               [12]  609 	mov	a,@r0
      00031D 12r00r00         [24]  610 	lcall	___fsadd
      000320 C8               [12]  611 	xch	a,r0
      000321 E5*00            [12]  612 	mov	a,_bp
      000323 24 09            [12]  613 	add	a,#0x09
      000325 C8               [12]  614 	xch	a,r0
      000326 A6 82            [24]  615 	mov	@r0,dpl
      000328 08               [12]  616 	inc	r0
      000329 A6 83            [24]  617 	mov	@r0,dph
      00032B 08               [12]  618 	inc	r0
      00032C A6 F0            [24]  619 	mov	@r0,b
      00032E 08               [12]  620 	inc	r0
      00032F F6               [12]  621 	mov	@r0,a
      000330 E5 81            [12]  622 	mov	a,sp
      000332 24 FC            [12]  623 	add	a,#0xfc
      000334 F5 81            [12]  624 	mov	sp,a
      000336 D0*00            [24]  625 	pop	bits
      000338 C0*00            [24]  626 	push	bits
      00033A E5*00            [12]  627 	mov	a,_bp
      00033C 24 0D            [12]  628 	add	a,#0x0d
      00033E F8               [12]  629 	mov	r0,a
      00033F E6               [12]  630 	mov	a,@r0
      000340 C0 E0            [24]  631 	push	acc
      000342 08               [12]  632 	inc	r0
      000343 E6               [12]  633 	mov	a,@r0
      000344 C0 E0            [24]  634 	push	acc
      000346 08               [12]  635 	inc	r0
      000347 E6               [12]  636 	mov	a,@r0
      000348 C0 E0            [24]  637 	push	acc
      00034A 08               [12]  638 	inc	r0
      00034B E6               [12]  639 	mov	a,@r0
      00034C C0 E0            [24]  640 	push	acc
      00034E E5*00            [12]  641 	mov	a,_bp
      000350 24 09            [12]  642 	add	a,#0x09
      000352 F8               [12]  643 	mov	r0,a
      000353 86 82            [24]  644 	mov	dpl,@r0
      000355 08               [12]  645 	inc	r0
      000356 86 83            [24]  646 	mov	dph,@r0
      000358 08               [12]  647 	inc	r0
      000359 86 F0            [24]  648 	mov	b,@r0
      00035B 08               [12]  649 	inc	r0
      00035C E6               [12]  650 	mov	a,@r0
      00035D 12r00r00         [24]  651 	lcall	___fsmul
      000360 C8               [12]  652 	xch	a,r0
      000361 E5*00            [12]  653 	mov	a,_bp
      000363 24 09            [12]  654 	add	a,#0x09
      000365 C8               [12]  655 	xch	a,r0
      000366 A6 82            [24]  656 	mov	@r0,dpl
      000368 08               [12]  657 	inc	r0
      000369 A6 83            [24]  658 	mov	@r0,dph
      00036B 08               [12]  659 	inc	r0
      00036C A6 F0            [24]  660 	mov	@r0,b
      00036E 08               [12]  661 	inc	r0
      00036F F6               [12]  662 	mov	@r0,a
      000370 E5 81            [12]  663 	mov	a,sp
      000372 24 FC            [12]  664 	add	a,#0xfc
      000374 F5 81            [12]  665 	mov	sp,a
      000376 D0*00            [24]  666 	pop	bits
      000378 C0*00            [24]  667 	push	bits
      00037A 74 F0            [12]  668 	mov	a,#0xF0
      00037C C0 E0            [24]  669 	push	acc
      00037E 74 50            [12]  670 	mov	a,#0x50
      000380 C0 E0            [24]  671 	push	acc
      000382 74 B3            [12]  672 	mov	a,#0xB3
      000384 C0 E0            [24]  673 	push	acc
      000386 74 40            [12]  674 	mov	a,#0x40
      000388 C0 E0            [24]  675 	push	acc
      00038A E5*00            [12]  676 	mov	a,_bp
      00038C 24 09            [12]  677 	add	a,#0x09
      00038E F8               [12]  678 	mov	r0,a
      00038F 86 82            [24]  679 	mov	dpl,@r0
      000391 08               [12]  680 	inc	r0
      000392 86 83            [24]  681 	mov	dph,@r0
      000394 08               [12]  682 	inc	r0
      000395 86 F0            [24]  683 	mov	b,@r0
      000397 08               [12]  684 	inc	r0
      000398 E6               [12]  685 	mov	a,@r0
      000399 12r00r00         [24]  686 	lcall	___fsadd
      00039C C8               [12]  687 	xch	a,r0
      00039D E5*00            [12]  688 	mov	a,_bp
      00039F 24 09            [12]  689 	add	a,#0x09
      0003A1 C8               [12]  690 	xch	a,r0
      0003A2 A6 82            [24]  691 	mov	@r0,dpl
      0003A4 08               [12]  692 	inc	r0
      0003A5 A6 83            [24]  693 	mov	@r0,dph
      0003A7 08               [12]  694 	inc	r0
      0003A8 A6 F0            [24]  695 	mov	@r0,b
      0003AA 08               [12]  696 	inc	r0
      0003AB F6               [12]  697 	mov	@r0,a
      0003AC E5 81            [12]  698 	mov	a,sp
      0003AE 24 FC            [12]  699 	add	a,#0xfc
      0003B0 F5 81            [12]  700 	mov	sp,a
      0003B2 D0*00            [24]  701 	pop	bits
      0003B4 C0*00            [24]  702 	push	bits
      0003B6 E5*00            [12]  703 	mov	a,_bp
      0003B8 24 09            [12]  704 	add	a,#0x09
      0003BA F8               [12]  705 	mov	r0,a
      0003BB E6               [12]  706 	mov	a,@r0
      0003BC C0 E0            [24]  707 	push	acc
      0003BE 08               [12]  708 	inc	r0
      0003BF E6               [12]  709 	mov	a,@r0
      0003C0 C0 E0            [24]  710 	push	acc
      0003C2 08               [12]  711 	inc	r0
      0003C3 E6               [12]  712 	mov	a,@r0
      0003C4 C0 E0            [24]  713 	push	acc
      0003C6 08               [12]  714 	inc	r0
      0003C7 E6               [12]  715 	mov	a,@r0
      0003C8 C0 E0            [24]  716 	push	acc
      0003CA E5*00            [12]  717 	mov	a,_bp
      0003CC 24 05            [12]  718 	add	a,#0x05
      0003CE F8               [12]  719 	mov	r0,a
      0003CF 86 82            [24]  720 	mov	dpl,@r0
      0003D1 08               [12]  721 	inc	r0
      0003D2 86 83            [24]  722 	mov	dph,@r0
      0003D4 08               [12]  723 	inc	r0
      0003D5 86 F0            [24]  724 	mov	b,@r0
      0003D7 08               [12]  725 	inc	r0
      0003D8 E6               [12]  726 	mov	a,@r0
      0003D9 12r00r00         [24]  727 	lcall	___fsdiv
      0003DC C8               [12]  728 	xch	a,r0
      0003DD E5*00            [12]  729 	mov	a,_bp
      0003DF 24 09            [12]  730 	add	a,#0x09
      0003E1 C8               [12]  731 	xch	a,r0
      0003E2 A6 82            [24]  732 	mov	@r0,dpl
      0003E4 08               [12]  733 	inc	r0
      0003E5 A6 83            [24]  734 	mov	@r0,dph
      0003E7 08               [12]  735 	inc	r0
      0003E8 A6 F0            [24]  736 	mov	@r0,b
      0003EA 08               [12]  737 	inc	r0
      0003EB F6               [12]  738 	mov	@r0,a
      0003EC E5 81            [12]  739 	mov	a,sp
      0003EE 24 FC            [12]  740 	add	a,#0xfc
      0003F0 F5 81            [12]  741 	mov	sp,a
      0003F2 D0*00            [24]  742 	pop	bits
      0003F4 D0 02            [24]  743 	pop	ar2
      0003F6 D0 04            [24]  744 	pop	ar4
      0003F8 D0 06            [24]  745 	pop	ar6
      0003FA D0 07            [24]  746 	pop	ar7
      0003FC C0 07            [24]  747 	push	ar7
      0003FE C0 06            [24]  748 	push	ar6
      000400 C0 04            [24]  749 	push	ar4
      000402 C0 02            [24]  750 	push	ar2
      000404 C0*00            [24]  751 	push	bits
      000406 E5*00            [12]  752 	mov	a,_bp
      000408 24 09            [12]  753 	add	a,#0x09
      00040A F8               [12]  754 	mov	r0,a
      00040B E6               [12]  755 	mov	a,@r0
      00040C C0 E0            [24]  756 	push	acc
      00040E 08               [12]  757 	inc	r0
      00040F E6               [12]  758 	mov	a,@r0
      000410 C0 E0            [24]  759 	push	acc
      000412 08               [12]  760 	inc	r0
      000413 E6               [12]  761 	mov	a,@r0
      000414 C0 E0            [24]  762 	push	acc
      000416 08               [12]  763 	inc	r0
      000417 E6               [12]  764 	mov	a,@r0
      000418 C0 E0            [24]  765 	push	acc
      00041A 8A 82            [24]  766 	mov	dpl,r2
      00041C 8C 83            [24]  767 	mov	dph,r4
      00041E 8E F0            [24]  768 	mov	b,r6
      000420 EF               [12]  769 	mov	a,r7
      000421 12r00r00         [24]  770 	lcall	___fsmul
      000424 C8               [12]  771 	xch	a,r0
      000425 E5*00            [12]  772 	mov	a,_bp
      000427 24 09            [12]  773 	add	a,#0x09
      000429 C8               [12]  774 	xch	a,r0
      00042A A6 82            [24]  775 	mov	@r0,dpl
      00042C 08               [12]  776 	inc	r0
      00042D A6 83            [24]  777 	mov	@r0,dph
      00042F 08               [12]  778 	inc	r0
      000430 A6 F0            [24]  779 	mov	@r0,b
      000432 08               [12]  780 	inc	r0
      000433 F6               [12]  781 	mov	@r0,a
      000434 E5 81            [12]  782 	mov	a,sp
      000436 24 FC            [12]  783 	add	a,#0xfc
      000438 F5 81            [12]  784 	mov	sp,a
      00043A D0*00            [24]  785 	pop	bits
      00043C D0 02            [24]  786 	pop	ar2
      00043E D0 04            [24]  787 	pop	ar4
      000440 D0 06            [24]  788 	pop	ar6
      000442 D0 07            [24]  789 	pop	ar7
      000444 C0*00            [24]  790 	push	bits
      000446 E5*00            [12]  791 	mov	a,_bp
      000448 24 09            [12]  792 	add	a,#0x09
      00044A F8               [12]  793 	mov	r0,a
      00044B E6               [12]  794 	mov	a,@r0
      00044C C0 E0            [24]  795 	push	acc
      00044E 08               [12]  796 	inc	r0
      00044F E6               [12]  797 	mov	a,@r0
      000450 C0 E0            [24]  798 	push	acc
      000452 08               [12]  799 	inc	r0
      000453 E6               [12]  800 	mov	a,@r0
      000454 C0 E0            [24]  801 	push	acc
      000456 08               [12]  802 	inc	r0
      000457 E6               [12]  803 	mov	a,@r0
      000458 C0 E0            [24]  804 	push	acc
      00045A 8A 82            [24]  805 	mov	dpl,r2
      00045C 8C 83            [24]  806 	mov	dph,r4
      00045E 8E F0            [24]  807 	mov	b,r6
      000460 EF               [12]  808 	mov	a,r7
      000461 12r00r00         [24]  809 	lcall	___fsadd
      000464 AF 82            [24]  810 	mov	r7,dpl
      000466 AE 83            [24]  811 	mov	r6,dph
      000468 AD F0            [24]  812 	mov	r5,b
      00046A FC               [12]  813 	mov	r4,a
      00046B E5 81            [12]  814 	mov	a,sp
      00046D 24 FC            [12]  815 	add	a,#0xfc
      00046F F5 81            [12]  816 	mov	sp,a
      000471 D0*00            [24]  817 	pop	bits
      000473 E5*00            [12]  818 	mov	a,_bp
      000475 24 11            [12]  819 	add	a,#0x11
      000477 F8               [12]  820 	mov	r0,a
      000478 A6 07            [24]  821 	mov	@r0,ar7
      00047A 08               [12]  822 	inc	r0
      00047B A6 06            [24]  823 	mov	@r0,ar6
      00047D 08               [12]  824 	inc	r0
      00047E A6 05            [24]  825 	mov	@r0,ar5
      000480 08               [12]  826 	inc	r0
      000481 A6 04            [24]  827 	mov	@r0,ar4
      000483                        828 00108$:
                                    829 ;	asincosf.c:82: i = quartPI;
      000483 A2*00            [12]  830 	mov	c,b1
      000485 E4               [12]  831 	clr	a
      000486 33               [12]  832 	rlc	a
      000487 FD               [12]  833 	mov	r5,a
                                    834 ;	asincosf.c:83: if (isacos)
      000488 20*00 03         [24]  835 	jb	b0,00140$
      00048B 02r05rE7         [24]  836 	ljmp	00115$
      00048E                        837 00140$:
                                    838 ;	asincosf.c:85: if (x < 0.0)
      00048E C0 05            [24]  839 	push	ar5
      000490 E4               [12]  840 	clr	a
      000491 C0 E0            [24]  841 	push	acc
      000493 C0 E0            [24]  842 	push	acc
      000495 C0 E0            [24]  843 	push	acc
      000497 C0 E0            [24]  844 	push	acc
      000499 A8*00            [24]  845 	mov	r0,_bp
      00049B 08               [12]  846 	inc	r0
      00049C 86 82            [24]  847 	mov	dpl,@r0
      00049E 08               [12]  848 	inc	r0
      00049F 86 83            [24]  849 	mov	dph,@r0
      0004A1 08               [12]  850 	inc	r0
      0004A2 86 F0            [24]  851 	mov	b,@r0
      0004A4 08               [12]  852 	inc	r0
      0004A5 E6               [12]  853 	mov	a,@r0
      0004A6 12r00r00         [24]  854 	lcall	___fslt
      0004A9 AC 82            [24]  855 	mov	r4,dpl
      0004AB E5 81            [12]  856 	mov	a,sp
      0004AD 24 FC            [12]  857 	add	a,#0xfc
      0004AF F5 81            [12]  858 	mov	sp,a
      0004B1 D0 05            [24]  859 	pop	ar5
      0004B3 EC               [12]  860 	mov	a,r4
      0004B4 70 03            [24]  861 	jnz	00141$
      0004B6 02r05r50         [24]  862 	ljmp	00110$
      0004B9                        863 00141$:
                                    864 ;	asincosf.c:86: r = (b[i] + r) + b[i];
      0004B9 ED               [12]  865 	mov	a,r5
      0004BA 75 F0 04         [24]  866 	mov	b,#0x04
      0004BD A4               [48]  867 	mul	ab
      0004BE 24r08            [12]  868 	add	a,#_asincosf_b_1_24
      0004C0 F5 82            [12]  869 	mov	dpl,a
      0004C2 74s00            [12]  870 	mov	a,#(_asincosf_b_1_24 >> 8)
      0004C4 35 F0            [12]  871 	addc	a,b
      0004C6 F5 83            [12]  872 	mov	dph,a
      0004C8 E5*00            [12]  873 	mov	a,_bp
      0004CA 24 09            [12]  874 	add	a,#0x09
      0004CC F8               [12]  875 	mov	r0,a
      0004CD E4               [12]  876 	clr	a
      0004CE 93               [24]  877 	movc	a,@a+dptr
      0004CF F6               [12]  878 	mov	@r0,a
      0004D0 A3               [24]  879 	inc	dptr
      0004D1 E4               [12]  880 	clr	a
      0004D2 93               [24]  881 	movc	a,@a+dptr
      0004D3 08               [12]  882 	inc	r0
      0004D4 F6               [12]  883 	mov	@r0,a
      0004D5 A3               [24]  884 	inc	dptr
      0004D6 E4               [12]  885 	clr	a
      0004D7 93               [24]  886 	movc	a,@a+dptr
      0004D8 08               [12]  887 	inc	r0
      0004D9 F6               [12]  888 	mov	@r0,a
      0004DA A3               [24]  889 	inc	dptr
      0004DB E4               [12]  890 	clr	a
      0004DC 93               [24]  891 	movc	a,@a+dptr
      0004DD 08               [12]  892 	inc	r0
      0004DE F6               [12]  893 	mov	@r0,a
      0004DF E5*00            [12]  894 	mov	a,_bp
      0004E1 24 11            [12]  895 	add	a,#0x11
      0004E3 F8               [12]  896 	mov	r0,a
      0004E4 E6               [12]  897 	mov	a,@r0
      0004E5 C0 E0            [24]  898 	push	acc
      0004E7 08               [12]  899 	inc	r0
      0004E8 E6               [12]  900 	mov	a,@r0
      0004E9 C0 E0            [24]  901 	push	acc
      0004EB 08               [12]  902 	inc	r0
      0004EC E6               [12]  903 	mov	a,@r0
      0004ED C0 E0            [24]  904 	push	acc
      0004EF 08               [12]  905 	inc	r0
      0004F0 E6               [12]  906 	mov	a,@r0
      0004F1 C0 E0            [24]  907 	push	acc
      0004F3 E5*00            [12]  908 	mov	a,_bp
      0004F5 24 09            [12]  909 	add	a,#0x09
      0004F7 F8               [12]  910 	mov	r0,a
      0004F8 86 82            [24]  911 	mov	dpl,@r0
      0004FA 08               [12]  912 	inc	r0
      0004FB 86 83            [24]  913 	mov	dph,@r0
      0004FD 08               [12]  914 	inc	r0
      0004FE 86 F0            [24]  915 	mov	b,@r0
      000500 08               [12]  916 	inc	r0
      000501 E6               [12]  917 	mov	a,@r0
      000502 12r00r00         [24]  918 	lcall	___fsadd
      000505 AA 82            [24]  919 	mov	r2,dpl
      000507 AC 83            [24]  920 	mov	r4,dph
      000509 AE F0            [24]  921 	mov	r6,b
      00050B FF               [12]  922 	mov	r7,a
      00050C E5 81            [12]  923 	mov	a,sp
      00050E 24 FC            [12]  924 	add	a,#0xfc
      000510 F5 81            [12]  925 	mov	sp,a
      000512 E5*00            [12]  926 	mov	a,_bp
      000514 24 09            [12]  927 	add	a,#0x09
      000516 F8               [12]  928 	mov	r0,a
      000517 E6               [12]  929 	mov	a,@r0
      000518 C0 E0            [24]  930 	push	acc
      00051A 08               [12]  931 	inc	r0
      00051B E6               [12]  932 	mov	a,@r0
      00051C C0 E0            [24]  933 	push	acc
      00051E 08               [12]  934 	inc	r0
      00051F E6               [12]  935 	mov	a,@r0
      000520 C0 E0            [24]  936 	push	acc
      000522 08               [12]  937 	inc	r0
      000523 E6               [12]  938 	mov	a,@r0
      000524 C0 E0            [24]  939 	push	acc
      000526 8A 82            [24]  940 	mov	dpl,r2
      000528 8C 83            [24]  941 	mov	dph,r4
      00052A 8E F0            [24]  942 	mov	b,r6
      00052C EF               [12]  943 	mov	a,r7
      00052D 12r00r00         [24]  944 	lcall	___fsadd
      000530 AB 82            [24]  945 	mov	r3,dpl
      000532 AC 83            [24]  946 	mov	r4,dph
      000534 AE F0            [24]  947 	mov	r6,b
      000536 FF               [12]  948 	mov	r7,a
      000537 E5 81            [12]  949 	mov	a,sp
      000539 24 FC            [12]  950 	add	a,#0xfc
      00053B F5 81            [12]  951 	mov	sp,a
      00053D E5*00            [12]  952 	mov	a,_bp
      00053F 24 11            [12]  953 	add	a,#0x11
      000541 F8               [12]  954 	mov	r0,a
      000542 A6 03            [24]  955 	mov	@r0,ar3
      000544 08               [12]  956 	inc	r0
      000545 A6 04            [24]  957 	mov	@r0,ar4
      000547 08               [12]  958 	inc	r0
      000548 A6 06            [24]  959 	mov	@r0,ar6
      00054A 08               [12]  960 	inc	r0
      00054B A6 07            [24]  961 	mov	@r0,ar7
      00054D 02r06rB1         [24]  962 	ljmp	00116$
      000550                        963 00110$:
                                    964 ;	asincosf.c:88: r = (a[i] - r) + a[i];
      000550 ED               [12]  965 	mov	a,r5
      000551 75 F0 04         [24]  966 	mov	b,#0x04
      000554 A4               [48]  967 	mul	ab
      000555 24r00            [12]  968 	add	a,#_asincosf_a_1_24
      000557 F5 82            [12]  969 	mov	dpl,a
      000559 74s00            [12]  970 	mov	a,#(_asincosf_a_1_24 >> 8)
      00055B 35 F0            [12]  971 	addc	a,b
      00055D F5 83            [12]  972 	mov	dph,a
      00055F E5*00            [12]  973 	mov	a,_bp
      000561 24 09            [12]  974 	add	a,#0x09
      000563 F8               [12]  975 	mov	r0,a
      000564 E4               [12]  976 	clr	a
      000565 93               [24]  977 	movc	a,@a+dptr
      000566 F6               [12]  978 	mov	@r0,a
      000567 A3               [24]  979 	inc	dptr
      000568 E4               [12]  980 	clr	a
      000569 93               [24]  981 	movc	a,@a+dptr
      00056A 08               [12]  982 	inc	r0
      00056B F6               [12]  983 	mov	@r0,a
      00056C A3               [24]  984 	inc	dptr
      00056D E4               [12]  985 	clr	a
      00056E 93               [24]  986 	movc	a,@a+dptr
      00056F 08               [12]  987 	inc	r0
      000570 F6               [12]  988 	mov	@r0,a
      000571 A3               [24]  989 	inc	dptr
      000572 E4               [12]  990 	clr	a
      000573 93               [24]  991 	movc	a,@a+dptr
      000574 08               [12]  992 	inc	r0
      000575 F6               [12]  993 	mov	@r0,a
      000576 E5*00            [12]  994 	mov	a,_bp
      000578 24 11            [12]  995 	add	a,#0x11
      00057A F8               [12]  996 	mov	r0,a
      00057B E6               [12]  997 	mov	a,@r0
      00057C C0 E0            [24]  998 	push	acc
      00057E 08               [12]  999 	inc	r0
      00057F E6               [12] 1000 	mov	a,@r0
      000580 C0 E0            [24] 1001 	push	acc
      000582 08               [12] 1002 	inc	r0
      000583 E6               [12] 1003 	mov	a,@r0
      000584 C0 E0            [24] 1004 	push	acc
      000586 08               [12] 1005 	inc	r0
      000587 E6               [12] 1006 	mov	a,@r0
      000588 C0 E0            [24] 1007 	push	acc
      00058A E5*00            [12] 1008 	mov	a,_bp
      00058C 24 09            [12] 1009 	add	a,#0x09
      00058E F8               [12] 1010 	mov	r0,a
      00058F 86 82            [24] 1011 	mov	dpl,@r0
      000591 08               [12] 1012 	inc	r0
      000592 86 83            [24] 1013 	mov	dph,@r0
      000594 08               [12] 1014 	inc	r0
      000595 86 F0            [24] 1015 	mov	b,@r0
      000597 08               [12] 1016 	inc	r0
      000598 E6               [12] 1017 	mov	a,@r0
      000599 12r00r00         [24] 1018 	lcall	___fssub
      00059C AA 82            [24] 1019 	mov	r2,dpl
      00059E AC 83            [24] 1020 	mov	r4,dph
      0005A0 AE F0            [24] 1021 	mov	r6,b
      0005A2 FF               [12] 1022 	mov	r7,a
      0005A3 E5 81            [12] 1023 	mov	a,sp
      0005A5 24 FC            [12] 1024 	add	a,#0xfc
      0005A7 F5 81            [12] 1025 	mov	sp,a
      0005A9 E5*00            [12] 1026 	mov	a,_bp
      0005AB 24 09            [12] 1027 	add	a,#0x09
      0005AD F8               [12] 1028 	mov	r0,a
      0005AE E6               [12] 1029 	mov	a,@r0
      0005AF C0 E0            [24] 1030 	push	acc
      0005B1 08               [12] 1031 	inc	r0
      0005B2 E6               [12] 1032 	mov	a,@r0
      0005B3 C0 E0            [24] 1033 	push	acc
      0005B5 08               [12] 1034 	inc	r0
      0005B6 E6               [12] 1035 	mov	a,@r0
      0005B7 C0 E0            [24] 1036 	push	acc
      0005B9 08               [12] 1037 	inc	r0
      0005BA E6               [12] 1038 	mov	a,@r0
      0005BB C0 E0            [24] 1039 	push	acc
      0005BD 8A 82            [24] 1040 	mov	dpl,r2
      0005BF 8C 83            [24] 1041 	mov	dph,r4
      0005C1 8E F0            [24] 1042 	mov	b,r6
      0005C3 EF               [12] 1043 	mov	a,r7
      0005C4 12r00r00         [24] 1044 	lcall	___fsadd
      0005C7 AB 82            [24] 1045 	mov	r3,dpl
      0005C9 AC 83            [24] 1046 	mov	r4,dph
      0005CB AE F0            [24] 1047 	mov	r6,b
      0005CD FF               [12] 1048 	mov	r7,a
      0005CE E5 81            [12] 1049 	mov	a,sp
      0005D0 24 FC            [12] 1050 	add	a,#0xfc
      0005D2 F5 81            [12] 1051 	mov	sp,a
      0005D4 E5*00            [12] 1052 	mov	a,_bp
      0005D6 24 11            [12] 1053 	add	a,#0x11
      0005D8 F8               [12] 1054 	mov	r0,a
      0005D9 A6 03            [24] 1055 	mov	@r0,ar3
      0005DB 08               [12] 1056 	inc	r0
      0005DC A6 04            [24] 1057 	mov	@r0,ar4
      0005DE 08               [12] 1058 	inc	r0
      0005DF A6 06            [24] 1059 	mov	@r0,ar6
      0005E1 08               [12] 1060 	inc	r0
      0005E2 A6 07            [24] 1061 	mov	@r0,ar7
      0005E4 02r06rB1         [24] 1062 	ljmp	00116$
      0005E7                       1063 00115$:
                                   1064 ;	asincosf.c:92: r = (a[i] + r) + a[i];
      0005E7 ED               [12] 1065 	mov	a,r5
      0005E8 75 F0 04         [24] 1066 	mov	b,#0x04
      0005EB A4               [48] 1067 	mul	ab
      0005EC 24r00            [12] 1068 	add	a,#_asincosf_a_1_24
      0005EE F5 82            [12] 1069 	mov	dpl,a
      0005F0 74s00            [12] 1070 	mov	a,#(_asincosf_a_1_24 >> 8)
      0005F2 35 F0            [12] 1071 	addc	a,b
      0005F4 F5 83            [12] 1072 	mov	dph,a
      0005F6 E5*00            [12] 1073 	mov	a,_bp
      0005F8 24 09            [12] 1074 	add	a,#0x09
      0005FA F8               [12] 1075 	mov	r0,a
      0005FB E4               [12] 1076 	clr	a
      0005FC 93               [24] 1077 	movc	a,@a+dptr
      0005FD F6               [12] 1078 	mov	@r0,a
      0005FE A3               [24] 1079 	inc	dptr
      0005FF E4               [12] 1080 	clr	a
      000600 93               [24] 1081 	movc	a,@a+dptr
      000601 08               [12] 1082 	inc	r0
      000602 F6               [12] 1083 	mov	@r0,a
      000603 A3               [24] 1084 	inc	dptr
      000604 E4               [12] 1085 	clr	a
      000605 93               [24] 1086 	movc	a,@a+dptr
      000606 08               [12] 1087 	inc	r0
      000607 F6               [12] 1088 	mov	@r0,a
      000608 A3               [24] 1089 	inc	dptr
      000609 E4               [12] 1090 	clr	a
      00060A 93               [24] 1091 	movc	a,@a+dptr
      00060B 08               [12] 1092 	inc	r0
      00060C F6               [12] 1093 	mov	@r0,a
      00060D E5*00            [12] 1094 	mov	a,_bp
      00060F 24 11            [12] 1095 	add	a,#0x11
      000611 F8               [12] 1096 	mov	r0,a
      000612 E6               [12] 1097 	mov	a,@r0
      000613 C0 E0            [24] 1098 	push	acc
      000615 08               [12] 1099 	inc	r0
      000616 E6               [12] 1100 	mov	a,@r0
      000617 C0 E0            [24] 1101 	push	acc
      000619 08               [12] 1102 	inc	r0
      00061A E6               [12] 1103 	mov	a,@r0
      00061B C0 E0            [24] 1104 	push	acc
      00061D 08               [12] 1105 	inc	r0
      00061E E6               [12] 1106 	mov	a,@r0
      00061F C0 E0            [24] 1107 	push	acc
      000621 E5*00            [12] 1108 	mov	a,_bp
      000623 24 09            [12] 1109 	add	a,#0x09
      000625 F8               [12] 1110 	mov	r0,a
      000626 86 82            [24] 1111 	mov	dpl,@r0
      000628 08               [12] 1112 	inc	r0
      000629 86 83            [24] 1113 	mov	dph,@r0
      00062B 08               [12] 1114 	inc	r0
      00062C 86 F0            [24] 1115 	mov	b,@r0
      00062E 08               [12] 1116 	inc	r0
      00062F E6               [12] 1117 	mov	a,@r0
      000630 12r00r00         [24] 1118 	lcall	___fsadd
      000633 AA 82            [24] 1119 	mov	r2,dpl
      000635 AB 83            [24] 1120 	mov	r3,dph
      000637 AE F0            [24] 1121 	mov	r6,b
      000639 FF               [12] 1122 	mov	r7,a
      00063A E5 81            [12] 1123 	mov	a,sp
      00063C 24 FC            [12] 1124 	add	a,#0xfc
      00063E F5 81            [12] 1125 	mov	sp,a
      000640 E5*00            [12] 1126 	mov	a,_bp
      000642 24 09            [12] 1127 	add	a,#0x09
      000644 F8               [12] 1128 	mov	r0,a
      000645 E6               [12] 1129 	mov	a,@r0
      000646 C0 E0            [24] 1130 	push	acc
      000648 08               [12] 1131 	inc	r0
      000649 E6               [12] 1132 	mov	a,@r0
      00064A C0 E0            [24] 1133 	push	acc
      00064C 08               [12] 1134 	inc	r0
      00064D E6               [12] 1135 	mov	a,@r0
      00064E C0 E0            [24] 1136 	push	acc
      000650 08               [12] 1137 	inc	r0
      000651 E6               [12] 1138 	mov	a,@r0
      000652 C0 E0            [24] 1139 	push	acc
      000654 8A 82            [24] 1140 	mov	dpl,r2
      000656 8B 83            [24] 1141 	mov	dph,r3
      000658 8E F0            [24] 1142 	mov	b,r6
      00065A EF               [12] 1143 	mov	a,r7
      00065B 12r00r00         [24] 1144 	lcall	___fsadd
      00065E AC 82            [24] 1145 	mov	r4,dpl
      000660 AD 83            [24] 1146 	mov	r5,dph
      000662 AE F0            [24] 1147 	mov	r6,b
      000664 FF               [12] 1148 	mov	r7,a
      000665 E5 81            [12] 1149 	mov	a,sp
      000667 24 FC            [12] 1150 	add	a,#0xfc
      000669 F5 81            [12] 1151 	mov	sp,a
      00066B E5*00            [12] 1152 	mov	a,_bp
      00066D 24 11            [12] 1153 	add	a,#0x11
      00066F F8               [12] 1154 	mov	r0,a
      000670 A6 04            [24] 1155 	mov	@r0,ar4
      000672 08               [12] 1156 	inc	r0
      000673 A6 05            [24] 1157 	mov	@r0,ar5
      000675 08               [12] 1158 	inc	r0
      000676 A6 06            [24] 1159 	mov	@r0,ar6
      000678 08               [12] 1160 	inc	r0
      000679 A6 07            [24] 1161 	mov	@r0,ar7
                                   1162 ;	asincosf.c:93: if (x < 0.0)
      00067B E4               [12] 1163 	clr	a
      00067C C0 E0            [24] 1164 	push	acc
      00067E C0 E0            [24] 1165 	push	acc
      000680 C0 E0            [24] 1166 	push	acc
      000682 C0 E0            [24] 1167 	push	acc
      000684 A8*00            [24] 1168 	mov	r0,_bp
      000686 08               [12] 1169 	inc	r0
      000687 86 82            [24] 1170 	mov	dpl,@r0
      000689 08               [12] 1171 	inc	r0
      00068A 86 83            [24] 1172 	mov	dph,@r0
      00068C 08               [12] 1173 	inc	r0
      00068D 86 F0            [24] 1174 	mov	b,@r0
      00068F 08               [12] 1175 	inc	r0
      000690 E6               [12] 1176 	mov	a,@r0
      000691 12r00r00         [24] 1177 	lcall	___fslt
      000694 AF 82            [24] 1178 	mov	r7,dpl
      000696 E5 81            [12] 1179 	mov	a,sp
      000698 24 FC            [12] 1180 	add	a,#0xfc
      00069A F5 81            [12] 1181 	mov	sp,a
      00069C EF               [12] 1182 	mov	a,r7
      00069D 60 12            [24] 1183 	jz	00116$
                                   1184 ;	asincosf.c:94: r = -r;
      00069F E5*00            [12] 1185 	mov	a,_bp
      0006A1 24 11            [12] 1186 	add	a,#0x11
      0006A3 F8               [12] 1187 	mov	r0,a
      0006A4 E6               [12] 1188 	mov	a,@r0
      0006A5 F6               [12] 1189 	mov	@r0,a
      0006A6 08               [12] 1190 	inc	r0
      0006A7 E6               [12] 1191 	mov	a,@r0
      0006A8 F6               [12] 1192 	mov	@r0,a
      0006A9 08               [12] 1193 	inc	r0
      0006AA E6               [12] 1194 	mov	a,@r0
      0006AB F6               [12] 1195 	mov	@r0,a
      0006AC 08               [12] 1196 	inc	r0
      0006AD E6               [12] 1197 	mov	a,@r0
      0006AE B2 E7            [12] 1198 	cpl	acc.7
      0006B0 F6               [12] 1199 	mov	@r0,a
      0006B1                       1200 00116$:
                                   1201 ;	asincosf.c:96: return r;
      0006B1 E5*00            [12] 1202 	mov	a,_bp
      0006B3 24 11            [12] 1203 	add	a,#0x11
      0006B5 F8               [12] 1204 	mov	r0,a
      0006B6 86 82            [24] 1205 	mov	dpl,@r0
      0006B8 08               [12] 1206 	inc	r0
      0006B9 86 83            [24] 1207 	mov	dph,@r0
      0006BB 08               [12] 1208 	inc	r0
      0006BC 86 F0            [24] 1209 	mov	b,@r0
      0006BE 08               [12] 1210 	inc	r0
      0006BF E6               [12] 1211 	mov	a,@r0
      0006C0                       1212 00117$:
      0006C0 85*00 81         [24] 1213 	mov	sp,_bp
      0006C3 D0*00            [24] 1214 	pop	_bp
      0006C5 22               [24] 1215 	ret
                                   1216 	.area CSEG    (CODE)
                                   1217 	.area CONST   (CODE)
      000000                       1218 _asincosf_a_1_24:
      000000 00 00 00 00           1219 	.byte #0x00,#0x00,#0x00,#0x00	;  0.000000e+00
      000004 DB 0F 49 3F           1220 	.byte #0xDB,#0x0F,#0x49,#0x3F	;  7.853982e-01
      000008                       1221 _asincosf_b_1_24:
      000008 DB 0F C9 3F           1222 	.byte #0xDB,#0x0F,#0xC9,#0x3F	;  1.570796e+00
      00000C DB 0F 49 3F           1223 	.byte #0xDB,#0x0F,#0x49,#0x3F	;  7.853982e-01
                                   1224 	.area XINIT   (CODE)
                                   1225 	.area CABS    (ABS,CODE)
