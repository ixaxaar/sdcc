                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:10 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atol
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atol
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'atol'
                                     92 ;------------------------------------------------------------
                                     93 ;s                         Allocated to registers r4 r3 r2 
                                     94 ;rv                        Allocated to stack - _bp +8
                                     95 ;sign                      Allocated to registers r5 
                                     96 ;sloc0                     Allocated to stack - _bp +1
                                     97 ;sloc1                     Allocated to stack - _bp +4
                                     98 ;------------------------------------------------------------
                                     99 ;	_atol.c:29: long atol(char * s)
                                    100 ;	-----------------------------------------
                                    101 ;	 function atol
                                    102 ;	-----------------------------------------
      000000                        103 _atol:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
      000000 C0*00            [24]  112 	push	_bp
      000002 E5 81            [12]  113 	mov	a,sp
      000004 F5*00            [12]  114 	mov	_bp,a
      000006 24 0B            [12]  115 	add	a,#0x0B
      000008 F5 81            [12]  116 	mov	sp,a
      00000A AC 82            [24]  117 	mov	r4,dpl
      00000C AB 83            [24]  118 	mov	r3,dph
      00000E AA F0            [24]  119 	mov	r2,b
                                    120 ;	_atol.c:31: register long rv=0; 
      000010 E5*00            [12]  121 	mov	a,_bp
      000012 24 08            [12]  122 	add	a,#0x08
      000014 F8               [12]  123 	mov	r0,a
      000015 E4               [12]  124 	clr	a
      000016 F6               [12]  125 	mov	@r0,a
      000017 08               [12]  126 	inc	r0
      000018 F6               [12]  127 	mov	@r0,a
      000019 08               [12]  128 	inc	r0
      00001A F6               [12]  129 	mov	@r0,a
      00001B 08               [12]  130 	inc	r0
      00001C F6               [12]  131 	mov	@r0,a
                                    132 ;	_atol.c:35: while (*s) {
      00001D 8C 05            [24]  133 	mov	ar5,r4
      00001F 8B 06            [24]  134 	mov	ar6,r3
      000021 8A 07            [24]  135 	mov	ar7,r2
      000023                        136 00107$:
      000023 8D 82            [24]  137 	mov	dpl,r5
      000025 8E 83            [24]  138 	mov	dph,r6
      000027 8F F0            [24]  139 	mov	b,r7
      000029 12r00r00         [24]  140 	lcall	__gptrget
      00002C FC               [12]  141 	mov	r4,a
      00002D 60 2E            [24]  142 	jz	00133$
                                    143 ;	_atol.c:36: if (*s <= '9' && *s >= '0')
      00002F C3               [12]  144 	clr	c
      000030 74 B9            [12]  145 	mov	a,#(0x39 ^ 0x80)
      000032 8C F0            [24]  146 	mov	b,r4
      000034 63 F0 80         [24]  147 	xrl	b,#0x80
      000037 95 F0            [12]  148 	subb	a,b
      000039 40 07            [24]  149 	jc	00102$
      00003B EC               [12]  150 	mov	a,r4
      00003C 64 80            [12]  151 	xrl	a,#0x80
      00003E 94 B0            [12]  152 	subb	a,#0xb0
      000040 50 1B            [24]  153 	jnc	00133$
                                    154 ;	_atol.c:37: break;
      000042                        155 00102$:
                                    156 ;	_atol.c:38: if (*s == '-' || *s == '+') 
      000042 8D 82            [24]  157 	mov	dpl,r5
      000044 8E 83            [24]  158 	mov	dph,r6
      000046 8F F0            [24]  159 	mov	b,r7
      000048 12r00r00         [24]  160 	lcall	__gptrget
      00004B FC               [12]  161 	mov	r4,a
      00004C BC 2D 02         [24]  162 	cjne	r4,#0x2D,00160$
      00004F 80 0C            [24]  163 	sjmp	00133$
      000051                        164 00160$:
      000051 BC 2B 02         [24]  165 	cjne	r4,#0x2B,00161$
      000054 80 07            [24]  166 	sjmp	00133$
      000056                        167 00161$:
                                    168 ;	_atol.c:40: s++;
      000056 0D               [12]  169 	inc	r5
      000057 BD 00 C9         [24]  170 	cjne	r5,#0x00,00107$
      00005A 0E               [12]  171 	inc	r6
      00005B 80 C6            [24]  172 	sjmp	00107$
      00005D                        173 00133$:
      00005D 8D 04            [24]  174 	mov	ar4,r5
      00005F 8E 03            [24]  175 	mov	ar3,r6
      000061 8F 02            [24]  176 	mov	ar2,r7
                                    177 ;	_atol.c:43: sign = (*s == '-');
      000063 8D 82            [24]  178 	mov	dpl,r5
      000065 8E 83            [24]  179 	mov	dph,r6
      000067 8F F0            [24]  180 	mov	b,r7
      000069 12r00r00         [24]  181 	lcall	__gptrget
      00006C FF               [12]  182 	mov	r7,a
      00006D E4               [12]  183 	clr	a
      00006E BF 2D 01         [24]  184 	cjne	r7,#0x2D,00163$
      000071 04               [12]  185 	inc	a
      000072                        186 00163$:
                                    187 ;	_atol.c:44: if (*s == '-' || *s == '+') s++;
      000072 FE               [12]  188 	mov	r6,a
      000073 FD               [12]  189 	mov	r5,a
      000074 70 03            [24]  190 	jnz	00110$
      000076 BF 2B 05         [24]  191 	cjne	r7,#0x2B,00131$
      000079                        192 00110$:
      000079 0C               [12]  193 	inc	r4
      00007A BC 00 01         [24]  194 	cjne	r4,#0x00,00168$
      00007D 0B               [12]  195 	inc	r3
      00007E                        196 00168$:
                                    197 ;	_atol.c:46: while (*s && *s >= '0' && *s <= '9') {
      00007E                        198 00131$:
      00007E A8*00            [24]  199 	mov	r0,_bp
      000080 08               [12]  200 	inc	r0
      000081 A6 04            [24]  201 	mov	@r0,ar4
      000083 08               [12]  202 	inc	r0
      000084 A6 03            [24]  203 	mov	@r0,ar3
      000086 08               [12]  204 	inc	r0
      000087 A6 02            [24]  205 	mov	@r0,ar2
      000089                        206 00115$:
      000089 A8*00            [24]  207 	mov	r0,_bp
      00008B 08               [12]  208 	inc	r0
      00008C 86 82            [24]  209 	mov	dpl,@r0
      00008E 08               [12]  210 	inc	r0
      00008F 86 83            [24]  211 	mov	dph,@r0
      000091 08               [12]  212 	inc	r0
      000092 86 F0            [24]  213 	mov	b,@r0
      000094 12r00r00         [24]  214 	lcall	__gptrget
      000097 FB               [12]  215 	mov	r3,a
      000098 70 03            [24]  216 	jnz	00169$
      00009A 02r01r38         [24]  217 	ljmp	00117$
      00009D                        218 00169$:
      00009D C3               [12]  219 	clr	c
      00009E EB               [12]  220 	mov	a,r3
      00009F 64 80            [12]  221 	xrl	a,#0x80
      0000A1 94 B0            [12]  222 	subb	a,#0xb0
      0000A3 50 03            [24]  223 	jnc	00170$
      0000A5 02r01r38         [24]  224 	ljmp	00117$
      0000A8                        225 00170$:
      0000A8 C3               [12]  226 	clr	c
      0000A9 74 B9            [12]  227 	mov	a,#(0x39 ^ 0x80)
      0000AB 8B F0            [24]  228 	mov	b,r3
      0000AD 63 F0 80         [24]  229 	xrl	b,#0x80
      0000B0 95 F0            [12]  230 	subb	a,b
      0000B2 50 03            [24]  231 	jnc	00171$
      0000B4 02r01r38         [24]  232 	ljmp	00117$
      0000B7                        233 00171$:
                                    234 ;	_atol.c:47: rv = (rv * 10) + (*s - '0');
      0000B7 C0 05            [24]  235 	push	ar5
      0000B9 C0 05            [24]  236 	push	ar5
      0000BB C0 03            [24]  237 	push	ar3
      0000BD E5*00            [12]  238 	mov	a,_bp
      0000BF 24 08            [12]  239 	add	a,#0x08
      0000C1 F8               [12]  240 	mov	r0,a
      0000C2 E6               [12]  241 	mov	a,@r0
      0000C3 C0 E0            [24]  242 	push	acc
      0000C5 08               [12]  243 	inc	r0
      0000C6 E6               [12]  244 	mov	a,@r0
      0000C7 C0 E0            [24]  245 	push	acc
      0000C9 08               [12]  246 	inc	r0
      0000CA E6               [12]  247 	mov	a,@r0
      0000CB C0 E0            [24]  248 	push	acc
      0000CD 08               [12]  249 	inc	r0
      0000CE E6               [12]  250 	mov	a,@r0
      0000CF C0 E0            [24]  251 	push	acc
      0000D1 90 00 0A         [24]  252 	mov	dptr,#(0x0A&0x00ff)
      0000D4 E4               [12]  253 	clr	a
      0000D5 F5 F0            [12]  254 	mov	b,a
      0000D7 12r00r00         [24]  255 	lcall	__mullong
      0000DA C8               [12]  256 	xch	a,r0
      0000DB E5*00            [12]  257 	mov	a,_bp
      0000DD 24 04            [12]  258 	add	a,#0x04
      0000DF C8               [12]  259 	xch	a,r0
      0000E0 A6 82            [24]  260 	mov	@r0,dpl
      0000E2 08               [12]  261 	inc	r0
      0000E3 A6 83            [24]  262 	mov	@r0,dph
      0000E5 08               [12]  263 	inc	r0
      0000E6 A6 F0            [24]  264 	mov	@r0,b
      0000E8 08               [12]  265 	inc	r0
      0000E9 F6               [12]  266 	mov	@r0,a
      0000EA E5 81            [12]  267 	mov	a,sp
      0000EC 24 FC            [12]  268 	add	a,#0xfc
      0000EE F5 81            [12]  269 	mov	sp,a
      0000F0 D0 03            [24]  270 	pop	ar3
      0000F2 D0 05            [24]  271 	pop	ar5
      0000F4 EB               [12]  272 	mov	a,r3
      0000F5 33               [12]  273 	rlc	a
      0000F6 95 E0            [12]  274 	subb	a,acc
      0000F8 FC               [12]  275 	mov	r4,a
      0000F9 EB               [12]  276 	mov	a,r3
      0000FA 24 D0            [12]  277 	add	a,#0xD0
      0000FC FB               [12]  278 	mov	r3,a
      0000FD EC               [12]  279 	mov	a,r4
      0000FE 34 FF            [12]  280 	addc	a,#0xFF
      000100 FC               [12]  281 	mov	r4,a
      000101 33               [12]  282 	rlc	a
      000102 95 E0            [12]  283 	subb	a,acc
      000104 FE               [12]  284 	mov	r6,a
      000105 FF               [12]  285 	mov	r7,a
      000106 E5*00            [12]  286 	mov	a,_bp
      000108 24 04            [12]  287 	add	a,#0x04
      00010A F8               [12]  288 	mov	r0,a
      00010B EB               [12]  289 	mov	a,r3
      00010C 26               [12]  290 	add	a,@r0
      00010D FB               [12]  291 	mov	r3,a
      00010E EC               [12]  292 	mov	a,r4
      00010F 08               [12]  293 	inc	r0
      000110 36               [12]  294 	addc	a,@r0
      000111 FC               [12]  295 	mov	r4,a
      000112 EE               [12]  296 	mov	a,r6
      000113 08               [12]  297 	inc	r0
      000114 36               [12]  298 	addc	a,@r0
      000115 FE               [12]  299 	mov	r6,a
      000116 EF               [12]  300 	mov	a,r7
      000117 08               [12]  301 	inc	r0
      000118 36               [12]  302 	addc	a,@r0
      000119 FF               [12]  303 	mov	r7,a
      00011A E5*00            [12]  304 	mov	a,_bp
      00011C 24 08            [12]  305 	add	a,#0x08
      00011E F8               [12]  306 	mov	r0,a
      00011F A6 03            [24]  307 	mov	@r0,ar3
      000121 08               [12]  308 	inc	r0
      000122 A6 04            [24]  309 	mov	@r0,ar4
      000124 08               [12]  310 	inc	r0
      000125 A6 06            [24]  311 	mov	@r0,ar6
      000127 08               [12]  312 	inc	r0
      000128 A6 07            [24]  313 	mov	@r0,ar7
                                    314 ;	_atol.c:48: s++;
      00012A A8*00            [24]  315 	mov	r0,_bp
      00012C 08               [12]  316 	inc	r0
      00012D 06               [12]  317 	inc	@r0
      00012E B6 00 02         [24]  318 	cjne	@r0,#0x00,00172$
      000131 08               [12]  319 	inc	r0
      000132 06               [12]  320 	inc	@r0
      000133                        321 00172$:
      000133 D0 05            [24]  322 	pop	ar5
      000135 02r00r89         [24]  323 	ljmp	00115$
      000138                        324 00117$:
                                    325 ;	_atol.c:51: return (sign ? -rv : rv);
      000138 ED               [12]  326 	mov	a,r5
      000139 60 17            [24]  327 	jz	00120$
      00013B E5*00            [12]  328 	mov	a,_bp
      00013D 24 08            [12]  329 	add	a,#0x08
      00013F F8               [12]  330 	mov	r0,a
      000140 C3               [12]  331 	clr	c
      000141 E4               [12]  332 	clr	a
      000142 96               [12]  333 	subb	a,@r0
      000143 FC               [12]  334 	mov	r4,a
      000144 08               [12]  335 	inc	r0
      000145 E4               [12]  336 	clr	a
      000146 96               [12]  337 	subb	a,@r0
      000147 FD               [12]  338 	mov	r5,a
      000148 08               [12]  339 	inc	r0
      000149 E4               [12]  340 	clr	a
      00014A 96               [12]  341 	subb	a,@r0
      00014B FE               [12]  342 	mov	r6,a
      00014C 08               [12]  343 	inc	r0
      00014D E4               [12]  344 	clr	a
      00014E 96               [12]  345 	subb	a,@r0
      00014F FF               [12]  346 	mov	r7,a
      000150 80 10            [24]  347 	sjmp	00121$
      000152                        348 00120$:
      000152 E5*00            [12]  349 	mov	a,_bp
      000154 24 08            [12]  350 	add	a,#0x08
      000156 F8               [12]  351 	mov	r0,a
      000157 86 04            [24]  352 	mov	ar4,@r0
      000159 08               [12]  353 	inc	r0
      00015A 86 05            [24]  354 	mov	ar5,@r0
      00015C 08               [12]  355 	inc	r0
      00015D 86 06            [24]  356 	mov	ar6,@r0
      00015F 08               [12]  357 	inc	r0
      000160 86 07            [24]  358 	mov	ar7,@r0
      000162                        359 00121$:
      000162 8C 82            [24]  360 	mov	dpl,r4
      000164 8D 83            [24]  361 	mov	dph,r5
      000166 8E F0            [24]  362 	mov	b,r6
      000168 EF               [12]  363 	mov	a,r7
      000169 85*00 81         [24]  364 	mov	sp,_bp
      00016C D0*00            [24]  365 	pop	_bp
      00016E 22               [24]  366 	ret
                                    367 	.area CSEG    (CODE)
                                    368 	.area CONST   (CODE)
                                    369 	.area XINIT   (CODE)
                                    370 	.area CABS    (ABS,CODE)
