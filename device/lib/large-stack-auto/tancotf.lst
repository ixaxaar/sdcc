                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:09 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module tancotf
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tancotf
                                     13 	.globl _fabsf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'tancotf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscotan                   Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;f                         Allocated to stack - _bp +9
                                    111 ;g                         Allocated to stack - _bp +13
                                    112 ;xn                        Allocated to stack - _bp +17
                                    113 ;xnum                      Allocated to stack - _bp +21
                                    114 ;xden                      Allocated to stack - _bp +25
                                    115 ;n                         Allocated to stack - _bp +29
                                    116 ;sloc0                     Allocated to stack - _bp +5
                                    117 ;------------------------------------------------------------
                                    118 ;	tancotf.c:53: float tancotf(const float x, const bool iscotan)
                                    119 ;	-----------------------------------------
                                    120 ;	 function tancotf
                                    121 ;	-----------------------------------------
      000000                        122 _tancotf:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 85 81*00         [24]  132 	mov	_bp,sp
      000005 C0 82            [24]  133 	push	dpl
      000007 C0 83            [24]  134 	push	dph
      000009 C0 F0            [24]  135 	push	b
      00000B C0 E0            [24]  136 	push	acc
      00000D E5 81            [12]  137 	mov	a,sp
      00000F 24 1A            [12]  138 	add	a,#0x1A
      000011 F5 81            [12]  139 	mov	sp,a
                                    140 ;	tancotf.c:58: if (fabsf(x) > YMAX)
      000013 A8*00            [24]  141 	mov	r0,_bp
      000015 08               [12]  142 	inc	r0
      000016 86 82            [24]  143 	mov	dpl,@r0
      000018 08               [12]  144 	inc	r0
      000019 86 83            [24]  145 	mov	dph,@r0
      00001B 08               [12]  146 	inc	r0
      00001C 86 F0            [24]  147 	mov	b,@r0
      00001E 08               [12]  148 	inc	r0
      00001F E6               [12]  149 	mov	a,@r0
      000020 C0*00            [24]  150 	push	bits
      000022 12r00r00         [24]  151 	lcall	_fabsf
      000025 AA 82            [24]  152 	mov	r2,dpl
      000027 AB 83            [24]  153 	mov	r3,dph
      000029 AE F0            [24]  154 	mov	r6,b
      00002B FF               [12]  155 	mov	r7,a
      00002C D0*00            [24]  156 	pop	bits
      00002E C0*00            [24]  157 	push	bits
      000030 E4               [12]  158 	clr	a
      000031 C0 E0            [24]  159 	push	acc
      000033 74 08            [12]  160 	mov	a,#0x08
      000035 C0 E0            [24]  161 	push	acc
      000037 74 C9            [12]  162 	mov	a,#0xC9
      000039 C0 E0            [24]  163 	push	acc
      00003B 74 45            [12]  164 	mov	a,#0x45
      00003D C0 E0            [24]  165 	push	acc
      00003F 8A 82            [24]  166 	mov	dpl,r2
      000041 8B 83            [24]  167 	mov	dph,r3
      000043 8E F0            [24]  168 	mov	b,r6
      000045 EF               [12]  169 	mov	a,r7
      000046 12r00r00         [24]  170 	lcall	___fsgt
      000049 AF 82            [24]  171 	mov	r7,dpl
      00004B E5 81            [12]  172 	mov	a,sp
      00004D 24 FC            [12]  173 	add	a,#0xfc
      00004F F5 81            [12]  174 	mov	sp,a
      000051 D0*00            [24]  175 	pop	bits
      000053 EF               [12]  176 	mov	a,r7
      000054 60 12            [24]  177 	jz	00102$
                                    178 ;	tancotf.c:60: errno = ERANGE;
      000056 90r00r00         [24]  179 	mov	dptr,#_errno
      000059 74 22            [12]  180 	mov	a,#0x22
      00005B F0               [24]  181 	movx	@dptr,a
      00005C E4               [12]  182 	clr	a
      00005D A3               [24]  183 	inc	dptr
      00005E F0               [24]  184 	movx	@dptr,a
                                    185 ;	tancotf.c:61: return 0.0;
      00005F 90 00 00         [24]  186 	mov	dptr,#(0x00&0x00ff)
      000062 E4               [12]  187 	clr	a
      000063 F5 F0            [12]  188 	mov	b,a
      000065 02r06r04         [24]  189 	ljmp	00115$
      000068                        190 00102$:
                                    191 ;	tancotf.c:65: n=(x*TWO_O_PI+(x>0.0?0.5:-0.5)); /*works for +-x*/
      000068 C0*00            [24]  192 	push	bits
      00006A A8*00            [24]  193 	mov	r0,_bp
      00006C 08               [12]  194 	inc	r0
      00006D E6               [12]  195 	mov	a,@r0
      00006E C0 E0            [24]  196 	push	acc
      000070 08               [12]  197 	inc	r0
      000071 E6               [12]  198 	mov	a,@r0
      000072 C0 E0            [24]  199 	push	acc
      000074 08               [12]  200 	inc	r0
      000075 E6               [12]  201 	mov	a,@r0
      000076 C0 E0            [24]  202 	push	acc
      000078 08               [12]  203 	inc	r0
      000079 E6               [12]  204 	mov	a,@r0
      00007A C0 E0            [24]  205 	push	acc
      00007C 90 F9 83         [24]  206 	mov	dptr,#0xF983
      00007F 75 F0 22         [24]  207 	mov	b,#0x22
      000082 74 3F            [12]  208 	mov	a,#0x3F
      000084 12r00r00         [24]  209 	lcall	___fsmul
      000087 AC 82            [24]  210 	mov	r4,dpl
      000089 AD 83            [24]  211 	mov	r5,dph
      00008B AE F0            [24]  212 	mov	r6,b
      00008D FF               [12]  213 	mov	r7,a
      00008E E5 81            [12]  214 	mov	a,sp
      000090 24 FC            [12]  215 	add	a,#0xfc
      000092 F5 81            [12]  216 	mov	sp,a
      000094 D0*00            [24]  217 	pop	bits
      000096 C0 07            [24]  218 	push	ar7
      000098 C0 06            [24]  219 	push	ar6
      00009A C0 05            [24]  220 	push	ar5
      00009C C0 04            [24]  221 	push	ar4
      00009E C0*00            [24]  222 	push	bits
      0000A0 E4               [12]  223 	clr	a
      0000A1 C0 E0            [24]  224 	push	acc
      0000A3 C0 E0            [24]  225 	push	acc
      0000A5 C0 E0            [24]  226 	push	acc
      0000A7 C0 E0            [24]  227 	push	acc
      0000A9 A8*00            [24]  228 	mov	r0,_bp
      0000AB 08               [12]  229 	inc	r0
      0000AC 86 82            [24]  230 	mov	dpl,@r0
      0000AE 08               [12]  231 	inc	r0
      0000AF 86 83            [24]  232 	mov	dph,@r0
      0000B1 08               [12]  233 	inc	r0
      0000B2 86 F0            [24]  234 	mov	b,@r0
      0000B4 08               [12]  235 	inc	r0
      0000B5 E6               [12]  236 	mov	a,@r0
      0000B6 12r00r00         [24]  237 	lcall	___fsgt
      0000B9 AB 82            [24]  238 	mov	r3,dpl
      0000BB E5 81            [12]  239 	mov	a,sp
      0000BD 24 FC            [12]  240 	add	a,#0xfc
      0000BF F5 81            [12]  241 	mov	sp,a
      0000C1 D0*00            [24]  242 	pop	bits
      0000C3 D0 04            [24]  243 	pop	ar4
      0000C5 D0 05            [24]  244 	pop	ar5
      0000C7 D0 06            [24]  245 	pop	ar6
      0000C9 D0 07            [24]  246 	pop	ar7
      0000CB EB               [12]  247 	mov	a,r3
      0000CC 60 10            [24]  248 	jz	00117$
      0000CE E5*00            [12]  249 	mov	a,_bp
      0000D0 24 05            [12]  250 	add	a,#0x05
      0000D2 F8               [12]  251 	mov	r0,a
      0000D3 E4               [12]  252 	clr	a
      0000D4 F6               [12]  253 	mov	@r0,a
      0000D5 08               [12]  254 	inc	r0
      0000D6 F6               [12]  255 	mov	@r0,a
      0000D7 08               [12]  256 	inc	r0
      0000D8 F6               [12]  257 	mov	@r0,a
      0000D9 08               [12]  258 	inc	r0
      0000DA 76 3F            [12]  259 	mov	@r0,#0x3F
      0000DC 80 0E            [24]  260 	sjmp	00118$
      0000DE                        261 00117$:
      0000DE E5*00            [12]  262 	mov	a,_bp
      0000E0 24 05            [12]  263 	add	a,#0x05
      0000E2 F8               [12]  264 	mov	r0,a
      0000E3 E4               [12]  265 	clr	a
      0000E4 F6               [12]  266 	mov	@r0,a
      0000E5 08               [12]  267 	inc	r0
      0000E6 F6               [12]  268 	mov	@r0,a
      0000E7 08               [12]  269 	inc	r0
      0000E8 F6               [12]  270 	mov	@r0,a
      0000E9 08               [12]  271 	inc	r0
      0000EA 76 BF            [12]  272 	mov	@r0,#0xBF
      0000EC                        273 00118$:
      0000EC C0*00            [24]  274 	push	bits
      0000EE E5*00            [12]  275 	mov	a,_bp
      0000F0 24 05            [12]  276 	add	a,#0x05
      0000F2 F8               [12]  277 	mov	r0,a
      0000F3 E6               [12]  278 	mov	a,@r0
      0000F4 C0 E0            [24]  279 	push	acc
      0000F6 08               [12]  280 	inc	r0
      0000F7 E6               [12]  281 	mov	a,@r0
      0000F8 C0 E0            [24]  282 	push	acc
      0000FA 08               [12]  283 	inc	r0
      0000FB E6               [12]  284 	mov	a,@r0
      0000FC C0 E0            [24]  285 	push	acc
      0000FE 08               [12]  286 	inc	r0
      0000FF E6               [12]  287 	mov	a,@r0
      000100 C0 E0            [24]  288 	push	acc
      000102 8C 82            [24]  289 	mov	dpl,r4
      000104 8D 83            [24]  290 	mov	dph,r5
      000106 8E F0            [24]  291 	mov	b,r6
      000108 EF               [12]  292 	mov	a,r7
      000109 12r00r00         [24]  293 	lcall	___fsadd
      00010C AC 82            [24]  294 	mov	r4,dpl
      00010E AD 83            [24]  295 	mov	r5,dph
      000110 AE F0            [24]  296 	mov	r6,b
      000112 FF               [12]  297 	mov	r7,a
      000113 E5 81            [12]  298 	mov	a,sp
      000115 24 FC            [12]  299 	add	a,#0xfc
      000117 F5 81            [12]  300 	mov	sp,a
      000119 D0*00            [24]  301 	pop	bits
      00011B 8C 82            [24]  302 	mov	dpl,r4
      00011D 8D 83            [24]  303 	mov	dph,r5
      00011F 8E F0            [24]  304 	mov	b,r6
      000121 EF               [12]  305 	mov	a,r7
      000122 C0*00            [24]  306 	push	bits
      000124 12r00r00         [24]  307 	lcall	___fs2sint
      000127 AE 82            [24]  308 	mov	r6,dpl
      000129 AF 83            [24]  309 	mov	r7,dph
      00012B D0*00            [24]  310 	pop	bits
      00012D E5*00            [12]  311 	mov	a,_bp
      00012F 24 1D            [12]  312 	add	a,#0x1d
      000131 F8               [12]  313 	mov	r0,a
      000132 A6 06            [24]  314 	mov	@r0,ar6
      000134 08               [12]  315 	inc	r0
      000135 A6 07            [24]  316 	mov	@r0,ar7
                                    317 ;	tancotf.c:66: xn=n;
      000137 E5*00            [12]  318 	mov	a,_bp
      000139 24 1D            [12]  319 	add	a,#0x1d
      00013B F8               [12]  320 	mov	r0,a
      00013C 86 82            [24]  321 	mov	dpl,@r0
      00013E 08               [12]  322 	inc	r0
      00013F 86 83            [24]  323 	mov	dph,@r0
      000141 C0*00            [24]  324 	push	bits
      000143 12r00r00         [24]  325 	lcall	___sint2fs
      000146 AA 82            [24]  326 	mov	r2,dpl
      000148 AB 83            [24]  327 	mov	r3,dph
      00014A AC F0            [24]  328 	mov	r4,b
      00014C FD               [12]  329 	mov	r5,a
      00014D D0*00            [24]  330 	pop	bits
      00014F E5*00            [12]  331 	mov	a,_bp
      000151 24 11            [12]  332 	add	a,#0x11
      000153 F8               [12]  333 	mov	r0,a
      000154 A6 02            [24]  334 	mov	@r0,ar2
      000156 08               [12]  335 	inc	r0
      000157 A6 03            [24]  336 	mov	@r0,ar3
      000159 08               [12]  337 	inc	r0
      00015A A6 04            [24]  338 	mov	@r0,ar4
      00015C 08               [12]  339 	inc	r0
      00015D A6 05            [24]  340 	mov	@r0,ar5
                                    341 ;	tancotf.c:68: xnum=(int)x;
      00015F A8*00            [24]  342 	mov	r0,_bp
      000161 08               [12]  343 	inc	r0
      000162 86 82            [24]  344 	mov	dpl,@r0
      000164 08               [12]  345 	inc	r0
      000165 86 83            [24]  346 	mov	dph,@r0
      000167 08               [12]  347 	inc	r0
      000168 86 F0            [24]  348 	mov	b,@r0
      00016A 08               [12]  349 	inc	r0
      00016B E6               [12]  350 	mov	a,@r0
      00016C C0*00            [24]  351 	push	bits
      00016E 12r00r00         [24]  352 	lcall	___fs2sint
      000171 AE 82            [24]  353 	mov	r6,dpl
      000173 AF 83            [24]  354 	mov	r7,dph
      000175 D0*00            [24]  355 	pop	bits
      000177 8E 82            [24]  356 	mov	dpl,r6
      000179 8F 83            [24]  357 	mov	dph,r7
      00017B C0*00            [24]  358 	push	bits
      00017D 12r00r00         [24]  359 	lcall	___sint2fs
      000180 AF 82            [24]  360 	mov	r7,dpl
      000182 AE 83            [24]  361 	mov	r6,dph
      000184 AD F0            [24]  362 	mov	r5,b
      000186 FC               [12]  363 	mov	r4,a
      000187 D0*00            [24]  364 	pop	bits
      000189 E5*00            [12]  365 	mov	a,_bp
      00018B 24 15            [12]  366 	add	a,#0x15
      00018D F8               [12]  367 	mov	r0,a
      00018E A6 07            [24]  368 	mov	@r0,ar7
      000190 08               [12]  369 	inc	r0
      000191 A6 06            [24]  370 	mov	@r0,ar6
      000193 08               [12]  371 	inc	r0
      000194 A6 05            [24]  372 	mov	@r0,ar5
      000196 08               [12]  373 	inc	r0
      000197 A6 04            [24]  374 	mov	@r0,ar4
                                    375 ;	tancotf.c:69: xden=x-xnum;
      000199 C0*00            [24]  376 	push	bits
      00019B E5*00            [12]  377 	mov	a,_bp
      00019D 24 15            [12]  378 	add	a,#0x15
      00019F F8               [12]  379 	mov	r0,a
      0001A0 E6               [12]  380 	mov	a,@r0
      0001A1 C0 E0            [24]  381 	push	acc
      0001A3 08               [12]  382 	inc	r0
      0001A4 E6               [12]  383 	mov	a,@r0
      0001A5 C0 E0            [24]  384 	push	acc
      0001A7 08               [12]  385 	inc	r0
      0001A8 E6               [12]  386 	mov	a,@r0
      0001A9 C0 E0            [24]  387 	push	acc
      0001AB 08               [12]  388 	inc	r0
      0001AC E6               [12]  389 	mov	a,@r0
      0001AD C0 E0            [24]  390 	push	acc
      0001AF A8*00            [24]  391 	mov	r0,_bp
      0001B1 08               [12]  392 	inc	r0
      0001B2 86 82            [24]  393 	mov	dpl,@r0
      0001B4 08               [12]  394 	inc	r0
      0001B5 86 83            [24]  395 	mov	dph,@r0
      0001B7 08               [12]  396 	inc	r0
      0001B8 86 F0            [24]  397 	mov	b,@r0
      0001BA 08               [12]  398 	inc	r0
      0001BB E6               [12]  399 	mov	a,@r0
      0001BC 12r00r00         [24]  400 	lcall	___fssub
      0001BF AF 82            [24]  401 	mov	r7,dpl
      0001C1 AE 83            [24]  402 	mov	r6,dph
      0001C3 AD F0            [24]  403 	mov	r5,b
      0001C5 FC               [12]  404 	mov	r4,a
      0001C6 E5 81            [12]  405 	mov	a,sp
      0001C8 24 FC            [12]  406 	add	a,#0xfc
      0001CA F5 81            [12]  407 	mov	sp,a
      0001CC D0*00            [24]  408 	pop	bits
      0001CE E5*00            [12]  409 	mov	a,_bp
      0001D0 24 19            [12]  410 	add	a,#0x19
      0001D2 F8               [12]  411 	mov	r0,a
      0001D3 A6 07            [24]  412 	mov	@r0,ar7
      0001D5 08               [12]  413 	inc	r0
      0001D6 A6 06            [24]  414 	mov	@r0,ar6
      0001D8 08               [12]  415 	inc	r0
      0001D9 A6 05            [24]  416 	mov	@r0,ar5
      0001DB 08               [12]  417 	inc	r0
      0001DC A6 04            [24]  418 	mov	@r0,ar4
                                    419 ;	tancotf.c:70: f=((xnum-xn*C1)+xden)-xn*C2;
      0001DE C0*00            [24]  420 	push	bits
      0001E0 E5*00            [12]  421 	mov	a,_bp
      0001E2 24 11            [12]  422 	add	a,#0x11
      0001E4 F8               [12]  423 	mov	r0,a
      0001E5 E6               [12]  424 	mov	a,@r0
      0001E6 C0 E0            [24]  425 	push	acc
      0001E8 08               [12]  426 	inc	r0
      0001E9 E6               [12]  427 	mov	a,@r0
      0001EA C0 E0            [24]  428 	push	acc
      0001EC 08               [12]  429 	inc	r0
      0001ED E6               [12]  430 	mov	a,@r0
      0001EE C0 E0            [24]  431 	push	acc
      0001F0 08               [12]  432 	inc	r0
      0001F1 E6               [12]  433 	mov	a,@r0
      0001F2 C0 E0            [24]  434 	push	acc
      0001F4 90 00 00         [24]  435 	mov	dptr,#0x0000
      0001F7 75 F0 C9         [24]  436 	mov	b,#0xC9
      0001FA 74 3F            [12]  437 	mov	a,#0x3F
      0001FC 12r00r00         [24]  438 	lcall	___fsmul
      0001FF AC 82            [24]  439 	mov	r4,dpl
      000201 AD 83            [24]  440 	mov	r5,dph
      000203 AE F0            [24]  441 	mov	r6,b
      000205 FF               [12]  442 	mov	r7,a
      000206 E5 81            [12]  443 	mov	a,sp
      000208 24 FC            [12]  444 	add	a,#0xfc
      00020A F5 81            [12]  445 	mov	sp,a
      00020C D0*00            [24]  446 	pop	bits
      00020E C0*00            [24]  447 	push	bits
      000210 C0 04            [24]  448 	push	ar4
      000212 C0 05            [24]  449 	push	ar5
      000214 C0 06            [24]  450 	push	ar6
      000216 C0 07            [24]  451 	push	ar7
      000218 E5*00            [12]  452 	mov	a,_bp
      00021A 24 15            [12]  453 	add	a,#0x15
      00021C F8               [12]  454 	mov	r0,a
      00021D 86 82            [24]  455 	mov	dpl,@r0
      00021F 08               [12]  456 	inc	r0
      000220 86 83            [24]  457 	mov	dph,@r0
      000222 08               [12]  458 	inc	r0
      000223 86 F0            [24]  459 	mov	b,@r0
      000225 08               [12]  460 	inc	r0
      000226 E6               [12]  461 	mov	a,@r0
      000227 12r00r00         [24]  462 	lcall	___fssub
      00022A AC 82            [24]  463 	mov	r4,dpl
      00022C AD 83            [24]  464 	mov	r5,dph
      00022E AE F0            [24]  465 	mov	r6,b
      000230 FF               [12]  466 	mov	r7,a
      000231 E5 81            [12]  467 	mov	a,sp
      000233 24 FC            [12]  468 	add	a,#0xfc
      000235 F5 81            [12]  469 	mov	sp,a
      000237 D0*00            [24]  470 	pop	bits
      000239 C0*00            [24]  471 	push	bits
      00023B E5*00            [12]  472 	mov	a,_bp
      00023D 24 19            [12]  473 	add	a,#0x19
      00023F F8               [12]  474 	mov	r0,a
      000240 E6               [12]  475 	mov	a,@r0
      000241 C0 E0            [24]  476 	push	acc
      000243 08               [12]  477 	inc	r0
      000244 E6               [12]  478 	mov	a,@r0
      000245 C0 E0            [24]  479 	push	acc
      000247 08               [12]  480 	inc	r0
      000248 E6               [12]  481 	mov	a,@r0
      000249 C0 E0            [24]  482 	push	acc
      00024B 08               [12]  483 	inc	r0
      00024C E6               [12]  484 	mov	a,@r0
      00024D C0 E0            [24]  485 	push	acc
      00024F 8C 82            [24]  486 	mov	dpl,r4
      000251 8D 83            [24]  487 	mov	dph,r5
      000253 8E F0            [24]  488 	mov	b,r6
      000255 EF               [12]  489 	mov	a,r7
      000256 12r00r00         [24]  490 	lcall	___fsadd
      000259 C8               [12]  491 	xch	a,r0
      00025A E5*00            [12]  492 	mov	a,_bp
      00025C 24 05            [12]  493 	add	a,#0x05
      00025E C8               [12]  494 	xch	a,r0
      00025F A6 82            [24]  495 	mov	@r0,dpl
      000261 08               [12]  496 	inc	r0
      000262 A6 83            [24]  497 	mov	@r0,dph
      000264 08               [12]  498 	inc	r0
      000265 A6 F0            [24]  499 	mov	@r0,b
      000267 08               [12]  500 	inc	r0
      000268 F6               [12]  501 	mov	@r0,a
      000269 E5 81            [12]  502 	mov	a,sp
      00026B 24 FC            [12]  503 	add	a,#0xfc
      00026D F5 81            [12]  504 	mov	sp,a
      00026F D0*00            [24]  505 	pop	bits
      000271 C0*00            [24]  506 	push	bits
      000273 E5*00            [12]  507 	mov	a,_bp
      000275 24 11            [12]  508 	add	a,#0x11
      000277 F8               [12]  509 	mov	r0,a
      000278 E6               [12]  510 	mov	a,@r0
      000279 C0 E0            [24]  511 	push	acc
      00027B 08               [12]  512 	inc	r0
      00027C E6               [12]  513 	mov	a,@r0
      00027D C0 E0            [24]  514 	push	acc
      00027F 08               [12]  515 	inc	r0
      000280 E6               [12]  516 	mov	a,@r0
      000281 C0 E0            [24]  517 	push	acc
      000283 08               [12]  518 	inc	r0
      000284 E6               [12]  519 	mov	a,@r0
      000285 C0 E0            [24]  520 	push	acc
      000287 90 AA 22         [24]  521 	mov	dptr,#0xAA22
      00028A 75 F0 FD         [24]  522 	mov	b,#0xFD
      00028D 74 39            [12]  523 	mov	a,#0x39
      00028F 12r00r00         [24]  524 	lcall	___fsmul
      000292 AA 82            [24]  525 	mov	r2,dpl
      000294 AB 83            [24]  526 	mov	r3,dph
      000296 AE F0            [24]  527 	mov	r6,b
      000298 FF               [12]  528 	mov	r7,a
      000299 E5 81            [12]  529 	mov	a,sp
      00029B 24 FC            [12]  530 	add	a,#0xfc
      00029D F5 81            [12]  531 	mov	sp,a
      00029F D0*00            [24]  532 	pop	bits
      0002A1 C0*00            [24]  533 	push	bits
      0002A3 C0 02            [24]  534 	push	ar2
      0002A5 C0 03            [24]  535 	push	ar3
      0002A7 C0 06            [24]  536 	push	ar6
      0002A9 C0 07            [24]  537 	push	ar7
      0002AB E5*00            [12]  538 	mov	a,_bp
      0002AD 24 05            [12]  539 	add	a,#0x05
      0002AF F8               [12]  540 	mov	r0,a
      0002B0 86 82            [24]  541 	mov	dpl,@r0
      0002B2 08               [12]  542 	inc	r0
      0002B3 86 83            [24]  543 	mov	dph,@r0
      0002B5 08               [12]  544 	inc	r0
      0002B6 86 F0            [24]  545 	mov	b,@r0
      0002B8 08               [12]  546 	inc	r0
      0002B9 E6               [12]  547 	mov	a,@r0
      0002BA 12r00r00         [24]  548 	lcall	___fssub
      0002BD AC 82            [24]  549 	mov	r4,dpl
      0002BF AD 83            [24]  550 	mov	r5,dph
      0002C1 AE F0            [24]  551 	mov	r6,b
      0002C3 FF               [12]  552 	mov	r7,a
      0002C4 E5 81            [12]  553 	mov	a,sp
      0002C6 24 FC            [12]  554 	add	a,#0xfc
      0002C8 F5 81            [12]  555 	mov	sp,a
      0002CA D0*00            [24]  556 	pop	bits
      0002CC E5*00            [12]  557 	mov	a,_bp
      0002CE 24 09            [12]  558 	add	a,#0x09
      0002D0 F8               [12]  559 	mov	r0,a
      0002D1 A6 04            [24]  560 	mov	@r0,ar4
      0002D3 08               [12]  561 	inc	r0
      0002D4 A6 05            [24]  562 	mov	@r0,ar5
      0002D6 08               [12]  563 	inc	r0
      0002D7 A6 06            [24]  564 	mov	@r0,ar6
      0002D9 08               [12]  565 	inc	r0
      0002DA A6 07            [24]  566 	mov	@r0,ar7
                                    567 ;	tancotf.c:72: if (fabsf(f) < EPS)
      0002DC E5*00            [12]  568 	mov	a,_bp
      0002DE 24 09            [12]  569 	add	a,#0x09
      0002E0 F8               [12]  570 	mov	r0,a
      0002E1 86 82            [24]  571 	mov	dpl,@r0
      0002E3 08               [12]  572 	inc	r0
      0002E4 86 83            [24]  573 	mov	dph,@r0
      0002E6 08               [12]  574 	inc	r0
      0002E7 86 F0            [24]  575 	mov	b,@r0
      0002E9 08               [12]  576 	inc	r0
      0002EA E6               [12]  577 	mov	a,@r0
      0002EB C0*00            [24]  578 	push	bits
      0002ED 12r00r00         [24]  579 	lcall	_fabsf
      0002F0 AA 82            [24]  580 	mov	r2,dpl
      0002F2 AB 83            [24]  581 	mov	r3,dph
      0002F4 AE F0            [24]  582 	mov	r6,b
      0002F6 FF               [12]  583 	mov	r7,a
      0002F7 D0*00            [24]  584 	pop	bits
      0002F9 C0*00            [24]  585 	push	bits
      0002FB E4               [12]  586 	clr	a
      0002FC C0 E0            [24]  587 	push	acc
      0002FE C0 E0            [24]  588 	push	acc
      000300 74 80            [12]  589 	mov	a,#0x80
      000302 C0 E0            [24]  590 	push	acc
      000304 74 39            [12]  591 	mov	a,#0x39
      000306 C0 E0            [24]  592 	push	acc
      000308 8A 82            [24]  593 	mov	dpl,r2
      00030A 8B 83            [24]  594 	mov	dph,r3
      00030C 8E F0            [24]  595 	mov	b,r6
      00030E EF               [12]  596 	mov	a,r7
      00030F 12r00r00         [24]  597 	lcall	___fslt
      000312 AF 82            [24]  598 	mov	r7,dpl
      000314 E5 81            [12]  599 	mov	a,sp
      000316 24 FC            [12]  600 	add	a,#0xfc
      000318 F5 81            [12]  601 	mov	sp,a
      00031A D0*00            [24]  602 	pop	bits
      00031C EF               [12]  603 	mov	a,r7
      00031D 60 2A            [24]  604 	jz	00104$
                                    605 ;	tancotf.c:74: xnum = f;
      00031F E5*00            [12]  606 	mov	a,_bp
      000321 24 09            [12]  607 	add	a,#0x09
      000323 F8               [12]  608 	mov	r0,a
      000324 E5*00            [12]  609 	mov	a,_bp
      000326 24 15            [12]  610 	add	a,#0x15
      000328 F9               [12]  611 	mov	r1,a
      000329 E6               [12]  612 	mov	a,@r0
      00032A F7               [12]  613 	mov	@r1,a
      00032B 08               [12]  614 	inc	r0
      00032C 09               [12]  615 	inc	r1
      00032D E6               [12]  616 	mov	a,@r0
      00032E F7               [12]  617 	mov	@r1,a
      00032F 08               [12]  618 	inc	r0
      000330 09               [12]  619 	inc	r1
      000331 E6               [12]  620 	mov	a,@r0
      000332 F7               [12]  621 	mov	@r1,a
      000333 08               [12]  622 	inc	r0
      000334 09               [12]  623 	inc	r1
      000335 E6               [12]  624 	mov	a,@r0
      000336 F7               [12]  625 	mov	@r1,a
                                    626 ;	tancotf.c:75: xden = 1.0;
      000337 E5*00            [12]  627 	mov	a,_bp
      000339 24 19            [12]  628 	add	a,#0x19
      00033B F8               [12]  629 	mov	r0,a
      00033C E4               [12]  630 	clr	a
      00033D F6               [12]  631 	mov	@r0,a
      00033E 08               [12]  632 	inc	r0
      00033F F6               [12]  633 	mov	@r0,a
      000340 08               [12]  634 	inc	r0
      000341 76 80            [12]  635 	mov	@r0,#0x80
      000343 08               [12]  636 	inc	r0
      000344 76 3F            [12]  637 	mov	@r0,#0x3F
      000346 02r04rEF         [24]  638 	ljmp	00105$
      000349                        639 00104$:
                                    640 ;	tancotf.c:79: g = f*f;
      000349 C0*00            [24]  641 	push	bits
      00034B E5*00            [12]  642 	mov	a,_bp
      00034D 24 09            [12]  643 	add	a,#0x09
      00034F F8               [12]  644 	mov	r0,a
      000350 E6               [12]  645 	mov	a,@r0
      000351 C0 E0            [24]  646 	push	acc
      000353 08               [12]  647 	inc	r0
      000354 E6               [12]  648 	mov	a,@r0
      000355 C0 E0            [24]  649 	push	acc
      000357 08               [12]  650 	inc	r0
      000358 E6               [12]  651 	mov	a,@r0
      000359 C0 E0            [24]  652 	push	acc
      00035B 08               [12]  653 	inc	r0
      00035C E6               [12]  654 	mov	a,@r0
      00035D C0 E0            [24]  655 	push	acc
      00035F E5*00            [12]  656 	mov	a,_bp
      000361 24 09            [12]  657 	add	a,#0x09
      000363 F8               [12]  658 	mov	r0,a
      000364 86 82            [24]  659 	mov	dpl,@r0
      000366 08               [12]  660 	inc	r0
      000367 86 83            [24]  661 	mov	dph,@r0
      000369 08               [12]  662 	inc	r0
      00036A 86 F0            [24]  663 	mov	b,@r0
      00036C 08               [12]  664 	inc	r0
      00036D E6               [12]  665 	mov	a,@r0
      00036E 12r00r00         [24]  666 	lcall	___fsmul
      000371 AC 82            [24]  667 	mov	r4,dpl
      000373 AD 83            [24]  668 	mov	r5,dph
      000375 AE F0            [24]  669 	mov	r6,b
      000377 FF               [12]  670 	mov	r7,a
      000378 E5 81            [12]  671 	mov	a,sp
      00037A 24 FC            [12]  672 	add	a,#0xfc
      00037C F5 81            [12]  673 	mov	sp,a
      00037E D0*00            [24]  674 	pop	bits
      000380 E5*00            [12]  675 	mov	a,_bp
      000382 24 0D            [12]  676 	add	a,#0x0d
      000384 F8               [12]  677 	mov	r0,a
      000385 A6 04            [24]  678 	mov	@r0,ar4
      000387 08               [12]  679 	inc	r0
      000388 A6 05            [24]  680 	mov	@r0,ar5
      00038A 08               [12]  681 	inc	r0
      00038B A6 06            [24]  682 	mov	@r0,ar6
      00038D 08               [12]  683 	inc	r0
      00038E A6 07            [24]  684 	mov	@r0,ar7
                                    685 ;	tancotf.c:80: xnum = P(f,g);
      000390 C0*00            [24]  686 	push	bits
      000392 E5*00            [12]  687 	mov	a,_bp
      000394 24 0D            [12]  688 	add	a,#0x0d
      000396 F8               [12]  689 	mov	r0,a
      000397 E6               [12]  690 	mov	a,@r0
      000398 C0 E0            [24]  691 	push	acc
      00039A 08               [12]  692 	inc	r0
      00039B E6               [12]  693 	mov	a,@r0
      00039C C0 E0            [24]  694 	push	acc
      00039E 08               [12]  695 	inc	r0
      00039F E6               [12]  696 	mov	a,@r0
      0003A0 C0 E0            [24]  697 	push	acc
      0003A2 08               [12]  698 	inc	r0
      0003A3 E6               [12]  699 	mov	a,@r0
      0003A4 C0 E0            [24]  700 	push	acc
      0003A6 90 33 B8         [24]  701 	mov	dptr,#0x33B8
      0003A9 75 F0 C4         [24]  702 	mov	b,#0xC4
      0003AC 74 BD            [12]  703 	mov	a,#0xBD
      0003AE 12r00r00         [24]  704 	lcall	___fsmul
      0003B1 AA 82            [24]  705 	mov	r2,dpl
      0003B3 AB 83            [24]  706 	mov	r3,dph
      0003B5 AE F0            [24]  707 	mov	r6,b
      0003B7 FF               [12]  708 	mov	r7,a
      0003B8 E5 81            [12]  709 	mov	a,sp
      0003BA 24 FC            [12]  710 	add	a,#0xfc
      0003BC F5 81            [12]  711 	mov	sp,a
      0003BE D0*00            [24]  712 	pop	bits
      0003C0 C0*00            [24]  713 	push	bits
      0003C2 E5*00            [12]  714 	mov	a,_bp
      0003C4 24 09            [12]  715 	add	a,#0x09
      0003C6 F8               [12]  716 	mov	r0,a
      0003C7 E6               [12]  717 	mov	a,@r0
      0003C8 C0 E0            [24]  718 	push	acc
      0003CA 08               [12]  719 	inc	r0
      0003CB E6               [12]  720 	mov	a,@r0
      0003CC C0 E0            [24]  721 	push	acc
      0003CE 08               [12]  722 	inc	r0
      0003CF E6               [12]  723 	mov	a,@r0
      0003D0 C0 E0            [24]  724 	push	acc
      0003D2 08               [12]  725 	inc	r0
      0003D3 E6               [12]  726 	mov	a,@r0
      0003D4 C0 E0            [24]  727 	push	acc
      0003D6 8A 82            [24]  728 	mov	dpl,r2
      0003D8 8B 83            [24]  729 	mov	dph,r3
      0003DA 8E F0            [24]  730 	mov	b,r6
      0003DC EF               [12]  731 	mov	a,r7
      0003DD 12r00r00         [24]  732 	lcall	___fsmul
      0003E0 AC 82            [24]  733 	mov	r4,dpl
      0003E2 AD 83            [24]  734 	mov	r5,dph
      0003E4 AE F0            [24]  735 	mov	r6,b
      0003E6 FF               [12]  736 	mov	r7,a
      0003E7 E5 81            [12]  737 	mov	a,sp
      0003E9 24 FC            [12]  738 	add	a,#0xfc
      0003EB F5 81            [12]  739 	mov	sp,a
      0003ED D0*00            [24]  740 	pop	bits
      0003EF C0*00            [24]  741 	push	bits
      0003F1 E5*00            [12]  742 	mov	a,_bp
      0003F3 24 09            [12]  743 	add	a,#0x09
      0003F5 F8               [12]  744 	mov	r0,a
      0003F6 E6               [12]  745 	mov	a,@r0
      0003F7 C0 E0            [24]  746 	push	acc
      0003F9 08               [12]  747 	inc	r0
      0003FA E6               [12]  748 	mov	a,@r0
      0003FB C0 E0            [24]  749 	push	acc
      0003FD 08               [12]  750 	inc	r0
      0003FE E6               [12]  751 	mov	a,@r0
      0003FF C0 E0            [24]  752 	push	acc
      000401 08               [12]  753 	inc	r0
      000402 E6               [12]  754 	mov	a,@r0
      000403 C0 E0            [24]  755 	push	acc
      000405 8C 82            [24]  756 	mov	dpl,r4
      000407 8D 83            [24]  757 	mov	dph,r5
      000409 8E F0            [24]  758 	mov	b,r6
      00040B EF               [12]  759 	mov	a,r7
      00040C 12r00r00         [24]  760 	lcall	___fsadd
      00040F AC 82            [24]  761 	mov	r4,dpl
      000411 AD 83            [24]  762 	mov	r5,dph
      000413 AE F0            [24]  763 	mov	r6,b
      000415 FF               [12]  764 	mov	r7,a
      000416 E5 81            [12]  765 	mov	a,sp
      000418 24 FC            [12]  766 	add	a,#0xfc
      00041A F5 81            [12]  767 	mov	sp,a
      00041C D0*00            [24]  768 	pop	bits
      00041E E5*00            [12]  769 	mov	a,_bp
      000420 24 15            [12]  770 	add	a,#0x15
      000422 F8               [12]  771 	mov	r0,a
      000423 A6 04            [24]  772 	mov	@r0,ar4
      000425 08               [12]  773 	inc	r0
      000426 A6 05            [24]  774 	mov	@r0,ar5
      000428 08               [12]  775 	inc	r0
      000429 A6 06            [24]  776 	mov	@r0,ar6
      00042B 08               [12]  777 	inc	r0
      00042C A6 07            [24]  778 	mov	@r0,ar7
                                    779 ;	tancotf.c:81: xden = Q(g);
      00042E C0*00            [24]  780 	push	bits
      000430 E5*00            [12]  781 	mov	a,_bp
      000432 24 0D            [12]  782 	add	a,#0x0d
      000434 F8               [12]  783 	mov	r0,a
      000435 E6               [12]  784 	mov	a,@r0
      000436 C0 E0            [24]  785 	push	acc
      000438 08               [12]  786 	inc	r0
      000439 E6               [12]  787 	mov	a,@r0
      00043A C0 E0            [24]  788 	push	acc
      00043C 08               [12]  789 	inc	r0
      00043D E6               [12]  790 	mov	a,@r0
      00043E C0 E0            [24]  791 	push	acc
      000440 08               [12]  792 	inc	r0
      000441 E6               [12]  793 	mov	a,@r0
      000442 C0 E0            [24]  794 	push	acc
      000444 90 33 75         [24]  795 	mov	dptr,#0x3375
      000447 75 F0 1F         [24]  796 	mov	b,#0x1F
      00044A 74 3C            [12]  797 	mov	a,#0x3C
      00044C 12r00r00         [24]  798 	lcall	___fsmul
      00044F AC 82            [24]  799 	mov	r4,dpl
      000451 AD 83            [24]  800 	mov	r5,dph
      000453 AE F0            [24]  801 	mov	r6,b
      000455 FF               [12]  802 	mov	r7,a
      000456 E5 81            [12]  803 	mov	a,sp
      000458 24 FC            [12]  804 	add	a,#0xfc
      00045A F5 81            [12]  805 	mov	sp,a
      00045C D0*00            [24]  806 	pop	bits
      00045E C0*00            [24]  807 	push	bits
      000460 74 AF            [12]  808 	mov	a,#0xAF
      000462 C0 E0            [24]  809 	push	acc
      000464 74 B7            [12]  810 	mov	a,#0xB7
      000466 C0 E0            [24]  811 	push	acc
      000468 03               [12]  812 	rr	a
      000469 C0 E0            [24]  813 	push	acc
      00046B 74 BE            [12]  814 	mov	a,#0xBE
      00046D C0 E0            [24]  815 	push	acc
      00046F 8C 82            [24]  816 	mov	dpl,r4
      000471 8D 83            [24]  817 	mov	dph,r5
      000473 8E F0            [24]  818 	mov	b,r6
      000475 EF               [12]  819 	mov	a,r7
      000476 12r00r00         [24]  820 	lcall	___fsadd
      000479 AC 82            [24]  821 	mov	r4,dpl
      00047B AD 83            [24]  822 	mov	r5,dph
      00047D AE F0            [24]  823 	mov	r6,b
      00047F FF               [12]  824 	mov	r7,a
      000480 E5 81            [12]  825 	mov	a,sp
      000482 24 FC            [12]  826 	add	a,#0xfc
      000484 F5 81            [12]  827 	mov	sp,a
      000486 D0*00            [24]  828 	pop	bits
      000488 C0*00            [24]  829 	push	bits
      00048A E5*00            [12]  830 	mov	a,_bp
      00048C 24 0D            [12]  831 	add	a,#0x0d
      00048E F8               [12]  832 	mov	r0,a
      00048F E6               [12]  833 	mov	a,@r0
      000490 C0 E0            [24]  834 	push	acc
      000492 08               [12]  835 	inc	r0
      000493 E6               [12]  836 	mov	a,@r0
      000494 C0 E0            [24]  837 	push	acc
      000496 08               [12]  838 	inc	r0
      000497 E6               [12]  839 	mov	a,@r0
      000498 C0 E0            [24]  840 	push	acc
      00049A 08               [12]  841 	inc	r0
      00049B E6               [12]  842 	mov	a,@r0
      00049C C0 E0            [24]  843 	push	acc
      00049E 8C 82            [24]  844 	mov	dpl,r4
      0004A0 8D 83            [24]  845 	mov	dph,r5
      0004A2 8E F0            [24]  846 	mov	b,r6
      0004A4 EF               [12]  847 	mov	a,r7
      0004A5 12r00r00         [24]  848 	lcall	___fsmul
      0004A8 AC 82            [24]  849 	mov	r4,dpl
      0004AA AD 83            [24]  850 	mov	r5,dph
      0004AC AE F0            [24]  851 	mov	r6,b
      0004AE FF               [12]  852 	mov	r7,a
      0004AF E5 81            [12]  853 	mov	a,sp
      0004B1 24 FC            [12]  854 	add	a,#0xfc
      0004B3 F5 81            [12]  855 	mov	sp,a
      0004B5 D0*00            [24]  856 	pop	bits
      0004B7 C0*00            [24]  857 	push	bits
      0004B9 E4               [12]  858 	clr	a
      0004BA C0 E0            [24]  859 	push	acc
      0004BC C0 E0            [24]  860 	push	acc
      0004BE 74 80            [12]  861 	mov	a,#0x80
      0004C0 C0 E0            [24]  862 	push	acc
      0004C2 74 3F            [12]  863 	mov	a,#0x3F
      0004C4 C0 E0            [24]  864 	push	acc
      0004C6 8C 82            [24]  865 	mov	dpl,r4
      0004C8 8D 83            [24]  866 	mov	dph,r5
      0004CA 8E F0            [24]  867 	mov	b,r6
      0004CC EF               [12]  868 	mov	a,r7
      0004CD 12r00r00         [24]  869 	lcall	___fsadd
      0004D0 AC 82            [24]  870 	mov	r4,dpl
      0004D2 AD 83            [24]  871 	mov	r5,dph
      0004D4 AE F0            [24]  872 	mov	r6,b
      0004D6 FF               [12]  873 	mov	r7,a
      0004D7 E5 81            [12]  874 	mov	a,sp
      0004D9 24 FC            [12]  875 	add	a,#0xfc
      0004DB F5 81            [12]  876 	mov	sp,a
      0004DD D0*00            [24]  877 	pop	bits
      0004DF E5*00            [12]  878 	mov	a,_bp
      0004E1 24 19            [12]  879 	add	a,#0x19
      0004E3 F8               [12]  880 	mov	r0,a
      0004E4 A6 04            [24]  881 	mov	@r0,ar4
      0004E6 08               [12]  882 	inc	r0
      0004E7 A6 05            [24]  883 	mov	@r0,ar5
      0004E9 08               [12]  884 	inc	r0
      0004EA A6 06            [24]  885 	mov	@r0,ar6
      0004EC 08               [12]  886 	inc	r0
      0004ED A6 07            [24]  887 	mov	@r0,ar7
      0004EF                        888 00105$:
                                    889 ;	tancotf.c:84: if(n&1)
      0004EF E5*00            [12]  890 	mov	a,_bp
      0004F1 24 1D            [12]  891 	add	a,#0x1d
      0004F3 F8               [12]  892 	mov	r0,a
      0004F4 E6               [12]  893 	mov	a,@r0
      0004F5 20 E0 03         [24]  894 	jb	acc.0,00140$
      0004F8 02r05r8B         [24]  895 	ljmp	00113$
      0004FB                        896 00140$:
                                    897 ;	tancotf.c:87: if(iscotan) return (-xnum/xden);
      0004FB 30*00 47         [24]  898 	jnb	b0,00107$
      0004FE E5*00            [12]  899 	mov	a,_bp
      000500 24 15            [12]  900 	add	a,#0x15
      000502 F8               [12]  901 	mov	r0,a
      000503 86 04            [24]  902 	mov	ar4,@r0
      000505 08               [12]  903 	inc	r0
      000506 86 05            [24]  904 	mov	ar5,@r0
      000508 08               [12]  905 	inc	r0
      000509 86 06            [24]  906 	mov	ar6,@r0
      00050B 08               [12]  907 	inc	r0
      00050C E6               [12]  908 	mov	a,@r0
      00050D B2 E7            [12]  909 	cpl	acc.7
      00050F FF               [12]  910 	mov	r7,a
      000510 E5*00            [12]  911 	mov	a,_bp
      000512 24 19            [12]  912 	add	a,#0x19
      000514 F8               [12]  913 	mov	r0,a
      000515 E6               [12]  914 	mov	a,@r0
      000516 C0 E0            [24]  915 	push	acc
      000518 08               [12]  916 	inc	r0
      000519 E6               [12]  917 	mov	a,@r0
      00051A C0 E0            [24]  918 	push	acc
      00051C 08               [12]  919 	inc	r0
      00051D E6               [12]  920 	mov	a,@r0
      00051E C0 E0            [24]  921 	push	acc
      000520 08               [12]  922 	inc	r0
      000521 E6               [12]  923 	mov	a,@r0
      000522 C0 E0            [24]  924 	push	acc
      000524 8C 82            [24]  925 	mov	dpl,r4
      000526 8D 83            [24]  926 	mov	dph,r5
      000528 8E F0            [24]  927 	mov	b,r6
      00052A EF               [12]  928 	mov	a,r7
      00052B 12r00r00         [24]  929 	lcall	___fsdiv
      00052E AC 82            [24]  930 	mov	r4,dpl
      000530 AD 83            [24]  931 	mov	r5,dph
      000532 AE F0            [24]  932 	mov	r6,b
      000534 FF               [12]  933 	mov	r7,a
      000535 E5 81            [12]  934 	mov	a,sp
      000537 24 FC            [12]  935 	add	a,#0xfc
      000539 F5 81            [12]  936 	mov	sp,a
      00053B 8C 82            [24]  937 	mov	dpl,r4
      00053D 8D 83            [24]  938 	mov	dph,r5
      00053F 8E F0            [24]  939 	mov	b,r6
      000541 EF               [12]  940 	mov	a,r7
      000542 02r06r04         [24]  941 	ljmp	00115$
      000545                        942 00107$:
                                    943 ;	tancotf.c:88: else return (-xden/xnum);
      000545 E5*00            [12]  944 	mov	a,_bp
      000547 24 19            [12]  945 	add	a,#0x19
      000549 F8               [12]  946 	mov	r0,a
      00054A 86 04            [24]  947 	mov	ar4,@r0
      00054C 08               [12]  948 	inc	r0
      00054D 86 05            [24]  949 	mov	ar5,@r0
      00054F 08               [12]  950 	inc	r0
      000550 86 06            [24]  951 	mov	ar6,@r0
      000552 08               [12]  952 	inc	r0
      000553 E6               [12]  953 	mov	a,@r0
      000554 B2 E7            [12]  954 	cpl	acc.7
      000556 FF               [12]  955 	mov	r7,a
      000557 E5*00            [12]  956 	mov	a,_bp
      000559 24 15            [12]  957 	add	a,#0x15
      00055B F8               [12]  958 	mov	r0,a
      00055C E6               [12]  959 	mov	a,@r0
      00055D C0 E0            [24]  960 	push	acc
      00055F 08               [12]  961 	inc	r0
      000560 E6               [12]  962 	mov	a,@r0
      000561 C0 E0            [24]  963 	push	acc
      000563 08               [12]  964 	inc	r0
      000564 E6               [12]  965 	mov	a,@r0
      000565 C0 E0            [24]  966 	push	acc
      000567 08               [12]  967 	inc	r0
      000568 E6               [12]  968 	mov	a,@r0
      000569 C0 E0            [24]  969 	push	acc
      00056B 8C 82            [24]  970 	mov	dpl,r4
      00056D 8D 83            [24]  971 	mov	dph,r5
      00056F 8E F0            [24]  972 	mov	b,r6
      000571 EF               [12]  973 	mov	a,r7
      000572 12r00r00         [24]  974 	lcall	___fsdiv
      000575 AC 82            [24]  975 	mov	r4,dpl
      000577 AD 83            [24]  976 	mov	r5,dph
      000579 AE F0            [24]  977 	mov	r6,b
      00057B FF               [12]  978 	mov	r7,a
      00057C E5 81            [12]  979 	mov	a,sp
      00057E 24 FC            [12]  980 	add	a,#0xfc
      000580 F5 81            [12]  981 	mov	sp,a
      000582 8C 82            [24]  982 	mov	dpl,r4
      000584 8D 83            [24]  983 	mov	dph,r5
      000586 8E F0            [24]  984 	mov	b,r6
      000588 EF               [12]  985 	mov	a,r7
      000589 80 79            [24]  986 	sjmp	00115$
      00058B                        987 00113$:
                                    988 ;	tancotf.c:92: if(iscotan) return (xden/xnum);
      00058B 30*00 3C         [24]  989 	jnb	b0,00110$
      00058E E5*00            [12]  990 	mov	a,_bp
      000590 24 15            [12]  991 	add	a,#0x15
      000592 F8               [12]  992 	mov	r0,a
      000593 E6               [12]  993 	mov	a,@r0
      000594 C0 E0            [24]  994 	push	acc
      000596 08               [12]  995 	inc	r0
      000597 E6               [12]  996 	mov	a,@r0
      000598 C0 E0            [24]  997 	push	acc
      00059A 08               [12]  998 	inc	r0
      00059B E6               [12]  999 	mov	a,@r0
      00059C C0 E0            [24] 1000 	push	acc
      00059E 08               [12] 1001 	inc	r0
      00059F E6               [12] 1002 	mov	a,@r0
      0005A0 C0 E0            [24] 1003 	push	acc
      0005A2 E5*00            [12] 1004 	mov	a,_bp
      0005A4 24 19            [12] 1005 	add	a,#0x19
      0005A6 F8               [12] 1006 	mov	r0,a
      0005A7 86 82            [24] 1007 	mov	dpl,@r0
      0005A9 08               [12] 1008 	inc	r0
      0005AA 86 83            [24] 1009 	mov	dph,@r0
      0005AC 08               [12] 1010 	inc	r0
      0005AD 86 F0            [24] 1011 	mov	b,@r0
      0005AF 08               [12] 1012 	inc	r0
      0005B0 E6               [12] 1013 	mov	a,@r0
      0005B1 12r00r00         [24] 1014 	lcall	___fsdiv
      0005B4 AC 82            [24] 1015 	mov	r4,dpl
      0005B6 AD 83            [24] 1016 	mov	r5,dph
      0005B8 AE F0            [24] 1017 	mov	r6,b
      0005BA FF               [12] 1018 	mov	r7,a
      0005BB E5 81            [12] 1019 	mov	a,sp
      0005BD 24 FC            [12] 1020 	add	a,#0xfc
      0005BF F5 81            [12] 1021 	mov	sp,a
      0005C1 8C 82            [24] 1022 	mov	dpl,r4
      0005C3 8D 83            [24] 1023 	mov	dph,r5
      0005C5 8E F0            [24] 1024 	mov	b,r6
      0005C7 EF               [12] 1025 	mov	a,r7
      0005C8 80 3A            [24] 1026 	sjmp	00115$
      0005CA                       1027 00110$:
                                   1028 ;	tancotf.c:93: else return (xnum/xden);
      0005CA E5*00            [12] 1029 	mov	a,_bp
      0005CC 24 19            [12] 1030 	add	a,#0x19
      0005CE F8               [12] 1031 	mov	r0,a
      0005CF E6               [12] 1032 	mov	a,@r0
      0005D0 C0 E0            [24] 1033 	push	acc
      0005D2 08               [12] 1034 	inc	r0
      0005D3 E6               [12] 1035 	mov	a,@r0
      0005D4 C0 E0            [24] 1036 	push	acc
      0005D6 08               [12] 1037 	inc	r0
      0005D7 E6               [12] 1038 	mov	a,@r0
      0005D8 C0 E0            [24] 1039 	push	acc
      0005DA 08               [12] 1040 	inc	r0
      0005DB E6               [12] 1041 	mov	a,@r0
      0005DC C0 E0            [24] 1042 	push	acc
      0005DE E5*00            [12] 1043 	mov	a,_bp
      0005E0 24 15            [12] 1044 	add	a,#0x15
      0005E2 F8               [12] 1045 	mov	r0,a
      0005E3 86 82            [24] 1046 	mov	dpl,@r0
      0005E5 08               [12] 1047 	inc	r0
      0005E6 86 83            [24] 1048 	mov	dph,@r0
      0005E8 08               [12] 1049 	inc	r0
      0005E9 86 F0            [24] 1050 	mov	b,@r0
      0005EB 08               [12] 1051 	inc	r0
      0005EC E6               [12] 1052 	mov	a,@r0
      0005ED 12r00r00         [24] 1053 	lcall	___fsdiv
      0005F0 AC 82            [24] 1054 	mov	r4,dpl
      0005F2 AD 83            [24] 1055 	mov	r5,dph
      0005F4 AE F0            [24] 1056 	mov	r6,b
      0005F6 FF               [12] 1057 	mov	r7,a
      0005F7 E5 81            [12] 1058 	mov	a,sp
      0005F9 24 FC            [12] 1059 	add	a,#0xfc
      0005FB F5 81            [12] 1060 	mov	sp,a
      0005FD 8C 82            [24] 1061 	mov	dpl,r4
      0005FF 8D 83            [24] 1062 	mov	dph,r5
      000601 8E F0            [24] 1063 	mov	b,r6
      000603 EF               [12] 1064 	mov	a,r7
      000604                       1065 00115$:
      000604 85*00 81         [24] 1066 	mov	sp,_bp
      000607 D0*00            [24] 1067 	pop	_bp
      000609 22               [24] 1068 	ret
                                   1069 	.area CSEG    (CODE)
                                   1070 	.area CONST   (CODE)
                                   1071 	.area XINIT   (CODE)
                                   1072 	.area CABS    (ABS,CODE)
