                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:11 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _malloc
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_first_memheader
                                     13 	.globl _malloc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external initialized ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
      000000                         65 __sdcc_first_memheader::
      000000                         66 	.ds 2
                                     67 	.area HOME    (CODE)
                                     68 	.area GSINIT0 (CODE)
                                     69 	.area GSINIT1 (CODE)
                                     70 	.area GSINIT2 (CODE)
                                     71 	.area GSINIT3 (CODE)
                                     72 	.area GSINIT4 (CODE)
                                     73 	.area GSINIT5 (CODE)
                                     74 	.area GSINIT  (CODE)
                                     75 	.area GSFINAL (CODE)
                                     76 	.area CSEG    (CODE)
                                     77 ;--------------------------------------------------------
                                     78 ; global & static initialisations
                                     79 ;--------------------------------------------------------
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 	.area GSFINAL (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 ;--------------------------------------------------------
                                     85 ; Home
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME    (CODE)
                                     88 	.area HOME    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; code
                                     91 ;--------------------------------------------------------
                                     92 	.area CSEG    (CODE)
                                     93 ;------------------------------------------------------------
                                     94 ;Allocation info for local variables in function 'init_dynamic_memory'
                                     95 ;------------------------------------------------------------
                                     96 ;heap                      Allocated to registers r6 r7 
                                     97 ;size                      Allocated to registers r4 r5 
                                     98 ;------------------------------------------------------------
                                     99 ;	_malloc.c:166: static void init_dynamic_memory(void)
                                    100 ;	-----------------------------------------
                                    101 ;	 function init_dynamic_memory
                                    102 ;	-----------------------------------------
      000000                        103 _init_dynamic_memory:
                           000007   104 	ar7 = 0x07
                           000006   105 	ar6 = 0x06
                           000005   106 	ar5 = 0x05
                           000004   107 	ar4 = 0x04
                           000003   108 	ar3 = 0x03
                           000002   109 	ar2 = 0x02
                           000001   110 	ar1 = 0x01
                           000000   111 	ar0 = 0x00
                                    112 ;	_malloc.c:168: char __xdata * heap = (char __xdata *)_sdcc_heap;
      000000 7Er00            [12]  113 	mov	r6,#__sdcc_heap
      000002 7Fs00            [12]  114 	mov	r7,#(__sdcc_heap >> 8)
                                    115 ;	_malloc.c:169: unsigned int size = _sdcc_heap_size;
      000004 90r00r00         [24]  116 	mov	dptr,#__sdcc_heap_size
      000007 E4               [12]  117 	clr	a
      000008 93               [24]  118 	movc	a,@a+dptr
      000009 FC               [12]  119 	mov	r4,a
      00000A 74 01            [12]  120 	mov	a,#0x01
      00000C 93               [24]  121 	movc	a,@a+dptr
      00000D FD               [12]  122 	mov	r5,a
                                    123 ;	_malloc.c:171: if ( !heap ) //Reserved memory starts at 0x0000 but that's NULL...
      00000E EE               [12]  124 	mov	a,r6
      00000F 4F               [12]  125 	orl	a,r7
      000010 70 0A            [24]  126 	jnz	00102$
                                    127 ;	_malloc.c:173: heap++;
      000012 0E               [12]  128 	inc	r6
      000013 BE 00 01         [24]  129 	cjne	r6,#0x00,00109$
      000016 0F               [12]  130 	inc	r7
      000017                        131 00109$:
                                    132 ;	_malloc.c:174: size--;
      000017 1C               [12]  133 	dec	r4
      000018 BC FF 01         [24]  134 	cjne	r4,#0xFF,00110$
      00001B 1D               [12]  135 	dec	r5
      00001C                        136 00110$:
      00001C                        137 00102$:
                                    138 ;	_malloc.c:176: _sdcc_first_memheader = (MEMHEADER __xdata * ) heap;
      00001C 8E 02            [24]  139 	mov	ar2,r6
      00001E 8F 03            [24]  140 	mov	ar3,r7
      000020 90r00r00         [24]  141 	mov	dptr,#__sdcc_first_memheader
      000023 EA               [12]  142 	mov	a,r2
      000024 F0               [24]  143 	movx	@dptr,a
      000025 EB               [12]  144 	mov	a,r3
      000026 A3               [24]  145 	inc	dptr
      000027 F0               [24]  146 	movx	@dptr,a
                                    147 ;	_malloc.c:178: _sdcc_first_memheader->next = (MEMHEADER __xdata * )(heap + size - sizeof(MEMHEADER __xdata *));
      000028 EC               [12]  148 	mov	a,r4
      000029 2E               [12]  149 	add	a,r6
      00002A FE               [12]  150 	mov	r6,a
      00002B ED               [12]  151 	mov	a,r5
      00002C 3F               [12]  152 	addc	a,r7
      00002D FF               [12]  153 	mov	r7,a
      00002E EE               [12]  154 	mov	a,r6
      00002F 24 FE            [12]  155 	add	a,#0xFE
      000031 FE               [12]  156 	mov	r6,a
      000032 EF               [12]  157 	mov	a,r7
      000033 34 FF            [12]  158 	addc	a,#0xFF
      000035 FF               [12]  159 	mov	r7,a
      000036 8A 82            [24]  160 	mov	dpl,r2
      000038 8B 83            [24]  161 	mov	dph,r3
      00003A EE               [12]  162 	mov	a,r6
      00003B F0               [24]  163 	movx	@dptr,a
      00003C EF               [12]  164 	mov	a,r7
      00003D A3               [24]  165 	inc	dptr
      00003E F0               [24]  166 	movx	@dptr,a
                                    167 ;	_malloc.c:179: _sdcc_first_memheader->next->next = (MEMHEADER __xdata * ) NULL; //And mark it as last
      00003F 8E 82            [24]  168 	mov	dpl,r6
      000041 8F 83            [24]  169 	mov	dph,r7
      000043 E4               [12]  170 	clr	a
      000044 F0               [24]  171 	movx	@dptr,a
      000045 A3               [24]  172 	inc	dptr
      000046 F0               [24]  173 	movx	@dptr,a
                                    174 ;	_malloc.c:180: _sdcc_first_memheader->len        = 0;    //Empty and ready.
      000047 8A 82            [24]  175 	mov	dpl,r2
      000049 8B 83            [24]  176 	mov	dph,r3
      00004B A3               [24]  177 	inc	dptr
      00004C A3               [24]  178 	inc	dptr
      00004D F0               [24]  179 	movx	@dptr,a
      00004E A3               [24]  180 	inc	dptr
      00004F F0               [24]  181 	movx	@dptr,a
      000050 22               [24]  182 	ret
                                    183 ;------------------------------------------------------------
                                    184 ;Allocation info for local variables in function 'malloc'
                                    185 ;------------------------------------------------------------
                                    186 ;size                      Allocated to stack - _bp +1
                                    187 ;current_header            Allocated to stack - _bp +3
                                    188 ;new_header                Allocated to registers r2 r3 
                                    189 ;ret                       Allocated to registers r6 r7 
                                    190 ;------------------------------------------------------------
                                    191 ;	_malloc.c:183: void __xdata * malloc (unsigned int size)
                                    192 ;	-----------------------------------------
                                    193 ;	 function malloc
                                    194 ;	-----------------------------------------
      000051                        195 _malloc:
      000051 C0*00            [24]  196 	push	_bp
      000053 85 81*00         [24]  197 	mov	_bp,sp
      000056 C0 82            [24]  198 	push	dpl
      000058 C0 83            [24]  199 	push	dph
      00005A 05 81            [12]  200 	inc	sp
      00005C 05 81            [12]  201 	inc	sp
                                    202 ;	_malloc.c:189: if (size>(0xFFFF-HEADER_SIZE))
      00005E A8*00            [24]  203 	mov	r0,_bp
      000060 08               [12]  204 	inc	r0
      000061 C3               [12]  205 	clr	c
      000062 74 FB            [12]  206 	mov	a,#0xFB
      000064 96               [12]  207 	subb	a,@r0
      000065 74 FF            [12]  208 	mov	a,#0xFF
      000067 08               [12]  209 	inc	r0
      000068 96               [12]  210 	subb	a,@r0
      000069 50 06            [24]  211 	jnc	00102$
                                    212 ;	_malloc.c:190: return (void __xdata *) NULL; //To prevent overflow in next line
      00006B 90 00 00         [24]  213 	mov	dptr,#0x0000
      00006E 02r01r9F         [24]  214 	ljmp	00117$
      000071                        215 00102$:
                                    216 ;	_malloc.c:191: size += HEADER_SIZE; //We need a memory for header too
      000071 A8*00            [24]  217 	mov	r0,_bp
      000073 08               [12]  218 	inc	r0
      000074 74 04            [12]  219 	mov	a,#0x04
      000076 26               [12]  220 	add	a,@r0
      000077 F6               [12]  221 	mov	@r0,a
      000078 E4               [12]  222 	clr	a
      000079 08               [12]  223 	inc	r0
      00007A 36               [12]  224 	addc	a,@r0
      00007B F6               [12]  225 	mov	@r0,a
                                    226 ;	_malloc.c:193: if (!_sdcc_first_memheader)
      00007C 90r00r00         [24]  227 	mov	dptr,#__sdcc_first_memheader
      00007F E0               [24]  228 	movx	a,@dptr
      000080 FC               [12]  229 	mov	r4,a
      000081 A3               [24]  230 	inc	dptr
      000082 E0               [24]  231 	movx	a,@dptr
      000083 FD               [12]  232 	mov	r5,a
      000084 4C               [12]  233 	orl	a,r4
      000085 70 03            [24]  234 	jnz	00104$
                                    235 ;	_malloc.c:194: init_dynamic_memory();
      000087 12r00r00         [24]  236 	lcall	_init_dynamic_memory
      00008A                        237 00104$:
                                    238 ;	_malloc.c:196: current_header = _sdcc_first_memheader;
      00008A 90r00r00         [24]  239 	mov	dptr,#__sdcc_first_memheader
      00008D E0               [24]  240 	movx	a,@dptr
      00008E FC               [12]  241 	mov	r4,a
      00008F A3               [24]  242 	inc	dptr
      000090 E0               [24]  243 	movx	a,@dptr
      000091 FD               [12]  244 	mov	r5,a
      000092 E5*00            [12]  245 	mov	a,_bp
      000094 24 03            [12]  246 	add	a,#0x03
      000096 F8               [12]  247 	mov	r0,a
      000097 A6 04            [24]  248 	mov	@r0,ar4
      000099 08               [12]  249 	inc	r0
      00009A A6 05            [24]  250 	mov	@r0,ar5
                                    251 ;	_malloc.c:238: }
      00009C D3               [12]  252 	setb	c
      00009D 10 AF 01         [24]  253 	jbc	ea,00142$
      0000A0 C3               [12]  254 	clr	c
      0000A1                        255 00142$:
      0000A1 C0 D0            [24]  256 	push	psw
                                    257 ;	_malloc.c:199: while (1)
      0000A3                        258 00110$:
                                    259 ;	_malloc.c:209: if ((((unsigned int)current_header->next) -
      0000A3 E5*00            [12]  260 	mov	a,_bp
      0000A5 24 03            [12]  261 	add	a,#0x03
      0000A7 F8               [12]  262 	mov	r0,a
      0000A8 86 82            [24]  263 	mov	dpl,@r0
      0000AA 08               [12]  264 	inc	r0
      0000AB 86 83            [24]  265 	mov	dph,@r0
      0000AD E0               [24]  266 	movx	a,@dptr
      0000AE FA               [12]  267 	mov	r2,a
      0000AF A3               [24]  268 	inc	dptr
      0000B0 E0               [24]  269 	movx	a,@dptr
      0000B1 FB               [12]  270 	mov	r3,a
      0000B2 8A 06            [24]  271 	mov	ar6,r2
      0000B4 8B 07            [24]  272 	mov	ar7,r3
                                    273 ;	_malloc.c:210: ((unsigned int)current_header) -
      0000B6 E5*00            [12]  274 	mov	a,_bp
      0000B8 24 03            [12]  275 	add	a,#0x03
      0000BA F8               [12]  276 	mov	r0,a
      0000BB 86 04            [24]  277 	mov	ar4,@r0
      0000BD 08               [12]  278 	inc	r0
      0000BE 86 05            [24]  279 	mov	ar5,@r0
      0000C0 EE               [12]  280 	mov	a,r6
      0000C1 C3               [12]  281 	clr	c
      0000C2 9C               [12]  282 	subb	a,r4
      0000C3 FE               [12]  283 	mov	r6,a
      0000C4 EF               [12]  284 	mov	a,r7
      0000C5 9D               [12]  285 	subb	a,r5
      0000C6 FF               [12]  286 	mov	r7,a
                                    287 ;	_malloc.c:211: current_header->len) >= size)
      0000C7 E5*00            [12]  288 	mov	a,_bp
      0000C9 24 03            [12]  289 	add	a,#0x03
      0000CB F8               [12]  290 	mov	r0,a
      0000CC 86 82            [24]  291 	mov	dpl,@r0
      0000CE 08               [12]  292 	inc	r0
      0000CF 86 83            [24]  293 	mov	dph,@r0
      0000D1 A3               [24]  294 	inc	dptr
      0000D2 A3               [24]  295 	inc	dptr
      0000D3 E0               [24]  296 	movx	a,@dptr
      0000D4 FC               [12]  297 	mov	r4,a
      0000D5 A3               [24]  298 	inc	dptr
      0000D6 E0               [24]  299 	movx	a,@dptr
      0000D7 FD               [12]  300 	mov	r5,a
      0000D8 EE               [12]  301 	mov	a,r6
      0000D9 C3               [12]  302 	clr	c
      0000DA 9C               [12]  303 	subb	a,r4
      0000DB FE               [12]  304 	mov	r6,a
      0000DC EF               [12]  305 	mov	a,r7
      0000DD 9D               [12]  306 	subb	a,r5
      0000DE FF               [12]  307 	mov	r7,a
      0000DF A8*00            [24]  308 	mov	r0,_bp
      0000E1 08               [12]  309 	inc	r0
      0000E2 C3               [12]  310 	clr	c
      0000E3 EE               [12]  311 	mov	a,r6
      0000E4 96               [12]  312 	subb	a,@r0
      0000E5 EF               [12]  313 	mov	a,r7
      0000E6 08               [12]  314 	inc	r0
      0000E7 96               [12]  315 	subb	a,@r0
      0000E8 40 0F            [24]  316 	jc	00106$
                                    317 ;	_malloc.c:213: ret = current_header->mem;
      0000EA E5*00            [12]  318 	mov	a,_bp
      0000EC 24 03            [12]  319 	add	a,#0x03
      0000EE F8               [12]  320 	mov	r0,a
      0000EF 74 04            [12]  321 	mov	a,#0x04
      0000F1 26               [12]  322 	add	a,@r0
      0000F2 FE               [12]  323 	mov	r6,a
      0000F3 E4               [12]  324 	clr	a
      0000F4 08               [12]  325 	inc	r0
      0000F5 36               [12]  326 	addc	a,@r0
      0000F6 FF               [12]  327 	mov	r7,a
                                    328 ;	_malloc.c:214: break;
      0000F7 80 1E            [24]  329 	sjmp	00111$
      0000F9                        330 00106$:
                                    331 ;	_malloc.c:216: current_header = current_header->next;    //else try next
      0000F9 E5*00            [12]  332 	mov	a,_bp
      0000FB 24 03            [12]  333 	add	a,#0x03
      0000FD F8               [12]  334 	mov	r0,a
      0000FE A6 02            [24]  335 	mov	@r0,ar2
      000100 08               [12]  336 	inc	r0
      000101 A6 03            [24]  337 	mov	@r0,ar3
                                    338 ;	_malloc.c:217: if (!current_header->next)
      000103 E5*00            [12]  339 	mov	a,_bp
      000105 24 03            [12]  340 	add	a,#0x03
      000107 F8               [12]  341 	mov	r0,a
      000108 86 82            [24]  342 	mov	dpl,@r0
      00010A 08               [12]  343 	inc	r0
      00010B 86 83            [24]  344 	mov	dph,@r0
      00010D E0               [24]  345 	movx	a,@dptr
      00010E FC               [12]  346 	mov	r4,a
      00010F A3               [24]  347 	inc	dptr
      000110 E0               [24]  348 	movx	a,@dptr
      000111 FD               [12]  349 	mov	r5,a
      000112 4C               [12]  350 	orl	a,r4
                                    351 ;	_malloc.c:219: ret = (void __xdata *) NULL;
      000113 70 8E            [24]  352 	jnz	00110$
      000115 FE               [12]  353 	mov	r6,a
      000116 FF               [12]  354 	mov	r7,a
                                    355 ;	_malloc.c:220: break;
      000117                        356 00111$:
                                    357 ;	_malloc.c:223: if (ret)
      000117 EE               [12]  358 	mov	a,r6
      000118 4F               [12]  359 	orl	a,r7
      000119 70 03            [24]  360 	jnz	00145$
      00011B 02r01r97         [24]  361 	ljmp	00116$
      00011E                        362 00145$:
                                    363 ;	_malloc.c:225: if (!current_header->len)
      00011E E5*00            [12]  364 	mov	a,_bp
      000120 24 03            [12]  365 	add	a,#0x03
      000122 F8               [12]  366 	mov	r0,a
      000123 74 02            [12]  367 	mov	a,#0x02
      000125 26               [12]  368 	add	a,@r0
      000126 FC               [12]  369 	mov	r4,a
      000127 E4               [12]  370 	clr	a
      000128 08               [12]  371 	inc	r0
      000129 36               [12]  372 	addc	a,@r0
      00012A FD               [12]  373 	mov	r5,a
      00012B 8C 82            [24]  374 	mov	dpl,r4
      00012D 8D 83            [24]  375 	mov	dph,r5
      00012F E0               [24]  376 	movx	a,@dptr
      000130 FA               [12]  377 	mov	r2,a
      000131 A3               [24]  378 	inc	dptr
      000132 E0               [24]  379 	movx	a,@dptr
      000133 FB               [12]  380 	mov	r3,a
      000134 4A               [12]  381 	orl	a,r2
      000135 70 0F            [24]  382 	jnz	00113$
                                    383 ;	_malloc.c:227: current_header->len = size; //for first allocation
      000137 8C 82            [24]  384 	mov	dpl,r4
      000139 8D 83            [24]  385 	mov	dph,r5
      00013B A8*00            [24]  386 	mov	r0,_bp
      00013D 08               [12]  387 	inc	r0
      00013E E6               [12]  388 	mov	a,@r0
      00013F F0               [24]  389 	movx	@dptr,a
      000140 08               [12]  390 	inc	r0
      000141 E6               [12]  391 	mov	a,@r0
      000142 A3               [24]  392 	inc	dptr
      000143 F0               [24]  393 	movx	@dptr,a
      000144 80 51            [24]  394 	sjmp	00116$
      000146                        395 00113$:
                                    396 ;	_malloc.c:231: new_header = (MEMHEADER __xdata * )((char __xdata *)current_header + current_header->len);
      000146 E5*00            [12]  397 	mov	a,_bp
      000148 24 03            [12]  398 	add	a,#0x03
      00014A F8               [12]  399 	mov	r0,a
      00014B 86 04            [24]  400 	mov	ar4,@r0
      00014D 08               [12]  401 	inc	r0
      00014E 86 05            [24]  402 	mov	ar5,@r0
      000150 EA               [12]  403 	mov	a,r2
      000151 2C               [12]  404 	add	a,r4
      000152 FA               [12]  405 	mov	r2,a
      000153 EB               [12]  406 	mov	a,r3
      000154 3D               [12]  407 	addc	a,r5
      000155 FB               [12]  408 	mov	r3,a
                                    409 ;	_malloc.c:232: new_header->next = current_header->next; //and plug it into the chain
      000156 E5*00            [12]  410 	mov	a,_bp
      000158 24 03            [12]  411 	add	a,#0x03
      00015A F8               [12]  412 	mov	r0,a
      00015B 86 82            [24]  413 	mov	dpl,@r0
      00015D 08               [12]  414 	inc	r0
      00015E 86 83            [24]  415 	mov	dph,@r0
      000160 E0               [24]  416 	movx	a,@dptr
      000161 FC               [12]  417 	mov	r4,a
      000162 A3               [24]  418 	inc	dptr
      000163 E0               [24]  419 	movx	a,@dptr
      000164 FD               [12]  420 	mov	r5,a
      000165 8A 82            [24]  421 	mov	dpl,r2
      000167 8B 83            [24]  422 	mov	dph,r3
      000169 EC               [12]  423 	mov	a,r4
      00016A F0               [24]  424 	movx	@dptr,a
      00016B ED               [12]  425 	mov	a,r5
      00016C A3               [24]  426 	inc	dptr
      00016D F0               [24]  427 	movx	@dptr,a
                                    428 ;	_malloc.c:233: current_header->next  = new_header;
      00016E E5*00            [12]  429 	mov	a,_bp
      000170 24 03            [12]  430 	add	a,#0x03
      000172 F8               [12]  431 	mov	r0,a
      000173 86 82            [24]  432 	mov	dpl,@r0
      000175 08               [12]  433 	inc	r0
      000176 86 83            [24]  434 	mov	dph,@r0
      000178 EA               [12]  435 	mov	a,r2
      000179 F0               [24]  436 	movx	@dptr,a
      00017A EB               [12]  437 	mov	a,r3
      00017B A3               [24]  438 	inc	dptr
      00017C F0               [24]  439 	movx	@dptr,a
                                    440 ;	_malloc.c:234: new_header->len  = size; //mark as used
      00017D 8A 82            [24]  441 	mov	dpl,r2
      00017F 8B 83            [24]  442 	mov	dph,r3
      000181 A3               [24]  443 	inc	dptr
      000182 A3               [24]  444 	inc	dptr
      000183 A8*00            [24]  445 	mov	r0,_bp
      000185 08               [12]  446 	inc	r0
      000186 E6               [12]  447 	mov	a,@r0
      000187 F0               [24]  448 	movx	@dptr,a
      000188 08               [12]  449 	inc	r0
      000189 E6               [12]  450 	mov	a,@r0
      00018A A3               [24]  451 	inc	dptr
      00018B F0               [24]  452 	movx	@dptr,a
                                    453 ;	_malloc.c:235: ret = new_header->mem;
      00018C 74 04            [12]  454 	mov	a,#0x04
      00018E 2A               [12]  455 	add	a,r2
      00018F FA               [12]  456 	mov	r2,a
      000190 E4               [12]  457 	clr	a
      000191 3B               [12]  458 	addc	a,r3
      000192 FB               [12]  459 	mov	r3,a
      000193 8A 06            [24]  460 	mov	ar6,r2
      000195 8B 07            [24]  461 	mov	ar7,r3
      000197                        462 00116$:
      000197 D0 D0            [24]  463 	pop	psw
      000199 92 AF            [24]  464 	mov	ea,c
                                    465 ;	_malloc.c:239: return ret;
      00019B 8E 82            [24]  466 	mov	dpl,r6
      00019D 8F 83            [24]  467 	mov	dph,r7
      00019F                        468 00117$:
      00019F 85*00 81         [24]  469 	mov	sp,_bp
      0001A2 D0*00            [24]  470 	pop	_bp
      0001A4 22               [24]  471 	ret
                                    472 	.area CSEG    (CODE)
                                    473 	.area CONST   (CODE)
                                    474 	.area XINIT   (CODE)
      000000                        475 __xinit___sdcc_first_memheader:
      000000 00 00                  476 	.byte #0x00,#0x00
                                    477 	.area CABS    (ABS,CODE)
