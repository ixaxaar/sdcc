                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:09 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sincosf
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincosf
                                     13 	.globl _fabsf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincosf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscos                     Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;y                         Allocated to registers r4 r5 r6 r7 
                                    111 ;f                         Allocated to stack - _bp +9
                                    112 ;r                         Allocated to stack - _bp +13
                                    113 ;g                         Allocated to stack - _bp +17
                                    114 ;XN                        Allocated to stack - _bp +21
                                    115 ;N                         Allocated to registers r2 r3 
                                    116 ;sign                      Allocated to registers b1 
                                    117 ;sloc0                     Allocated to stack - _bp +5
                                    118 ;------------------------------------------------------------
                                    119 ;	sincosf.c:50: float sincosf(const float x, const bool iscos)
                                    120 ;	-----------------------------------------
                                    121 ;	 function sincosf
                                    122 ;	-----------------------------------------
      000000                        123 _sincosf:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
      000000 C0*00            [24]  132 	push	_bp
      000002 85 81*00         [24]  133 	mov	_bp,sp
      000005 C0 82            [24]  134 	push	dpl
      000007 C0 83            [24]  135 	push	dph
      000009 C0 F0            [24]  136 	push	b
      00000B C0 E0            [24]  137 	push	acc
      00000D E5 81            [12]  138 	mov	a,sp
      00000F 24 14            [12]  139 	add	a,#0x14
      000011 F5 81            [12]  140 	mov	sp,a
                                    141 ;	sincosf.c:56: if(iscos)
      000013 30*00 4A         [24]  142 	jnb	b0,00105$
                                    143 ;	sincosf.c:58: y=fabsf(x)+HALF_PI;
      000016 A8*00            [24]  144 	mov	r0,_bp
      000018 08               [12]  145 	inc	r0
      000019 86 82            [24]  146 	mov	dpl,@r0
      00001B 08               [12]  147 	inc	r0
      00001C 86 83            [24]  148 	mov	dph,@r0
      00001E 08               [12]  149 	inc	r0
      00001F 86 F0            [24]  150 	mov	b,@r0
      000021 08               [12]  151 	inc	r0
      000022 E6               [12]  152 	mov	a,@r0
      000023 C0*00            [24]  153 	push	bits
      000025 12r00r00         [24]  154 	lcall	_fabsf
      000028 AA 82            [24]  155 	mov	r2,dpl
      00002A AB 83            [24]  156 	mov	r3,dph
      00002C AE F0            [24]  157 	mov	r6,b
      00002E FF               [12]  158 	mov	r7,a
      00002F D0*00            [24]  159 	pop	bits
      000031 C0*00            [24]  160 	push	bits
      000033 74 DB            [12]  161 	mov	a,#0xDB
      000035 C0 E0            [24]  162 	push	acc
      000037 74 0F            [12]  163 	mov	a,#0x0F
      000039 C0 E0            [24]  164 	push	acc
      00003B 74 C9            [12]  165 	mov	a,#0xC9
      00003D C0 E0            [24]  166 	push	acc
      00003F 74 3F            [12]  167 	mov	a,#0x3F
      000041 C0 E0            [24]  168 	push	acc
      000043 8A 82            [24]  169 	mov	dpl,r2
      000045 8B 83            [24]  170 	mov	dph,r3
      000047 8E F0            [24]  171 	mov	b,r6
      000049 EF               [12]  172 	mov	a,r7
      00004A 12r00r00         [24]  173 	lcall	___fsadd
      00004D AC 82            [24]  174 	mov	r4,dpl
      00004F AD 83            [24]  175 	mov	r5,dph
      000051 AE F0            [24]  176 	mov	r6,b
      000053 FF               [12]  177 	mov	r7,a
      000054 E5 81            [12]  178 	mov	a,sp
      000056 24 FC            [12]  179 	add	a,#0xfc
      000058 F5 81            [12]  180 	mov	sp,a
      00005A D0*00            [24]  181 	pop	bits
                                    182 ;	sincosf.c:59: sign=0;
      00005C C2*00            [12]  183 	clr	b1
      00005E 80 64            [24]  184 	sjmp	00106$
      000060                        185 00105$:
                                    186 ;	sincosf.c:63: if(x<0.0)
      000060 C0*00            [24]  187 	push	bits
      000062 E4               [12]  188 	clr	a
      000063 C0 E0            [24]  189 	push	acc
      000065 C0 E0            [24]  190 	push	acc
      000067 C0 E0            [24]  191 	push	acc
      000069 C0 E0            [24]  192 	push	acc
      00006B A8*00            [24]  193 	mov	r0,_bp
      00006D 08               [12]  194 	inc	r0
      00006E 86 82            [24]  195 	mov	dpl,@r0
      000070 08               [12]  196 	inc	r0
      000071 86 83            [24]  197 	mov	dph,@r0
      000073 08               [12]  198 	inc	r0
      000074 86 F0            [24]  199 	mov	b,@r0
      000076 08               [12]  200 	inc	r0
      000077 E6               [12]  201 	mov	a,@r0
      000078 12r00r00         [24]  202 	lcall	___fslt
      00007B AB 82            [24]  203 	mov	r3,dpl
      00007D E5 81            [12]  204 	mov	a,sp
      00007F 24 FC            [12]  205 	add	a,#0xfc
      000081 F5 81            [12]  206 	mov	sp,a
      000083 D0*00            [24]  207 	pop	bits
      000085 EB               [12]  208 	mov	a,r3
      000086 60 2C            [24]  209 	jz	00102$
                                    210 ;	sincosf.c:64: { y=-x; sign=1; }
      000088 A8*00            [24]  211 	mov	r0,_bp
      00008A 08               [12]  212 	inc	r0
      00008B E5*00            [12]  213 	mov	a,_bp
      00008D 24 05            [12]  214 	add	a,#0x05
      00008F F9               [12]  215 	mov	r1,a
      000090 E6               [12]  216 	mov	a,@r0
      000091 F7               [12]  217 	mov	@r1,a
      000092 08               [12]  218 	inc	r0
      000093 09               [12]  219 	inc	r1
      000094 E6               [12]  220 	mov	a,@r0
      000095 F7               [12]  221 	mov	@r1,a
      000096 08               [12]  222 	inc	r0
      000097 09               [12]  223 	inc	r1
      000098 E6               [12]  224 	mov	a,@r0
      000099 F7               [12]  225 	mov	@r1,a
      00009A 08               [12]  226 	inc	r0
      00009B E6               [12]  227 	mov	a,@r0
      00009C B2 E7            [12]  228 	cpl	acc.7
      00009E 09               [12]  229 	inc	r1
      00009F F7               [12]  230 	mov	@r1,a
      0000A0 E5*00            [12]  231 	mov	a,_bp
      0000A2 24 05            [12]  232 	add	a,#0x05
      0000A4 F8               [12]  233 	mov	r0,a
      0000A5 86 04            [24]  234 	mov	ar4,@r0
      0000A7 08               [12]  235 	inc	r0
      0000A8 86 05            [24]  236 	mov	ar5,@r0
      0000AA 08               [12]  237 	inc	r0
      0000AB 86 06            [24]  238 	mov	ar6,@r0
      0000AD 08               [12]  239 	inc	r0
      0000AE 86 07            [24]  240 	mov	ar7,@r0
      0000B0 D2*00            [12]  241 	setb	b1
      0000B2 80 10            [24]  242 	sjmp	00106$
      0000B4                        243 00102$:
                                    244 ;	sincosf.c:66: { y=x; sign=0; }
      0000B4 A8*00            [24]  245 	mov	r0,_bp
      0000B6 08               [12]  246 	inc	r0
      0000B7 86 04            [24]  247 	mov	ar4,@r0
      0000B9 08               [12]  248 	inc	r0
      0000BA 86 05            [24]  249 	mov	ar5,@r0
      0000BC 08               [12]  250 	inc	r0
      0000BD 86 06            [24]  251 	mov	ar6,@r0
      0000BF 08               [12]  252 	inc	r0
      0000C0 86 07            [24]  253 	mov	ar7,@r0
      0000C2 C2*00            [12]  254 	clr	b1
      0000C4                        255 00106$:
                                    256 ;	sincosf.c:69: if(y>YMAX)
      0000C4 C0 07            [24]  257 	push	ar7
      0000C6 C0 06            [24]  258 	push	ar6
      0000C8 C0 05            [24]  259 	push	ar5
      0000CA C0 04            [24]  260 	push	ar4
      0000CC C0*00            [24]  261 	push	bits
      0000CE E4               [12]  262 	clr	a
      0000CF C0 E0            [24]  263 	push	acc
      0000D1 74 0C            [12]  264 	mov	a,#0x0C
      0000D3 C0 E0            [24]  265 	push	acc
      0000D5 74 49            [12]  266 	mov	a,#0x49
      0000D7 C0 E0            [24]  267 	push	acc
      0000D9 74 46            [12]  268 	mov	a,#0x46
      0000DB C0 E0            [24]  269 	push	acc
      0000DD 8C 82            [24]  270 	mov	dpl,r4
      0000DF 8D 83            [24]  271 	mov	dph,r5
      0000E1 8E F0            [24]  272 	mov	b,r6
      0000E3 EF               [12]  273 	mov	a,r7
      0000E4 12r00r00         [24]  274 	lcall	___fsgt
      0000E7 AB 82            [24]  275 	mov	r3,dpl
      0000E9 E5 81            [12]  276 	mov	a,sp
      0000EB 24 FC            [12]  277 	add	a,#0xfc
      0000ED F5 81            [12]  278 	mov	sp,a
      0000EF D0*00            [24]  279 	pop	bits
      0000F1 D0 04            [24]  280 	pop	ar4
      0000F3 D0 05            [24]  281 	pop	ar5
      0000F5 D0 06            [24]  282 	pop	ar6
      0000F7 D0 07            [24]  283 	pop	ar7
      0000F9 EB               [12]  284 	mov	a,r3
      0000FA 60 12            [24]  285 	jz	00108$
                                    286 ;	sincosf.c:71: errno=ERANGE;
      0000FC 90r00r00         [24]  287 	mov	dptr,#_errno
      0000FF 74 22            [12]  288 	mov	a,#0x22
      000101 F0               [24]  289 	movx	@dptr,a
      000102 E4               [12]  290 	clr	a
      000103 A3               [24]  291 	inc	dptr
      000104 F0               [24]  292 	movx	@dptr,a
                                    293 ;	sincosf.c:72: return 0.0;
      000105 90 00 00         [24]  294 	mov	dptr,#(0x00&0x00ff)
      000108 E4               [12]  295 	clr	a
      000109 F5 F0            [12]  296 	mov	b,a
      00010B 02r05rEE         [24]  297 	ljmp	00115$
      00010E                        298 00108$:
                                    299 ;	sincosf.c:76: N=((y*iPI)+0.5); /*y is positive*/
      00010E C0*00            [24]  300 	push	bits
      000110 C0 04            [24]  301 	push	ar4
      000112 C0 05            [24]  302 	push	ar5
      000114 C0 06            [24]  303 	push	ar6
      000116 C0 07            [24]  304 	push	ar7
      000118 90 F9 83         [24]  305 	mov	dptr,#0xF983
      00011B 75 F0 A2         [24]  306 	mov	b,#0xA2
      00011E 74 3E            [12]  307 	mov	a,#0x3E
      000120 12r00r00         [24]  308 	lcall	___fsmul
      000123 AF 82            [24]  309 	mov	r7,dpl
      000125 AE 83            [24]  310 	mov	r6,dph
      000127 AD F0            [24]  311 	mov	r5,b
      000129 FC               [12]  312 	mov	r4,a
      00012A E5 81            [12]  313 	mov	a,sp
      00012C 24 FC            [12]  314 	add	a,#0xfc
      00012E F5 81            [12]  315 	mov	sp,a
      000130 D0*00            [24]  316 	pop	bits
      000132 C0*00            [24]  317 	push	bits
      000134 E4               [12]  318 	clr	a
      000135 C0 E0            [24]  319 	push	acc
      000137 C0 E0            [24]  320 	push	acc
      000139 C0 E0            [24]  321 	push	acc
      00013B 74 3F            [12]  322 	mov	a,#0x3F
      00013D C0 E0            [24]  323 	push	acc
      00013F 8F 82            [24]  324 	mov	dpl,r7
      000141 8E 83            [24]  325 	mov	dph,r6
      000143 8D F0            [24]  326 	mov	b,r5
      000145 EC               [12]  327 	mov	a,r4
      000146 12r00r00         [24]  328 	lcall	___fsadd
      000149 AF 82            [24]  329 	mov	r7,dpl
      00014B AE 83            [24]  330 	mov	r6,dph
      00014D AD F0            [24]  331 	mov	r5,b
      00014F FC               [12]  332 	mov	r4,a
      000150 E5 81            [12]  333 	mov	a,sp
      000152 24 FC            [12]  334 	add	a,#0xfc
      000154 F5 81            [12]  335 	mov	sp,a
      000156 D0*00            [24]  336 	pop	bits
      000158 8F 82            [24]  337 	mov	dpl,r7
      00015A 8E 83            [24]  338 	mov	dph,r6
      00015C 8D F0            [24]  339 	mov	b,r5
      00015E EC               [12]  340 	mov	a,r4
      00015F C0*00            [24]  341 	push	bits
      000161 12r00r00         [24]  342 	lcall	___fs2sint
      000164 AA 82            [24]  343 	mov	r2,dpl
      000166 AB 83            [24]  344 	mov	r3,dph
      000168 D0*00            [24]  345 	pop	bits
                                    346 ;	sincosf.c:79: if(N&1) sign=!sign;
      00016A EA               [12]  347 	mov	a,r2
      00016B 30 E0 02         [24]  348 	jnb	acc.0,00110$
      00016E B2*00            [12]  349 	cpl	b1
      000170                        350 00110$:
                                    351 ;	sincosf.c:81: XN=N;
      000170 8A 82            [24]  352 	mov	dpl,r2
      000172 8B 83            [24]  353 	mov	dph,r3
      000174 C0*00            [24]  354 	push	bits
      000176 12r00r00         [24]  355 	lcall	___sint2fs
      000179 AF 82            [24]  356 	mov	r7,dpl
      00017B AE 83            [24]  357 	mov	r6,dph
      00017D AD F0            [24]  358 	mov	r5,b
      00017F FC               [12]  359 	mov	r4,a
      000180 D0*00            [24]  360 	pop	bits
      000182 E5*00            [12]  361 	mov	a,_bp
      000184 24 15            [12]  362 	add	a,#0x15
      000186 F8               [12]  363 	mov	r0,a
      000187 A6 07            [24]  364 	mov	@r0,ar7
      000189 08               [12]  365 	inc	r0
      00018A A6 06            [24]  366 	mov	@r0,ar6
      00018C 08               [12]  367 	inc	r0
      00018D A6 05            [24]  368 	mov	@r0,ar5
      00018F 08               [12]  369 	inc	r0
      000190 A6 04            [24]  370 	mov	@r0,ar4
                                    371 ;	sincosf.c:83: if(iscos) XN-=0.5;
      000192 30*00 3E         [24]  372 	jnb	b0,00112$
      000195 C0*00            [24]  373 	push	bits
      000197 E4               [12]  374 	clr	a
      000198 C0 E0            [24]  375 	push	acc
      00019A C0 E0            [24]  376 	push	acc
      00019C C0 E0            [24]  377 	push	acc
      00019E 74 3F            [12]  378 	mov	a,#0x3F
      0001A0 C0 E0            [24]  379 	push	acc
      0001A2 E5*00            [12]  380 	mov	a,_bp
      0001A4 24 15            [12]  381 	add	a,#0x15
      0001A6 F8               [12]  382 	mov	r0,a
      0001A7 86 82            [24]  383 	mov	dpl,@r0
      0001A9 08               [12]  384 	inc	r0
      0001AA 86 83            [24]  385 	mov	dph,@r0
      0001AC 08               [12]  386 	inc	r0
      0001AD 86 F0            [24]  387 	mov	b,@r0
      0001AF 08               [12]  388 	inc	r0
      0001B0 E6               [12]  389 	mov	a,@r0
      0001B1 12r00r00         [24]  390 	lcall	___fssub
      0001B4 AF 82            [24]  391 	mov	r7,dpl
      0001B6 AE 83            [24]  392 	mov	r6,dph
      0001B8 AD F0            [24]  393 	mov	r5,b
      0001BA FC               [12]  394 	mov	r4,a
      0001BB E5 81            [12]  395 	mov	a,sp
      0001BD 24 FC            [12]  396 	add	a,#0xfc
      0001BF F5 81            [12]  397 	mov	sp,a
      0001C1 D0*00            [24]  398 	pop	bits
      0001C3 E5*00            [12]  399 	mov	a,_bp
      0001C5 24 15            [12]  400 	add	a,#0x15
      0001C7 F8               [12]  401 	mov	r0,a
      0001C8 A6 07            [24]  402 	mov	@r0,ar7
      0001CA 08               [12]  403 	inc	r0
      0001CB A6 06            [24]  404 	mov	@r0,ar6
      0001CD 08               [12]  405 	inc	r0
      0001CE A6 05            [24]  406 	mov	@r0,ar5
      0001D0 08               [12]  407 	inc	r0
      0001D1 A6 04            [24]  408 	mov	@r0,ar4
      0001D3                        409 00112$:
                                    410 ;	sincosf.c:85: y=fabsf(x);
      0001D3 A8*00            [24]  411 	mov	r0,_bp
      0001D5 08               [12]  412 	inc	r0
      0001D6 86 82            [24]  413 	mov	dpl,@r0
      0001D8 08               [12]  414 	inc	r0
      0001D9 86 83            [24]  415 	mov	dph,@r0
      0001DB 08               [12]  416 	inc	r0
      0001DC 86 F0            [24]  417 	mov	b,@r0
      0001DE 08               [12]  418 	inc	r0
      0001DF E6               [12]  419 	mov	a,@r0
      0001E0 C0*00            [24]  420 	push	bits
      0001E2 12r00r00         [24]  421 	lcall	_fabsf
      0001E5 C8               [12]  422 	xch	a,r0
      0001E6 E5*00            [12]  423 	mov	a,_bp
      0001E8 24 05            [12]  424 	add	a,#0x05
      0001EA C8               [12]  425 	xch	a,r0
      0001EB A6 82            [24]  426 	mov	@r0,dpl
      0001ED 08               [12]  427 	inc	r0
      0001EE A6 83            [24]  428 	mov	@r0,dph
      0001F0 08               [12]  429 	inc	r0
      0001F1 A6 F0            [24]  430 	mov	@r0,b
      0001F3 08               [12]  431 	inc	r0
      0001F4 F6               [12]  432 	mov	@r0,a
      0001F5 D0*00            [24]  433 	pop	bits
      0001F7 E5*00            [12]  434 	mov	a,_bp
      0001F9 24 05            [12]  435 	add	a,#0x05
      0001FB F8               [12]  436 	mov	r0,a
      0001FC 86 04            [24]  437 	mov	ar4,@r0
      0001FE 08               [12]  438 	inc	r0
      0001FF 86 05            [24]  439 	mov	ar5,@r0
      000201 08               [12]  440 	inc	r0
      000202 86 06            [24]  441 	mov	ar6,@r0
      000204 08               [12]  442 	inc	r0
      000205 86 07            [24]  443 	mov	ar7,@r0
                                    444 ;	sincosf.c:86: r=(int)y;
      000207 8C 82            [24]  445 	mov	dpl,r4
      000209 8D 83            [24]  446 	mov	dph,r5
      00020B 8E F0            [24]  447 	mov	b,r6
      00020D EF               [12]  448 	mov	a,r7
      00020E C0 07            [24]  449 	push	ar7
      000210 C0 06            [24]  450 	push	ar6
      000212 C0 05            [24]  451 	push	ar5
      000214 C0 04            [24]  452 	push	ar4
      000216 C0*00            [24]  453 	push	bits
      000218 12r00r00         [24]  454 	lcall	___fs2sint
      00021B AA 82            [24]  455 	mov	r2,dpl
      00021D AB 83            [24]  456 	mov	r3,dph
      00021F D0*00            [24]  457 	pop	bits
      000221 8A 82            [24]  458 	mov	dpl,r2
      000223 8B 83            [24]  459 	mov	dph,r3
      000225 C0*00            [24]  460 	push	bits
      000227 12r00r00         [24]  461 	lcall	___sint2fs
      00022A C8               [12]  462 	xch	a,r0
      00022B E5*00            [12]  463 	mov	a,_bp
      00022D 24 0D            [12]  464 	add	a,#0x0d
      00022F C8               [12]  465 	xch	a,r0
      000230 A6 82            [24]  466 	mov	@r0,dpl
      000232 08               [12]  467 	inc	r0
      000233 A6 83            [24]  468 	mov	@r0,dph
      000235 08               [12]  469 	inc	r0
      000236 A6 F0            [24]  470 	mov	@r0,b
      000238 08               [12]  471 	inc	r0
      000239 F6               [12]  472 	mov	@r0,a
      00023A D0*00            [24]  473 	pop	bits
      00023C D0 04            [24]  474 	pop	ar4
      00023E D0 05            [24]  475 	pop	ar5
      000240 D0 06            [24]  476 	pop	ar6
      000242 D0 07            [24]  477 	pop	ar7
      000244 E5*00            [12]  478 	mov	a,_bp
      000246 24 0D            [12]  479 	add	a,#0x0d
                                    480 ;	sincosf.c:87: g=y-r;
      000248 C0*00            [24]  481 	push	bits
      00024A E5*00            [12]  482 	mov	a,_bp
      00024C 24 0D            [12]  483 	add	a,#0x0d
      00024E F8               [12]  484 	mov	r0,a
      00024F E6               [12]  485 	mov	a,@r0
      000250 C0 E0            [24]  486 	push	acc
      000252 08               [12]  487 	inc	r0
      000253 E6               [12]  488 	mov	a,@r0
      000254 C0 E0            [24]  489 	push	acc
      000256 08               [12]  490 	inc	r0
      000257 E6               [12]  491 	mov	a,@r0
      000258 C0 E0            [24]  492 	push	acc
      00025A 08               [12]  493 	inc	r0
      00025B E6               [12]  494 	mov	a,@r0
      00025C C0 E0            [24]  495 	push	acc
      00025E 8C 82            [24]  496 	mov	dpl,r4
      000260 8D 83            [24]  497 	mov	dph,r5
      000262 8E F0            [24]  498 	mov	b,r6
      000264 EF               [12]  499 	mov	a,r7
      000265 12r00r00         [24]  500 	lcall	___fssub
      000268 AF 82            [24]  501 	mov	r7,dpl
      00026A AE 83            [24]  502 	mov	r6,dph
      00026C AD F0            [24]  503 	mov	r5,b
      00026E FC               [12]  504 	mov	r4,a
      00026F E5 81            [12]  505 	mov	a,sp
      000271 24 FC            [12]  506 	add	a,#0xfc
      000273 F5 81            [12]  507 	mov	sp,a
      000275 D0*00            [24]  508 	pop	bits
      000277 E5*00            [12]  509 	mov	a,_bp
      000279 24 11            [12]  510 	add	a,#0x11
      00027B F8               [12]  511 	mov	r0,a
      00027C A6 07            [24]  512 	mov	@r0,ar7
      00027E 08               [12]  513 	inc	r0
      00027F A6 06            [24]  514 	mov	@r0,ar6
      000281 08               [12]  515 	inc	r0
      000282 A6 05            [24]  516 	mov	@r0,ar5
      000284 08               [12]  517 	inc	r0
      000285 A6 04            [24]  518 	mov	@r0,ar4
                                    519 ;	sincosf.c:88: f=((r-XN*C1)+g)-XN*C2;
      000287 C0*00            [24]  520 	push	bits
      000289 E5*00            [12]  521 	mov	a,_bp
      00028B 24 15            [12]  522 	add	a,#0x15
      00028D F8               [12]  523 	mov	r0,a
      00028E E6               [12]  524 	mov	a,@r0
      00028F C0 E0            [24]  525 	push	acc
      000291 08               [12]  526 	inc	r0
      000292 E6               [12]  527 	mov	a,@r0
      000293 C0 E0            [24]  528 	push	acc
      000295 08               [12]  529 	inc	r0
      000296 E6               [12]  530 	mov	a,@r0
      000297 C0 E0            [24]  531 	push	acc
      000299 08               [12]  532 	inc	r0
      00029A E6               [12]  533 	mov	a,@r0
      00029B C0 E0            [24]  534 	push	acc
      00029D 90 00 00         [24]  535 	mov	dptr,#0x0000
      0002A0 75 F0 49         [24]  536 	mov	b,#0x49
      0002A3 74 40            [12]  537 	mov	a,#0x40
      0002A5 12r00r00         [24]  538 	lcall	___fsmul
      0002A8 AA 82            [24]  539 	mov	r2,dpl
      0002AA AB 83            [24]  540 	mov	r3,dph
      0002AC AE F0            [24]  541 	mov	r6,b
      0002AE FF               [12]  542 	mov	r7,a
      0002AF E5 81            [12]  543 	mov	a,sp
      0002B1 24 FC            [12]  544 	add	a,#0xfc
      0002B3 F5 81            [12]  545 	mov	sp,a
      0002B5 D0*00            [24]  546 	pop	bits
      0002B7 C0*00            [24]  547 	push	bits
      0002B9 C0 02            [24]  548 	push	ar2
      0002BB C0 03            [24]  549 	push	ar3
      0002BD C0 06            [24]  550 	push	ar6
      0002BF C0 07            [24]  551 	push	ar7
      0002C1 E5*00            [12]  552 	mov	a,_bp
      0002C3 24 0D            [12]  553 	add	a,#0x0d
      0002C5 F8               [12]  554 	mov	r0,a
      0002C6 86 82            [24]  555 	mov	dpl,@r0
      0002C8 08               [12]  556 	inc	r0
      0002C9 86 83            [24]  557 	mov	dph,@r0
      0002CB 08               [12]  558 	inc	r0
      0002CC 86 F0            [24]  559 	mov	b,@r0
      0002CE 08               [12]  560 	inc	r0
      0002CF E6               [12]  561 	mov	a,@r0
      0002D0 12r00r00         [24]  562 	lcall	___fssub
      0002D3 AC 82            [24]  563 	mov	r4,dpl
      0002D5 AD 83            [24]  564 	mov	r5,dph
      0002D7 AE F0            [24]  565 	mov	r6,b
      0002D9 FF               [12]  566 	mov	r7,a
      0002DA E5 81            [12]  567 	mov	a,sp
      0002DC 24 FC            [12]  568 	add	a,#0xfc
      0002DE F5 81            [12]  569 	mov	sp,a
      0002E0 D0*00            [24]  570 	pop	bits
      0002E2 C0*00            [24]  571 	push	bits
      0002E4 E5*00            [12]  572 	mov	a,_bp
      0002E6 24 11            [12]  573 	add	a,#0x11
      0002E8 F8               [12]  574 	mov	r0,a
      0002E9 E6               [12]  575 	mov	a,@r0
      0002EA C0 E0            [24]  576 	push	acc
      0002EC 08               [12]  577 	inc	r0
      0002ED E6               [12]  578 	mov	a,@r0
      0002EE C0 E0            [24]  579 	push	acc
      0002F0 08               [12]  580 	inc	r0
      0002F1 E6               [12]  581 	mov	a,@r0
      0002F2 C0 E0            [24]  582 	push	acc
      0002F4 08               [12]  583 	inc	r0
      0002F5 E6               [12]  584 	mov	a,@r0
      0002F6 C0 E0            [24]  585 	push	acc
      0002F8 8C 82            [24]  586 	mov	dpl,r4
      0002FA 8D 83            [24]  587 	mov	dph,r5
      0002FC 8E F0            [24]  588 	mov	b,r6
      0002FE EF               [12]  589 	mov	a,r7
      0002FF 12r00r00         [24]  590 	lcall	___fsadd
      000302 C8               [12]  591 	xch	a,r0
      000303 E5*00            [12]  592 	mov	a,_bp
      000305 24 05            [12]  593 	add	a,#0x05
      000307 C8               [12]  594 	xch	a,r0
      000308 A6 82            [24]  595 	mov	@r0,dpl
      00030A 08               [12]  596 	inc	r0
      00030B A6 83            [24]  597 	mov	@r0,dph
      00030D 08               [12]  598 	inc	r0
      00030E A6 F0            [24]  599 	mov	@r0,b
      000310 08               [12]  600 	inc	r0
      000311 F6               [12]  601 	mov	@r0,a
      000312 E5 81            [12]  602 	mov	a,sp
      000314 24 FC            [12]  603 	add	a,#0xfc
      000316 F5 81            [12]  604 	mov	sp,a
      000318 D0*00            [24]  605 	pop	bits
      00031A C0*00            [24]  606 	push	bits
      00031C E5*00            [12]  607 	mov	a,_bp
      00031E 24 15            [12]  608 	add	a,#0x15
      000320 F8               [12]  609 	mov	r0,a
      000321 E6               [12]  610 	mov	a,@r0
      000322 C0 E0            [24]  611 	push	acc
      000324 08               [12]  612 	inc	r0
      000325 E6               [12]  613 	mov	a,@r0
      000326 C0 E0            [24]  614 	push	acc
      000328 08               [12]  615 	inc	r0
      000329 E6               [12]  616 	mov	a,@r0
      00032A C0 E0            [24]  617 	push	acc
      00032C 08               [12]  618 	inc	r0
      00032D E6               [12]  619 	mov	a,@r0
      00032E C0 E0            [24]  620 	push	acc
      000330 90 AA 22         [24]  621 	mov	dptr,#0xAA22
      000333 75 F0 7D         [24]  622 	mov	b,#0x7D
      000336 74 3A            [12]  623 	mov	a,#0x3A
      000338 12r00r00         [24]  624 	lcall	___fsmul
      00033B AA 82            [24]  625 	mov	r2,dpl
      00033D AB 83            [24]  626 	mov	r3,dph
      00033F AE F0            [24]  627 	mov	r6,b
      000341 FF               [12]  628 	mov	r7,a
      000342 E5 81            [12]  629 	mov	a,sp
      000344 24 FC            [12]  630 	add	a,#0xfc
      000346 F5 81            [12]  631 	mov	sp,a
      000348 D0*00            [24]  632 	pop	bits
      00034A C0*00            [24]  633 	push	bits
      00034C C0 02            [24]  634 	push	ar2
      00034E C0 03            [24]  635 	push	ar3
      000350 C0 06            [24]  636 	push	ar6
      000352 C0 07            [24]  637 	push	ar7
      000354 E5*00            [12]  638 	mov	a,_bp
      000356 24 05            [12]  639 	add	a,#0x05
      000358 F8               [12]  640 	mov	r0,a
      000359 86 82            [24]  641 	mov	dpl,@r0
      00035B 08               [12]  642 	inc	r0
      00035C 86 83            [24]  643 	mov	dph,@r0
      00035E 08               [12]  644 	inc	r0
      00035F 86 F0            [24]  645 	mov	b,@r0
      000361 08               [12]  646 	inc	r0
      000362 E6               [12]  647 	mov	a,@r0
      000363 12r00r00         [24]  648 	lcall	___fssub
      000366 AC 82            [24]  649 	mov	r4,dpl
      000368 AD 83            [24]  650 	mov	r5,dph
      00036A AE F0            [24]  651 	mov	r6,b
      00036C FF               [12]  652 	mov	r7,a
      00036D E5 81            [12]  653 	mov	a,sp
      00036F 24 FC            [12]  654 	add	a,#0xfc
      000371 F5 81            [12]  655 	mov	sp,a
      000373 D0*00            [24]  656 	pop	bits
      000375 E5*00            [12]  657 	mov	a,_bp
      000377 24 09            [12]  658 	add	a,#0x09
      000379 F8               [12]  659 	mov	r0,a
      00037A A6 04            [24]  660 	mov	@r0,ar4
      00037C 08               [12]  661 	inc	r0
      00037D A6 05            [24]  662 	mov	@r0,ar5
      00037F 08               [12]  663 	inc	r0
      000380 A6 06            [24]  664 	mov	@r0,ar6
      000382 08               [12]  665 	inc	r0
      000383 A6 07            [24]  666 	mov	@r0,ar7
                                    667 ;	sincosf.c:90: g=f*f;
      000385 C0*00            [24]  668 	push	bits
      000387 E5*00            [12]  669 	mov	a,_bp
      000389 24 09            [12]  670 	add	a,#0x09
      00038B F8               [12]  671 	mov	r0,a
      00038C E6               [12]  672 	mov	a,@r0
      00038D C0 E0            [24]  673 	push	acc
      00038F 08               [12]  674 	inc	r0
      000390 E6               [12]  675 	mov	a,@r0
      000391 C0 E0            [24]  676 	push	acc
      000393 08               [12]  677 	inc	r0
      000394 E6               [12]  678 	mov	a,@r0
      000395 C0 E0            [24]  679 	push	acc
      000397 08               [12]  680 	inc	r0
      000398 E6               [12]  681 	mov	a,@r0
      000399 C0 E0            [24]  682 	push	acc
      00039B E5*00            [12]  683 	mov	a,_bp
      00039D 24 09            [12]  684 	add	a,#0x09
      00039F F8               [12]  685 	mov	r0,a
      0003A0 86 82            [24]  686 	mov	dpl,@r0
      0003A2 08               [12]  687 	inc	r0
      0003A3 86 83            [24]  688 	mov	dph,@r0
      0003A5 08               [12]  689 	inc	r0
      0003A6 86 F0            [24]  690 	mov	b,@r0
      0003A8 08               [12]  691 	inc	r0
      0003A9 E6               [12]  692 	mov	a,@r0
      0003AA 12r00r00         [24]  693 	lcall	___fsmul
      0003AD AA 82            [24]  694 	mov	r2,dpl
      0003AF AB 83            [24]  695 	mov	r3,dph
      0003B1 AE F0            [24]  696 	mov	r6,b
      0003B3 FF               [12]  697 	mov	r7,a
      0003B4 E5 81            [12]  698 	mov	a,sp
      0003B6 24 FC            [12]  699 	add	a,#0xfc
      0003B8 F5 81            [12]  700 	mov	sp,a
      0003BA D0*00            [24]  701 	pop	bits
      0003BC E5*00            [12]  702 	mov	a,_bp
      0003BE 24 11            [12]  703 	add	a,#0x11
      0003C0 F8               [12]  704 	mov	r0,a
      0003C1 A6 02            [24]  705 	mov	@r0,ar2
      0003C3 08               [12]  706 	inc	r0
      0003C4 A6 03            [24]  707 	mov	@r0,ar3
      0003C6 08               [12]  708 	inc	r0
      0003C7 A6 06            [24]  709 	mov	@r0,ar6
      0003C9 08               [12]  710 	inc	r0
      0003CA A6 07            [24]  711 	mov	@r0,ar7
                                    712 ;	sincosf.c:91: if(g>EPS2) //Used to be if(fabsf(f)>EPS)
      0003CC C0*00            [24]  713 	push	bits
      0003CE 74 F3            [12]  714 	mov	a,#0xF3
      0003D0 C0 E0            [24]  715 	push	acc
      0003D2 74 FF            [12]  716 	mov	a,#0xFF
      0003D4 C0 E0            [24]  717 	push	acc
      0003D6 74 7F            [12]  718 	mov	a,#0x7F
      0003D8 C0 E0            [24]  719 	push	acc
      0003DA 74 33            [12]  720 	mov	a,#0x33
      0003DC C0 E0            [24]  721 	push	acc
      0003DE E5*00            [12]  722 	mov	a,_bp
      0003E0 24 11            [12]  723 	add	a,#0x11
      0003E2 F8               [12]  724 	mov	r0,a
      0003E3 86 82            [24]  725 	mov	dpl,@r0
      0003E5 08               [12]  726 	inc	r0
      0003E6 86 83            [24]  727 	mov	dph,@r0
      0003E8 08               [12]  728 	inc	r0
      0003E9 86 F0            [24]  729 	mov	b,@r0
      0003EB 08               [12]  730 	inc	r0
      0003EC E6               [12]  731 	mov	a,@r0
      0003ED 12r00r00         [24]  732 	lcall	___fsgt
      0003F0 AF 82            [24]  733 	mov	r7,dpl
      0003F2 E5 81            [12]  734 	mov	a,sp
      0003F4 24 FC            [12]  735 	add	a,#0xfc
      0003F6 F5 81            [12]  736 	mov	sp,a
      0003F8 D0*00            [24]  737 	pop	bits
      0003FA EF               [12]  738 	mov	a,r7
      0003FB 70 03            [24]  739 	jnz	00145$
      0003FD 02r05rC0         [24]  740 	ljmp	00114$
      000400                        741 00145$:
                                    742 ;	sincosf.c:93: r=(((r4*g+r3)*g+r2)*g+r1)*g;
      000400 C0*00            [24]  743 	push	bits
      000402 E5*00            [12]  744 	mov	a,_bp
      000404 24 11            [12]  745 	add	a,#0x11
      000406 F8               [12]  746 	mov	r0,a
      000407 E6               [12]  747 	mov	a,@r0
      000408 C0 E0            [24]  748 	push	acc
      00040A 08               [12]  749 	inc	r0
      00040B E6               [12]  750 	mov	a,@r0
      00040C C0 E0            [24]  751 	push	acc
      00040E 08               [12]  752 	inc	r0
      00040F E6               [12]  753 	mov	a,@r0
      000410 C0 E0            [24]  754 	push	acc
      000412 08               [12]  755 	inc	r0
      000413 E6               [12]  756 	mov	a,@r0
      000414 C0 E0            [24]  757 	push	acc
      000416 90 9C 5B         [24]  758 	mov	dptr,#0x9C5B
      000419 75 F0 2E         [24]  759 	mov	b,#0x2E
      00041C 74 36            [12]  760 	mov	a,#0x36
      00041E 12r00r00         [24]  761 	lcall	___fsmul
      000421 AC 82            [24]  762 	mov	r4,dpl
      000423 AD 83            [24]  763 	mov	r5,dph
      000425 AE F0            [24]  764 	mov	r6,b
      000427 FF               [12]  765 	mov	r7,a
      000428 E5 81            [12]  766 	mov	a,sp
      00042A 24 FC            [12]  767 	add	a,#0xfc
      00042C F5 81            [12]  768 	mov	sp,a
      00042E D0*00            [24]  769 	pop	bits
      000430 C0*00            [24]  770 	push	bits
      000432 74 22            [12]  771 	mov	a,#0x22
      000434 C0 E0            [24]  772 	push	acc
      000436 74 B2            [12]  773 	mov	a,#0xB2
      000438 C0 E0            [24]  774 	push	acc
      00043A 74 4F            [12]  775 	mov	a,#0x4F
      00043C C0 E0            [24]  776 	push	acc
      00043E 74 B9            [12]  777 	mov	a,#0xB9
      000440 C0 E0            [24]  778 	push	acc
      000442 8C 82            [24]  779 	mov	dpl,r4
      000444 8D 83            [24]  780 	mov	dph,r5
      000446 8E F0            [24]  781 	mov	b,r6
      000448 EF               [12]  782 	mov	a,r7
      000449 12r00r00         [24]  783 	lcall	___fsadd
      00044C AC 82            [24]  784 	mov	r4,dpl
      00044E AD 83            [24]  785 	mov	r5,dph
      000450 AE F0            [24]  786 	mov	r6,b
      000452 FF               [12]  787 	mov	r7,a
      000453 E5 81            [12]  788 	mov	a,sp
      000455 24 FC            [12]  789 	add	a,#0xfc
      000457 F5 81            [12]  790 	mov	sp,a
      000459 D0*00            [24]  791 	pop	bits
      00045B C0*00            [24]  792 	push	bits
      00045D E5*00            [12]  793 	mov	a,_bp
      00045F 24 11            [12]  794 	add	a,#0x11
      000461 F8               [12]  795 	mov	r0,a
      000462 E6               [12]  796 	mov	a,@r0
      000463 C0 E0            [24]  797 	push	acc
      000465 08               [12]  798 	inc	r0
      000466 E6               [12]  799 	mov	a,@r0
      000467 C0 E0            [24]  800 	push	acc
      000469 08               [12]  801 	inc	r0
      00046A E6               [12]  802 	mov	a,@r0
      00046B C0 E0            [24]  803 	push	acc
      00046D 08               [12]  804 	inc	r0
      00046E E6               [12]  805 	mov	a,@r0
      00046F C0 E0            [24]  806 	push	acc
      000471 8C 82            [24]  807 	mov	dpl,r4
      000473 8D 83            [24]  808 	mov	dph,r5
      000475 8E F0            [24]  809 	mov	b,r6
      000477 EF               [12]  810 	mov	a,r7
      000478 12r00r00         [24]  811 	lcall	___fsmul
      00047B AC 82            [24]  812 	mov	r4,dpl
      00047D AD 83            [24]  813 	mov	r5,dph
      00047F AE F0            [24]  814 	mov	r6,b
      000481 FF               [12]  815 	mov	r7,a
      000482 E5 81            [12]  816 	mov	a,sp
      000484 24 FC            [12]  817 	add	a,#0xfc
      000486 F5 81            [12]  818 	mov	sp,a
      000488 D0*00            [24]  819 	pop	bits
      00048A C0*00            [24]  820 	push	bits
      00048C 74 3E            [12]  821 	mov	a,#0x3E
      00048E C0 E0            [24]  822 	push	acc
      000490 74 87            [12]  823 	mov	a,#0x87
      000492 C0 E0            [24]  824 	push	acc
      000494 74 08            [12]  825 	mov	a,#0x08
      000496 C0 E0            [24]  826 	push	acc
      000498 74 3C            [12]  827 	mov	a,#0x3C
      00049A C0 E0            [24]  828 	push	acc
      00049C 8C 82            [24]  829 	mov	dpl,r4
      00049E 8D 83            [24]  830 	mov	dph,r5
      0004A0 8E F0            [24]  831 	mov	b,r6
      0004A2 EF               [12]  832 	mov	a,r7
      0004A3 12r00r00         [24]  833 	lcall	___fsadd
      0004A6 AC 82            [24]  834 	mov	r4,dpl
      0004A8 AD 83            [24]  835 	mov	r5,dph
      0004AA AE F0            [24]  836 	mov	r6,b
      0004AC FF               [12]  837 	mov	r7,a
      0004AD E5 81            [12]  838 	mov	a,sp
      0004AF 24 FC            [12]  839 	add	a,#0xfc
      0004B1 F5 81            [12]  840 	mov	sp,a
      0004B3 D0*00            [24]  841 	pop	bits
      0004B5 C0*00            [24]  842 	push	bits
      0004B7 E5*00            [12]  843 	mov	a,_bp
      0004B9 24 11            [12]  844 	add	a,#0x11
      0004BB F8               [12]  845 	mov	r0,a
      0004BC E6               [12]  846 	mov	a,@r0
      0004BD C0 E0            [24]  847 	push	acc
      0004BF 08               [12]  848 	inc	r0
      0004C0 E6               [12]  849 	mov	a,@r0
      0004C1 C0 E0            [24]  850 	push	acc
      0004C3 08               [12]  851 	inc	r0
      0004C4 E6               [12]  852 	mov	a,@r0
      0004C5 C0 E0            [24]  853 	push	acc
      0004C7 08               [12]  854 	inc	r0
      0004C8 E6               [12]  855 	mov	a,@r0
      0004C9 C0 E0            [24]  856 	push	acc
      0004CB 8C 82            [24]  857 	mov	dpl,r4
      0004CD 8D 83            [24]  858 	mov	dph,r5
      0004CF 8E F0            [24]  859 	mov	b,r6
      0004D1 EF               [12]  860 	mov	a,r7
      0004D2 12r00r00         [24]  861 	lcall	___fsmul
      0004D5 AC 82            [24]  862 	mov	r4,dpl
      0004D7 AD 83            [24]  863 	mov	r5,dph
      0004D9 AE F0            [24]  864 	mov	r6,b
      0004DB FF               [12]  865 	mov	r7,a
      0004DC E5 81            [12]  866 	mov	a,sp
      0004DE 24 FC            [12]  867 	add	a,#0xfc
      0004E0 F5 81            [12]  868 	mov	sp,a
      0004E2 D0*00            [24]  869 	pop	bits
      0004E4 C0*00            [24]  870 	push	bits
      0004E6 74 A4            [12]  871 	mov	a,#0xA4
      0004E8 C0 E0            [24]  872 	push	acc
      0004EA 74 AA            [12]  873 	mov	a,#0xAA
      0004EC C0 E0            [24]  874 	push	acc
      0004EE 74 2A            [12]  875 	mov	a,#0x2A
      0004F0 C0 E0            [24]  876 	push	acc
      0004F2 74 BE            [12]  877 	mov	a,#0xBE
      0004F4 C0 E0            [24]  878 	push	acc
      0004F6 8C 82            [24]  879 	mov	dpl,r4
      0004F8 8D 83            [24]  880 	mov	dph,r5
      0004FA 8E F0            [24]  881 	mov	b,r6
      0004FC EF               [12]  882 	mov	a,r7
      0004FD 12r00r00         [24]  883 	lcall	___fsadd
      000500 AC 82            [24]  884 	mov	r4,dpl
      000502 AD 83            [24]  885 	mov	r5,dph
      000504 AE F0            [24]  886 	mov	r6,b
      000506 FF               [12]  887 	mov	r7,a
      000507 E5 81            [12]  888 	mov	a,sp
      000509 24 FC            [12]  889 	add	a,#0xfc
      00050B F5 81            [12]  890 	mov	sp,a
      00050D D0*00            [24]  891 	pop	bits
      00050F C0*00            [24]  892 	push	bits
      000511 E5*00            [12]  893 	mov	a,_bp
      000513 24 11            [12]  894 	add	a,#0x11
      000515 F8               [12]  895 	mov	r0,a
      000516 E6               [12]  896 	mov	a,@r0
      000517 C0 E0            [24]  897 	push	acc
      000519 08               [12]  898 	inc	r0
      00051A E6               [12]  899 	mov	a,@r0
      00051B C0 E0            [24]  900 	push	acc
      00051D 08               [12]  901 	inc	r0
      00051E E6               [12]  902 	mov	a,@r0
      00051F C0 E0            [24]  903 	push	acc
      000521 08               [12]  904 	inc	r0
      000522 E6               [12]  905 	mov	a,@r0
      000523 C0 E0            [24]  906 	push	acc
      000525 8C 82            [24]  907 	mov	dpl,r4
      000527 8D 83            [24]  908 	mov	dph,r5
      000529 8E F0            [24]  909 	mov	b,r6
      00052B EF               [12]  910 	mov	a,r7
      00052C 12r00r00         [24]  911 	lcall	___fsmul
      00052F AC 82            [24]  912 	mov	r4,dpl
      000531 AD 83            [24]  913 	mov	r5,dph
      000533 AE F0            [24]  914 	mov	r6,b
      000535 FF               [12]  915 	mov	r7,a
      000536 E5 81            [12]  916 	mov	a,sp
      000538 24 FC            [12]  917 	add	a,#0xfc
      00053A F5 81            [12]  918 	mov	sp,a
      00053C D0*00            [24]  919 	pop	bits
      00053E E5*00            [12]  920 	mov	a,_bp
      000540 24 0D            [12]  921 	add	a,#0x0d
      000542 F8               [12]  922 	mov	r0,a
      000543 A6 04            [24]  923 	mov	@r0,ar4
      000545 08               [12]  924 	inc	r0
      000546 A6 05            [24]  925 	mov	@r0,ar5
      000548 08               [12]  926 	inc	r0
      000549 A6 06            [24]  927 	mov	@r0,ar6
      00054B 08               [12]  928 	inc	r0
      00054C A6 07            [24]  929 	mov	@r0,ar7
                                    930 ;	sincosf.c:94: f+=f*r;
      00054E C0*00            [24]  931 	push	bits
      000550 E5*00            [12]  932 	mov	a,_bp
      000552 24 0D            [12]  933 	add	a,#0x0d
      000554 F8               [12]  934 	mov	r0,a
      000555 E6               [12]  935 	mov	a,@r0
      000556 C0 E0            [24]  936 	push	acc
      000558 08               [12]  937 	inc	r0
      000559 E6               [12]  938 	mov	a,@r0
      00055A C0 E0            [24]  939 	push	acc
      00055C 08               [12]  940 	inc	r0
      00055D E6               [12]  941 	mov	a,@r0
      00055E C0 E0            [24]  942 	push	acc
      000560 08               [12]  943 	inc	r0
      000561 E6               [12]  944 	mov	a,@r0
      000562 C0 E0            [24]  945 	push	acc
      000564 E5*00            [12]  946 	mov	a,_bp
      000566 24 09            [12]  947 	add	a,#0x09
      000568 F8               [12]  948 	mov	r0,a
      000569 86 82            [24]  949 	mov	dpl,@r0
      00056B 08               [12]  950 	inc	r0
      00056C 86 83            [24]  951 	mov	dph,@r0
      00056E 08               [12]  952 	inc	r0
      00056F 86 F0            [24]  953 	mov	b,@r0
      000571 08               [12]  954 	inc	r0
      000572 E6               [12]  955 	mov	a,@r0
      000573 12r00r00         [24]  956 	lcall	___fsmul
      000576 AC 82            [24]  957 	mov	r4,dpl
      000578 AD 83            [24]  958 	mov	r5,dph
      00057A AE F0            [24]  959 	mov	r6,b
      00057C FF               [12]  960 	mov	r7,a
      00057D E5 81            [12]  961 	mov	a,sp
      00057F 24 FC            [12]  962 	add	a,#0xfc
      000581 F5 81            [12]  963 	mov	sp,a
      000583 D0*00            [24]  964 	pop	bits
      000585 C0*00            [24]  965 	push	bits
      000587 C0 04            [24]  966 	push	ar4
      000589 C0 05            [24]  967 	push	ar5
      00058B C0 06            [24]  968 	push	ar6
      00058D C0 07            [24]  969 	push	ar7
      00058F E5*00            [12]  970 	mov	a,_bp
      000591 24 09            [12]  971 	add	a,#0x09
      000593 F8               [12]  972 	mov	r0,a
      000594 86 82            [24]  973 	mov	dpl,@r0
      000596 08               [12]  974 	inc	r0
      000597 86 83            [24]  975 	mov	dph,@r0
      000599 08               [12]  976 	inc	r0
      00059A 86 F0            [24]  977 	mov	b,@r0
      00059C 08               [12]  978 	inc	r0
      00059D E6               [12]  979 	mov	a,@r0
      00059E 12r00r00         [24]  980 	lcall	___fsadd
      0005A1 AC 82            [24]  981 	mov	r4,dpl
      0005A3 AD 83            [24]  982 	mov	r5,dph
      0005A5 AE F0            [24]  983 	mov	r6,b
      0005A7 FF               [12]  984 	mov	r7,a
      0005A8 E5 81            [12]  985 	mov	a,sp
      0005AA 24 FC            [12]  986 	add	a,#0xfc
      0005AC F5 81            [12]  987 	mov	sp,a
      0005AE D0*00            [24]  988 	pop	bits
      0005B0 E5*00            [12]  989 	mov	a,_bp
      0005B2 24 09            [12]  990 	add	a,#0x09
      0005B4 F8               [12]  991 	mov	r0,a
      0005B5 A6 04            [24]  992 	mov	@r0,ar4
      0005B7 08               [12]  993 	inc	r0
      0005B8 A6 05            [24]  994 	mov	@r0,ar5
      0005BA 08               [12]  995 	inc	r0
      0005BB A6 06            [24]  996 	mov	@r0,ar6
      0005BD 08               [12]  997 	inc	r0
      0005BE A6 07            [24]  998 	mov	@r0,ar7
      0005C0                        999 00114$:
                                   1000 ;	sincosf.c:96: return (sign?-f:f);
      0005C0 30*00 14         [24] 1001 	jnb	b1,00117$
      0005C3 E5*00            [12] 1002 	mov	a,_bp
      0005C5 24 09            [12] 1003 	add	a,#0x09
      0005C7 F8               [12] 1004 	mov	r0,a
      0005C8 86 04            [24] 1005 	mov	ar4,@r0
      0005CA 08               [12] 1006 	inc	r0
      0005CB 86 05            [24] 1007 	mov	ar5,@r0
      0005CD 08               [12] 1008 	inc	r0
      0005CE 86 06            [24] 1009 	mov	ar6,@r0
      0005D0 08               [12] 1010 	inc	r0
      0005D1 E6               [12] 1011 	mov	a,@r0
      0005D2 B2 E7            [12] 1012 	cpl	acc.7
      0005D4 FF               [12] 1013 	mov	r7,a
      0005D5 80 10            [24] 1014 	sjmp	00118$
      0005D7                       1015 00117$:
      0005D7 E5*00            [12] 1016 	mov	a,_bp
      0005D9 24 09            [12] 1017 	add	a,#0x09
      0005DB F8               [12] 1018 	mov	r0,a
      0005DC 86 04            [24] 1019 	mov	ar4,@r0
      0005DE 08               [12] 1020 	inc	r0
      0005DF 86 05            [24] 1021 	mov	ar5,@r0
      0005E1 08               [12] 1022 	inc	r0
      0005E2 86 06            [24] 1023 	mov	ar6,@r0
      0005E4 08               [12] 1024 	inc	r0
      0005E5 86 07            [24] 1025 	mov	ar7,@r0
      0005E7                       1026 00118$:
      0005E7 8C 82            [24] 1027 	mov	dpl,r4
      0005E9 8D 83            [24] 1028 	mov	dph,r5
      0005EB 8E F0            [24] 1029 	mov	b,r6
      0005ED EF               [12] 1030 	mov	a,r7
      0005EE                       1031 00115$:
      0005EE 85*00 81         [24] 1032 	mov	sp,_bp
      0005F1 D0*00            [24] 1033 	pop	_bp
      0005F3 22               [24] 1034 	ret
                                   1035 	.area CSEG    (CODE)
                                   1036 	.area CONST   (CODE)
                                   1037 	.area XINIT   (CODE)
                                   1038 	.area CABS    (ABS,CODE)
