                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:10 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module cotf
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tancotf
                                     13 	.globl _fabsf
                                     14 	.globl _cotf
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; overlayable bit register bank
                                     32 ;--------------------------------------------------------
                                     33 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         34 bits:
      000000                         35 	.ds 1
                           008000    36 	b0 = bits[0]
                           008100    37 	b1 = bits[1]
                           008200    38 	b2 = bits[2]
                           008300    39 	b3 = bits[3]
                           008400    40 	b4 = bits[4]
                           008500    41 	b5 = bits[5]
                           008600    42 	b6 = bits[6]
                           008700    43 	b7 = bits[7]
                                     44 ;--------------------------------------------------------
                                     45 ; internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DSEG    (DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; overlayable items in internal ram 
                                     50 ;--------------------------------------------------------
                                     51 ;--------------------------------------------------------
                                     52 ; indirectly addressable internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area ISEG    (DATA)
                                     55 ;--------------------------------------------------------
                                     56 ; absolute internal ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area IABS    (ABS,DATA)
                                     59 	.area IABS    (ABS,DATA)
                                     60 ;--------------------------------------------------------
                                     61 ; bit data
                                     62 ;--------------------------------------------------------
                                     63 	.area BSEG    (BIT)
                                     64 ;--------------------------------------------------------
                                     65 ; paged external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area PSEG    (PAG,XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XSEG    (XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; absolute external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XABS    (ABS,XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; external initialized ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XISEG   (XDATA)
                                     80 	.area HOME    (CODE)
                                     81 	.area GSINIT0 (CODE)
                                     82 	.area GSINIT1 (CODE)
                                     83 	.area GSINIT2 (CODE)
                                     84 	.area GSINIT3 (CODE)
                                     85 	.area GSINIT4 (CODE)
                                     86 	.area GSINIT5 (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area CSEG    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; global & static initialisations
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 	.area GSFINAL (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME    (CODE)
                                    101 	.area HOME    (CODE)
                                    102 ;--------------------------------------------------------
                                    103 ; code
                                    104 ;--------------------------------------------------------
                                    105 	.area CSEG    (CODE)
                                    106 ;------------------------------------------------------------
                                    107 ;Allocation info for local variables in function 'cotf'
                                    108 ;------------------------------------------------------------
                                    109 ;x                         Allocated to registers r4 r5 r6 r7 
                                    110 ;y                         Allocated to stack - _bp +1
                                    111 ;------------------------------------------------------------
                                    112 ;	cotf.c:37: float cotf(const float x) _FLOAT_FUNC_REENTRANT
                                    113 ;	-----------------------------------------
                                    114 ;	 function cotf
                                    115 ;	-----------------------------------------
      000000                        116 _cotf:
                           000007   117 	ar7 = 0x07
                           000006   118 	ar6 = 0x06
                           000005   119 	ar5 = 0x05
                           000004   120 	ar4 = 0x04
                           000003   121 	ar3 = 0x03
                           000002   122 	ar2 = 0x02
                           000001   123 	ar1 = 0x01
                           000000   124 	ar0 = 0x00
      000000 C0*00            [24]  125 	push	_bp
      000002 85 81*00         [24]  126 	mov	_bp,sp
      000005 AC 82            [24]  127 	mov	r4,dpl
      000007 AD 83            [24]  128 	mov	r5,dph
      000009 AE F0            [24]  129 	mov	r6,b
      00000B FF               [12]  130 	mov	r7,a
      00000C E5 81            [12]  131 	mov	a,sp
      00000E 24 04            [12]  132 	add	a,#0x04
      000010 F5 81            [12]  133 	mov	sp,a
                                    134 ;	cotf.c:41: y=fabsf(x);
      000012 8C 82            [24]  135 	mov	dpl,r4
      000014 8D 83            [24]  136 	mov	dph,r5
      000016 8E F0            [24]  137 	mov	b,r6
      000018 EF               [12]  138 	mov	a,r7
      000019 C0 07            [24]  139 	push	ar7
      00001B C0 06            [24]  140 	push	ar6
      00001D C0 05            [24]  141 	push	ar5
      00001F C0 04            [24]  142 	push	ar4
      000021 12r00r00         [24]  143 	lcall	_fabsf
      000024 A8*00            [24]  144 	mov	r0,_bp
      000026 08               [12]  145 	inc	r0
      000027 A6 82            [24]  146 	mov	@r0,dpl
      000029 08               [12]  147 	inc	r0
      00002A A6 83            [24]  148 	mov	@r0,dph
      00002C 08               [12]  149 	inc	r0
      00002D A6 F0            [24]  150 	mov	@r0,b
      00002F 08               [12]  151 	inc	r0
      000030 F6               [12]  152 	mov	@r0,a
      000031 A8*00            [24]  153 	mov	r0,_bp
      000033 08               [12]  154 	inc	r0
                                    155 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
      000034 74 60            [12]  156 	mov	a,#0x60
      000036 C0 E0            [24]  157 	push	acc
      000038 74 42            [12]  158 	mov	a,#0x42
      00003A C0 E0            [24]  159 	push	acc
      00003C 74 A2            [12]  160 	mov	a,#0xA2
      00003E C0 E0            [24]  161 	push	acc
      000040 74 0D            [12]  162 	mov	a,#0x0D
      000042 C0 E0            [24]  163 	push	acc
      000044 A8*00            [24]  164 	mov	r0,_bp
      000046 08               [12]  165 	inc	r0
      000047 86 82            [24]  166 	mov	dpl,@r0
      000049 08               [12]  167 	inc	r0
      00004A 86 83            [24]  168 	mov	dph,@r0
      00004C 08               [12]  169 	inc	r0
      00004D 86 F0            [24]  170 	mov	b,@r0
      00004F 08               [12]  171 	inc	r0
      000050 E6               [12]  172 	mov	a,@r0
      000051 12r00r00         [24]  173 	lcall	___fslt
      000054 AB 82            [24]  174 	mov	r3,dpl
      000056 E5 81            [12]  175 	mov	a,sp
      000058 24 FC            [12]  176 	add	a,#0xfc
      00005A F5 81            [12]  177 	mov	sp,a
      00005C D0 04            [24]  178 	pop	ar4
      00005E D0 05            [24]  179 	pop	ar5
      000060 D0 06            [24]  180 	pop	ar6
      000062 D0 07            [24]  181 	pop	ar7
      000064 EB               [12]  182 	mov	a,r3
      000065 60 39            [24]  183 	jz	00105$
                                    184 ;	cotf.c:44: errno = ERANGE;
      000067 90r00r00         [24]  185 	mov	dptr,#_errno
      00006A 74 22            [12]  186 	mov	a,#0x22
      00006C F0               [24]  187 	movx	@dptr,a
      00006D E4               [12]  188 	clr	a
      00006E A3               [24]  189 	inc	dptr
      00006F F0               [24]  190 	movx	@dptr,a
                                    191 ;	cotf.c:45: if (x<0.0)
      000070 C0 E0            [24]  192 	push	acc
      000072 C0 E0            [24]  193 	push	acc
      000074 C0 E0            [24]  194 	push	acc
      000076 C0 E0            [24]  195 	push	acc
      000078 8C 82            [24]  196 	mov	dpl,r4
      00007A 8D 83            [24]  197 	mov	dph,r5
      00007C 8E F0            [24]  198 	mov	b,r6
      00007E EF               [12]  199 	mov	a,r7
      00007F 12r00r00         [24]  200 	lcall	___fslt
      000082 AB 82            [24]  201 	mov	r3,dpl
      000084 E5 81            [12]  202 	mov	a,sp
      000086 24 FC            [12]  203 	add	a,#0xfc
      000088 F5 81            [12]  204 	mov	sp,a
      00008A EB               [12]  205 	mov	a,r3
      00008B 60 0A            [24]  206 	jz	00102$
                                    207 ;	cotf.c:46: return -HUGE_VALF;
      00008D 90 FF FF         [24]  208 	mov	dptr,#0xFFFF
      000090 75 F0 7F         [24]  209 	mov	b,#0x7F
      000093 74 FF            [12]  210 	mov	a,#0xFF
      000095 80 1F            [24]  211 	sjmp	00106$
      000097                        212 00102$:
                                    213 ;	cotf.c:48: return +HUGE_VALF;
      000097 90 FF FF         [24]  214 	mov	dptr,#0xFFFF
      00009A 74 7F            [12]  215 	mov	a,#0x7F
      00009C F5 F0            [12]  216 	mov	b,a
      00009E 80 16            [24]  217 	sjmp	00106$
      0000A0                        218 00105$:
                                    219 ;	cotf.c:50: return tancotf(x, 1);
      0000A0 D2 F0            [12]  220 	setb	b[0]
      0000A2 85 F0*00         [24]  221 	mov	bits,b
      0000A5 8C 82            [24]  222 	mov	dpl,r4
      0000A7 8D 83            [24]  223 	mov	dph,r5
      0000A9 8E F0            [24]  224 	mov	b,r6
      0000AB EF               [12]  225 	mov	a,r7
      0000AC 12r00r00         [24]  226 	lcall	_tancotf
      0000AF AC 82            [24]  227 	mov	r4,dpl
      0000B1 AD 83            [24]  228 	mov	r5,dph
      0000B3 AE F0            [24]  229 	mov	r6,b
      0000B5 FF               [12]  230 	mov	r7,a
      0000B6                        231 00106$:
      0000B6 85*00 81         [24]  232 	mov	sp,_bp
      0000B9 D0*00            [24]  233 	pop	_bp
      0000BB 22               [24]  234 	ret
                                    235 	.area CSEG    (CODE)
                                    236 	.area CONST   (CODE)
                                    237 	.area XINIT   (CODE)
                                    238 	.area CABS    (ABS,CODE)
