                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:10 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sincoshf
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincoshf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincoshf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscosh                    Allocated to stack - _bp -4
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;y                         Allocated to registers r7 r6 r5 r4 
                                    111 ;w                         Allocated to registers r7 r6 r5 r4 
                                    112 ;z                         Allocated to stack - _bp +9
                                    113 ;sign                      Allocated to registers b0 
                                    114 ;sloc0                     Allocated to stack - _bp +5
                                    115 ;------------------------------------------------------------
                                    116 ;	sincoshf.c:56: float sincoshf(const float x, const int iscosh)
                                    117 ;	-----------------------------------------
                                    118 ;	 function sincoshf
                                    119 ;	-----------------------------------------
      000000                        120 _sincoshf:
                           000007   121 	ar7 = 0x07
                           000006   122 	ar6 = 0x06
                           000005   123 	ar5 = 0x05
                           000004   124 	ar4 = 0x04
                           000003   125 	ar3 = 0x03
                           000002   126 	ar2 = 0x02
                           000001   127 	ar1 = 0x01
                           000000   128 	ar0 = 0x00
      000000 C0*00            [24]  129 	push	_bp
      000002 85 81*00         [24]  130 	mov	_bp,sp
      000005 C0 82            [24]  131 	push	dpl
      000007 C0 83            [24]  132 	push	dph
      000009 C0 F0            [24]  133 	push	b
      00000B C0 E0            [24]  134 	push	acc
      00000D E5 81            [12]  135 	mov	a,sp
      00000F 24 08            [12]  136 	add	a,#0x08
      000011 F5 81            [12]  137 	mov	sp,a
                                    138 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      000013 E4               [12]  139 	clr	a
      000014 C0 E0            [24]  140 	push	acc
      000016 C0 E0            [24]  141 	push	acc
      000018 C0 E0            [24]  142 	push	acc
      00001A C0 E0            [24]  143 	push	acc
      00001C A8*00            [24]  144 	mov	r0,_bp
      00001E 08               [12]  145 	inc	r0
      00001F 86 82            [24]  146 	mov	dpl,@r0
      000021 08               [12]  147 	inc	r0
      000022 86 83            [24]  148 	mov	dph,@r0
      000024 08               [12]  149 	inc	r0
      000025 86 F0            [24]  150 	mov	b,@r0
      000027 08               [12]  151 	inc	r0
      000028 E6               [12]  152 	mov	a,@r0
      000029 12r00r00         [24]  153 	lcall	___fslt
      00002C AB 82            [24]  154 	mov	r3,dpl
      00002E E5 81            [12]  155 	mov	a,sp
      000030 24 FC            [12]  156 	add	a,#0xfc
      000032 F5 81            [12]  157 	mov	sp,a
      000034 EB               [12]  158 	mov	a,r3
      000035 60 14            [24]  159 	jz	00102$
      000037 A8*00            [24]  160 	mov	r0,_bp
      000039 08               [12]  161 	inc	r0
      00003A 86 07            [24]  162 	mov	ar7,@r0
      00003C 08               [12]  163 	inc	r0
      00003D 86 06            [24]  164 	mov	ar6,@r0
      00003F 08               [12]  165 	inc	r0
      000040 86 05            [24]  166 	mov	ar5,@r0
      000042 08               [12]  167 	inc	r0
      000043 E6               [12]  168 	mov	a,@r0
      000044 B2 E7            [12]  169 	cpl	acc.7
      000046 FC               [12]  170 	mov	r4,a
      000047 D2*00            [12]  171 	setb	b0
      000049 80 10            [24]  172 	sjmp	00103$
      00004B                        173 00102$:
                                    174 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00004B A8*00            [24]  175 	mov	r0,_bp
      00004D 08               [12]  176 	inc	r0
      00004E 86 07            [24]  177 	mov	ar7,@r0
      000050 08               [12]  178 	inc	r0
      000051 86 06            [24]  179 	mov	ar6,@r0
      000053 08               [12]  180 	inc	r0
      000054 86 05            [24]  181 	mov	ar5,@r0
      000056 08               [12]  182 	inc	r0
      000057 86 04            [24]  183 	mov	ar4,@r0
      000059 C2*00            [12]  184 	clr	b0
      00005B                        185 00103$:
                                    186 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      00005B C0 07            [24]  187 	push	ar7
      00005D C0 06            [24]  188 	push	ar6
      00005F C0 05            [24]  189 	push	ar5
      000061 C0 04            [24]  190 	push	ar4
      000063 C0*00            [24]  191 	push	bits
      000065 E4               [12]  192 	clr	a
      000066 C0 E0            [24]  193 	push	acc
      000068 C0 E0            [24]  194 	push	acc
      00006A 74 80            [12]  195 	mov	a,#0x80
      00006C C0 E0            [24]  196 	push	acc
      00006E 74 3F            [12]  197 	mov	a,#0x3F
      000070 C0 E0            [24]  198 	push	acc
      000072 8F 82            [24]  199 	mov	dpl,r7
      000074 8E 83            [24]  200 	mov	dph,r6
      000076 8D F0            [24]  201 	mov	b,r5
      000078 EC               [12]  202 	mov	a,r4
      000079 12r00r00         [24]  203 	lcall	___fsgt
      00007C AB 82            [24]  204 	mov	r3,dpl
      00007E E5 81            [12]  205 	mov	a,sp
      000080 24 FC            [12]  206 	add	a,#0xfc
      000082 F5 81            [12]  207 	mov	sp,a
      000084 D0*00            [24]  208 	pop	bits
      000086 D0 04            [24]  209 	pop	ar4
      000088 D0 05            [24]  210 	pop	ar5
      00008A D0 06            [24]  211 	pop	ar6
      00008C D0 07            [24]  212 	pop	ar7
      00008E EB               [12]  213 	mov	a,r3
      00008F 70 0D            [24]  214 	jnz	00117$
      000091 E5*00            [12]  215 	mov	a,_bp
      000093 24 FC            [12]  216 	add	a,#0xfc
      000095 F8               [12]  217 	mov	r0,a
      000096 E6               [12]  218 	mov	a,@r0
      000097 08               [12]  219 	inc	r0
      000098 46               [12]  220 	orl	a,@r0
      000099 70 03            [24]  221 	jnz	00146$
      00009B 02r02rDF         [24]  222 	ljmp	00118$
      00009E                        223 00146$:
      00009E                        224 00117$:
                                    225 ;	sincoshf.c:66: if(y>YBAR)
      00009E C0 07            [24]  226 	push	ar7
      0000A0 C0 06            [24]  227 	push	ar6
      0000A2 C0 05            [24]  228 	push	ar5
      0000A4 C0 04            [24]  229 	push	ar4
      0000A6 C0*00            [24]  230 	push	bits
      0000A8 E4               [12]  231 	clr	a
      0000A9 C0 E0            [24]  232 	push	acc
      0000AB C0 E0            [24]  233 	push	acc
      0000AD 74 10            [12]  234 	mov	a,#0x10
      0000AF C0 E0            [24]  235 	push	acc
      0000B1 74 41            [12]  236 	mov	a,#0x41
      0000B3 C0 E0            [24]  237 	push	acc
      0000B5 8F 82            [24]  238 	mov	dpl,r7
      0000B7 8E 83            [24]  239 	mov	dph,r6
      0000B9 8D F0            [24]  240 	mov	b,r5
      0000BB EC               [12]  241 	mov	a,r4
      0000BC 12r00r00         [24]  242 	lcall	___fsgt
      0000BF AB 82            [24]  243 	mov	r3,dpl
      0000C1 E5 81            [12]  244 	mov	a,sp
      0000C3 24 FC            [12]  245 	add	a,#0xfc
      0000C5 F5 81            [12]  246 	mov	sp,a
      0000C7 D0*00            [24]  247 	pop	bits
      0000C9 D0 04            [24]  248 	pop	ar4
      0000CB D0 05            [24]  249 	pop	ar5
      0000CD D0 06            [24]  250 	pop	ar6
      0000CF D0 07            [24]  251 	pop	ar7
      0000D1 EB               [12]  252 	mov	a,r3
      0000D2 70 03            [24]  253 	jnz	00147$
      0000D4 02r01rE9         [24]  254 	ljmp	00110$
      0000D7                        255 00147$:
                                    256 ;	sincoshf.c:68: w=y-K1;
      0000D7 C0*00            [24]  257 	push	bits
      0000D9 E4               [12]  258 	clr	a
      0000DA C0 E0            [24]  259 	push	acc
      0000DC 74 73            [12]  260 	mov	a,#0x73
      0000DE C0 E0            [24]  261 	push	acc
      0000E0 74 31            [12]  262 	mov	a,#0x31
      0000E2 C0 E0            [24]  263 	push	acc
      0000E4 74 3F            [12]  264 	mov	a,#0x3F
      0000E6 C0 E0            [24]  265 	push	acc
      0000E8 8F 82            [24]  266 	mov	dpl,r7
      0000EA 8E 83            [24]  267 	mov	dph,r6
      0000EC 8D F0            [24]  268 	mov	b,r5
      0000EE EC               [12]  269 	mov	a,r4
      0000EF 12r00r00         [24]  270 	lcall	___fssub
      0000F2 AF 82            [24]  271 	mov	r7,dpl
      0000F4 AE 83            [24]  272 	mov	r6,dph
      0000F6 AD F0            [24]  273 	mov	r5,b
      0000F8 FC               [12]  274 	mov	r4,a
      0000F9 E5 81            [12]  275 	mov	a,sp
      0000FB 24 FC            [12]  276 	add	a,#0xfc
      0000FD F5 81            [12]  277 	mov	sp,a
      0000FF D0*00            [24]  278 	pop	bits
                                    279 ;	sincoshf.c:69: if (w>WMAX)
      000101 C0 07            [24]  280 	push	ar7
      000103 C0 06            [24]  281 	push	ar6
      000105 C0 05            [24]  282 	push	ar5
      000107 C0 04            [24]  283 	push	ar4
      000109 C0*00            [24]  284 	push	bits
      00010B 74 CF            [12]  285 	mov	a,#0xCF
      00010D C0 E0            [24]  286 	push	acc
      00010F 74 BD            [12]  287 	mov	a,#0xBD
      000111 C0 E0            [24]  288 	push	acc
      000113 74 33            [12]  289 	mov	a,#0x33
      000115 C0 E0            [24]  290 	push	acc
      000117 74 42            [12]  291 	mov	a,#0x42
      000119 C0 E0            [24]  292 	push	acc
      00011B 8F 82            [24]  293 	mov	dpl,r7
      00011D 8E 83            [24]  294 	mov	dph,r6
      00011F 8D F0            [24]  295 	mov	b,r5
      000121 EC               [12]  296 	mov	a,r4
      000122 12r00r00         [24]  297 	lcall	___fsgt
      000125 AB 82            [24]  298 	mov	r3,dpl
      000127 E5 81            [12]  299 	mov	a,sp
      000129 24 FC            [12]  300 	add	a,#0xfc
      00012B F5 81            [12]  301 	mov	sp,a
      00012D D0*00            [24]  302 	pop	bits
      00012F D0 04            [24]  303 	pop	ar4
      000131 D0 05            [24]  304 	pop	ar5
      000133 D0 06            [24]  305 	pop	ar6
      000135 D0 07            [24]  306 	pop	ar7
      000137 EB               [12]  307 	mov	a,r3
      000138 60 1C            [24]  308 	jz	00105$
                                    309 ;	sincoshf.c:71: errno=ERANGE;
      00013A 90r00r00         [24]  310 	mov	dptr,#_errno
      00013D 74 22            [12]  311 	mov	a,#0x22
      00013F F0               [24]  312 	movx	@dptr,a
      000140 E4               [12]  313 	clr	a
      000141 A3               [24]  314 	inc	dptr
      000142 F0               [24]  315 	movx	@dptr,a
                                    316 ;	sincoshf.c:72: z=HUGE_VALF;
      000143 E5*00            [12]  317 	mov	a,_bp
      000145 24 09            [12]  318 	add	a,#0x09
      000147 F8               [12]  319 	mov	r0,a
      000148 76 FF            [12]  320 	mov	@r0,#0xFF
      00014A 08               [12]  321 	inc	r0
      00014B 76 FF            [12]  322 	mov	@r0,#0xFF
      00014D 08               [12]  323 	inc	r0
      00014E 76 7F            [12]  324 	mov	@r0,#0x7F
      000150 08               [12]  325 	inc	r0
      000151 76 7F            [12]  326 	mov	@r0,#0x7F
      000153 02r02rC4         [24]  327 	ljmp	00111$
      000156                        328 00105$:
                                    329 ;	sincoshf.c:76: z=expf(w);
      000156 8F 82            [24]  330 	mov	dpl,r7
      000158 8E 83            [24]  331 	mov	dph,r6
      00015A 8D F0            [24]  332 	mov	b,r5
      00015C EC               [12]  333 	mov	a,r4
      00015D C0*00            [24]  334 	push	bits
      00015F 12r00r00         [24]  335 	lcall	_expf
      000162 AF 82            [24]  336 	mov	r7,dpl
      000164 AE 83            [24]  337 	mov	r6,dph
      000166 AD F0            [24]  338 	mov	r5,b
      000168 FC               [12]  339 	mov	r4,a
      000169 D0*00            [24]  340 	pop	bits
      00016B E5*00            [12]  341 	mov	a,_bp
      00016D 24 09            [12]  342 	add	a,#0x09
      00016F F8               [12]  343 	mov	r0,a
      000170 A6 07            [24]  344 	mov	@r0,ar7
      000172 08               [12]  345 	inc	r0
      000173 A6 06            [24]  346 	mov	@r0,ar6
      000175 08               [12]  347 	inc	r0
      000176 A6 05            [24]  348 	mov	@r0,ar5
      000178 08               [12]  349 	inc	r0
      000179 A6 04            [24]  350 	mov	@r0,ar4
                                    351 ;	sincoshf.c:77: z+=K3*z;
      00017B C0*00            [24]  352 	push	bits
      00017D E5*00            [12]  353 	mov	a,_bp
      00017F 24 09            [12]  354 	add	a,#0x09
      000181 F8               [12]  355 	mov	r0,a
      000182 E6               [12]  356 	mov	a,@r0
      000183 C0 E0            [24]  357 	push	acc
      000185 08               [12]  358 	inc	r0
      000186 E6               [12]  359 	mov	a,@r0
      000187 C0 E0            [24]  360 	push	acc
      000189 08               [12]  361 	inc	r0
      00018A E6               [12]  362 	mov	a,@r0
      00018B C0 E0            [24]  363 	push	acc
      00018D 08               [12]  364 	inc	r0
      00018E E6               [12]  365 	mov	a,@r0
      00018F C0 E0            [24]  366 	push	acc
      000191 90 08 97         [24]  367 	mov	dptr,#0x0897
      000194 75 F0 68         [24]  368 	mov	b,#0x68
      000197 74 37            [12]  369 	mov	a,#0x37
      000199 12r00r00         [24]  370 	lcall	___fsmul
      00019C AF 82            [24]  371 	mov	r7,dpl
      00019E AE 83            [24]  372 	mov	r6,dph
      0001A0 AD F0            [24]  373 	mov	r5,b
      0001A2 FC               [12]  374 	mov	r4,a
      0001A3 E5 81            [12]  375 	mov	a,sp
      0001A5 24 FC            [12]  376 	add	a,#0xfc
      0001A7 F5 81            [12]  377 	mov	sp,a
      0001A9 D0*00            [24]  378 	pop	bits
      0001AB C0*00            [24]  379 	push	bits
      0001AD C0 07            [24]  380 	push	ar7
      0001AF C0 06            [24]  381 	push	ar6
      0001B1 C0 05            [24]  382 	push	ar5
      0001B3 C0 04            [24]  383 	push	ar4
      0001B5 E5*00            [12]  384 	mov	a,_bp
      0001B7 24 09            [12]  385 	add	a,#0x09
      0001B9 F8               [12]  386 	mov	r0,a
      0001BA 86 82            [24]  387 	mov	dpl,@r0
      0001BC 08               [12]  388 	inc	r0
      0001BD 86 83            [24]  389 	mov	dph,@r0
      0001BF 08               [12]  390 	inc	r0
      0001C0 86 F0            [24]  391 	mov	b,@r0
      0001C2 08               [12]  392 	inc	r0
      0001C3 E6               [12]  393 	mov	a,@r0
      0001C4 12r00r00         [24]  394 	lcall	___fsadd
      0001C7 AF 82            [24]  395 	mov	r7,dpl
      0001C9 AE 83            [24]  396 	mov	r6,dph
      0001CB AD F0            [24]  397 	mov	r5,b
      0001CD FC               [12]  398 	mov	r4,a
      0001CE E5 81            [12]  399 	mov	a,sp
      0001D0 24 FC            [12]  400 	add	a,#0xfc
      0001D2 F5 81            [12]  401 	mov	sp,a
      0001D4 D0*00            [24]  402 	pop	bits
      0001D6 E5*00            [12]  403 	mov	a,_bp
      0001D8 24 09            [12]  404 	add	a,#0x09
      0001DA F8               [12]  405 	mov	r0,a
      0001DB A6 07            [24]  406 	mov	@r0,ar7
      0001DD 08               [12]  407 	inc	r0
      0001DE A6 06            [24]  408 	mov	@r0,ar6
      0001E0 08               [12]  409 	inc	r0
      0001E1 A6 05            [24]  410 	mov	@r0,ar5
      0001E3 08               [12]  411 	inc	r0
      0001E4 A6 04            [24]  412 	mov	@r0,ar4
      0001E6 02r02rC4         [24]  413 	ljmp	00111$
      0001E9                        414 00110$:
                                    415 ;	sincoshf.c:82: z=expf(y);
      0001E9 8F 82            [24]  416 	mov	dpl,r7
      0001EB 8E 83            [24]  417 	mov	dph,r6
      0001ED 8D F0            [24]  418 	mov	b,r5
      0001EF EC               [12]  419 	mov	a,r4
      0001F0 C0*00            [24]  420 	push	bits
      0001F2 12r00r00         [24]  421 	lcall	_expf
      0001F5 AF 82            [24]  422 	mov	r7,dpl
      0001F7 AE 83            [24]  423 	mov	r6,dph
      0001F9 AD F0            [24]  424 	mov	r5,b
      0001FB FC               [12]  425 	mov	r4,a
      0001FC D0*00            [24]  426 	pop	bits
      0001FE E5*00            [12]  427 	mov	a,_bp
      000200 24 09            [12]  428 	add	a,#0x09
      000202 F8               [12]  429 	mov	r0,a
      000203 A6 07            [24]  430 	mov	@r0,ar7
      000205 08               [12]  431 	inc	r0
      000206 A6 06            [24]  432 	mov	@r0,ar6
      000208 08               [12]  433 	inc	r0
      000209 A6 05            [24]  434 	mov	@r0,ar5
      00020B 08               [12]  435 	inc	r0
      00020C A6 04            [24]  436 	mov	@r0,ar4
                                    437 ;	sincoshf.c:83: w=1.0/z;
      00020E C0*00            [24]  438 	push	bits
      000210 E5*00            [12]  439 	mov	a,_bp
      000212 24 09            [12]  440 	add	a,#0x09
      000214 F8               [12]  441 	mov	r0,a
      000215 E6               [12]  442 	mov	a,@r0
      000216 C0 E0            [24]  443 	push	acc
      000218 08               [12]  444 	inc	r0
      000219 E6               [12]  445 	mov	a,@r0
      00021A C0 E0            [24]  446 	push	acc
      00021C 08               [12]  447 	inc	r0
      00021D E6               [12]  448 	mov	a,@r0
      00021E C0 E0            [24]  449 	push	acc
      000220 08               [12]  450 	inc	r0
      000221 E6               [12]  451 	mov	a,@r0
      000222 C0 E0            [24]  452 	push	acc
      000224 90 00 00         [24]  453 	mov	dptr,#0x0000
      000227 75 F0 80         [24]  454 	mov	b,#0x80
      00022A 74 3F            [12]  455 	mov	a,#0x3F
      00022C 12r00r00         [24]  456 	lcall	___fsdiv
      00022F C8               [12]  457 	xch	a,r0
      000230 E5*00            [12]  458 	mov	a,_bp
      000232 24 05            [12]  459 	add	a,#0x05
      000234 C8               [12]  460 	xch	a,r0
      000235 A6 82            [24]  461 	mov	@r0,dpl
      000237 08               [12]  462 	inc	r0
      000238 A6 83            [24]  463 	mov	@r0,dph
      00023A 08               [12]  464 	inc	r0
      00023B A6 F0            [24]  465 	mov	@r0,b
      00023D 08               [12]  466 	inc	r0
      00023E F6               [12]  467 	mov	@r0,a
      00023F E5 81            [12]  468 	mov	a,sp
      000241 24 FC            [12]  469 	add	a,#0xfc
      000243 F5 81            [12]  470 	mov	sp,a
      000245 D0*00            [24]  471 	pop	bits
      000247 E5*00            [12]  472 	mov	a,_bp
      000249 24 05            [12]  473 	add	a,#0x05
      00024B F8               [12]  474 	mov	r0,a
      00024C 86 07            [24]  475 	mov	ar7,@r0
      00024E 08               [12]  476 	inc	r0
      00024F 86 06            [24]  477 	mov	ar6,@r0
      000251 08               [12]  478 	inc	r0
      000252 86 05            [24]  479 	mov	ar5,@r0
      000254 08               [12]  480 	inc	r0
      000255 86 04            [24]  481 	mov	ar4,@r0
                                    482 ;	sincoshf.c:84: if(!iscosh) w=-w;
      000257 E5*00            [12]  483 	mov	a,_bp
      000259 24 FC            [12]  484 	add	a,#0xfc
      00025B F8               [12]  485 	mov	r0,a
      00025C E6               [12]  486 	mov	a,@r0
      00025D 08               [12]  487 	inc	r0
      00025E 46               [12]  488 	orl	a,@r0
      00025F 70 04            [24]  489 	jnz	00108$
      000261 EC               [12]  490 	mov	a,r4
      000262 B2 E7            [12]  491 	cpl	acc.7
      000264 FC               [12]  492 	mov	r4,a
      000265                        493 00108$:
                                    494 ;	sincoshf.c:85: z=(z+w)*0.5;
      000265 C0*00            [24]  495 	push	bits
      000267 C0 07            [24]  496 	push	ar7
      000269 C0 06            [24]  497 	push	ar6
      00026B C0 05            [24]  498 	push	ar5
      00026D C0 04            [24]  499 	push	ar4
      00026F E5*00            [12]  500 	mov	a,_bp
      000271 24 09            [12]  501 	add	a,#0x09
      000273 F8               [12]  502 	mov	r0,a
      000274 86 82            [24]  503 	mov	dpl,@r0
      000276 08               [12]  504 	inc	r0
      000277 86 83            [24]  505 	mov	dph,@r0
      000279 08               [12]  506 	inc	r0
      00027A 86 F0            [24]  507 	mov	b,@r0
      00027C 08               [12]  508 	inc	r0
      00027D E6               [12]  509 	mov	a,@r0
      00027E 12r00r00         [24]  510 	lcall	___fsadd
      000281 AF 82            [24]  511 	mov	r7,dpl
      000283 AE 83            [24]  512 	mov	r6,dph
      000285 AD F0            [24]  513 	mov	r5,b
      000287 FC               [12]  514 	mov	r4,a
      000288 E5 81            [12]  515 	mov	a,sp
      00028A 24 FC            [12]  516 	add	a,#0xfc
      00028C F5 81            [12]  517 	mov	sp,a
      00028E D0*00            [24]  518 	pop	bits
      000290 C0*00            [24]  519 	push	bits
      000292 C0 07            [24]  520 	push	ar7
      000294 C0 06            [24]  521 	push	ar6
      000296 C0 05            [24]  522 	push	ar5
      000298 C0 04            [24]  523 	push	ar4
      00029A 90 00 00         [24]  524 	mov	dptr,#(0x00&0x00ff)
      00029D E4               [12]  525 	clr	a
      00029E F5 F0            [12]  526 	mov	b,a
      0002A0 74 3F            [12]  527 	mov	a,#0x3F
      0002A2 12r00r00         [24]  528 	lcall	___fsmul
      0002A5 AF 82            [24]  529 	mov	r7,dpl
      0002A7 AE 83            [24]  530 	mov	r6,dph
      0002A9 AD F0            [24]  531 	mov	r5,b
      0002AB FC               [12]  532 	mov	r4,a
      0002AC E5 81            [12]  533 	mov	a,sp
      0002AE 24 FC            [12]  534 	add	a,#0xfc
      0002B0 F5 81            [12]  535 	mov	sp,a
      0002B2 D0*00            [24]  536 	pop	bits
      0002B4 E5*00            [12]  537 	mov	a,_bp
      0002B6 24 09            [12]  538 	add	a,#0x09
      0002B8 F8               [12]  539 	mov	r0,a
      0002B9 A6 07            [24]  540 	mov	@r0,ar7
      0002BB 08               [12]  541 	inc	r0
      0002BC A6 06            [24]  542 	mov	@r0,ar6
      0002BE 08               [12]  543 	inc	r0
      0002BF A6 05            [24]  544 	mov	@r0,ar5
      0002C1 08               [12]  545 	inc	r0
      0002C2 A6 04            [24]  546 	mov	@r0,ar4
      0002C4                        547 00111$:
                                    548 ;	sincoshf.c:87: if(sign) z=-z;
      0002C4 20*00 03         [24]  549 	jb	b0,00150$
      0002C7 02r04rA1         [24]  550 	ljmp	00119$
      0002CA                        551 00150$:
      0002CA E5*00            [12]  552 	mov	a,_bp
      0002CC 24 09            [12]  553 	add	a,#0x09
      0002CE F8               [12]  554 	mov	r0,a
      0002CF E6               [12]  555 	mov	a,@r0
      0002D0 F6               [12]  556 	mov	@r0,a
      0002D1 08               [12]  557 	inc	r0
      0002D2 E6               [12]  558 	mov	a,@r0
      0002D3 F6               [12]  559 	mov	@r0,a
      0002D4 08               [12]  560 	inc	r0
      0002D5 E6               [12]  561 	mov	a,@r0
      0002D6 F6               [12]  562 	mov	@r0,a
      0002D7 08               [12]  563 	inc	r0
      0002D8 E6               [12]  564 	mov	a,@r0
      0002D9 B2 E7            [12]  565 	cpl	acc.7
      0002DB F6               [12]  566 	mov	@r0,a
      0002DC 02r04rA1         [24]  567 	ljmp	00119$
      0002DF                        568 00118$:
                                    569 ;	sincoshf.c:91: if (y<EPS)
      0002DF E4               [12]  570 	clr	a
      0002E0 C0 E0            [24]  571 	push	acc
      0002E2 C0 E0            [24]  572 	push	acc
      0002E4 74 80            [12]  573 	mov	a,#0x80
      0002E6 C0 E0            [24]  574 	push	acc
      0002E8 74 39            [12]  575 	mov	a,#0x39
      0002EA C0 E0            [24]  576 	push	acc
      0002EC 8F 82            [24]  577 	mov	dpl,r7
      0002EE 8E 83            [24]  578 	mov	dph,r6
      0002F0 8D F0            [24]  579 	mov	b,r5
      0002F2 EC               [12]  580 	mov	a,r4
      0002F3 12r00r00         [24]  581 	lcall	___fslt
      0002F6 AB 82            [24]  582 	mov	r3,dpl
      0002F8 E5 81            [12]  583 	mov	a,sp
      0002FA 24 FC            [12]  584 	add	a,#0xfc
      0002FC F5 81            [12]  585 	mov	sp,a
      0002FE EB               [12]  586 	mov	a,r3
      0002FF 60 19            [24]  587 	jz	00115$
                                    588 ;	sincoshf.c:92: z=x;
      000301 A8*00            [24]  589 	mov	r0,_bp
      000303 08               [12]  590 	inc	r0
      000304 E5*00            [12]  591 	mov	a,_bp
      000306 24 09            [12]  592 	add	a,#0x09
      000308 F9               [12]  593 	mov	r1,a
      000309 E6               [12]  594 	mov	a,@r0
      00030A F7               [12]  595 	mov	@r1,a
      00030B 08               [12]  596 	inc	r0
      00030C 09               [12]  597 	inc	r1
      00030D E6               [12]  598 	mov	a,@r0
      00030E F7               [12]  599 	mov	@r1,a
      00030F 08               [12]  600 	inc	r0
      000310 09               [12]  601 	inc	r1
      000311 E6               [12]  602 	mov	a,@r0
      000312 F7               [12]  603 	mov	@r1,a
      000313 08               [12]  604 	inc	r0
      000314 09               [12]  605 	inc	r1
      000315 E6               [12]  606 	mov	a,@r0
      000316 F7               [12]  607 	mov	@r1,a
      000317 02r04rA1         [24]  608 	ljmp	00119$
      00031A                        609 00115$:
                                    610 ;	sincoshf.c:95: z=x*x;
      00031A A8*00            [24]  611 	mov	r0,_bp
      00031C 08               [12]  612 	inc	r0
      00031D E6               [12]  613 	mov	a,@r0
      00031E C0 E0            [24]  614 	push	acc
      000320 08               [12]  615 	inc	r0
      000321 E6               [12]  616 	mov	a,@r0
      000322 C0 E0            [24]  617 	push	acc
      000324 08               [12]  618 	inc	r0
      000325 E6               [12]  619 	mov	a,@r0
      000326 C0 E0            [24]  620 	push	acc
      000328 08               [12]  621 	inc	r0
      000329 E6               [12]  622 	mov	a,@r0
      00032A C0 E0            [24]  623 	push	acc
      00032C A8*00            [24]  624 	mov	r0,_bp
      00032E 08               [12]  625 	inc	r0
      00032F 86 82            [24]  626 	mov	dpl,@r0
      000331 08               [12]  627 	inc	r0
      000332 86 83            [24]  628 	mov	dph,@r0
      000334 08               [12]  629 	inc	r0
      000335 86 F0            [24]  630 	mov	b,@r0
      000337 08               [12]  631 	inc	r0
      000338 E6               [12]  632 	mov	a,@r0
      000339 12r00r00         [24]  633 	lcall	___fsmul
      00033C AA 82            [24]  634 	mov	r2,dpl
      00033E AB 83            [24]  635 	mov	r3,dph
      000340 AE F0            [24]  636 	mov	r6,b
      000342 FF               [12]  637 	mov	r7,a
      000343 E5 81            [12]  638 	mov	a,sp
      000345 24 FC            [12]  639 	add	a,#0xfc
      000347 F5 81            [12]  640 	mov	sp,a
      000349 E5*00            [12]  641 	mov	a,_bp
      00034B 24 09            [12]  642 	add	a,#0x09
      00034D F8               [12]  643 	mov	r0,a
      00034E A6 02            [24]  644 	mov	@r0,ar2
      000350 08               [12]  645 	inc	r0
      000351 A6 03            [24]  646 	mov	@r0,ar3
      000353 08               [12]  647 	inc	r0
      000354 A6 06            [24]  648 	mov	@r0,ar6
      000356 08               [12]  649 	inc	r0
      000357 A6 07            [24]  650 	mov	@r0,ar7
                                    651 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      000359 E5*00            [12]  652 	mov	a,_bp
      00035B 24 09            [12]  653 	add	a,#0x09
      00035D F8               [12]  654 	mov	r0,a
      00035E E6               [12]  655 	mov	a,@r0
      00035F C0 E0            [24]  656 	push	acc
      000361 08               [12]  657 	inc	r0
      000362 E6               [12]  658 	mov	a,@r0
      000363 C0 E0            [24]  659 	push	acc
      000365 08               [12]  660 	inc	r0
      000366 E6               [12]  661 	mov	a,@r0
      000367 C0 E0            [24]  662 	push	acc
      000369 08               [12]  663 	inc	r0
      00036A E6               [12]  664 	mov	a,@r0
      00036B C0 E0            [24]  665 	push	acc
      00036D A8*00            [24]  666 	mov	r0,_bp
      00036F 08               [12]  667 	inc	r0
      000370 86 82            [24]  668 	mov	dpl,@r0
      000372 08               [12]  669 	inc	r0
      000373 86 83            [24]  670 	mov	dph,@r0
      000375 08               [12]  671 	inc	r0
      000376 86 F0            [24]  672 	mov	b,@r0
      000378 08               [12]  673 	inc	r0
      000379 E6               [12]  674 	mov	a,@r0
      00037A 12r00r00         [24]  675 	lcall	___fsmul
      00037D C8               [12]  676 	xch	a,r0
      00037E E5*00            [12]  677 	mov	a,_bp
      000380 24 05            [12]  678 	add	a,#0x05
      000382 C8               [12]  679 	xch	a,r0
      000383 A6 82            [24]  680 	mov	@r0,dpl
      000385 08               [12]  681 	inc	r0
      000386 A6 83            [24]  682 	mov	@r0,dph
      000388 08               [12]  683 	inc	r0
      000389 A6 F0            [24]  684 	mov	@r0,b
      00038B 08               [12]  685 	inc	r0
      00038C F6               [12]  686 	mov	@r0,a
      00038D E5 81            [12]  687 	mov	a,sp
      00038F 24 FC            [12]  688 	add	a,#0xfc
      000391 F5 81            [12]  689 	mov	sp,a
      000393 E5*00            [12]  690 	mov	a,_bp
      000395 24 09            [12]  691 	add	a,#0x09
      000397 F8               [12]  692 	mov	r0,a
      000398 E6               [12]  693 	mov	a,@r0
      000399 C0 E0            [24]  694 	push	acc
      00039B 08               [12]  695 	inc	r0
      00039C E6               [12]  696 	mov	a,@r0
      00039D C0 E0            [24]  697 	push	acc
      00039F 08               [12]  698 	inc	r0
      0003A0 E6               [12]  699 	mov	a,@r0
      0003A1 C0 E0            [24]  700 	push	acc
      0003A3 08               [12]  701 	inc	r0
      0003A4 E6               [12]  702 	mov	a,@r0
      0003A5 C0 E0            [24]  703 	push	acc
      0003A7 90 E6 EA         [24]  704 	mov	dptr,#0xE6EA
      0003AA 75 F0 42         [24]  705 	mov	b,#0x42
      0003AD 74 BE            [12]  706 	mov	a,#0xBE
      0003AF 12r00r00         [24]  707 	lcall	___fsmul
      0003B2 AA 82            [24]  708 	mov	r2,dpl
      0003B4 AB 83            [24]  709 	mov	r3,dph
      0003B6 AE F0            [24]  710 	mov	r6,b
      0003B8 FF               [12]  711 	mov	r7,a
      0003B9 E5 81            [12]  712 	mov	a,sp
      0003BB 24 FC            [12]  713 	add	a,#0xfc
      0003BD F5 81            [12]  714 	mov	sp,a
      0003BF 74 F0            [12]  715 	mov	a,#0xF0
      0003C1 C0 E0            [24]  716 	push	acc
      0003C3 74 69            [12]  717 	mov	a,#0x69
      0003C5 C0 E0            [24]  718 	push	acc
      0003C7 74 E4            [12]  719 	mov	a,#0xE4
      0003C9 C0 E0            [24]  720 	push	acc
      0003CB 74 C0            [12]  721 	mov	a,#0xC0
      0003CD C0 E0            [24]  722 	push	acc
      0003CF 8A 82            [24]  723 	mov	dpl,r2
      0003D1 8B 83            [24]  724 	mov	dph,r3
      0003D3 8E F0            [24]  725 	mov	b,r6
      0003D5 EF               [12]  726 	mov	a,r7
      0003D6 12r00r00         [24]  727 	lcall	___fsadd
      0003D9 AC 82            [24]  728 	mov	r4,dpl
      0003DB AD 83            [24]  729 	mov	r5,dph
      0003DD AE F0            [24]  730 	mov	r6,b
      0003DF FF               [12]  731 	mov	r7,a
      0003E0 E5 81            [12]  732 	mov	a,sp
      0003E2 24 FC            [12]  733 	add	a,#0xfc
      0003E4 F5 81            [12]  734 	mov	sp,a
      0003E6 C0 04            [24]  735 	push	ar4
      0003E8 C0 05            [24]  736 	push	ar5
      0003EA C0 06            [24]  737 	push	ar6
      0003EC C0 07            [24]  738 	push	ar7
      0003EE E5*00            [12]  739 	mov	a,_bp
      0003F0 24 05            [12]  740 	add	a,#0x05
      0003F2 F8               [12]  741 	mov	r0,a
      0003F3 86 82            [24]  742 	mov	dpl,@r0
      0003F5 08               [12]  743 	inc	r0
      0003F6 86 83            [24]  744 	mov	dph,@r0
      0003F8 08               [12]  745 	inc	r0
      0003F9 86 F0            [24]  746 	mov	b,@r0
      0003FB 08               [12]  747 	inc	r0
      0003FC E6               [12]  748 	mov	a,@r0
      0003FD 12r00r00         [24]  749 	lcall	___fsmul
      000400 C8               [12]  750 	xch	a,r0
      000401 E5*00            [12]  751 	mov	a,_bp
      000403 24 05            [12]  752 	add	a,#0x05
      000405 C8               [12]  753 	xch	a,r0
      000406 A6 82            [24]  754 	mov	@r0,dpl
      000408 08               [12]  755 	inc	r0
      000409 A6 83            [24]  756 	mov	@r0,dph
      00040B 08               [12]  757 	inc	r0
      00040C A6 F0            [24]  758 	mov	@r0,b
      00040E 08               [12]  759 	inc	r0
      00040F F6               [12]  760 	mov	@r0,a
      000410 E5 81            [12]  761 	mov	a,sp
      000412 24 FC            [12]  762 	add	a,#0xfc
      000414 F5 81            [12]  763 	mov	sp,a
      000416 74 93            [12]  764 	mov	a,#0x93
      000418 C0 E0            [24]  765 	push	acc
      00041A 74 4F            [12]  766 	mov	a,#0x4F
      00041C C0 E0            [24]  767 	push	acc
      00041E 74 2B            [12]  768 	mov	a,#0x2B
      000420 C0 E0            [24]  769 	push	acc
      000422 74 C2            [12]  770 	mov	a,#0xC2
      000424 C0 E0            [24]  771 	push	acc
      000426 E5*00            [12]  772 	mov	a,_bp
      000428 24 09            [12]  773 	add	a,#0x09
      00042A F8               [12]  774 	mov	r0,a
      00042B 86 82            [24]  775 	mov	dpl,@r0
      00042D 08               [12]  776 	inc	r0
      00042E 86 83            [24]  777 	mov	dph,@r0
      000430 08               [12]  778 	inc	r0
      000431 86 F0            [24]  779 	mov	b,@r0
      000433 08               [12]  780 	inc	r0
      000434 E6               [12]  781 	mov	a,@r0
      000435 12r00r00         [24]  782 	lcall	___fsadd
      000438 AA 82            [24]  783 	mov	r2,dpl
      00043A AB 83            [24]  784 	mov	r3,dph
      00043C AE F0            [24]  785 	mov	r6,b
      00043E FF               [12]  786 	mov	r7,a
      00043F E5 81            [12]  787 	mov	a,sp
      000441 24 FC            [12]  788 	add	a,#0xfc
      000443 F5 81            [12]  789 	mov	sp,a
      000445 C0 02            [24]  790 	push	ar2
      000447 C0 03            [24]  791 	push	ar3
      000449 C0 06            [24]  792 	push	ar6
      00044B C0 07            [24]  793 	push	ar7
      00044D E5*00            [12]  794 	mov	a,_bp
      00044F 24 05            [12]  795 	add	a,#0x05
      000451 F8               [12]  796 	mov	r0,a
      000452 86 82            [24]  797 	mov	dpl,@r0
      000454 08               [12]  798 	inc	r0
      000455 86 83            [24]  799 	mov	dph,@r0
      000457 08               [12]  800 	inc	r0
      000458 86 F0            [24]  801 	mov	b,@r0
      00045A 08               [12]  802 	inc	r0
      00045B E6               [12]  803 	mov	a,@r0
      00045C 12r00r00         [24]  804 	lcall	___fsdiv
      00045F AC 82            [24]  805 	mov	r4,dpl
      000461 AD 83            [24]  806 	mov	r5,dph
      000463 AE F0            [24]  807 	mov	r6,b
      000465 FF               [12]  808 	mov	r7,a
      000466 E5 81            [12]  809 	mov	a,sp
      000468 24 FC            [12]  810 	add	a,#0xfc
      00046A F5 81            [12]  811 	mov	sp,a
      00046C C0 04            [24]  812 	push	ar4
      00046E C0 05            [24]  813 	push	ar5
      000470 C0 06            [24]  814 	push	ar6
      000472 C0 07            [24]  815 	push	ar7
      000474 A8*00            [24]  816 	mov	r0,_bp
      000476 08               [12]  817 	inc	r0
      000477 86 82            [24]  818 	mov	dpl,@r0
      000479 08               [12]  819 	inc	r0
      00047A 86 83            [24]  820 	mov	dph,@r0
      00047C 08               [12]  821 	inc	r0
      00047D 86 F0            [24]  822 	mov	b,@r0
      00047F 08               [12]  823 	inc	r0
      000480 E6               [12]  824 	mov	a,@r0
      000481 12r00r00         [24]  825 	lcall	___fsadd
      000484 AC 82            [24]  826 	mov	r4,dpl
      000486 AD 83            [24]  827 	mov	r5,dph
      000488 AE F0            [24]  828 	mov	r6,b
      00048A FF               [12]  829 	mov	r7,a
      00048B E5 81            [12]  830 	mov	a,sp
      00048D 24 FC            [12]  831 	add	a,#0xfc
      00048F F5 81            [12]  832 	mov	sp,a
      000491 E5*00            [12]  833 	mov	a,_bp
      000493 24 09            [12]  834 	add	a,#0x09
      000495 F8               [12]  835 	mov	r0,a
      000496 A6 04            [24]  836 	mov	@r0,ar4
      000498 08               [12]  837 	inc	r0
      000499 A6 05            [24]  838 	mov	@r0,ar5
      00049B 08               [12]  839 	inc	r0
      00049C A6 06            [24]  840 	mov	@r0,ar6
      00049E 08               [12]  841 	inc	r0
      00049F A6 07            [24]  842 	mov	@r0,ar7
      0004A1                        843 00119$:
                                    844 ;	sincoshf.c:99: return z;
      0004A1 E5*00            [12]  845 	mov	a,_bp
      0004A3 24 09            [12]  846 	add	a,#0x09
      0004A5 F8               [12]  847 	mov	r0,a
      0004A6 86 82            [24]  848 	mov	dpl,@r0
      0004A8 08               [12]  849 	inc	r0
      0004A9 86 83            [24]  850 	mov	dph,@r0
      0004AB 08               [12]  851 	inc	r0
      0004AC 86 F0            [24]  852 	mov	b,@r0
      0004AE 08               [12]  853 	inc	r0
      0004AF E6               [12]  854 	mov	a,@r0
      0004B0 85*00 81         [24]  855 	mov	sp,_bp
      0004B3 D0*00            [24]  856 	pop	_bp
      0004B5 22               [24]  857 	ret
                                    858 	.area CSEG    (CODE)
                                    859 	.area CONST   (CODE)
                                    860 	.area XINIT   (CODE)
                                    861 	.area CABS    (ABS,CODE)
