                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:09 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module expf
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _ldexpf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'expf'
                                    107 ;------------------------------------------------------------
                                    108 ;x                         Allocated to registers r7 r6 r5 r4 
                                    109 ;n                         Allocated to stack - _bp +5
                                    110 ;xn                        Allocated to stack - _bp +7
                                    111 ;g                         Allocated to stack - _bp +11
                                    112 ;r                         Allocated to stack - _bp +15
                                    113 ;z                         Allocated to stack - _bp +19
                                    114 ;y                         Allocated to stack - _bp +23
                                    115 ;sign                      Allocated to registers b0 
                                    116 ;sloc0                     Allocated to stack - _bp +1
                                    117 ;------------------------------------------------------------
                                    118 ;	expf.c:331: float expf(const float x)
                                    119 ;	-----------------------------------------
                                    120 ;	 function expf
                                    121 ;	-----------------------------------------
      000000                        122 _expf:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 85 81*00         [24]  132 	mov	_bp,sp
      000005 AF 82            [24]  133 	mov	r7,dpl
      000007 AE 83            [24]  134 	mov	r6,dph
      000009 AD F0            [24]  135 	mov	r5,b
      00000B FC               [12]  136 	mov	r4,a
      00000C E5 81            [12]  137 	mov	a,sp
      00000E 24 1A            [12]  138 	add	a,#0x1A
      000010 F5 81            [12]  139 	mov	sp,a
                                    140 ;	expf.c:337: if(x>=0.0)
      000012 C0 07            [24]  141 	push	ar7
      000014 C0 06            [24]  142 	push	ar6
      000016 C0 05            [24]  143 	push	ar5
      000018 C0 04            [24]  144 	push	ar4
      00001A E4               [12]  145 	clr	a
      00001B C0 E0            [24]  146 	push	acc
      00001D C0 E0            [24]  147 	push	acc
      00001F C0 E0            [24]  148 	push	acc
      000021 C0 E0            [24]  149 	push	acc
      000023 8F 82            [24]  150 	mov	dpl,r7
      000025 8E 83            [24]  151 	mov	dph,r6
      000027 8D F0            [24]  152 	mov	b,r5
      000029 EC               [12]  153 	mov	a,r4
      00002A 12r00r00         [24]  154 	lcall	___fslt
      00002D AB 82            [24]  155 	mov	r3,dpl
      00002F E5 81            [12]  156 	mov	a,sp
      000031 24 FC            [12]  157 	add	a,#0xfc
      000033 F5 81            [12]  158 	mov	sp,a
      000035 D0 04            [24]  159 	pop	ar4
      000037 D0 05            [24]  160 	pop	ar5
      000039 D0 06            [24]  161 	pop	ar6
      00003B D0 07            [24]  162 	pop	ar7
      00003D EB               [12]  163 	mov	a,r3
      00003E 70 14            [24]  164 	jnz	00102$
                                    165 ;	expf.c:338: { y=x;  sign=0; }
      000040 E5*00            [12]  166 	mov	a,_bp
      000042 24 17            [12]  167 	add	a,#0x17
      000044 F8               [12]  168 	mov	r0,a
      000045 A6 07            [24]  169 	mov	@r0,ar7
      000047 08               [12]  170 	inc	r0
      000048 A6 06            [24]  171 	mov	@r0,ar6
      00004A 08               [12]  172 	inc	r0
      00004B A6 05            [24]  173 	mov	@r0,ar5
      00004D 08               [12]  174 	inc	r0
      00004E A6 04            [24]  175 	mov	@r0,ar4
      000050 C2*00            [12]  176 	clr	b0
      000052 80 16            [24]  177 	sjmp	00103$
      000054                        178 00102$:
                                    179 ;	expf.c:340: { y=-x; sign=1; }
      000054 EC               [12]  180 	mov	a,r4
      000055 B2 E7            [12]  181 	cpl	acc.7
      000057 FC               [12]  182 	mov	r4,a
      000058 E5*00            [12]  183 	mov	a,_bp
      00005A 24 17            [12]  184 	add	a,#0x17
      00005C F8               [12]  185 	mov	r0,a
      00005D A6 07            [24]  186 	mov	@r0,ar7
      00005F 08               [12]  187 	inc	r0
      000060 A6 06            [24]  188 	mov	@r0,ar6
      000062 08               [12]  189 	inc	r0
      000063 A6 05            [24]  190 	mov	@r0,ar5
      000065 08               [12]  191 	inc	r0
      000066 A6 04            [24]  192 	mov	@r0,ar4
      000068 D2*00            [12]  193 	setb	b0
      00006A                        194 00103$:
                                    195 ;	expf.c:342: if(y<EXPEPS) return 1.0;
      00006A C0*00            [24]  196 	push	bits
      00006C 74 95            [12]  197 	mov	a,#0x95
      00006E C0 E0            [24]  198 	push	acc
      000070 74 BF            [12]  199 	mov	a,#0xBF
      000072 C0 E0            [24]  200 	push	acc
      000074 74 D6            [12]  201 	mov	a,#0xD6
      000076 C0 E0            [24]  202 	push	acc
      000078 74 33            [12]  203 	mov	a,#0x33
      00007A C0 E0            [24]  204 	push	acc
      00007C E5*00            [12]  205 	mov	a,_bp
      00007E 24 17            [12]  206 	add	a,#0x17
      000080 F8               [12]  207 	mov	r0,a
      000081 86 82            [24]  208 	mov	dpl,@r0
      000083 08               [12]  209 	inc	r0
      000084 86 83            [24]  210 	mov	dph,@r0
      000086 08               [12]  211 	inc	r0
      000087 86 F0            [24]  212 	mov	b,@r0
      000089 08               [12]  213 	inc	r0
      00008A E6               [12]  214 	mov	a,@r0
      00008B 12r00r00         [24]  215 	lcall	___fslt
      00008E AD 82            [24]  216 	mov	r5,dpl
      000090 E5 81            [12]  217 	mov	a,sp
      000092 24 FC            [12]  218 	add	a,#0xfc
      000094 F5 81            [12]  219 	mov	sp,a
      000096 D0*00            [24]  220 	pop	bits
      000098 ED               [12]  221 	mov	a,r5
      000099 60 0B            [24]  222 	jz	00105$
      00009B 90 00 00         [24]  223 	mov	dptr,#0x0000
      00009E 75 F0 80         [24]  224 	mov	b,#0x80
      0000A1 74 3F            [12]  225 	mov	a,#0x3F
      0000A3 02r05r26         [24]  226 	ljmp	00118$
      0000A6                        227 00105$:
                                    228 ;	expf.c:344: if(y>BIGX)
      0000A6 C0*00            [24]  229 	push	bits
      0000A8 74 18            [12]  230 	mov	a,#0x18
      0000AA C0 E0            [24]  231 	push	acc
      0000AC 74 72            [12]  232 	mov	a,#0x72
      0000AE C0 E0            [24]  233 	push	acc
      0000B0 74 B1            [12]  234 	mov	a,#0xB1
      0000B2 C0 E0            [24]  235 	push	acc
      0000B4 74 42            [12]  236 	mov	a,#0x42
      0000B6 C0 E0            [24]  237 	push	acc
      0000B8 E5*00            [12]  238 	mov	a,_bp
      0000BA 24 17            [12]  239 	add	a,#0x17
      0000BC F8               [12]  240 	mov	r0,a
      0000BD 86 82            [24]  241 	mov	dpl,@r0
      0000BF 08               [12]  242 	inc	r0
      0000C0 86 83            [24]  243 	mov	dph,@r0
      0000C2 08               [12]  244 	inc	r0
      0000C3 86 F0            [24]  245 	mov	b,@r0
      0000C5 08               [12]  246 	inc	r0
      0000C6 E6               [12]  247 	mov	a,@r0
      0000C7 12r00r00         [24]  248 	lcall	___fsgt
      0000CA AD 82            [24]  249 	mov	r5,dpl
      0000CC E5 81            [12]  250 	mov	a,sp
      0000CE 24 FC            [12]  251 	add	a,#0xfc
      0000D0 F5 81            [12]  252 	mov	sp,a
      0000D2 D0*00            [24]  253 	pop	bits
      0000D4 ED               [12]  254 	mov	a,r5
      0000D5 60 1F            [24]  255 	jz	00110$
                                    256 ;	expf.c:346: if(sign)
      0000D7 30*00 13         [24]  257 	jnb	b0,00107$
                                    258 ;	expf.c:348: errno=ERANGE;
      0000DA 90r00r00         [24]  259 	mov	dptr,#_errno
      0000DD 74 22            [12]  260 	mov	a,#0x22
      0000DF F0               [24]  261 	movx	@dptr,a
      0000E0 E4               [12]  262 	clr	a
      0000E1 A3               [24]  263 	inc	dptr
      0000E2 F0               [24]  264 	movx	@dptr,a
                                    265 ;	expf.c:350: ;
      0000E3 90 FF FF         [24]  266 	mov	dptr,#0xFFFF
      0000E6 74 7F            [12]  267 	mov	a,#0x7F
      0000E8 F5 F0            [12]  268 	mov	b,a
      0000EA 02r05r26         [24]  269 	ljmp	00118$
      0000ED                        270 00107$:
                                    271 ;	expf.c:354: return 0.0;
      0000ED 90 00 00         [24]  272 	mov	dptr,#(0x00&0x00ff)
      0000F0 E4               [12]  273 	clr	a
      0000F1 F5 F0            [12]  274 	mov	b,a
      0000F3 02r05r26         [24]  275 	ljmp	00118$
      0000F6                        276 00110$:
                                    277 ;	expf.c:358: z=y*K1;
      0000F6 C0*00            [24]  278 	push	bits
      0000F8 E5*00            [12]  279 	mov	a,_bp
      0000FA 24 17            [12]  280 	add	a,#0x17
      0000FC F8               [12]  281 	mov	r0,a
      0000FD E6               [12]  282 	mov	a,@r0
      0000FE C0 E0            [24]  283 	push	acc
      000100 08               [12]  284 	inc	r0
      000101 E6               [12]  285 	mov	a,@r0
      000102 C0 E0            [24]  286 	push	acc
      000104 08               [12]  287 	inc	r0
      000105 E6               [12]  288 	mov	a,@r0
      000106 C0 E0            [24]  289 	push	acc
      000108 08               [12]  290 	inc	r0
      000109 E6               [12]  291 	mov	a,@r0
      00010A C0 E0            [24]  292 	push	acc
      00010C 90 AA 3B         [24]  293 	mov	dptr,#0xAA3B
      00010F 75 F0 B8         [24]  294 	mov	b,#0xB8
      000112 74 3F            [12]  295 	mov	a,#0x3F
      000114 12r00r00         [24]  296 	lcall	___fsmul
      000117 AF 82            [24]  297 	mov	r7,dpl
      000119 AE 83            [24]  298 	mov	r6,dph
      00011B AD F0            [24]  299 	mov	r5,b
      00011D FC               [12]  300 	mov	r4,a
      00011E E5 81            [12]  301 	mov	a,sp
      000120 24 FC            [12]  302 	add	a,#0xfc
      000122 F5 81            [12]  303 	mov	sp,a
      000124 D0*00            [24]  304 	pop	bits
      000126 E5*00            [12]  305 	mov	a,_bp
      000128 24 13            [12]  306 	add	a,#0x13
      00012A F8               [12]  307 	mov	r0,a
      00012B A6 07            [24]  308 	mov	@r0,ar7
      00012D 08               [12]  309 	inc	r0
      00012E A6 06            [24]  310 	mov	@r0,ar6
      000130 08               [12]  311 	inc	r0
      000131 A6 05            [24]  312 	mov	@r0,ar5
      000133 08               [12]  313 	inc	r0
      000134 A6 04            [24]  314 	mov	@r0,ar4
                                    315 ;	expf.c:359: n=z;
      000136 E5*00            [12]  316 	mov	a,_bp
      000138 24 13            [12]  317 	add	a,#0x13
      00013A F8               [12]  318 	mov	r0,a
      00013B 86 82            [24]  319 	mov	dpl,@r0
      00013D 08               [12]  320 	inc	r0
      00013E 86 83            [24]  321 	mov	dph,@r0
      000140 08               [12]  322 	inc	r0
      000141 86 F0            [24]  323 	mov	b,@r0
      000143 08               [12]  324 	inc	r0
      000144 E6               [12]  325 	mov	a,@r0
      000145 C0*00            [24]  326 	push	bits
      000147 12r00r00         [24]  327 	lcall	___fs2sint
      00014A AA 82            [24]  328 	mov	r2,dpl
      00014C AB 83            [24]  329 	mov	r3,dph
      00014E D0*00            [24]  330 	pop	bits
      000150 E5*00            [12]  331 	mov	a,_bp
      000152 24 05            [12]  332 	add	a,#0x05
      000154 F8               [12]  333 	mov	r0,a
      000155 A6 02            [24]  334 	mov	@r0,ar2
      000157 08               [12]  335 	inc	r0
      000158 A6 03            [24]  336 	mov	@r0,ar3
                                    337 ;	expf.c:361: if(n<0) --n;
      00015A E5*00            [12]  338 	mov	a,_bp
      00015C 24 05            [12]  339 	add	a,#0x05
      00015E F8               [12]  340 	mov	r0,a
      00015F 08               [12]  341 	inc	r0
      000160 E6               [12]  342 	mov	a,@r0
      000161 30 E7 0B         [24]  343 	jnb	acc.7,00112$
      000164 E5*00            [12]  344 	mov	a,_bp
      000166 24 05            [12]  345 	add	a,#0x05
      000168 F8               [12]  346 	mov	r0,a
      000169 16               [12]  347 	dec	@r0
      00016A B6 FF 02         [24]  348 	cjne	@r0,#0xFF,00146$
      00016D 08               [12]  349 	inc	r0
      00016E 16               [12]  350 	dec	@r0
      00016F                        351 00146$:
      00016F                        352 00112$:
                                    353 ;	expf.c:362: if(z-n>=0.5) ++n;
      00016F E5*00            [12]  354 	mov	a,_bp
      000171 24 05            [12]  355 	add	a,#0x05
      000173 F8               [12]  356 	mov	r0,a
      000174 86 82            [24]  357 	mov	dpl,@r0
      000176 08               [12]  358 	inc	r0
      000177 86 83            [24]  359 	mov	dph,@r0
      000179 C0*00            [24]  360 	push	bits
      00017B 12r00r00         [24]  361 	lcall	___sint2fs
      00017E AC 82            [24]  362 	mov	r4,dpl
      000180 AD 83            [24]  363 	mov	r5,dph
      000182 AE F0            [24]  364 	mov	r6,b
      000184 FF               [12]  365 	mov	r7,a
      000185 D0*00            [24]  366 	pop	bits
      000187 C0*00            [24]  367 	push	bits
      000189 C0 04            [24]  368 	push	ar4
      00018B C0 05            [24]  369 	push	ar5
      00018D C0 06            [24]  370 	push	ar6
      00018F C0 07            [24]  371 	push	ar7
      000191 E5*00            [12]  372 	mov	a,_bp
      000193 24 13            [12]  373 	add	a,#0x13
      000195 F8               [12]  374 	mov	r0,a
      000196 86 82            [24]  375 	mov	dpl,@r0
      000198 08               [12]  376 	inc	r0
      000199 86 83            [24]  377 	mov	dph,@r0
      00019B 08               [12]  378 	inc	r0
      00019C 86 F0            [24]  379 	mov	b,@r0
      00019E 08               [12]  380 	inc	r0
      00019F E6               [12]  381 	mov	a,@r0
      0001A0 12r00r00         [24]  382 	lcall	___fssub
      0001A3 AC 82            [24]  383 	mov	r4,dpl
      0001A5 AD 83            [24]  384 	mov	r5,dph
      0001A7 AE F0            [24]  385 	mov	r6,b
      0001A9 FF               [12]  386 	mov	r7,a
      0001AA E5 81            [12]  387 	mov	a,sp
      0001AC 24 FC            [12]  388 	add	a,#0xfc
      0001AE F5 81            [12]  389 	mov	sp,a
      0001B0 D0*00            [24]  390 	pop	bits
      0001B2 C0*00            [24]  391 	push	bits
      0001B4 E4               [12]  392 	clr	a
      0001B5 C0 E0            [24]  393 	push	acc
      0001B7 C0 E0            [24]  394 	push	acc
      0001B9 C0 E0            [24]  395 	push	acc
      0001BB 74 3F            [12]  396 	mov	a,#0x3F
      0001BD C0 E0            [24]  397 	push	acc
      0001BF 8C 82            [24]  398 	mov	dpl,r4
      0001C1 8D 83            [24]  399 	mov	dph,r5
      0001C3 8E F0            [24]  400 	mov	b,r6
      0001C5 EF               [12]  401 	mov	a,r7
      0001C6 12r00r00         [24]  402 	lcall	___fslt
      0001C9 AF 82            [24]  403 	mov	r7,dpl
      0001CB E5 81            [12]  404 	mov	a,sp
      0001CD 24 FC            [12]  405 	add	a,#0xfc
      0001CF F5 81            [12]  406 	mov	sp,a
      0001D1 D0*00            [24]  407 	pop	bits
      0001D3 EF               [12]  408 	mov	a,r7
      0001D4 70 0B            [24]  409 	jnz	00114$
      0001D6 E5*00            [12]  410 	mov	a,_bp
      0001D8 24 05            [12]  411 	add	a,#0x05
      0001DA F8               [12]  412 	mov	r0,a
      0001DB 06               [12]  413 	inc	@r0
      0001DC B6 00 02         [24]  414 	cjne	@r0,#0x00,00148$
      0001DF 08               [12]  415 	inc	r0
      0001E0 06               [12]  416 	inc	@r0
      0001E1                        417 00148$:
      0001E1                        418 00114$:
                                    419 ;	expf.c:363: xn=n;
      0001E1 E5*00            [12]  420 	mov	a,_bp
      0001E3 24 05            [12]  421 	add	a,#0x05
      0001E5 F8               [12]  422 	mov	r0,a
      0001E6 86 82            [24]  423 	mov	dpl,@r0
      0001E8 08               [12]  424 	inc	r0
      0001E9 86 83            [24]  425 	mov	dph,@r0
      0001EB C0*00            [24]  426 	push	bits
      0001ED 12r00r00         [24]  427 	lcall	___sint2fs
      0001F0 AC 82            [24]  428 	mov	r4,dpl
      0001F2 AD 83            [24]  429 	mov	r5,dph
      0001F4 AE F0            [24]  430 	mov	r6,b
      0001F6 FF               [12]  431 	mov	r7,a
      0001F7 D0*00            [24]  432 	pop	bits
      0001F9 E5*00            [12]  433 	mov	a,_bp
      0001FB 24 07            [12]  434 	add	a,#0x07
      0001FD F8               [12]  435 	mov	r0,a
      0001FE A6 04            [24]  436 	mov	@r0,ar4
      000200 08               [12]  437 	inc	r0
      000201 A6 05            [24]  438 	mov	@r0,ar5
      000203 08               [12]  439 	inc	r0
      000204 A6 06            [24]  440 	mov	@r0,ar6
      000206 08               [12]  441 	inc	r0
      000207 A6 07            [24]  442 	mov	@r0,ar7
                                    443 ;	expf.c:364: g=((y-xn*C1))-xn*C2;
      000209 C0*00            [24]  444 	push	bits
      00020B E5*00            [12]  445 	mov	a,_bp
      00020D 24 07            [12]  446 	add	a,#0x07
      00020F F8               [12]  447 	mov	r0,a
      000210 E6               [12]  448 	mov	a,@r0
      000211 C0 E0            [24]  449 	push	acc
      000213 08               [12]  450 	inc	r0
      000214 E6               [12]  451 	mov	a,@r0
      000215 C0 E0            [24]  452 	push	acc
      000217 08               [12]  453 	inc	r0
      000218 E6               [12]  454 	mov	a,@r0
      000219 C0 E0            [24]  455 	push	acc
      00021B 08               [12]  456 	inc	r0
      00021C E6               [12]  457 	mov	a,@r0
      00021D C0 E0            [24]  458 	push	acc
      00021F 90 80 00         [24]  459 	mov	dptr,#0x8000
      000222 75 F0 31         [24]  460 	mov	b,#0x31
      000225 74 3F            [12]  461 	mov	a,#0x3F
      000227 12r00r00         [24]  462 	lcall	___fsmul
      00022A AC 82            [24]  463 	mov	r4,dpl
      00022C AD 83            [24]  464 	mov	r5,dph
      00022E AE F0            [24]  465 	mov	r6,b
      000230 FF               [12]  466 	mov	r7,a
      000231 E5 81            [12]  467 	mov	a,sp
      000233 24 FC            [12]  468 	add	a,#0xfc
      000235 F5 81            [12]  469 	mov	sp,a
      000237 D0*00            [24]  470 	pop	bits
      000239 C0*00            [24]  471 	push	bits
      00023B C0 04            [24]  472 	push	ar4
      00023D C0 05            [24]  473 	push	ar5
      00023F C0 06            [24]  474 	push	ar6
      000241 C0 07            [24]  475 	push	ar7
      000243 E5*00            [12]  476 	mov	a,_bp
      000245 24 17            [12]  477 	add	a,#0x17
      000247 F8               [12]  478 	mov	r0,a
      000248 86 82            [24]  479 	mov	dpl,@r0
      00024A 08               [12]  480 	inc	r0
      00024B 86 83            [24]  481 	mov	dph,@r0
      00024D 08               [12]  482 	inc	r0
      00024E 86 F0            [24]  483 	mov	b,@r0
      000250 08               [12]  484 	inc	r0
      000251 E6               [12]  485 	mov	a,@r0
      000252 12r00r00         [24]  486 	lcall	___fssub
      000255 A8*00            [24]  487 	mov	r0,_bp
      000257 08               [12]  488 	inc	r0
      000258 A6 82            [24]  489 	mov	@r0,dpl
      00025A 08               [12]  490 	inc	r0
      00025B A6 83            [24]  491 	mov	@r0,dph
      00025D 08               [12]  492 	inc	r0
      00025E A6 F0            [24]  493 	mov	@r0,b
      000260 08               [12]  494 	inc	r0
      000261 F6               [12]  495 	mov	@r0,a
      000262 E5 81            [12]  496 	mov	a,sp
      000264 24 FC            [12]  497 	add	a,#0xfc
      000266 F5 81            [12]  498 	mov	sp,a
      000268 D0*00            [24]  499 	pop	bits
      00026A C0*00            [24]  500 	push	bits
      00026C E5*00            [12]  501 	mov	a,_bp
      00026E 24 07            [12]  502 	add	a,#0x07
      000270 F8               [12]  503 	mov	r0,a
      000271 E6               [12]  504 	mov	a,@r0
      000272 C0 E0            [24]  505 	push	acc
      000274 08               [12]  506 	inc	r0
      000275 E6               [12]  507 	mov	a,@r0
      000276 C0 E0            [24]  508 	push	acc
      000278 08               [12]  509 	inc	r0
      000279 E6               [12]  510 	mov	a,@r0
      00027A C0 E0            [24]  511 	push	acc
      00027C 08               [12]  512 	inc	r0
      00027D E6               [12]  513 	mov	a,@r0
      00027E C0 E0            [24]  514 	push	acc
      000280 90 80 83         [24]  515 	mov	dptr,#0x8083
      000283 75 F0 5E         [24]  516 	mov	b,#0x5E
      000286 74 B9            [12]  517 	mov	a,#0xB9
      000288 12r00r00         [24]  518 	lcall	___fsmul
      00028B AA 82            [24]  519 	mov	r2,dpl
      00028D AB 83            [24]  520 	mov	r3,dph
      00028F AE F0            [24]  521 	mov	r6,b
      000291 FF               [12]  522 	mov	r7,a
      000292 E5 81            [12]  523 	mov	a,sp
      000294 24 FC            [12]  524 	add	a,#0xfc
      000296 F5 81            [12]  525 	mov	sp,a
      000298 D0*00            [24]  526 	pop	bits
      00029A C0*00            [24]  527 	push	bits
      00029C C0 02            [24]  528 	push	ar2
      00029E C0 03            [24]  529 	push	ar3
      0002A0 C0 06            [24]  530 	push	ar6
      0002A2 C0 07            [24]  531 	push	ar7
      0002A4 A8*00            [24]  532 	mov	r0,_bp
      0002A6 08               [12]  533 	inc	r0
      0002A7 86 82            [24]  534 	mov	dpl,@r0
      0002A9 08               [12]  535 	inc	r0
      0002AA 86 83            [24]  536 	mov	dph,@r0
      0002AC 08               [12]  537 	inc	r0
      0002AD 86 F0            [24]  538 	mov	b,@r0
      0002AF 08               [12]  539 	inc	r0
      0002B0 E6               [12]  540 	mov	a,@r0
      0002B1 12r00r00         [24]  541 	lcall	___fssub
      0002B4 AC 82            [24]  542 	mov	r4,dpl
      0002B6 AD 83            [24]  543 	mov	r5,dph
      0002B8 AE F0            [24]  544 	mov	r6,b
      0002BA FF               [12]  545 	mov	r7,a
      0002BB E5 81            [12]  546 	mov	a,sp
      0002BD 24 FC            [12]  547 	add	a,#0xfc
      0002BF F5 81            [12]  548 	mov	sp,a
      0002C1 D0*00            [24]  549 	pop	bits
      0002C3 E5*00            [12]  550 	mov	a,_bp
      0002C5 24 0B            [12]  551 	add	a,#0x0b
      0002C7 F8               [12]  552 	mov	r0,a
      0002C8 A6 04            [24]  553 	mov	@r0,ar4
      0002CA 08               [12]  554 	inc	r0
      0002CB A6 05            [24]  555 	mov	@r0,ar5
      0002CD 08               [12]  556 	inc	r0
      0002CE A6 06            [24]  557 	mov	@r0,ar6
      0002D0 08               [12]  558 	inc	r0
      0002D1 A6 07            [24]  559 	mov	@r0,ar7
                                    560 ;	expf.c:365: z=g*g;
      0002D3 C0*00            [24]  561 	push	bits
      0002D5 E5*00            [12]  562 	mov	a,_bp
      0002D7 24 0B            [12]  563 	add	a,#0x0b
      0002D9 F8               [12]  564 	mov	r0,a
      0002DA E6               [12]  565 	mov	a,@r0
      0002DB C0 E0            [24]  566 	push	acc
      0002DD 08               [12]  567 	inc	r0
      0002DE E6               [12]  568 	mov	a,@r0
      0002DF C0 E0            [24]  569 	push	acc
      0002E1 08               [12]  570 	inc	r0
      0002E2 E6               [12]  571 	mov	a,@r0
      0002E3 C0 E0            [24]  572 	push	acc
      0002E5 08               [12]  573 	inc	r0
      0002E6 E6               [12]  574 	mov	a,@r0
      0002E7 C0 E0            [24]  575 	push	acc
      0002E9 E5*00            [12]  576 	mov	a,_bp
      0002EB 24 0B            [12]  577 	add	a,#0x0b
      0002ED F8               [12]  578 	mov	r0,a
      0002EE 86 82            [24]  579 	mov	dpl,@r0
      0002F0 08               [12]  580 	inc	r0
      0002F1 86 83            [24]  581 	mov	dph,@r0
      0002F3 08               [12]  582 	inc	r0
      0002F4 86 F0            [24]  583 	mov	b,@r0
      0002F6 08               [12]  584 	inc	r0
      0002F7 E6               [12]  585 	mov	a,@r0
      0002F8 12r00r00         [24]  586 	lcall	___fsmul
      0002FB AA 82            [24]  587 	mov	r2,dpl
      0002FD AB 83            [24]  588 	mov	r3,dph
      0002FF AE F0            [24]  589 	mov	r6,b
      000301 FF               [12]  590 	mov	r7,a
      000302 E5 81            [12]  591 	mov	a,sp
      000304 24 FC            [12]  592 	add	a,#0xfc
      000306 F5 81            [12]  593 	mov	sp,a
      000308 D0*00            [24]  594 	pop	bits
      00030A E5*00            [12]  595 	mov	a,_bp
      00030C 24 13            [12]  596 	add	a,#0x13
      00030E F8               [12]  597 	mov	r0,a
      00030F A6 02            [24]  598 	mov	@r0,ar2
      000311 08               [12]  599 	inc	r0
      000312 A6 03            [24]  600 	mov	@r0,ar3
      000314 08               [12]  601 	inc	r0
      000315 A6 06            [24]  602 	mov	@r0,ar6
      000317 08               [12]  603 	inc	r0
      000318 A6 07            [24]  604 	mov	@r0,ar7
                                    605 ;	expf.c:366: r=P(z)*g;
      00031A C0*00            [24]  606 	push	bits
      00031C E5*00            [12]  607 	mov	a,_bp
      00031E 24 13            [12]  608 	add	a,#0x13
      000320 F8               [12]  609 	mov	r0,a
      000321 E6               [12]  610 	mov	a,@r0
      000322 C0 E0            [24]  611 	push	acc
      000324 08               [12]  612 	inc	r0
      000325 E6               [12]  613 	mov	a,@r0
      000326 C0 E0            [24]  614 	push	acc
      000328 08               [12]  615 	inc	r0
      000329 E6               [12]  616 	mov	a,@r0
      00032A C0 E0            [24]  617 	push	acc
      00032C 08               [12]  618 	inc	r0
      00032D E6               [12]  619 	mov	a,@r0
      00032E C0 E0            [24]  620 	push	acc
      000330 90 53 08         [24]  621 	mov	dptr,#0x5308
      000333 75 F0 88         [24]  622 	mov	b,#0x88
      000336 74 3B            [12]  623 	mov	a,#0x3B
      000338 12r00r00         [24]  624 	lcall	___fsmul
      00033B AC 82            [24]  625 	mov	r4,dpl
      00033D AD 83            [24]  626 	mov	r5,dph
      00033F AE F0            [24]  627 	mov	r6,b
      000341 FF               [12]  628 	mov	r7,a
      000342 E5 81            [12]  629 	mov	a,sp
      000344 24 FC            [12]  630 	add	a,#0xfc
      000346 F5 81            [12]  631 	mov	sp,a
      000348 D0*00            [24]  632 	pop	bits
      00034A C0*00            [24]  633 	push	bits
      00034C E4               [12]  634 	clr	a
      00034D C0 E0            [24]  635 	push	acc
      00034F C0 E0            [24]  636 	push	acc
      000351 74 80            [12]  637 	mov	a,#0x80
      000353 C0 E0            [24]  638 	push	acc
      000355 74 3E            [12]  639 	mov	a,#0x3E
      000357 C0 E0            [24]  640 	push	acc
      000359 8C 82            [24]  641 	mov	dpl,r4
      00035B 8D 83            [24]  642 	mov	dph,r5
      00035D 8E F0            [24]  643 	mov	b,r6
      00035F EF               [12]  644 	mov	a,r7
      000360 12r00r00         [24]  645 	lcall	___fsadd
      000363 AC 82            [24]  646 	mov	r4,dpl
      000365 AD 83            [24]  647 	mov	r5,dph
      000367 AE F0            [24]  648 	mov	r6,b
      000369 FF               [12]  649 	mov	r7,a
      00036A E5 81            [12]  650 	mov	a,sp
      00036C 24 FC            [12]  651 	add	a,#0xfc
      00036E F5 81            [12]  652 	mov	sp,a
      000370 D0*00            [24]  653 	pop	bits
      000372 C0*00            [24]  654 	push	bits
      000374 E5*00            [12]  655 	mov	a,_bp
      000376 24 0B            [12]  656 	add	a,#0x0b
      000378 F8               [12]  657 	mov	r0,a
      000379 E6               [12]  658 	mov	a,@r0
      00037A C0 E0            [24]  659 	push	acc
      00037C 08               [12]  660 	inc	r0
      00037D E6               [12]  661 	mov	a,@r0
      00037E C0 E0            [24]  662 	push	acc
      000380 08               [12]  663 	inc	r0
      000381 E6               [12]  664 	mov	a,@r0
      000382 C0 E0            [24]  665 	push	acc
      000384 08               [12]  666 	inc	r0
      000385 E6               [12]  667 	mov	a,@r0
      000386 C0 E0            [24]  668 	push	acc
      000388 8C 82            [24]  669 	mov	dpl,r4
      00038A 8D 83            [24]  670 	mov	dph,r5
      00038C 8E F0            [24]  671 	mov	b,r6
      00038E EF               [12]  672 	mov	a,r7
      00038F 12r00r00         [24]  673 	lcall	___fsmul
      000392 AC 82            [24]  674 	mov	r4,dpl
      000394 AD 83            [24]  675 	mov	r5,dph
      000396 AE F0            [24]  676 	mov	r6,b
      000398 FF               [12]  677 	mov	r7,a
      000399 E5 81            [12]  678 	mov	a,sp
      00039B 24 FC            [12]  679 	add	a,#0xfc
      00039D F5 81            [12]  680 	mov	sp,a
      00039F D0*00            [24]  681 	pop	bits
      0003A1 E5*00            [12]  682 	mov	a,_bp
      0003A3 24 0F            [12]  683 	add	a,#0x0f
      0003A5 F8               [12]  684 	mov	r0,a
      0003A6 A6 04            [24]  685 	mov	@r0,ar4
      0003A8 08               [12]  686 	inc	r0
      0003A9 A6 05            [24]  687 	mov	@r0,ar5
      0003AB 08               [12]  688 	inc	r0
      0003AC A6 06            [24]  689 	mov	@r0,ar6
      0003AE 08               [12]  690 	inc	r0
      0003AF A6 07            [24]  691 	mov	@r0,ar7
                                    692 ;	expf.c:367: r=0.5+(r/(Q(z)-r));
      0003B1 C0*00            [24]  693 	push	bits
      0003B3 E5*00            [12]  694 	mov	a,_bp
      0003B5 24 13            [12]  695 	add	a,#0x13
      0003B7 F8               [12]  696 	mov	r0,a
      0003B8 E6               [12]  697 	mov	a,@r0
      0003B9 C0 E0            [24]  698 	push	acc
      0003BB 08               [12]  699 	inc	r0
      0003BC E6               [12]  700 	mov	a,@r0
      0003BD C0 E0            [24]  701 	push	acc
      0003BF 08               [12]  702 	inc	r0
      0003C0 E6               [12]  703 	mov	a,@r0
      0003C1 C0 E0            [24]  704 	push	acc
      0003C3 08               [12]  705 	inc	r0
      0003C4 E6               [12]  706 	mov	a,@r0
      0003C5 C0 E0            [24]  707 	push	acc
      0003C7 90 BF 5B         [24]  708 	mov	dptr,#0xBF5B
      0003CA 75 F0 4C         [24]  709 	mov	b,#0x4C
      0003CD 74 3D            [12]  710 	mov	a,#0x3D
      0003CF 12r00r00         [24]  711 	lcall	___fsmul
      0003D2 AA 82            [24]  712 	mov	r2,dpl
      0003D4 AB 83            [24]  713 	mov	r3,dph
      0003D6 AE F0            [24]  714 	mov	r6,b
      0003D8 FF               [12]  715 	mov	r7,a
      0003D9 E5 81            [12]  716 	mov	a,sp
      0003DB 24 FC            [12]  717 	add	a,#0xfc
      0003DD F5 81            [12]  718 	mov	sp,a
      0003DF D0*00            [24]  719 	pop	bits
      0003E1 C0*00            [24]  720 	push	bits
      0003E3 E4               [12]  721 	clr	a
      0003E4 C0 E0            [24]  722 	push	acc
      0003E6 C0 E0            [24]  723 	push	acc
      0003E8 C0 E0            [24]  724 	push	acc
      0003EA 74 3F            [12]  725 	mov	a,#0x3F
      0003EC C0 E0            [24]  726 	push	acc
      0003EE 8A 82            [24]  727 	mov	dpl,r2
      0003F0 8B 83            [24]  728 	mov	dph,r3
      0003F2 8E F0            [24]  729 	mov	b,r6
      0003F4 EF               [12]  730 	mov	a,r7
      0003F5 12r00r00         [24]  731 	lcall	___fsadd
      0003F8 AC 82            [24]  732 	mov	r4,dpl
      0003FA AD 83            [24]  733 	mov	r5,dph
      0003FC AE F0            [24]  734 	mov	r6,b
      0003FE FF               [12]  735 	mov	r7,a
      0003FF E5 81            [12]  736 	mov	a,sp
      000401 24 FC            [12]  737 	add	a,#0xfc
      000403 F5 81            [12]  738 	mov	sp,a
      000405 D0*00            [24]  739 	pop	bits
      000407 C0*00            [24]  740 	push	bits
      000409 E5*00            [12]  741 	mov	a,_bp
      00040B 24 0F            [12]  742 	add	a,#0x0f
      00040D F8               [12]  743 	mov	r0,a
      00040E E6               [12]  744 	mov	a,@r0
      00040F C0 E0            [24]  745 	push	acc
      000411 08               [12]  746 	inc	r0
      000412 E6               [12]  747 	mov	a,@r0
      000413 C0 E0            [24]  748 	push	acc
      000415 08               [12]  749 	inc	r0
      000416 E6               [12]  750 	mov	a,@r0
      000417 C0 E0            [24]  751 	push	acc
      000419 08               [12]  752 	inc	r0
      00041A E6               [12]  753 	mov	a,@r0
      00041B C0 E0            [24]  754 	push	acc
      00041D 8C 82            [24]  755 	mov	dpl,r4
      00041F 8D 83            [24]  756 	mov	dph,r5
      000421 8E F0            [24]  757 	mov	b,r6
      000423 EF               [12]  758 	mov	a,r7
      000424 12r00r00         [24]  759 	lcall	___fssub
      000427 AC 82            [24]  760 	mov	r4,dpl
      000429 AD 83            [24]  761 	mov	r5,dph
      00042B AE F0            [24]  762 	mov	r6,b
      00042D FF               [12]  763 	mov	r7,a
      00042E E5 81            [12]  764 	mov	a,sp
      000430 24 FC            [12]  765 	add	a,#0xfc
      000432 F5 81            [12]  766 	mov	sp,a
      000434 D0*00            [24]  767 	pop	bits
      000436 C0*00            [24]  768 	push	bits
      000438 C0 04            [24]  769 	push	ar4
      00043A C0 05            [24]  770 	push	ar5
      00043C C0 06            [24]  771 	push	ar6
      00043E C0 07            [24]  772 	push	ar7
      000440 E5*00            [12]  773 	mov	a,_bp
      000442 24 0F            [12]  774 	add	a,#0x0f
      000444 F8               [12]  775 	mov	r0,a
      000445 86 82            [24]  776 	mov	dpl,@r0
      000447 08               [12]  777 	inc	r0
      000448 86 83            [24]  778 	mov	dph,@r0
      00044A 08               [12]  779 	inc	r0
      00044B 86 F0            [24]  780 	mov	b,@r0
      00044D 08               [12]  781 	inc	r0
      00044E E6               [12]  782 	mov	a,@r0
      00044F 12r00r00         [24]  783 	lcall	___fsdiv
      000452 AC 82            [24]  784 	mov	r4,dpl
      000454 AD 83            [24]  785 	mov	r5,dph
      000456 AE F0            [24]  786 	mov	r6,b
      000458 FF               [12]  787 	mov	r7,a
      000459 E5 81            [12]  788 	mov	a,sp
      00045B 24 FC            [12]  789 	add	a,#0xfc
      00045D F5 81            [12]  790 	mov	sp,a
      00045F D0*00            [24]  791 	pop	bits
      000461 C0*00            [24]  792 	push	bits
      000463 E4               [12]  793 	clr	a
      000464 C0 E0            [24]  794 	push	acc
      000466 C0 E0            [24]  795 	push	acc
      000468 C0 E0            [24]  796 	push	acc
      00046A 74 3F            [12]  797 	mov	a,#0x3F
      00046C C0 E0            [24]  798 	push	acc
      00046E 8C 82            [24]  799 	mov	dpl,r4
      000470 8D 83            [24]  800 	mov	dph,r5
      000472 8E F0            [24]  801 	mov	b,r6
      000474 EF               [12]  802 	mov	a,r7
      000475 12r00r00         [24]  803 	lcall	___fsadd
      000478 AC 82            [24]  804 	mov	r4,dpl
      00047A AD 83            [24]  805 	mov	r5,dph
      00047C AE F0            [24]  806 	mov	r6,b
      00047E FF               [12]  807 	mov	r7,a
      00047F E5 81            [12]  808 	mov	a,sp
      000481 24 FC            [12]  809 	add	a,#0xfc
      000483 F5 81            [12]  810 	mov	sp,a
      000485 D0*00            [24]  811 	pop	bits
      000487 E5*00            [12]  812 	mov	a,_bp
      000489 24 0F            [12]  813 	add	a,#0x0f
      00048B F8               [12]  814 	mov	r0,a
      00048C A6 04            [24]  815 	mov	@r0,ar4
      00048E 08               [12]  816 	inc	r0
      00048F A6 05            [24]  817 	mov	@r0,ar5
      000491 08               [12]  818 	inc	r0
      000492 A6 06            [24]  819 	mov	@r0,ar6
      000494 08               [12]  820 	inc	r0
      000495 A6 07            [24]  821 	mov	@r0,ar7
                                    822 ;	expf.c:369: n++;
      000497 E5*00            [12]  823 	mov	a,_bp
      000499 24 05            [12]  824 	add	a,#0x05
      00049B F8               [12]  825 	mov	r0,a
      00049C 06               [12]  826 	inc	@r0
      00049D B6 00 02         [24]  827 	cjne	@r0,#0x00,00149$
      0004A0 08               [12]  828 	inc	r0
      0004A1 06               [12]  829 	inc	@r0
      0004A2                        830 00149$:
                                    831 ;	expf.c:370: z=ldexpf(r, n);
      0004A2 C0*00            [24]  832 	push	bits
      0004A4 E5*00            [12]  833 	mov	a,_bp
      0004A6 24 05            [12]  834 	add	a,#0x05
      0004A8 F8               [12]  835 	mov	r0,a
      0004A9 E6               [12]  836 	mov	a,@r0
      0004AA C0 E0            [24]  837 	push	acc
      0004AC 08               [12]  838 	inc	r0
      0004AD E6               [12]  839 	mov	a,@r0
      0004AE C0 E0            [24]  840 	push	acc
      0004B0 E5*00            [12]  841 	mov	a,_bp
      0004B2 24 0F            [12]  842 	add	a,#0x0f
      0004B4 F8               [12]  843 	mov	r0,a
      0004B5 86 82            [24]  844 	mov	dpl,@r0
      0004B7 08               [12]  845 	inc	r0
      0004B8 86 83            [24]  846 	mov	dph,@r0
      0004BA 08               [12]  847 	inc	r0
      0004BB 86 F0            [24]  848 	mov	b,@r0
      0004BD 08               [12]  849 	inc	r0
      0004BE E6               [12]  850 	mov	a,@r0
      0004BF 12r00r00         [24]  851 	lcall	_ldexpf
      0004C2 AC 82            [24]  852 	mov	r4,dpl
      0004C4 AD 83            [24]  853 	mov	r5,dph
      0004C6 AE F0            [24]  854 	mov	r6,b
      0004C8 FF               [12]  855 	mov	r7,a
      0004C9 15 81            [12]  856 	dec	sp
      0004CB 15 81            [12]  857 	dec	sp
      0004CD D0*00            [24]  858 	pop	bits
      0004CF E5*00            [12]  859 	mov	a,_bp
      0004D1 24 13            [12]  860 	add	a,#0x13
      0004D3 F8               [12]  861 	mov	r0,a
      0004D4 A6 04            [24]  862 	mov	@r0,ar4
      0004D6 08               [12]  863 	inc	r0
      0004D7 A6 05            [24]  864 	mov	@r0,ar5
      0004D9 08               [12]  865 	inc	r0
      0004DA A6 06            [24]  866 	mov	@r0,ar6
      0004DC 08               [12]  867 	inc	r0
      0004DD A6 07            [24]  868 	mov	@r0,ar7
                                    869 ;	expf.c:371: if(sign)
      0004DF 30*00 35         [24]  870 	jnb	b0,00116$
                                    871 ;	expf.c:372: return 1.0/z;
      0004E2 E5*00            [12]  872 	mov	a,_bp
      0004E4 24 13            [12]  873 	add	a,#0x13
      0004E6 F8               [12]  874 	mov	r0,a
      0004E7 E6               [12]  875 	mov	a,@r0
      0004E8 C0 E0            [24]  876 	push	acc
      0004EA 08               [12]  877 	inc	r0
      0004EB E6               [12]  878 	mov	a,@r0
      0004EC C0 E0            [24]  879 	push	acc
      0004EE 08               [12]  880 	inc	r0
      0004EF E6               [12]  881 	mov	a,@r0
      0004F0 C0 E0            [24]  882 	push	acc
      0004F2 08               [12]  883 	inc	r0
      0004F3 E6               [12]  884 	mov	a,@r0
      0004F4 C0 E0            [24]  885 	push	acc
      0004F6 90 00 00         [24]  886 	mov	dptr,#0x0000
      0004F9 75 F0 80         [24]  887 	mov	b,#0x80
      0004FC 74 3F            [12]  888 	mov	a,#0x3F
      0004FE 12r00r00         [24]  889 	lcall	___fsdiv
      000501 AC 82            [24]  890 	mov	r4,dpl
      000503 AD 83            [24]  891 	mov	r5,dph
      000505 AE F0            [24]  892 	mov	r6,b
      000507 FF               [12]  893 	mov	r7,a
      000508 E5 81            [12]  894 	mov	a,sp
      00050A 24 FC            [12]  895 	add	a,#0xfc
      00050C F5 81            [12]  896 	mov	sp,a
      00050E 8C 82            [24]  897 	mov	dpl,r4
      000510 8D 83            [24]  898 	mov	dph,r5
      000512 8E F0            [24]  899 	mov	b,r6
      000514 EF               [12]  900 	mov	a,r7
      000515 80 0F            [24]  901 	sjmp	00118$
      000517                        902 00116$:
                                    903 ;	expf.c:374: return z;
      000517 E5*00            [12]  904 	mov	a,_bp
      000519 24 13            [12]  905 	add	a,#0x13
      00051B F8               [12]  906 	mov	r0,a
      00051C 86 82            [24]  907 	mov	dpl,@r0
      00051E 08               [12]  908 	inc	r0
      00051F 86 83            [24]  909 	mov	dph,@r0
      000521 08               [12]  910 	inc	r0
      000522 86 F0            [24]  911 	mov	b,@r0
      000524 08               [12]  912 	inc	r0
      000525 E6               [12]  913 	mov	a,@r0
      000526                        914 00118$:
      000526 85*00 81         [24]  915 	mov	sp,_bp
      000529 D0*00            [24]  916 	pop	_bp
      00052B 22               [24]  917 	ret
                                    918 	.area CSEG    (CODE)
                                    919 	.area CONST   (CODE)
                                    920 	.area XINIT   (CODE)
                                    921 	.area CABS    (ABS,CODE)
