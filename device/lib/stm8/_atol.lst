                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:50 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atol
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atol
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 ;--------------------------------------------------------
                                     25 ; global & static initialisations
                                     26 ;--------------------------------------------------------
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area GSINIT
                                     31 ;--------------------------------------------------------
                                     32 ; Home
                                     33 ;--------------------------------------------------------
                                     34 	.area HOME
                                     35 	.area HOME
                                     36 ;--------------------------------------------------------
                                     37 ; code
                                     38 ;--------------------------------------------------------
                                     39 	.area CODE
                                     40 ;	../_atol.c: 29: long atol(char * s)
                                     41 ;	-----------------------------------------
                                     42 ;	 function atol
                                     43 ;	-----------------------------------------
      000000                         44 _atol:
      000000 52 19            [ 2]   45 	sub	sp, #25
                                     46 ;	../_atol.c: 31: register long rv=0; 
      000002 5F               [ 1]   47 	clrw	x
      000003 1F 03            [ 2]   48 	ldw	(0x03, sp), x
      000005 1F 01            [ 2]   49 	ldw	(0x01, sp), x
                                     50 ;	../_atol.c: 35: while (*s) {
      000007 1E 1C            [ 2]   51 	ldw	x, (0x1c, sp)
      000009                         52 00107$:
      000009 F6               [ 1]   53 	ld	a, (x)
                                     54 ;	../_atol.c: 38: if (*s == '-' || *s == '+') 
      00000A A1 2D            [ 1]   55 	cp	a, #0x2d
      00000C 26 08            [ 1]   56 	jrne	00169$
      00000E 88               [ 1]   57 	push	a
      00000F A6 01            [ 1]   58 	ld	a, #0x01
      000011 6B 1A            [ 1]   59 	ld	(0x1a, sp), a
      000013 84               [ 1]   60 	pop	a
      000014 20 02            [ 2]   61 	jra	00170$
      000016                         62 00169$:
      000016 0F 19            [ 1]   63 	clr	(0x19, sp)
      000018                         64 00170$:
      000018 A1 2B            [ 1]   65 	cp	a, #0x2b
      00001A 26 08            [ 1]   66 	jrne	00172$
      00001C 88               [ 1]   67 	push	a
      00001D A6 01            [ 1]   68 	ld	a, #0x01
      00001F 6B 19            [ 1]   69 	ld	(0x19, sp), a
      000021 84               [ 1]   70 	pop	a
      000022 20 02            [ 2]   71 	jra	00173$
      000024                         72 00172$:
      000024 0F 18            [ 1]   73 	clr	(0x18, sp)
      000026                         74 00173$:
                                     75 ;	../_atol.c: 35: while (*s) {
      000026 4D               [ 1]   76 	tnz	a
      000027 27 13            [ 1]   77 	jreq	00133$
                                     78 ;	../_atol.c: 36: if (*s <= '9' && *s >= '0')
      000029 A1 39            [ 1]   79 	cp	a, #0x39
      00002B 2C 04            [ 1]   80 	jrsgt	00102$
      00002D A1 30            [ 1]   81 	cp	a, #0x30
      00002F 2E 0B            [ 1]   82 	jrsge	00133$
                                     83 ;	../_atol.c: 37: break;
      000031                         84 00102$:
                                     85 ;	../_atol.c: 38: if (*s == '-' || *s == '+') 
      000031 0D 19            [ 1]   86 	tnz	(0x19, sp)
      000033 26 07            [ 1]   87 	jrne	00133$
      000035 0D 18            [ 1]   88 	tnz	(0x18, sp)
      000037 26 03            [ 1]   89 	jrne	00133$
                                     90 ;	../_atol.c: 40: s++;
      000039 5C               [ 2]   91 	incw	x
      00003A 20 CD            [ 2]   92 	jra	00107$
      00003C                         93 00133$:
      00003C 1F 1C            [ 2]   94 	ldw	(0x1c, sp), x
                                     95 ;	../_atol.c: 43: sign = (*s == '-');
      00003E 7B 19            [ 1]   96 	ld	a, (0x19, sp)
      000040 6B 07            [ 1]   97 	ld	(0x07, sp), a
                                     98 ;	../_atol.c: 44: if (*s == '-' || *s == '+') s++;
      000042 0D 19            [ 1]   99 	tnz	(0x19, sp)
      000044 26 04            [ 1]  100 	jrne	00110$
      000046 0D 18            [ 1]  101 	tnz	(0x18, sp)
      000048 27 03            [ 1]  102 	jreq	00131$
      00004A                        103 00110$:
      00004A 5C               [ 2]  104 	incw	x
      00004B 1F 1C            [ 2]  105 	ldw	(0x1c, sp), x
                                    106 ;	../_atol.c: 46: while (*s && *s >= '0' && *s <= '9') {
      00004D                        107 00131$:
      00004D 16 1C            [ 2]  108 	ldw	y, (0x1c, sp)
      00004F 17 05            [ 2]  109 	ldw	(0x05, sp), y
      000051                        110 00115$:
      000051 1E 05            [ 2]  111 	ldw	x, (0x05, sp)
      000053 F6               [ 1]  112 	ld	a, (x)
      000054 4D               [ 1]  113 	tnz	a
      000055 27 4C            [ 1]  114 	jreq	00117$
      000057 A1 30            [ 1]  115 	cp	a, #0x30
      000059 2F 48            [ 1]  116 	jrslt	00117$
      00005B A1 39            [ 1]  117 	cp	a, #0x39
      00005D 2C 44            [ 1]  118 	jrsgt	00117$
                                    119 ;	../_atol.c: 47: rv = (rv * 10) + (*s - '0');
      00005F 88               [ 1]  120 	push	a
      000060 1E 04            [ 2]  121 	ldw	x, (0x04, sp)
      000062 89               [ 2]  122 	pushw	x
      000063 1E 04            [ 2]  123 	ldw	x, (0x04, sp)
      000065 89               [ 2]  124 	pushw	x
      000066 4B 0A            [ 1]  125 	push	#0x0a
      000068 5F               [ 1]  126 	clrw	x
      000069 89               [ 2]  127 	pushw	x
      00006A 4B 00            [ 1]  128 	push	#0x00
      00006C CDr00r00         [ 4]  129 	call	__mullong
      00006F 5B 08            [ 2]  130 	addw	sp, #8
      000071 1F 17            [ 2]  131 	ldw	(0x17, sp), x
      000073 17 15            [ 2]  132 	ldw	(0x15, sp), y
      000075 84               [ 1]  133 	pop	a
      000076 97               [ 1]  134 	ld	xl, a
      000077 9F               [ 1]  135 	ld	a, xl
      000078 49               [ 1]  136 	rlc	a
      000079 4F               [ 1]  137 	clr	a
      00007A A2 00            [ 1]  138 	sbc	a, #0x00
      00007C 95               [ 1]  139 	ld	xh, a
      00007D 1D 00 30         [ 2]  140 	subw	x, #0x0030
      000080 9E               [ 1]  141 	ld	a, xh
      000081 49               [ 1]  142 	rlc	a
      000082 4F               [ 1]  143 	clr	a
      000083 A2 00            [ 1]  144 	sbc	a, #0x00
      000085 6B 11            [ 1]  145 	ld	(0x11, sp), a
      000087 72 FB 16         [ 2]  146 	addw	x, (0x16, sp)
      00008A 88               [ 1]  147 	push	a
      00008B 7B 12            [ 1]  148 	ld	a, (0x12, sp)
      00008D 19 16            [ 1]  149 	adc	a, (0x16, sp)
      00008F 6B 0E            [ 1]  150 	ld	(0x0e, sp), a
      000091 84               [ 1]  151 	pop	a
      000092 19 14            [ 1]  152 	adc	a, (0x14, sp)
      000094 1F 03            [ 2]  153 	ldw	(0x03, sp), x
      000096 6B 01            [ 1]  154 	ld	(0x01, sp), a
      000098 7B 0D            [ 1]  155 	ld	a, (0x0d, sp)
      00009A 6B 02            [ 1]  156 	ld	(0x02, sp), a
                                    157 ;	../_atol.c: 48: s++;
      00009C 1E 05            [ 2]  158 	ldw	x, (0x05, sp)
      00009E 5C               [ 2]  159 	incw	x
      00009F 1F 05            [ 2]  160 	ldw	(0x05, sp), x
      0000A1 20 AE            [ 2]  161 	jra	00115$
      0000A3                        162 00117$:
                                    163 ;	../_atol.c: 51: return (sign ? -rv : rv);
      0000A3 0D 07            [ 1]  164 	tnz	(0x07, sp)
      0000A5 27 11            [ 1]  165 	jreq	00120$
      0000A7 1E 03            [ 2]  166 	ldw	x, (0x03, sp)
      0000A9 50               [ 2]  167 	negw	x
      0000AA 4F               [ 1]  168 	clr	a
      0000AB 12 02            [ 1]  169 	sbc	a, (0x02, sp)
      0000AD 90 97            [ 1]  170 	ld	yl, a
      0000AF 4F               [ 1]  171 	clr	a
      0000B0 12 01            [ 1]  172 	sbc	a, (0x01, sp)
      0000B2 90 95            [ 1]  173 	ld	yh, a
      0000B4 1F 0A            [ 2]  174 	ldw	(0x0a, sp), x
      0000B6 20 06            [ 2]  175 	jra	00121$
      0000B8                        176 00120$:
      0000B8 16 03            [ 2]  177 	ldw	y, (0x03, sp)
      0000BA 17 0A            [ 2]  178 	ldw	(0x0a, sp), y
      0000BC 16 01            [ 2]  179 	ldw	y, (0x01, sp)
      0000BE                        180 00121$:
      0000BE 1E 0A            [ 2]  181 	ldw	x, (0x0a, sp)
      0000C0 5B 19            [ 2]  182 	addw	sp, #25
      0000C2 81               [ 4]  183 	ret
                                    184 	.area CODE
                                    185 	.area INITIALIZER
                                    186 	.area CABS (ABS)
