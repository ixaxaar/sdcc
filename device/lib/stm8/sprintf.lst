                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:29:01 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sprintf
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __print_format
                                     12 	.globl _vsprintf
                                     13 	.globl _sprintf
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 ;--------------------------------------------------------
                                     27 ; global & static initialisations
                                     28 ;--------------------------------------------------------
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area GSINIT
                                     33 ;--------------------------------------------------------
                                     34 ; Home
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area HOME
                                     38 ;--------------------------------------------------------
                                     39 ; code
                                     40 ;--------------------------------------------------------
                                     41 	.area CODE
                                     42 ;	../sprintf.c: 34: put_char_to_string (char c, void* p) _REENTRANT
                                     43 ;	-----------------------------------------
                                     44 ;	 function put_char_to_string
                                     45 ;	-----------------------------------------
      000000                         46 _put_char_to_string:
      000000 52 02            [ 2]   47 	sub	sp, #2
                                     48 ;	../sprintf.c: 36: char **buf = (char **)p;
      000002 16 06            [ 2]   49 	ldw	y, (0x06, sp)
                                     50 ;	../sprintf.c: 37: *(*buf)++ = c;
      000004 93               [ 1]   51 	ldw	x, y
      000005 FE               [ 2]   52 	ldw	x, (x)
      000006 1F 01            [ 2]   53 	ldw	(0x01, sp), x
      000008 1E 01            [ 2]   54 	ldw	x, (0x01, sp)
      00000A 5C               [ 2]   55 	incw	x
      00000B 90 FF            [ 2]   56 	ldw	(y), x
      00000D 1E 01            [ 2]   57 	ldw	x, (0x01, sp)
      00000F 7B 05            [ 1]   58 	ld	a, (0x05, sp)
      000011 F7               [ 1]   59 	ld	(x), a
      000012 5B 02            [ 2]   60 	addw	sp, #2
      000014 81               [ 4]   61 	ret
                                     62 ;	../sprintf.c: 41: vsprintf (char *buf, const char *format, va_list ap)
                                     63 ;	-----------------------------------------
                                     64 ;	 function vsprintf
                                     65 ;	-----------------------------------------
      000015                         66 _vsprintf:
                                     67 ;	../sprintf.c: 44: i = _print_format (put_char_to_string, &buf, format, ap);
      000015 96               [ 1]   68 	ldw	x, sp
      000016 1C 00 03         [ 2]   69 	addw	x, #3
      000019 16 07            [ 2]   70 	ldw	y, (0x07, sp)
      00001B 90 89            [ 2]   71 	pushw	y
      00001D 16 07            [ 2]   72 	ldw	y, (0x07, sp)
      00001F 90 89            [ 2]   73 	pushw	y
      000021 89               [ 2]   74 	pushw	x
      000022 AEr00r00         [ 2]   75 	ldw	x, #_put_char_to_string
      000025 89               [ 2]   76 	pushw	x
      000026 CDr00r00         [ 4]   77 	call	__print_format
      000029 5B 08            [ 2]   78 	addw	sp, #8
                                     79 ;	../sprintf.c: 45: *buf = 0;
      00002B 16 03            [ 2]   80 	ldw	y, (0x03, sp)
      00002D 90 7F            [ 1]   81 	clr	(y)
                                     82 ;	../sprintf.c: 46: return i;
      00002F 81               [ 4]   83 	ret
                                     84 ;	../sprintf.c: 50: sprintf (char *buf, const char *format, ...)
                                     85 ;	-----------------------------------------
                                     86 ;	 function sprintf
                                     87 ;	-----------------------------------------
      000030                         88 _sprintf:
                                     89 ;	../sprintf.c: 55: va_start (arg, format);
      000030 96               [ 1]   90 	ldw	x, sp
      000031 1C 00 05         [ 2]   91 	addw	x, #5
      000034 5C               [ 2]   92 	incw	x
      000035 5C               [ 2]   93 	incw	x
                                     94 ;	../sprintf.c: 56: i = _print_format (put_char_to_string, &buf, format, arg);
      000036 90 96            [ 1]   95 	ldw	y, sp
      000038 72 A9 00 03      [ 2]   96 	addw	y, #3
      00003C 89               [ 2]   97 	pushw	x
      00003D 1E 07            [ 2]   98 	ldw	x, (0x07, sp)
      00003F 89               [ 2]   99 	pushw	x
      000040 90 89            [ 2]  100 	pushw	y
      000042 AEr00r00         [ 2]  101 	ldw	x, #_put_char_to_string
      000045 89               [ 2]  102 	pushw	x
      000046 CDr00r00         [ 4]  103 	call	__print_format
      000049 5B 08            [ 2]  104 	addw	sp, #8
                                    105 ;	../sprintf.c: 57: *buf = 0;
      00004B 16 03            [ 2]  106 	ldw	y, (0x03, sp)
      00004D 90 7F            [ 1]  107 	clr	(y)
                                    108 ;	../sprintf.c: 60: return i;
      00004F 81               [ 4]  109 	ret
                                    110 	.area CODE
                                    111 	.area INITIALIZER
                                    112 	.area CABS (ABS)
