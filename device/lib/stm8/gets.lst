                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:58 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module gets
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _putchar
                                     12 	.globl _getchar
                                     13 	.globl _gets
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 ;--------------------------------------------------------
                                     27 ; global & static initialisations
                                     28 ;--------------------------------------------------------
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area GSINIT
                                     33 ;--------------------------------------------------------
                                     34 ; Home
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area HOME
                                     38 ;--------------------------------------------------------
                                     39 ; code
                                     40 ;--------------------------------------------------------
                                     41 	.area CODE
                                     42 ;	../gets.c: 32: gets (char *s)
                                     43 ;	-----------------------------------------
                                     44 ;	 function gets
                                     45 ;	-----------------------------------------
      000000                         46 _gets:
      000000 52 04            [ 2]   47 	sub	sp, #4
                                     48 ;	../gets.c: 35: unsigned int count = 0;
      000002 5F               [ 1]   49 	clrw	x
      000003 1F 01            [ 2]   50 	ldw	(0x01, sp), x
                                     51 ;	../gets.c: 37: while (1)
      000005                         52 00109$:
                                     53 ;	../gets.c: 39: c = getchar ();
      000005 CDr00r00         [ 4]   54 	call	_getchar
                                     55 ;	../gets.c: 40: switch(c)
      000008 A1 08            [ 1]   56 	cp	a, #0x08
      00000A 27 0C            [ 1]   57 	jreq	00101$
                                     58 ;	../gets.c: 57: *s = 0;
      00000C 1E 07            [ 2]   59 	ldw	x, (0x07, sp)
                                     60 ;	../gets.c: 40: switch(c)
      00000E A1 0A            [ 1]   61 	cp	a, #0x0a
      000010 27 28            [ 1]   62 	jreq	00105$
      000012 A1 0D            [ 1]   63 	cp	a, #0x0d
      000014 27 24            [ 1]   64 	jreq	00105$
      000016 20 35            [ 2]   65 	jra	00106$
                                     66 ;	../gets.c: 42: case '\b': /* backspace */
      000018                         67 00101$:
                                     68 ;	../gets.c: 43: if (count)
      000018 1E 01            [ 2]   69 	ldw	x, (0x01, sp)
      00001A 27 E9            [ 1]   70 	jreq	00109$
                                     71 ;	../gets.c: 45: putchar ('\b');
      00001C 4B 08            [ 1]   72 	push	#0x08
      00001E CDr00r00         [ 4]   73 	call	_putchar
      000021 84               [ 1]   74 	pop	a
                                     75 ;	../gets.c: 46: putchar (' ');
      000022 4B 20            [ 1]   76 	push	#0x20
      000024 CDr00r00         [ 4]   77 	call	_putchar
      000027 84               [ 1]   78 	pop	a
                                     79 ;	../gets.c: 47: putchar ('\b');
      000028 4B 08            [ 1]   80 	push	#0x08
      00002A CDr00r00         [ 4]   81 	call	_putchar
      00002D 84               [ 1]   82 	pop	a
                                     83 ;	../gets.c: 48: --s;
      00002E 1E 07            [ 2]   84 	ldw	x, (0x07, sp)
      000030 5A               [ 2]   85 	decw	x
      000031 1F 07            [ 2]   86 	ldw	(0x07, sp), x
                                     87 ;	../gets.c: 49: --count;
      000033 1E 01            [ 2]   88 	ldw	x, (0x01, sp)
      000035 5A               [ 2]   89 	decw	x
      000036 1F 01            [ 2]   90 	ldw	(0x01, sp), x
                                     91 ;	../gets.c: 51: break;
      000038 20 CB            [ 2]   92 	jra	00109$
                                     93 ;	../gets.c: 54: case '\r': /* CR or LF */
      00003A                         94 00105$:
                                     95 ;	../gets.c: 55: putchar ('\r');
      00003A 89               [ 2]   96 	pushw	x
      00003B 4B 0D            [ 1]   97 	push	#0x0d
      00003D CDr00r00         [ 4]   98 	call	_putchar
      000040 84               [ 1]   99 	pop	a
      000041 85               [ 2]  100 	popw	x
                                    101 ;	../gets.c: 56: putchar ('\n');
      000042 89               [ 2]  102 	pushw	x
      000043 4B 0A            [ 1]  103 	push	#0x0a
      000045 CDr00r00         [ 4]  104 	call	_putchar
      000048 84               [ 1]  105 	pop	a
      000049 85               [ 2]  106 	popw	x
                                    107 ;	../gets.c: 57: *s = 0;
      00004A 7F               [ 1]  108 	clr	(x)
                                    109 ;	../gets.c: 58: return s;
      00004B 20 15            [ 2]  110 	jra	00111$
                                    111 ;	../gets.c: 60: default:
      00004D                        112 00106$:
                                    113 ;	../gets.c: 61: *s++ = c;
      00004D F7               [ 1]  114 	ld	(x), a
      00004E 5C               [ 2]  115 	incw	x
      00004F 1F 07            [ 2]  116 	ldw	(0x07, sp), x
                                    117 ;	../gets.c: 62: ++count;
      000051 1E 01            [ 2]  118 	ldw	x, (0x01, sp)
      000053 5C               [ 2]  119 	incw	x
      000054 1F 03            [ 2]  120 	ldw	(0x03, sp), x
      000056 16 03            [ 2]  121 	ldw	y, (0x03, sp)
      000058 17 01            [ 2]  122 	ldw	(0x01, sp), y
                                    123 ;	../gets.c: 63: putchar (c);
      00005A 88               [ 1]  124 	push	a
      00005B CDr00r00         [ 4]  125 	call	_putchar
      00005E 84               [ 1]  126 	pop	a
                                    127 ;	../gets.c: 65: }
      00005F CCr00r05         [ 2]  128 	jp	00109$
      000062                        129 00111$:
      000062 5B 04            [ 2]  130 	addw	sp, #4
      000064 81               [ 4]  131 	ret
                                    132 	.area CODE
                                    133 	.area INITIALIZER
                                    134 	.area CABS (ABS)
