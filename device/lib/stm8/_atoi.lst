                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:50 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atoi
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atoi
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 ;--------------------------------------------------------
                                     25 ; global & static initialisations
                                     26 ;--------------------------------------------------------
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area GSINIT
                                     31 ;--------------------------------------------------------
                                     32 ; Home
                                     33 ;--------------------------------------------------------
                                     34 	.area HOME
                                     35 	.area HOME
                                     36 ;--------------------------------------------------------
                                     37 ; code
                                     38 ;--------------------------------------------------------
                                     39 	.area CODE
                                     40 ;	../_atoi.c: 29: int atoi(const char * s)
                                     41 ;	-----------------------------------------
                                     42 ;	 function atoi
                                     43 ;	-----------------------------------------
      000000                         44 _atoi:
      000000 52 07            [ 2]   45 	sub	sp, #7
                                     46 ;	../_atoi.c: 31: register int rv=0; 
      000002 5F               [ 1]   47 	clrw	x
      000003 1F 01            [ 2]   48 	ldw	(0x01, sp), x
                                     49 ;	../_atoi.c: 35: while (*s) {
      000005 1E 0A            [ 2]   50 	ldw	x, (0x0a, sp)
      000007                         51 00107$:
      000007 F6               [ 1]   52 	ld	a, (x)
                                     53 ;	../_atoi.c: 38: if (*s == '-' || *s == '+') 
      000008 A1 2D            [ 1]   54 	cp	a, #0x2d
      00000A 26 08            [ 1]   55 	jrne	00169$
      00000C 88               [ 1]   56 	push	a
      00000D A6 01            [ 1]   57 	ld	a, #0x01
      00000F 6B 07            [ 1]   58 	ld	(0x07, sp), a
      000011 84               [ 1]   59 	pop	a
      000012 20 02            [ 2]   60 	jra	00170$
      000014                         61 00169$:
      000014 0F 06            [ 1]   62 	clr	(0x06, sp)
      000016                         63 00170$:
      000016 A1 2B            [ 1]   64 	cp	a, #0x2b
      000018 26 08            [ 1]   65 	jrne	00172$
      00001A 88               [ 1]   66 	push	a
      00001B A6 01            [ 1]   67 	ld	a, #0x01
      00001D 6B 08            [ 1]   68 	ld	(0x08, sp), a
      00001F 84               [ 1]   69 	pop	a
      000020 20 02            [ 2]   70 	jra	00173$
      000022                         71 00172$:
      000022 0F 07            [ 1]   72 	clr	(0x07, sp)
      000024                         73 00173$:
                                     74 ;	../_atoi.c: 35: while (*s) {
      000024 4D               [ 1]   75 	tnz	a
      000025 27 13            [ 1]   76 	jreq	00133$
                                     77 ;	../_atoi.c: 36: if (*s <= '9' && *s >= '0')
      000027 A1 39            [ 1]   78 	cp	a, #0x39
      000029 2C 04            [ 1]   79 	jrsgt	00102$
      00002B A1 30            [ 1]   80 	cp	a, #0x30
      00002D 2E 0B            [ 1]   81 	jrsge	00133$
                                     82 ;	../_atoi.c: 37: break;
      00002F                         83 00102$:
                                     84 ;	../_atoi.c: 38: if (*s == '-' || *s == '+') 
      00002F 0D 06            [ 1]   85 	tnz	(0x06, sp)
      000031 26 07            [ 1]   86 	jrne	00133$
      000033 0D 07            [ 1]   87 	tnz	(0x07, sp)
      000035 26 03            [ 1]   88 	jrne	00133$
                                     89 ;	../_atoi.c: 40: s++;
      000037 5C               [ 2]   90 	incw	x
      000038 20 CD            [ 2]   91 	jra	00107$
      00003A                         92 00133$:
      00003A 1F 0A            [ 2]   93 	ldw	(0x0a, sp), x
                                     94 ;	../_atoi.c: 43: sign = (*s == '-');
      00003C 7B 06            [ 1]   95 	ld	a, (0x06, sp)
      00003E 6B 03            [ 1]   96 	ld	(0x03, sp), a
                                     97 ;	../_atoi.c: 44: if (*s == '-' || *s == '+') s++;
      000040 0D 06            [ 1]   98 	tnz	(0x06, sp)
      000042 26 04            [ 1]   99 	jrne	00110$
      000044 0D 07            [ 1]  100 	tnz	(0x07, sp)
      000046 27 03            [ 1]  101 	jreq	00131$
      000048                        102 00110$:
      000048 5C               [ 2]  103 	incw	x
      000049 1F 0A            [ 2]  104 	ldw	(0x0a, sp), x
                                    105 ;	../_atoi.c: 46: while (*s && *s >= '0' && *s <= '9') {
      00004B                        106 00131$:
      00004B 16 0A            [ 2]  107 	ldw	y, (0x0a, sp)
      00004D                        108 00115$:
      00004D 90 F6            [ 1]  109 	ld	a, (y)
      00004F 4D               [ 1]  110 	tnz	a
      000050 27 2F            [ 1]  111 	jreq	00117$
      000052 A1 30            [ 1]  112 	cp	a, #0x30
      000054 2F 2B            [ 1]  113 	jrslt	00117$
      000056 A1 39            [ 1]  114 	cp	a, #0x39
      000058 2C 27            [ 1]  115 	jrsgt	00117$
                                    116 ;	../_atoi.c: 47: rv = (rv * 10) + (*s - '0');
      00005A 88               [ 1]  117 	push	a
      00005B 90 89            [ 2]  118 	pushw	y
      00005D 1E 04            [ 2]  119 	ldw	x, (0x04, sp)
      00005F 89               [ 2]  120 	pushw	x
      000060 4B 0A            [ 1]  121 	push	#0x0a
      000062 4B 00            [ 1]  122 	push	#0x00
      000064 CDr00r00         [ 4]  123 	call	__mulint
      000067 5B 04            [ 2]  124 	addw	sp, #4
      000069 1F 07            [ 2]  125 	ldw	(0x07, sp), x
      00006B 90 85            [ 2]  126 	popw	y
      00006D 84               [ 1]  127 	pop	a
      00006E 97               [ 1]  128 	ld	xl, a
      00006F 9F               [ 1]  129 	ld	a, xl
      000070 49               [ 1]  130 	rlc	a
      000071 4F               [ 1]  131 	clr	a
      000072 A2 00            [ 1]  132 	sbc	a, #0x00
      000074 95               [ 1]  133 	ld	xh, a
      000075 1D 00 30         [ 2]  134 	subw	x, #0x0030
      000078 72 FB 04         [ 2]  135 	addw	x, (0x04, sp)
      00007B 1F 01            [ 2]  136 	ldw	(0x01, sp), x
                                    137 ;	../_atoi.c: 48: s++;
      00007D 90 5C            [ 2]  138 	incw	y
      00007F 20 CC            [ 2]  139 	jra	00115$
      000081                        140 00117$:
                                    141 ;	../_atoi.c: 51: return (sign ? -rv : rv);
      000081 0D 03            [ 1]  142 	tnz	(0x03, sp)
      000083 27 05            [ 1]  143 	jreq	00120$
      000085 1E 01            [ 2]  144 	ldw	x, (0x01, sp)
      000087 50               [ 2]  145 	negw	x
      000088 20 02            [ 2]  146 	jra	00121$
      00008A                        147 00120$:
      00008A 1E 01            [ 2]  148 	ldw	x, (0x01, sp)
      00008C                        149 00121$:
      00008C 5B 07            [ 2]  150 	addw	sp, #7
      00008E 81               [ 4]  151 	ret
                                    152 	.area CODE
                                    153 	.area INITIALIZER
                                    154 	.area CABS (ABS)
