                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:39 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module expf
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ldexpf
                                     12 	.globl _expf
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 ;--------------------------------------------------------
                                     26 ; global & static initialisations
                                     27 ;--------------------------------------------------------
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area GSINIT
                                     32 ;--------------------------------------------------------
                                     33 ; Home
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
                                     36 	.area HOME
                                     37 ;--------------------------------------------------------
                                     38 ; code
                                     39 ;--------------------------------------------------------
                                     40 	.area CODE
                                     41 ;	../expf.c: 331: float expf(const float x)
                                     42 ;	-----------------------------------------
                                     43 ;	 function expf
                                     44 ;	-----------------------------------------
      000000                         45 _expf:
      000000 52 30            [ 2]   46 	sub	sp, #48
                                     47 ;	../expf.c: 337: if(x>=0.0)
      000002 5F               [ 1]   48 	clrw	x
      000003 89               [ 2]   49 	pushw	x
      000004 5F               [ 1]   50 	clrw	x
      000005 89               [ 2]   51 	pushw	x
      000006 1E 39            [ 2]   52 	ldw	x, (0x39, sp)
      000008 89               [ 2]   53 	pushw	x
      000009 1E 39            [ 2]   54 	ldw	x, (0x39, sp)
      00000B 89               [ 2]   55 	pushw	x
      00000C CDr00r00         [ 4]   56 	call	___fslt
      00000F 5B 08            [ 2]   57 	addw	sp, #8
      000011 4D               [ 1]   58 	tnz	a
      000012 26 0C            [ 1]   59 	jrne	00102$
                                     60 ;	../expf.c: 338: { y=x;  sign=0; }
      000014 16 35            [ 2]   61 	ldw	y, (0x35, sp)
      000016 17 04            [ 2]   62 	ldw	(0x04, sp), y
      000018 16 33            [ 2]   63 	ldw	y, (0x33, sp)
      00001A 17 02            [ 2]   64 	ldw	(0x02, sp), y
      00001C 0F 01            [ 1]   65 	clr	(0x01, sp)
      00001E 20 16            [ 2]   66 	jra	00103$
      000020                         67 00102$:
                                     68 ;	../expf.c: 340: { y=-x; sign=1; }
      000020 7B 34            [ 1]   69 	ld	a, (0x34, sp)
      000022 6B 20            [ 1]   70 	ld	(0x20, sp), a
      000024 16 35            [ 2]   71 	ldw	y, (0x35, sp)
      000026 7B 33            [ 1]   72 	ld	a, (0x33, sp)
      000028 A8 80            [ 1]   73 	xor	a, #0x80
      00002A 17 04            [ 2]   74 	ldw	(0x04, sp), y
      00002C 6B 02            [ 1]   75 	ld	(0x02, sp), a
      00002E 7B 20            [ 1]   76 	ld	a, (0x20, sp)
      000030 6B 03            [ 1]   77 	ld	(0x03, sp), a
      000032 A6 01            [ 1]   78 	ld	a, #0x01
      000034 6B 01            [ 1]   79 	ld	(0x01, sp), a
      000036                         80 00103$:
                                     81 ;	../expf.c: 342: if(y<EXPEPS) return 1.0;
      000036 4B 95            [ 1]   82 	push	#0x95
      000038 4B BF            [ 1]   83 	push	#0xbf
      00003A 4B D6            [ 1]   84 	push	#0xd6
      00003C 4B 33            [ 1]   85 	push	#0x33
      00003E 1E 08            [ 2]   86 	ldw	x, (0x08, sp)
      000040 89               [ 2]   87 	pushw	x
      000041 1E 08            [ 2]   88 	ldw	x, (0x08, sp)
      000043 89               [ 2]   89 	pushw	x
      000044 CDr00r00         [ 4]   90 	call	___fslt
      000047 5B 08            [ 2]   91 	addw	sp, #8
      000049 6B 1A            [ 1]   92 	ld	(0x1a, sp), a
      00004B 0D 1A            [ 1]   93 	tnz	(0x1a, sp)
      00004D 27 08            [ 1]   94 	jreq	00105$
      00004F 5F               [ 1]   95 	clrw	x
      000050 90 AE 3F 80      [ 2]   96 	ldw	y, #0x3f80
      000054 CCr02r08         [ 2]   97 	jp	00118$
      000057                         98 00105$:
                                     99 ;	../expf.c: 344: if(y>BIGX)
      000057 4B 18            [ 1]  100 	push	#0x18
      000059 4B 72            [ 1]  101 	push	#0x72
      00005B 4B B1            [ 1]  102 	push	#0xb1
      00005D 4B 42            [ 1]  103 	push	#0x42
      00005F 1E 08            [ 2]  104 	ldw	x, (0x08, sp)
      000061 89               [ 2]  105 	pushw	x
      000062 1E 08            [ 2]  106 	ldw	x, (0x08, sp)
      000064 89               [ 2]  107 	pushw	x
      000065 CDr00r00         [ 4]  108 	call	___fsgt
      000068 5B 08            [ 2]  109 	addw	sp, #8
      00006A 4D               [ 1]  110 	tnz	a
      00006B 27 1C            [ 1]  111 	jreq	00110$
                                    112 ;	../expf.c: 346: if(sign)
      00006D 0D 01            [ 1]  113 	tnz	(0x01, sp)
      00006F 27 12            [ 1]  114 	jreq	00107$
                                    115 ;	../expf.c: 348: errno=ERANGE;
      000071 35 22u00u01      [ 1]  116 	mov	_errno+1, #0x22
      000075 72 5Fu00u00      [ 1]  117 	clr	_errno+0
                                    118 ;	../expf.c: 350: ;
      000079 AE FF FF         [ 2]  119 	ldw	x, #0xffff
      00007C 90 AE 7F 7F      [ 2]  120 	ldw	y, #0x7f7f
      000080 CCr02r08         [ 2]  121 	jp	00118$
      000083                        122 00107$:
                                    123 ;	../expf.c: 354: return 0.0;
      000083 5F               [ 1]  124 	clrw	x
      000084 90 5F            [ 1]  125 	clrw	y
      000086 CCr02r08         [ 2]  126 	jp	00118$
      000089                        127 00110$:
                                    128 ;	../expf.c: 358: z=y*K1;
      000089 1E 04            [ 2]  129 	ldw	x, (0x04, sp)
      00008B 89               [ 2]  130 	pushw	x
      00008C 1E 04            [ 2]  131 	ldw	x, (0x04, sp)
      00008E 89               [ 2]  132 	pushw	x
      00008F 4B 3B            [ 1]  133 	push	#0x3b
      000091 4B AA            [ 1]  134 	push	#0xaa
      000093 4B B8            [ 1]  135 	push	#0xb8
      000095 4B 3F            [ 1]  136 	push	#0x3f
      000097 CDr00r00         [ 4]  137 	call	___fsmul
      00009A 5B 08            [ 2]  138 	addw	sp, #8
      00009C 1F 08            [ 2]  139 	ldw	(0x08, sp), x
      00009E 17 06            [ 2]  140 	ldw	(0x06, sp), y
      0000A0 16 08            [ 2]  141 	ldw	y, (0x08, sp)
      0000A2 17 18            [ 2]  142 	ldw	(0x18, sp), y
      0000A4 16 06            [ 2]  143 	ldw	y, (0x06, sp)
      0000A6 17 16            [ 2]  144 	ldw	(0x16, sp), y
                                    145 ;	../expf.c: 359: n=z;
      0000A8 1E 18            [ 2]  146 	ldw	x, (0x18, sp)
      0000AA 89               [ 2]  147 	pushw	x
      0000AB 1E 18            [ 2]  148 	ldw	x, (0x18, sp)
      0000AD 89               [ 2]  149 	pushw	x
      0000AE CDr00r00         [ 4]  150 	call	___fs2sint
      0000B1 5B 04            [ 2]  151 	addw	sp, #4
      0000B3 1F 2F            [ 2]  152 	ldw	(0x2f, sp), x
                                    153 ;	../expf.c: 361: if(n<0) --n;
      0000B5 1E 2F            [ 2]  154 	ldw	x, (0x2f, sp)
      0000B7 A3 00 00         [ 2]  155 	cpw	x, #0x0000
      0000BA 2E 05            [ 1]  156 	jrsge	00112$
      0000BC 1E 2F            [ 2]  157 	ldw	x, (0x2f, sp)
      0000BE 5A               [ 2]  158 	decw	x
      0000BF 1F 2F            [ 2]  159 	ldw	(0x2f, sp), x
      0000C1                        160 00112$:
                                    161 ;	../expf.c: 362: if(z-n>=0.5) ++n;
      0000C1 1E 2F            [ 2]  162 	ldw	x, (0x2f, sp)
      0000C3 89               [ 2]  163 	pushw	x
      0000C4 CDr00r00         [ 4]  164 	call	___sint2fs
      0000C7 5B 02            [ 2]  165 	addw	sp, #2
      0000C9 89               [ 2]  166 	pushw	x
      0000CA 90 89            [ 2]  167 	pushw	y
      0000CC 1E 1C            [ 2]  168 	ldw	x, (0x1c, sp)
      0000CE 89               [ 2]  169 	pushw	x
      0000CF 1E 1C            [ 2]  170 	ldw	x, (0x1c, sp)
      0000D1 89               [ 2]  171 	pushw	x
      0000D2 CDr00r00         [ 4]  172 	call	___fssub
      0000D5 5B 08            [ 2]  173 	addw	sp, #8
      0000D7 4B 00            [ 1]  174 	push	#0x00
      0000D9 4B 00            [ 1]  175 	push	#0x00
      0000DB 4B 00            [ 1]  176 	push	#0x00
      0000DD 4B 3F            [ 1]  177 	push	#0x3f
      0000DF 89               [ 2]  178 	pushw	x
      0000E0 90 89            [ 2]  179 	pushw	y
      0000E2 CDr00r00         [ 4]  180 	call	___fslt
      0000E5 5B 08            [ 2]  181 	addw	sp, #8
      0000E7 4D               [ 1]  182 	tnz	a
      0000E8 26 05            [ 1]  183 	jrne	00114$
      0000EA 1E 2F            [ 2]  184 	ldw	x, (0x2f, sp)
      0000EC 5C               [ 2]  185 	incw	x
      0000ED 1F 2F            [ 2]  186 	ldw	(0x2f, sp), x
      0000EF                        187 00114$:
                                    188 ;	../expf.c: 363: xn=n;
      0000EF 1E 2F            [ 2]  189 	ldw	x, (0x2f, sp)
      0000F1 89               [ 2]  190 	pushw	x
      0000F2 CDr00r00         [ 4]  191 	call	___sint2fs
      0000F5 5B 02            [ 2]  192 	addw	sp, #2
      0000F7 1F 14            [ 2]  193 	ldw	(0x14, sp), x
      0000F9 17 12            [ 2]  194 	ldw	(0x12, sp), y
                                    195 ;	../expf.c: 364: g=((y-xn*C1))-xn*C2;
      0000FB 1E 14            [ 2]  196 	ldw	x, (0x14, sp)
      0000FD 89               [ 2]  197 	pushw	x
      0000FE 1E 14            [ 2]  198 	ldw	x, (0x14, sp)
      000100 89               [ 2]  199 	pushw	x
      000101 4B 00            [ 1]  200 	push	#0x00
      000103 4B 80            [ 1]  201 	push	#0x80
      000105 4B 31            [ 1]  202 	push	#0x31
      000107 4B 3F            [ 1]  203 	push	#0x3f
      000109 CDr00r00         [ 4]  204 	call	___fsmul
      00010C 5B 08            [ 2]  205 	addw	sp, #8
      00010E 89               [ 2]  206 	pushw	x
      00010F 90 89            [ 2]  207 	pushw	y
      000111 1E 08            [ 2]  208 	ldw	x, (0x08, sp)
      000113 89               [ 2]  209 	pushw	x
      000114 1E 08            [ 2]  210 	ldw	x, (0x08, sp)
      000116 89               [ 2]  211 	pushw	x
      000117 CDr00r00         [ 4]  212 	call	___fssub
      00011A 5B 08            [ 2]  213 	addw	sp, #8
      00011C 1F 25            [ 2]  214 	ldw	(0x25, sp), x
      00011E 17 23            [ 2]  215 	ldw	(0x23, sp), y
      000120 1E 14            [ 2]  216 	ldw	x, (0x14, sp)
      000122 89               [ 2]  217 	pushw	x
      000123 1E 14            [ 2]  218 	ldw	x, (0x14, sp)
      000125 89               [ 2]  219 	pushw	x
      000126 4B 83            [ 1]  220 	push	#0x83
      000128 4B 80            [ 1]  221 	push	#0x80
      00012A 4B 5E            [ 1]  222 	push	#0x5e
      00012C 4B B9            [ 1]  223 	push	#0xb9
      00012E CDr00r00         [ 4]  224 	call	___fsmul
      000131 5B 08            [ 2]  225 	addw	sp, #8
      000133 89               [ 2]  226 	pushw	x
      000134 90 89            [ 2]  227 	pushw	y
      000136 1E 29            [ 2]  228 	ldw	x, (0x29, sp)
      000138 89               [ 2]  229 	pushw	x
      000139 1E 29            [ 2]  230 	ldw	x, (0x29, sp)
      00013B 89               [ 2]  231 	pushw	x
      00013C CDr00r00         [ 4]  232 	call	___fssub
      00013F 5B 08            [ 2]  233 	addw	sp, #8
      000141 1F 10            [ 2]  234 	ldw	(0x10, sp), x
      000143 17 0E            [ 2]  235 	ldw	(0x0e, sp), y
                                    236 ;	../expf.c: 365: z=g*g;
      000145 1E 10            [ 2]  237 	ldw	x, (0x10, sp)
      000147 89               [ 2]  238 	pushw	x
      000148 1E 10            [ 2]  239 	ldw	x, (0x10, sp)
      00014A 89               [ 2]  240 	pushw	x
      00014B 1E 14            [ 2]  241 	ldw	x, (0x14, sp)
      00014D 89               [ 2]  242 	pushw	x
      00014E 1E 14            [ 2]  243 	ldw	x, (0x14, sp)
      000150 89               [ 2]  244 	pushw	x
      000151 CDr00r00         [ 4]  245 	call	___fsmul
      000154 5B 08            [ 2]  246 	addw	sp, #8
      000156 1F 08            [ 2]  247 	ldw	(0x08, sp), x
      000158 17 06            [ 2]  248 	ldw	(0x06, sp), y
                                    249 ;	../expf.c: 366: r=P(z)*g;
      00015A 1E 08            [ 2]  250 	ldw	x, (0x08, sp)
      00015C 89               [ 2]  251 	pushw	x
      00015D 1E 08            [ 2]  252 	ldw	x, (0x08, sp)
      00015F 89               [ 2]  253 	pushw	x
      000160 4B 08            [ 1]  254 	push	#0x08
      000162 4B 53            [ 1]  255 	push	#0x53
      000164 4B 88            [ 1]  256 	push	#0x88
      000166 4B 3B            [ 1]  257 	push	#0x3b
      000168 CDr00r00         [ 4]  258 	call	___fsmul
      00016B 5B 08            [ 2]  259 	addw	sp, #8
      00016D 4B 00            [ 1]  260 	push	#0x00
      00016F 4B 00            [ 1]  261 	push	#0x00
      000171 4B 80            [ 1]  262 	push	#0x80
      000173 4B 3E            [ 1]  263 	push	#0x3e
      000175 89               [ 2]  264 	pushw	x
      000176 90 89            [ 2]  265 	pushw	y
      000178 CDr00r00         [ 4]  266 	call	___fsadd
      00017B 5B 08            [ 2]  267 	addw	sp, #8
      00017D 1F 1D            [ 2]  268 	ldw	(0x1d, sp), x
      00017F 1E 10            [ 2]  269 	ldw	x, (0x10, sp)
      000181 89               [ 2]  270 	pushw	x
      000182 1E 10            [ 2]  271 	ldw	x, (0x10, sp)
      000184 89               [ 2]  272 	pushw	x
      000185 1E 21            [ 2]  273 	ldw	x, (0x21, sp)
      000187 89               [ 2]  274 	pushw	x
      000188 90 89            [ 2]  275 	pushw	y
      00018A CDr00r00         [ 4]  276 	call	___fsmul
      00018D 5B 08            [ 2]  277 	addw	sp, #8
      00018F 1F 2D            [ 2]  278 	ldw	(0x2d, sp), x
      000191 17 2B            [ 2]  279 	ldw	(0x2b, sp), y
                                    280 ;	../expf.c: 367: r=0.5+(r/(Q(z)-r));
      000193 1E 08            [ 2]  281 	ldw	x, (0x08, sp)
      000195 89               [ 2]  282 	pushw	x
      000196 1E 08            [ 2]  283 	ldw	x, (0x08, sp)
      000198 89               [ 2]  284 	pushw	x
      000199 4B 5B            [ 1]  285 	push	#0x5b
      00019B 4B BF            [ 1]  286 	push	#0xbf
      00019D 4B 4C            [ 1]  287 	push	#0x4c
      00019F 4B 3D            [ 1]  288 	push	#0x3d
      0001A1 CDr00r00         [ 4]  289 	call	___fsmul
      0001A4 5B 08            [ 2]  290 	addw	sp, #8
      0001A6 4B 00            [ 1]  291 	push	#0x00
      0001A8 4B 00            [ 1]  292 	push	#0x00
      0001AA 4B 00            [ 1]  293 	push	#0x00
      0001AC 4B 3F            [ 1]  294 	push	#0x3f
      0001AE 89               [ 2]  295 	pushw	x
      0001AF 90 89            [ 2]  296 	pushw	y
      0001B1 CDr00r00         [ 4]  297 	call	___fsadd
      0001B4 5B 08            [ 2]  298 	addw	sp, #8
      0001B6 1F 29            [ 2]  299 	ldw	(0x29, sp), x
      0001B8 1E 2D            [ 2]  300 	ldw	x, (0x2d, sp)
      0001BA 89               [ 2]  301 	pushw	x
      0001BB 1E 2D            [ 2]  302 	ldw	x, (0x2d, sp)
      0001BD 89               [ 2]  303 	pushw	x
      0001BE 1E 2D            [ 2]  304 	ldw	x, (0x2d, sp)
      0001C0 89               [ 2]  305 	pushw	x
      0001C1 90 89            [ 2]  306 	pushw	y
      0001C3 CDr00r00         [ 4]  307 	call	___fssub
      0001C6 5B 08            [ 2]  308 	addw	sp, #8
      0001C8 89               [ 2]  309 	pushw	x
      0001C9 90 89            [ 2]  310 	pushw	y
      0001CB 1E 31            [ 2]  311 	ldw	x, (0x31, sp)
      0001CD 89               [ 2]  312 	pushw	x
      0001CE 1E 31            [ 2]  313 	ldw	x, (0x31, sp)
      0001D0 89               [ 2]  314 	pushw	x
      0001D1 CDr00r00         [ 4]  315 	call	___fsdiv
      0001D4 5B 08            [ 2]  316 	addw	sp, #8
      0001D6 4B 00            [ 1]  317 	push	#0x00
      0001D8 4B 00            [ 1]  318 	push	#0x00
      0001DA 4B 00            [ 1]  319 	push	#0x00
      0001DC 4B 3F            [ 1]  320 	push	#0x3f
      0001DE 89               [ 2]  321 	pushw	x
      0001DF 90 89            [ 2]  322 	pushw	y
      0001E1 CDr00r00         [ 4]  323 	call	___fsadd
      0001E4 5B 08            [ 2]  324 	addw	sp, #8
      0001E6 1F 0C            [ 2]  325 	ldw	(0x0c, sp), x
                                    326 ;	../expf.c: 369: n++;
      0001E8 1E 2F            [ 2]  327 	ldw	x, (0x2f, sp)
      0001EA 5C               [ 2]  328 	incw	x
                                    329 ;	../expf.c: 370: z=ldexpf(r, n);
      0001EB 89               [ 2]  330 	pushw	x
      0001EC 1E 0E            [ 2]  331 	ldw	x, (0x0e, sp)
      0001EE 89               [ 2]  332 	pushw	x
      0001EF 90 89            [ 2]  333 	pushw	y
      0001F1 CDr00r00         [ 4]  334 	call	_ldexpf
      0001F4 5B 06            [ 2]  335 	addw	sp, #6
                                    336 ;	../expf.c: 371: if(sign)
      0001F6 0D 01            [ 1]  337 	tnz	(0x01, sp)
      0001F8 27 0E            [ 1]  338 	jreq	00116$
                                    339 ;	../expf.c: 372: return 1.0/z;
      0001FA 89               [ 2]  340 	pushw	x
      0001FB 90 89            [ 2]  341 	pushw	y
      0001FD 5F               [ 1]  342 	clrw	x
      0001FE 89               [ 2]  343 	pushw	x
      0001FF 4B 80            [ 1]  344 	push	#0x80
      000201 4B 3F            [ 1]  345 	push	#0x3f
      000203 CDr00r00         [ 4]  346 	call	___fsdiv
      000206 5B 08            [ 2]  347 	addw	sp, #8
                                    348 ;	../expf.c: 374: return z;
      000208                        349 00116$:
      000208                        350 00118$:
      000208 5B 30            [ 2]  351 	addw	sp, #48
      00020A 81               [ 4]  352 	ret
                                    353 	.area CODE
                                    354 	.area INITIALIZER
                                    355 	.area CABS (ABS)
