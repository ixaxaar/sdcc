                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:29:00 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _ltoa
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __ltoa
                                     12 	.globl __ultoa
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 ;--------------------------------------------------------
                                     26 ; global & static initialisations
                                     27 ;--------------------------------------------------------
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area GSINIT
                                     32 ;--------------------------------------------------------
                                     33 ; Home
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
                                     36 	.area HOME
                                     37 ;--------------------------------------------------------
                                     38 ; code
                                     39 ;--------------------------------------------------------
                                     40 	.area CODE
                                     41 ;	../_ltoa.c: 56: void _ultoa(unsigned long value, char* string, unsigned char radix)
                                     42 ;	-----------------------------------------
                                     43 ;	 function _ultoa
                                     44 ;	-----------------------------------------
      000000                         45 __ultoa:
      000000 52 27            [ 2]   46 	sub	sp, #39
                                     47 ;	../_ltoa.c: 61: do {
      000002 96               [ 1]   48 	ldw	x, sp
      000003 5C               [ 2]   49 	incw	x
      000004 5C               [ 2]   50 	incw	x
      000005 1F 22            [ 2]   51 	ldw	(0x22, sp), x
      000007 A6 20            [ 1]   52 	ld	a, #0x20
      000009 6B 01            [ 1]   53 	ld	(0x01, sp), a
      00000B                         54 00103$:
                                     55 ;	../_ltoa.c: 62: unsigned char c = '0' + (value % radix);
      00000B 7B 30            [ 1]   56 	ld	a, (0x30, sp)
      00000D 6B 27            [ 1]   57 	ld	(0x27, sp), a
      00000F 0F 26            [ 1]   58 	clr	(0x26, sp)
      000011 0F 25            [ 1]   59 	clr	(0x25, sp)
      000013 0F 24            [ 1]   60 	clr	(0x24, sp)
      000015 1E 26            [ 2]   61 	ldw	x, (0x26, sp)
      000017 89               [ 2]   62 	pushw	x
      000018 1E 26            [ 2]   63 	ldw	x, (0x26, sp)
      00001A 89               [ 2]   64 	pushw	x
      00001B 1E 30            [ 2]   65 	ldw	x, (0x30, sp)
      00001D 89               [ 2]   66 	pushw	x
      00001E 1E 30            [ 2]   67 	ldw	x, (0x30, sp)
      000020 89               [ 2]   68 	pushw	x
      000021 CDr00r00         [ 4]   69 	call	__modulong
      000024 5B 08            [ 2]   70 	addw	sp, #8
      000026 9F               [ 1]   71 	ld	a, xl
      000027 AB 30            [ 1]   72 	add	a, #0x30
                                     73 ;	../_ltoa.c: 63: if (c > (unsigned char)'9')
      000029 A1 39            [ 1]   74 	cp	a, #0x39
      00002B 23 02            [ 2]   75 	jrule	00102$
                                     76 ;	../_ltoa.c: 64: c += 'A' - '9' - 1;
      00002D AB 07            [ 1]   77 	add	a, #0x07
      00002F                         78 00102$:
                                     79 ;	../_ltoa.c: 65: buffer[--index] = c;
      00002F 0A 01            [ 1]   80 	dec	(0x01, sp)
      000031 5F               [ 1]   81 	clrw	x
      000032 41               [ 1]   82 	exg	a, xl
      000033 7B 01            [ 1]   83 	ld	a, (0x01, sp)
      000035 41               [ 1]   84 	exg	a, xl
      000036 72 FB 22         [ 2]   85 	addw	x, (0x22, sp)
      000039 F7               [ 1]   86 	ld	(x), a
                                     87 ;	../_ltoa.c: 66: value /= radix;
      00003A 1E 26            [ 2]   88 	ldw	x, (0x26, sp)
      00003C 89               [ 2]   89 	pushw	x
      00003D 1E 26            [ 2]   90 	ldw	x, (0x26, sp)
      00003F 89               [ 2]   91 	pushw	x
      000040 1E 30            [ 2]   92 	ldw	x, (0x30, sp)
      000042 89               [ 2]   93 	pushw	x
      000043 1E 30            [ 2]   94 	ldw	x, (0x30, sp)
      000045 89               [ 2]   95 	pushw	x
      000046 CDr00r00         [ 4]   96 	call	__divulong
      000049 5B 08            [ 2]   97 	addw	sp, #8
      00004B 1F 2C            [ 2]   98 	ldw	(0x2c, sp), x
      00004D 17 2A            [ 2]   99 	ldw	(0x2a, sp), y
                                    100 ;	../_ltoa.c: 67: } while (value);
      00004F 1E 2C            [ 2]  101 	ldw	x, (0x2c, sp)
      000051 26 B8            [ 1]  102 	jrne	00103$
      000053 1E 2A            [ 2]  103 	ldw	x, (0x2a, sp)
      000055 26 B4            [ 1]  104 	jrne	00103$
                                    105 ;	../_ltoa.c: 69: do {
      000057 1E 2E            [ 2]  106 	ldw	x, (0x2e, sp)
      000059                        107 00106$:
                                    108 ;	../_ltoa.c: 70: *string++ = buffer[index];
      000059 90 5F            [ 1]  109 	clrw	y
      00005B 7B 01            [ 1]  110 	ld	a, (0x01, sp)
      00005D 90 97            [ 1]  111 	ld	yl, a
      00005F 72 F9 22         [ 2]  112 	addw	y, (0x22, sp)
      000062 90 F6            [ 1]  113 	ld	a, (y)
      000064 F7               [ 1]  114 	ld	(x), a
      000065 5C               [ 2]  115 	incw	x
                                    116 ;	../_ltoa.c: 71: } while ( ++index != NUMBER_OF_DIGITS );
      000066 0C 01            [ 1]  117 	inc	(0x01, sp)
      000068 7B 01            [ 1]  118 	ld	a, (0x01, sp)
      00006A A1 20            [ 1]  119 	cp	a, #0x20
      00006C 26 EB            [ 1]  120 	jrne	00106$
                                    121 ;	../_ltoa.c: 73: *string = 0;  /* string terminator */
      00006E 7F               [ 1]  122 	clr	(x)
      00006F 5B 27            [ 2]  123 	addw	sp, #39
      000071 81               [ 4]  124 	ret
                                    125 ;	../_ltoa.c: 76: void _ltoa(long value, char* string, unsigned char radix)
                                    126 ;	-----------------------------------------
                                    127 ;	 function _ltoa
                                    128 ;	-----------------------------------------
      000072                        129 __ltoa:
                                    130 ;	../_ltoa.c: 78: if (value < 0 && radix == 10) {
      000072 1E 05            [ 2]  131 	ldw	x, (0x05, sp)
      000074 A3 00 00         [ 2]  132 	cpw	x, #0x0000
      000077 7B 04            [ 1]  133 	ld	a, (0x04, sp)
      000079 A2 00            [ 1]  134 	sbc	a, #0x00
      00007B 7B 03            [ 1]  135 	ld	a, (0x03, sp)
      00007D A2 00            [ 1]  136 	sbc	a, #0x00
      00007F 2E 1E            [ 1]  137 	jrsge	00102$
      000081 7B 09            [ 1]  138 	ld	a, (0x09, sp)
      000083 A1 0A            [ 1]  139 	cp	a, #0x0a
      000085 26 18            [ 1]  140 	jrne	00102$
                                    141 ;	../_ltoa.c: 79: *string++ = '-';
      000087 1E 07            [ 2]  142 	ldw	x, (0x07, sp)
      000089 A6 2D            [ 1]  143 	ld	a, #0x2d
      00008B F7               [ 1]  144 	ld	(x), a
      00008C 5C               [ 2]  145 	incw	x
      00008D 1F 07            [ 2]  146 	ldw	(0x07, sp), x
                                    147 ;	../_ltoa.c: 80: value = -value;
      00008F 16 05            [ 2]  148 	ldw	y, (0x05, sp)
      000091 90 50            [ 2]  149 	negw	y
      000093 4F               [ 1]  150 	clr	a
      000094 12 04            [ 1]  151 	sbc	a, (0x04, sp)
      000096 97               [ 1]  152 	ld	xl, a
      000097 4F               [ 1]  153 	clr	a
      000098 12 03            [ 1]  154 	sbc	a, (0x03, sp)
      00009A 95               [ 1]  155 	ld	xh, a
      00009B 17 05            [ 2]  156 	ldw	(0x05, sp), y
      00009D 1F 03            [ 2]  157 	ldw	(0x03, sp), x
      00009F                        158 00102$:
                                    159 ;	../_ltoa.c: 82: _ultoa(value, string, radix);
      00009F 7B 09            [ 1]  160 	ld	a, (0x09, sp)
      0000A1 88               [ 1]  161 	push	a
      0000A2 1E 08            [ 2]  162 	ldw	x, (0x08, sp)
      0000A4 89               [ 2]  163 	pushw	x
      0000A5 1E 08            [ 2]  164 	ldw	x, (0x08, sp)
      0000A7 89               [ 2]  165 	pushw	x
      0000A8 1E 08            [ 2]  166 	ldw	x, (0x08, sp)
      0000AA 89               [ 2]  167 	pushw	x
      0000AB CDr00r00         [ 4]  168 	call	__ultoa
      0000AE 5B 07            [ 2]  169 	addw	sp, #7
      0000B0 81               [ 4]  170 	ret
                                    171 	.area CODE
                                    172 	.area INITIALIZER
                                    173 	.area CABS (ABS)
