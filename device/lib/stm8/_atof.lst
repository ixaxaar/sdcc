                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:32 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atof
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _atoi
                                     12 	.globl _isspace
                                     13 	.globl _islower
                                     14 	.globl _isdigit
                                     15 	.globl _atof
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area DATA
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area INITIALIZED
                                     24 ;--------------------------------------------------------
                                     25 ; absolute external ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area DABS (ABS)
                                     28 ;--------------------------------------------------------
                                     29 ; global & static initialisations
                                     30 ;--------------------------------------------------------
                                     31 	.area HOME
                                     32 	.area GSINIT
                                     33 	.area GSFINAL
                                     34 	.area GSINIT
                                     35 ;--------------------------------------------------------
                                     36 ; Home
                                     37 ;--------------------------------------------------------
                                     38 	.area HOME
                                     39 	.area HOME
                                     40 ;--------------------------------------------------------
                                     41 ; code
                                     42 ;--------------------------------------------------------
                                     43 	.area CODE
                                     44 ;	../_atof.c: 33: float atof(const char * s)
                                     45 ;	-----------------------------------------
                                     46 ;	 function atof
                                     47 ;	-----------------------------------------
      000000                         48 _atof:
      000000 52 25            [ 2]   49 	sub	sp, #37
                                     50 ;	../_atof.c: 40: while (isspace(*s)) s++;
      000002 1E 28            [ 2]   51 	ldw	x, (0x28, sp)
      000004                         52 00101$:
      000004 F6               [ 1]   53 	ld	a, (x)
      000005 89               [ 2]   54 	pushw	x
      000006 88               [ 1]   55 	push	a
      000007 CDr00r00         [ 4]   56 	call	_isspace
      00000A 5B 01            [ 2]   57 	addw	sp, #1
      00000C 85               [ 2]   58 	popw	x
      00000D 90 93            [ 1]   59 	ldw	y, x
      00000F 90 5C            [ 2]   60 	incw	y
      000011 4D               [ 1]   61 	tnz	a
      000012 27 03            [ 1]   62 	jreq	00148$
      000014 93               [ 1]   63 	ldw	x, y
      000015 20 ED            [ 2]   64 	jra	00101$
      000017                         65 00148$:
      000017 1F 28            [ 2]   66 	ldw	(0x28, sp), x
                                     67 ;	../_atof.c: 43: if (*s == '-')
      000019 F6               [ 1]   68 	ld	a, (x)
      00001A A1 2D            [ 1]   69 	cp	a, #0x2d
      00001C 26 08            [ 1]   70 	jrne	00107$
                                     71 ;	../_atof.c: 45: sign=1;
      00001E A6 01            [ 1]   72 	ld	a, #0x01
      000020 6B 01            [ 1]   73 	ld	(0x01, sp), a
                                     74 ;	../_atof.c: 46: s++;
      000022 17 28            [ 2]   75 	ldw	(0x28, sp), y
      000024 20 08            [ 2]   76 	jra	00108$
      000026                         77 00107$:
                                     78 ;	../_atof.c: 50: sign=0;
      000026 0F 01            [ 1]   79 	clr	(0x01, sp)
                                     80 ;	../_atof.c: 51: if (*s == '+') s++;
      000028 A1 2B            [ 1]   81 	cp	a, #0x2b
      00002A 26 02            [ 1]   82 	jrne	00108$
      00002C 17 28            [ 2]   83 	ldw	(0x28, sp), y
      00002E                         84 00108$:
                                     85 ;	../_atof.c: 55: for (value=0.0; isdigit(*s); s++)
      00002E 5F               [ 1]   86 	clrw	x
      00002F 1F 09            [ 2]   87 	ldw	(0x09, sp), x
      000031 1F 07            [ 2]   88 	ldw	(0x07, sp), x
      000033 16 28            [ 2]   89 	ldw	y, (0x28, sp)
      000035 17 1E            [ 2]   90 	ldw	(0x1e, sp), y
      000037                         91 00124$:
      000037 1E 1E            [ 2]   92 	ldw	x, (0x1e, sp)
      000039 F6               [ 1]   93 	ld	a, (x)
      00003A 88               [ 1]   94 	push	a
      00003B CDr00r00         [ 4]   95 	call	_isdigit
      00003E 5B 01            [ 2]   96 	addw	sp, #1
      000040 6B 0F            [ 1]   97 	ld	(0x0f, sp), a
      000042 1E 1E            [ 2]   98 	ldw	x, (0x1e, sp)
      000044 F6               [ 1]   99 	ld	a, (x)
      000045 6B 18            [ 1]  100 	ld	(0x18, sp), a
      000047 1E 1E            [ 2]  101 	ldw	x, (0x1e, sp)
      000049 5C               [ 2]  102 	incw	x
      00004A 1F 1C            [ 2]  103 	ldw	(0x1c, sp), x
      00004C 0D 0F            [ 1]  104 	tnz	(0x0f, sp)
      00004E 27 3F            [ 1]  105 	jreq	00149$
                                    106 ;	../_atof.c: 57: value=10.0*value+(*s-'0');
      000050 1E 09            [ 2]  107 	ldw	x, (0x09, sp)
      000052 89               [ 2]  108 	pushw	x
      000053 1E 09            [ 2]  109 	ldw	x, (0x09, sp)
      000055 89               [ 2]  110 	pushw	x
      000056 5F               [ 1]  111 	clrw	x
      000057 89               [ 2]  112 	pushw	x
      000058 4B 20            [ 1]  113 	push	#0x20
      00005A 4B 41            [ 1]  114 	push	#0x41
      00005C CDr00r00         [ 4]  115 	call	___fsmul
      00005F 5B 08            [ 2]  116 	addw	sp, #8
      000061 1F 24            [ 2]  117 	ldw	(0x24, sp), x
      000063 17 22            [ 2]  118 	ldw	(0x22, sp), y
      000065 7B 18            [ 1]  119 	ld	a, (0x18, sp)
      000067 97               [ 1]  120 	ld	xl, a
      000068 9F               [ 1]  121 	ld	a, xl
      000069 49               [ 1]  122 	rlc	a
      00006A 4F               [ 1]  123 	clr	a
      00006B A2 00            [ 1]  124 	sbc	a, #0x00
      00006D 95               [ 1]  125 	ld	xh, a
      00006E 1D 00 30         [ 2]  126 	subw	x, #0x0030
      000071 89               [ 2]  127 	pushw	x
      000072 CDr00r00         [ 4]  128 	call	___sint2fs
      000075 5B 02            [ 2]  129 	addw	sp, #2
      000077 89               [ 2]  130 	pushw	x
      000078 90 89            [ 2]  131 	pushw	y
      00007A 1E 28            [ 2]  132 	ldw	x, (0x28, sp)
      00007C 89               [ 2]  133 	pushw	x
      00007D 1E 28            [ 2]  134 	ldw	x, (0x28, sp)
      00007F 89               [ 2]  135 	pushw	x
      000080 CDr00r00         [ 4]  136 	call	___fsadd
      000083 5B 08            [ 2]  137 	addw	sp, #8
      000085 1F 09            [ 2]  138 	ldw	(0x09, sp), x
      000087 17 07            [ 2]  139 	ldw	(0x07, sp), y
                                    140 ;	../_atof.c: 55: for (value=0.0; isdigit(*s); s++)
      000089 16 1C            [ 2]  141 	ldw	y, (0x1c, sp)
      00008B 17 1E            [ 2]  142 	ldw	(0x1e, sp), y
      00008D 20 A8            [ 2]  143 	jra	00124$
      00008F                        144 00149$:
      00008F 16 1E            [ 2]  145 	ldw	y, (0x1e, sp)
      000091 17 28            [ 2]  146 	ldw	(0x28, sp), y
                                    147 ;	../_atof.c: 61: if (*s == '.')
      000093 7B 18            [ 1]  148 	ld	a, (0x18, sp)
      000095 A1 2E            [ 1]  149 	cp	a, #0x2e
      000097 27 03            [ 1]  150 	jreq	00206$
      000099 CCr01r0F         [ 2]  151 	jp	00112$
      00009C                        152 00206$:
                                    153 ;	../_atof.c: 64: for (fraction=0.1; isdigit(*s); s++)
      00009C AE CC CD         [ 2]  154 	ldw	x, #0xcccd
      00009F 1F 05            [ 2]  155 	ldw	(0x05, sp), x
      0000A1 AE 3D CC         [ 2]  156 	ldw	x, #0x3dcc
      0000A4 1F 03            [ 2]  157 	ldw	(0x03, sp), x
      0000A6 16 1C            [ 2]  158 	ldw	y, (0x1c, sp)
      0000A8 17 20            [ 2]  159 	ldw	(0x20, sp), y
      0000AA                        160 00127$:
      0000AA 1E 20            [ 2]  161 	ldw	x, (0x20, sp)
      0000AC F6               [ 1]  162 	ld	a, (x)
      0000AD 88               [ 1]  163 	push	a
      0000AE CDr00r00         [ 4]  164 	call	_isdigit
      0000B1 5B 01            [ 2]  165 	addw	sp, #1
      0000B3 4D               [ 1]  166 	tnz	a
      0000B4 27 55            [ 1]  167 	jreq	00150$
                                    168 ;	../_atof.c: 66: value+=(*s-'0')*fraction;
      0000B6 1E 20            [ 2]  169 	ldw	x, (0x20, sp)
      0000B8 F6               [ 1]  170 	ld	a, (x)
      0000B9 97               [ 1]  171 	ld	xl, a
      0000BA 9F               [ 1]  172 	ld	a, xl
      0000BB 49               [ 1]  173 	rlc	a
      0000BC 4F               [ 1]  174 	clr	a
      0000BD A2 00            [ 1]  175 	sbc	a, #0x00
      0000BF 95               [ 1]  176 	ld	xh, a
      0000C0 1D 00 30         [ 2]  177 	subw	x, #0x0030
      0000C3 89               [ 2]  178 	pushw	x
      0000C4 CDr00r00         [ 4]  179 	call	___sint2fs
      0000C7 5B 02            [ 2]  180 	addw	sp, #2
      0000C9 1F 14            [ 2]  181 	ldw	(0x14, sp), x
      0000CB 1E 05            [ 2]  182 	ldw	x, (0x05, sp)
      0000CD 89               [ 2]  183 	pushw	x
      0000CE 1E 05            [ 2]  184 	ldw	x, (0x05, sp)
      0000D0 89               [ 2]  185 	pushw	x
      0000D1 1E 18            [ 2]  186 	ldw	x, (0x18, sp)
      0000D3 89               [ 2]  187 	pushw	x
      0000D4 90 89            [ 2]  188 	pushw	y
      0000D6 CDr00r00         [ 4]  189 	call	___fsmul
      0000D9 5B 08            [ 2]  190 	addw	sp, #8
      0000DB 89               [ 2]  191 	pushw	x
      0000DC 90 89            [ 2]  192 	pushw	y
      0000DE 1E 0D            [ 2]  193 	ldw	x, (0x0d, sp)
      0000E0 89               [ 2]  194 	pushw	x
      0000E1 1E 0D            [ 2]  195 	ldw	x, (0x0d, sp)
      0000E3 89               [ 2]  196 	pushw	x
      0000E4 CDr00r00         [ 4]  197 	call	___fsadd
      0000E7 5B 08            [ 2]  198 	addw	sp, #8
      0000E9 1F 09            [ 2]  199 	ldw	(0x09, sp), x
      0000EB 17 07            [ 2]  200 	ldw	(0x07, sp), y
                                    201 ;	../_atof.c: 67: fraction*=0.1;
      0000ED 1E 05            [ 2]  202 	ldw	x, (0x05, sp)
      0000EF 89               [ 2]  203 	pushw	x
      0000F0 1E 05            [ 2]  204 	ldw	x, (0x05, sp)
      0000F2 89               [ 2]  205 	pushw	x
      0000F3 4B CD            [ 1]  206 	push	#0xcd
      0000F5 4B CC            [ 1]  207 	push	#0xcc
      0000F7 4B CC            [ 1]  208 	push	#0xcc
      0000F9 4B 3D            [ 1]  209 	push	#0x3d
      0000FB CDr00r00         [ 4]  210 	call	___fsmul
      0000FE 5B 08            [ 2]  211 	addw	sp, #8
      000100 1F 05            [ 2]  212 	ldw	(0x05, sp), x
      000102 17 03            [ 2]  213 	ldw	(0x03, sp), y
                                    214 ;	../_atof.c: 64: for (fraction=0.1; isdigit(*s); s++)
      000104 1E 20            [ 2]  215 	ldw	x, (0x20, sp)
      000106 5C               [ 2]  216 	incw	x
      000107 1F 20            [ 2]  217 	ldw	(0x20, sp), x
      000109 20 9F            [ 2]  218 	jra	00127$
      00010B                        219 00150$:
      00010B 16 20            [ 2]  220 	ldw	y, (0x20, sp)
      00010D 17 28            [ 2]  221 	ldw	(0x28, sp), y
      00010F                        222 00112$:
                                    223 ;	../_atof.c: 72: if (toupper(*s)=='E')
      00010F 16 28            [ 2]  224 	ldw	y, (0x28, sp)
      000111 17 10            [ 2]  225 	ldw	(0x10, sp), y
      000113 1E 10            [ 2]  226 	ldw	x, (0x10, sp)
      000115 F6               [ 1]  227 	ld	a, (x)
      000116 88               [ 1]  228 	push	a
      000117 CDr00r00         [ 4]  229 	call	_islower
      00011A 5B 01            [ 2]  230 	addw	sp, #1
      00011C 6B 1B            [ 1]  231 	ld	(0x1b, sp), a
      00011E 1E 10            [ 2]  232 	ldw	x, (0x10, sp)
      000120 F6               [ 1]  233 	ld	a, (x)
      000121 0D 1B            [ 1]  234 	tnz	(0x1b, sp)
      000123 27 02            [ 1]  235 	jreq	00131$
      000125 A4 DF            [ 1]  236 	and	a, #0xdf
      000127                        237 00131$:
      000127 A1 45            [ 1]  238 	cp	a, #0x45
      000129 26 5B            [ 1]  239 	jrne	00120$
                                    240 ;	../_atof.c: 74: s++;
      00012B 1E 10            [ 2]  241 	ldw	x, (0x10, sp)
      00012D 5C               [ 2]  242 	incw	x
                                    243 ;	../_atof.c: 75: iexp=(signed char)atoi(s);
      00012E 89               [ 2]  244 	pushw	x
      00012F CDr00r00         [ 4]  245 	call	_atoi
      000132 5B 02            [ 2]  246 	addw	sp, #2
      000134 1F 19            [ 2]  247 	ldw	(0x19, sp), x
      000136 7B 1A            [ 1]  248 	ld	a, (0x1a, sp)
      000138 6B 02            [ 1]  249 	ld	(0x02, sp), a
                                    250 ;	../_atof.c: 77: while(iexp!=0)
      00013A                        251 00116$:
      00013A 0D 02            [ 1]  252 	tnz	(0x02, sp)
      00013C 27 48            [ 1]  253 	jreq	00120$
                                    254 ;	../_atof.c: 79: if(iexp<0)
      00013E 7B 02            [ 1]  255 	ld	a, (0x02, sp)
      000140 A1 00            [ 1]  256 	cp	a, #0x00
      000142 2E 22            [ 1]  257 	jrsge	00114$
                                    258 ;	../_atof.c: 81: value*=0.1;
      000144 1E 09            [ 2]  259 	ldw	x, (0x09, sp)
      000146 89               [ 2]  260 	pushw	x
      000147 1E 09            [ 2]  261 	ldw	x, (0x09, sp)
      000149 89               [ 2]  262 	pushw	x
      00014A 4B CD            [ 1]  263 	push	#0xcd
      00014C 4B CC            [ 1]  264 	push	#0xcc
      00014E 4B CC            [ 1]  265 	push	#0xcc
      000150 4B 3D            [ 1]  266 	push	#0x3d
      000152 CDr00r00         [ 4]  267 	call	___fsmul
      000155 5B 08            [ 2]  268 	addw	sp, #8
      000157 1F 09            [ 2]  269 	ldw	(0x09, sp), x
      000159 17 07            [ 2]  270 	ldw	(0x07, sp), y
                                    271 ;	../_atof.c: 82: iexp++;
      00015B 7B 02            [ 1]  272 	ld	a, (0x02, sp)
      00015D 4C               [ 1]  273 	inc	a
      00015E 6B 17            [ 1]  274 	ld	(0x17, sp), a
      000160 7B 17            [ 1]  275 	ld	a, (0x17, sp)
      000162 6B 02            [ 1]  276 	ld	(0x02, sp), a
      000164 20 D4            [ 2]  277 	jra	00116$
      000166                        278 00114$:
                                    279 ;	../_atof.c: 86: value*=10.0;
      000166 1E 09            [ 2]  280 	ldw	x, (0x09, sp)
      000168 89               [ 2]  281 	pushw	x
      000169 1E 09            [ 2]  282 	ldw	x, (0x09, sp)
      00016B 89               [ 2]  283 	pushw	x
      00016C 5F               [ 1]  284 	clrw	x
      00016D 89               [ 2]  285 	pushw	x
      00016E 4B 20            [ 1]  286 	push	#0x20
      000170 4B 41            [ 1]  287 	push	#0x41
      000172 CDr00r00         [ 4]  288 	call	___fsmul
      000175 5B 08            [ 2]  289 	addw	sp, #8
      000177 1F 09            [ 2]  290 	ldw	(0x09, sp), x
      000179 17 07            [ 2]  291 	ldw	(0x07, sp), y
                                    292 ;	../_atof.c: 87: iexp--;
      00017B 7B 02            [ 1]  293 	ld	a, (0x02, sp)
      00017D 4A               [ 1]  294 	dec	a
      00017E 6B 16            [ 1]  295 	ld	(0x16, sp), a
      000180 7B 16            [ 1]  296 	ld	a, (0x16, sp)
      000182 6B 02            [ 1]  297 	ld	(0x02, sp), a
      000184 20 B4            [ 2]  298 	jra	00116$
      000186                        299 00120$:
                                    300 ;	../_atof.c: 93: if(sign) value*=-1.0;
      000186 0D 01            [ 1]  301 	tnz	(0x01, sp)
      000188 27 14            [ 1]  302 	jreq	00122$
      00018A 16 08            [ 2]  303 	ldw	y, (0x08, sp)
      00018C 88               [ 1]  304 	push	a
      00018D 7B 0B            [ 1]  305 	ld	a, (0x0b, sp)
      00018F 6B 0F            [ 1]  306 	ld	(0x0f, sp), a
      000191 84               [ 1]  307 	pop	a
      000192 7B 07            [ 1]  308 	ld	a, (0x07, sp)
      000194 A8 80            [ 1]  309 	xor	a, #0x80
      000196 17 08            [ 2]  310 	ldw	(0x08, sp), y
      000198 6B 07            [ 1]  311 	ld	(0x07, sp), a
      00019A 7B 0E            [ 1]  312 	ld	a, (0x0e, sp)
      00019C 6B 0A            [ 1]  313 	ld	(0x0a, sp), a
      00019E                        314 00122$:
                                    315 ;	../_atof.c: 94: return (value);
      00019E 1E 09            [ 2]  316 	ldw	x, (0x09, sp)
      0001A0 16 07            [ 2]  317 	ldw	y, (0x07, sp)
      0001A2 5B 25            [ 2]  318 	addw	sp, #37
      0001A4 81               [ 4]  319 	ret
                                    320 	.area CODE
                                    321 	.area INITIALIZER
                                    322 	.area CABS (ABS)
