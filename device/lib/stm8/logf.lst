                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:41 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module logf
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _frexpf
                                     12 	.globl _logf
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area INITIALIZED
                                     21 ;--------------------------------------------------------
                                     22 ; absolute external ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area DABS (ABS)
                                     25 ;--------------------------------------------------------
                                     26 ; global & static initialisations
                                     27 ;--------------------------------------------------------
                                     28 	.area HOME
                                     29 	.area GSINIT
                                     30 	.area GSFINAL
                                     31 	.area GSINIT
                                     32 ;--------------------------------------------------------
                                     33 ; Home
                                     34 ;--------------------------------------------------------
                                     35 	.area HOME
                                     36 	.area HOME
                                     37 ;--------------------------------------------------------
                                     38 ; code
                                     39 ;--------------------------------------------------------
                                     40 	.area CODE
                                     41 ;	../logf.c: 216: float logf(const float x) _FLOAT_FUNC_REENTRANT
                                     42 ;	-----------------------------------------
                                     43 ;	 function logf
                                     44 ;	-----------------------------------------
      000000                         45 _logf:
      000000 52 32            [ 2]   46 	sub	sp, #50
                                     47 ;	../logf.c: 226: if (x<=0.0)
      000002 5F               [ 1]   48 	clrw	x
      000003 89               [ 2]   49 	pushw	x
      000004 5F               [ 1]   50 	clrw	x
      000005 89               [ 2]   51 	pushw	x
      000006 1E 3B            [ 2]   52 	ldw	x, (0x3b, sp)
      000008 89               [ 2]   53 	pushw	x
      000009 1E 3B            [ 2]   54 	ldw	x, (0x3b, sp)
      00000B 89               [ 2]   55 	pushw	x
      00000C CDr00r00         [ 4]   56 	call	___fsgt
      00000F 5B 08            [ 2]   57 	addw	sp, #8
      000011 6B 22            [ 1]   58 	ld	(0x22, sp), a
      000013 0D 22            [ 1]   59 	tnz	(0x22, sp)
      000015 26 0E            [ 1]   60 	jrne	00102$
                                     61 ;	../logf.c: 228: errno=EDOM;
      000017 35 21u00u01      [ 1]   62 	mov	_errno+1, #0x21
      00001B 72 5Fu00u00      [ 1]   63 	clr	_errno+0
                                     64 ;	../logf.c: 229: return 0.0;
      00001F 5F               [ 1]   65 	clrw	x
      000020 90 5F            [ 1]   66 	clrw	y
      000022 CCr01rAB         [ 2]   67 	jp	00106$
      000025                         68 00102$:
                                     69 ;	../logf.c: 231: f=frexpf(x, &n);
      000025 96               [ 1]   70 	ldw	x, sp
      000026 5C               [ 2]   71 	incw	x
      000027 89               [ 2]   72 	pushw	x
      000028 1E 39            [ 2]   73 	ldw	x, (0x39, sp)
      00002A 89               [ 2]   74 	pushw	x
      00002B 1E 39            [ 2]   75 	ldw	x, (0x39, sp)
      00002D 89               [ 2]   76 	pushw	x
      00002E CDr00r00         [ 4]   77 	call	_frexpf
      000031 5B 06            [ 2]   78 	addw	sp, #6
      000033 1F 15            [ 2]   79 	ldw	(0x15, sp), x
      000035 17 13            [ 2]   80 	ldw	(0x13, sp), y
                                     81 ;	../logf.c: 232: znum=f-0.5;
      000037 5F               [ 1]   82 	clrw	x
      000038 89               [ 2]   83 	pushw	x
      000039 4B 00            [ 1]   84 	push	#0x00
      00003B 4B 3F            [ 1]   85 	push	#0x3f
      00003D 1E 19            [ 2]   86 	ldw	x, (0x19, sp)
      00003F 89               [ 2]   87 	pushw	x
      000040 1E 19            [ 2]   88 	ldw	x, (0x19, sp)
      000042 89               [ 2]   89 	pushw	x
      000043 CDr00r00         [ 4]   90 	call	___fssub
      000046 5B 08            [ 2]   91 	addw	sp, #8
      000048 1F 0D            [ 2]   92 	ldw	(0x0d, sp), x
      00004A 17 0B            [ 2]   93 	ldw	(0x0b, sp), y
                                     94 ;	../logf.c: 233: if (f>C0)
      00004C 4B F3            [ 1]   95 	push	#0xf3
      00004E 4B 04            [ 1]   96 	push	#0x04
      000050 4B 35            [ 1]   97 	push	#0x35
      000052 4B 3F            [ 1]   98 	push	#0x3f
      000054 1E 19            [ 2]   99 	ldw	x, (0x19, sp)
      000056 89               [ 2]  100 	pushw	x
      000057 1E 19            [ 2]  101 	ldw	x, (0x19, sp)
      000059 89               [ 2]  102 	pushw	x
      00005A CDr00r00         [ 4]  103 	call	___fsgt
      00005D 5B 08            [ 2]  104 	addw	sp, #8
      00005F 6B 21            [ 1]  105 	ld	(0x21, sp), a
      000061 0D 21            [ 1]  106 	tnz	(0x21, sp)
      000063 27 3A            [ 1]  107 	jreq	00104$
                                    108 ;	../logf.c: 235: znum-=0.5;
      000065 5F               [ 1]  109 	clrw	x
      000066 89               [ 2]  110 	pushw	x
      000067 4B 00            [ 1]  111 	push	#0x00
      000069 4B 3F            [ 1]  112 	push	#0x3f
      00006B 1E 11            [ 2]  113 	ldw	x, (0x11, sp)
      00006D 89               [ 2]  114 	pushw	x
      00006E 1E 11            [ 2]  115 	ldw	x, (0x11, sp)
      000070 89               [ 2]  116 	pushw	x
      000071 CDr00r00         [ 4]  117 	call	___fssub
      000074 5B 08            [ 2]  118 	addw	sp, #8
      000076 1F 0D            [ 2]  119 	ldw	(0x0d, sp), x
      000078 17 0B            [ 2]  120 	ldw	(0x0b, sp), y
                                    121 ;	../logf.c: 236: zden=(f*0.5)+0.5;
      00007A 1E 15            [ 2]  122 	ldw	x, (0x15, sp)
      00007C 89               [ 2]  123 	pushw	x
      00007D 1E 15            [ 2]  124 	ldw	x, (0x15, sp)
      00007F 89               [ 2]  125 	pushw	x
      000080 5F               [ 1]  126 	clrw	x
      000081 89               [ 2]  127 	pushw	x
      000082 4B 00            [ 1]  128 	push	#0x00
      000084 4B 3F            [ 1]  129 	push	#0x3f
      000086 CDr00r00         [ 4]  130 	call	___fsmul
      000089 5B 08            [ 2]  131 	addw	sp, #8
      00008B 4B 00            [ 1]  132 	push	#0x00
      00008D 4B 00            [ 1]  133 	push	#0x00
      00008F 4B 00            [ 1]  134 	push	#0x00
      000091 4B 3F            [ 1]  135 	push	#0x3f
      000093 89               [ 2]  136 	pushw	x
      000094 90 89            [ 2]  137 	pushw	y
      000096 CDr00r00         [ 4]  138 	call	___fsadd
      000099 5B 08            [ 2]  139 	addw	sp, #8
      00009B 1F 1F            [ 2]  140 	ldw	(0x1f, sp), x
      00009D 20 39            [ 2]  141 	jra	00105$
      00009F                        142 00104$:
                                    143 ;	../logf.c: 240: n--;
      00009F 1E 01            [ 2]  144 	ldw	x, (0x01, sp)
      0000A1 5A               [ 2]  145 	decw	x
      0000A2 1F 1B            [ 2]  146 	ldw	(0x1b, sp), x
      0000A4 16 1B            [ 2]  147 	ldw	y, (0x1b, sp)
      0000A6 17 01            [ 2]  148 	ldw	(0x01, sp), y
                                    149 ;	../logf.c: 241: zden=znum*0.5+0.5;
      0000A8 1E 0D            [ 2]  150 	ldw	x, (0x0d, sp)
      0000AA 89               [ 2]  151 	pushw	x
      0000AB 1E 0D            [ 2]  152 	ldw	x, (0x0d, sp)
      0000AD 89               [ 2]  153 	pushw	x
      0000AE 5F               [ 1]  154 	clrw	x
      0000AF 89               [ 2]  155 	pushw	x
      0000B0 4B 00            [ 1]  156 	push	#0x00
      0000B2 4B 3F            [ 1]  157 	push	#0x3f
      0000B4 CDr00r00         [ 4]  158 	call	___fsmul
      0000B7 5B 08            [ 2]  159 	addw	sp, #8
      0000B9 1F 31            [ 2]  160 	ldw	(0x31, sp), x
      0000BB 17 2F            [ 2]  161 	ldw	(0x2f, sp), y
      0000BD 5F               [ 1]  162 	clrw	x
      0000BE 89               [ 2]  163 	pushw	x
      0000BF 4B 00            [ 1]  164 	push	#0x00
      0000C1 4B 3F            [ 1]  165 	push	#0x3f
      0000C3 1E 35            [ 2]  166 	ldw	x, (0x35, sp)
      0000C5 89               [ 2]  167 	pushw	x
      0000C6 1E 35            [ 2]  168 	ldw	x, (0x35, sp)
      0000C8 89               [ 2]  169 	pushw	x
      0000C9 CDr00r00         [ 4]  170 	call	___fsadd
      0000CC 5B 08            [ 2]  171 	addw	sp, #8
      0000CE 1F 09            [ 2]  172 	ldw	(0x09, sp), x
      0000D0 17 07            [ 2]  173 	ldw	(0x07, sp), y
      0000D2 16 09            [ 2]  174 	ldw	y, (0x09, sp)
      0000D4 17 1F            [ 2]  175 	ldw	(0x1f, sp), y
      0000D6 16 07            [ 2]  176 	ldw	y, (0x07, sp)
      0000D8                        177 00105$:
                                    178 ;	../logf.c: 243: z=znum/zden;
      0000D8 1E 1F            [ 2]  179 	ldw	x, (0x1f, sp)
      0000DA 89               [ 2]  180 	pushw	x
      0000DB 90 89            [ 2]  181 	pushw	y
      0000DD 1E 11            [ 2]  182 	ldw	x, (0x11, sp)
      0000DF 89               [ 2]  183 	pushw	x
      0000E0 1E 11            [ 2]  184 	ldw	x, (0x11, sp)
      0000E2 89               [ 2]  185 	pushw	x
      0000E3 CDr00r00         [ 4]  186 	call	___fsdiv
      0000E6 5B 08            [ 2]  187 	addw	sp, #8
      0000E8 1F 11            [ 2]  188 	ldw	(0x11, sp), x
      0000EA 17 0F            [ 2]  189 	ldw	(0x0f, sp), y
                                    190 ;	../logf.c: 244: w=z*z;
      0000EC 1E 11            [ 2]  191 	ldw	x, (0x11, sp)
      0000EE 89               [ 2]  192 	pushw	x
      0000EF 1E 11            [ 2]  193 	ldw	x, (0x11, sp)
      0000F1 89               [ 2]  194 	pushw	x
      0000F2 1E 15            [ 2]  195 	ldw	x, (0x15, sp)
      0000F4 89               [ 2]  196 	pushw	x
      0000F5 1E 15            [ 2]  197 	ldw	x, (0x15, sp)
      0000F7 89               [ 2]  198 	pushw	x
      0000F8 CDr00r00         [ 4]  199 	call	___fsmul
      0000FB 5B 08            [ 2]  200 	addw	sp, #8
                                    201 ;	../logf.c: 246: Rz=z+z*(w*A(w)/B(w));
      0000FD 89               [ 2]  202 	pushw	x
      0000FE 90 89            [ 2]  203 	pushw	y
      000100 89               [ 2]  204 	pushw	x
      000101 90 89            [ 2]  205 	pushw	y
      000103 4B 3D            [ 1]  206 	push	#0x3d
      000105 4B 7E            [ 1]  207 	push	#0x7e
      000107 4B 0D            [ 1]  208 	push	#0x0d
      000109 4B BF            [ 1]  209 	push	#0xbf
      00010B CDr00r00         [ 4]  210 	call	___fsmul
      00010E 5B 08            [ 2]  211 	addw	sp, #8
      000110 1F 31            [ 2]  212 	ldw	(0x31, sp), x
      000112 17 2F            [ 2]  213 	ldw	(0x2f, sp), y
      000114 90 85            [ 2]  214 	popw	y
      000116 85               [ 2]  215 	popw	x
      000117 4B 3A            [ 1]  216 	push	#0x3a
      000119 4B 3F            [ 1]  217 	push	#0x3f
      00011B 4B D4            [ 1]  218 	push	#0xd4
      00011D 4B C0            [ 1]  219 	push	#0xc0
      00011F 89               [ 2]  220 	pushw	x
      000120 90 89            [ 2]  221 	pushw	y
      000122 CDr00r00         [ 4]  222 	call	___fsadd
      000125 5B 08            [ 2]  223 	addw	sp, #8
      000127 89               [ 2]  224 	pushw	x
      000128 90 89            [ 2]  225 	pushw	y
      00012A 1E 31            [ 2]  226 	ldw	x, (0x31, sp)
      00012C 89               [ 2]  227 	pushw	x
      00012D 1E 31            [ 2]  228 	ldw	x, (0x31, sp)
      00012F 89               [ 2]  229 	pushw	x
      000130 CDr00r00         [ 4]  230 	call	___fsdiv
      000133 5B 08            [ 2]  231 	addw	sp, #8
      000135 89               [ 2]  232 	pushw	x
      000136 90 89            [ 2]  233 	pushw	y
      000138 1E 15            [ 2]  234 	ldw	x, (0x15, sp)
      00013A 89               [ 2]  235 	pushw	x
      00013B 1E 15            [ 2]  236 	ldw	x, (0x15, sp)
      00013D 89               [ 2]  237 	pushw	x
      00013E CDr00r00         [ 4]  238 	call	___fsmul
      000141 5B 08            [ 2]  239 	addw	sp, #8
      000143 89               [ 2]  240 	pushw	x
      000144 90 89            [ 2]  241 	pushw	y
      000146 1E 15            [ 2]  242 	ldw	x, (0x15, sp)
      000148 89               [ 2]  243 	pushw	x
      000149 1E 15            [ 2]  244 	ldw	x, (0x15, sp)
      00014B 89               [ 2]  245 	pushw	x
      00014C CDr00r00         [ 4]  246 	call	___fsadd
      00014F 5B 08            [ 2]  247 	addw	sp, #8
      000151 1F 19            [ 2]  248 	ldw	(0x19, sp), x
      000153 17 17            [ 2]  249 	ldw	(0x17, sp), y
                                    250 ;	../logf.c: 247: xn=n;
      000155 1E 01            [ 2]  251 	ldw	x, (0x01, sp)
      000157 89               [ 2]  252 	pushw	x
      000158 CDr00r00         [ 4]  253 	call	___sint2fs
      00015B 5B 02            [ 2]  254 	addw	sp, #2
      00015D 1F 05            [ 2]  255 	ldw	(0x05, sp), x
      00015F 17 03            [ 2]  256 	ldw	(0x03, sp), y
                                    257 ;	../logf.c: 248: return ((xn*C2+Rz)+xn*C1);
      000161 1E 05            [ 2]  258 	ldw	x, (0x05, sp)
      000163 89               [ 2]  259 	pushw	x
      000164 1E 05            [ 2]  260 	ldw	x, (0x05, sp)
      000166 89               [ 2]  261 	pushw	x
      000167 4B 83            [ 1]  262 	push	#0x83
      000169 4B 80            [ 1]  263 	push	#0x80
      00016B 4B 5E            [ 1]  264 	push	#0x5e
      00016D 4B B9            [ 1]  265 	push	#0xb9
      00016F CDr00r00         [ 4]  266 	call	___fsmul
      000172 5B 08            [ 2]  267 	addw	sp, #8
      000174 1F 29            [ 2]  268 	ldw	(0x29, sp), x
      000176 1E 19            [ 2]  269 	ldw	x, (0x19, sp)
      000178 89               [ 2]  270 	pushw	x
      000179 1E 19            [ 2]  271 	ldw	x, (0x19, sp)
      00017B 89               [ 2]  272 	pushw	x
      00017C 1E 2D            [ 2]  273 	ldw	x, (0x2d, sp)
      00017E 89               [ 2]  274 	pushw	x
      00017F 90 89            [ 2]  275 	pushw	y
      000181 CDr00r00         [ 4]  276 	call	___fsadd
      000184 5B 08            [ 2]  277 	addw	sp, #8
      000186 1F 25            [ 2]  278 	ldw	(0x25, sp), x
      000188 17 23            [ 2]  279 	ldw	(0x23, sp), y
      00018A 1E 05            [ 2]  280 	ldw	x, (0x05, sp)
      00018C 89               [ 2]  281 	pushw	x
      00018D 1E 05            [ 2]  282 	ldw	x, (0x05, sp)
      00018F 89               [ 2]  283 	pushw	x
      000190 4B 00            [ 1]  284 	push	#0x00
      000192 4B 80            [ 1]  285 	push	#0x80
      000194 4B 31            [ 1]  286 	push	#0x31
      000196 4B 3F            [ 1]  287 	push	#0x3f
      000198 CDr00r00         [ 4]  288 	call	___fsmul
      00019B 5B 08            [ 2]  289 	addw	sp, #8
      00019D 89               [ 2]  290 	pushw	x
      00019E 90 89            [ 2]  291 	pushw	y
      0001A0 1E 29            [ 2]  292 	ldw	x, (0x29, sp)
      0001A2 89               [ 2]  293 	pushw	x
      0001A3 1E 29            [ 2]  294 	ldw	x, (0x29, sp)
      0001A5 89               [ 2]  295 	pushw	x
      0001A6 CDr00r00         [ 4]  296 	call	___fsadd
      0001A9 5B 08            [ 2]  297 	addw	sp, #8
      0001AB                        298 00106$:
      0001AB 5B 32            [ 2]  299 	addw	sp, #50
      0001AD 81               [ 4]  300 	ret
                                    301 	.area CODE
                                    302 	.area INITIALIZER
                                    303 	.area CABS (ABS)
