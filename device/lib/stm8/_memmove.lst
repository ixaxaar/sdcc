                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:29:01 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _memmove
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memmove
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 ;--------------------------------------------------------
                                     25 ; global & static initialisations
                                     26 ;--------------------------------------------------------
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area GSINIT
                                     31 ;--------------------------------------------------------
                                     32 ; Home
                                     33 ;--------------------------------------------------------
                                     34 	.area HOME
                                     35 	.area HOME
                                     36 ;--------------------------------------------------------
                                     37 ; code
                                     38 ;--------------------------------------------------------
                                     39 	.area CODE
                                     40 ;	../_memmove.c: 40: void * memmove (
                                     41 ;	-----------------------------------------
                                     42 ;	 function memmove
                                     43 ;	-----------------------------------------
      000000                         44 _memmove:
      000000 52 1D            [ 2]   45 	sub	sp, #29
                                     46 ;	../_memmove.c: 46: void * ret = dst;
      000002 16 20            [ 2]   47 	ldw	y, (0x20, sp)
      000004 17 05            [ 2]   48 	ldw	(0x05, sp), y
                                     49 ;	../_memmove.c: 50: if ((uintptr_t)src < (uintptr_t)dst) {
      000006 1E 22            [ 2]   50 	ldw	x, (0x22, sp)
      000008 16 20            [ 2]   51 	ldw	y, (0x20, sp)
      00000A 17 16            [ 2]   52 	ldw	(0x16, sp), y
                                     53 ;	../_memmove.c: 54: d = ((char *)dst)+acount-1;
      00000C 16 20            [ 2]   54 	ldw	y, (0x20, sp)
      00000E 17 14            [ 2]   55 	ldw	(0x14, sp), y
                                     56 ;	../_memmove.c: 55: s = ((char *)src)+acount-1;
      000010 16 22            [ 2]   57 	ldw	y, (0x22, sp)
      000012 17 1C            [ 2]   58 	ldw	(0x1c, sp), y
                                     59 ;	../_memmove.c: 56: while (acount--) {
      000014 16 24            [ 2]   60 	ldw	y, (0x24, sp)
                                     61 ;	../_memmove.c: 50: if ((uintptr_t)src < (uintptr_t)dst) {
      000016 13 16            [ 2]   62 	cpw	x, (0x16, sp)
      000018 24 3E            [ 1]   63 	jrnc	00108$
                                     64 ;	../_memmove.c: 54: d = ((char *)dst)+acount-1;
      00001A 1E 14            [ 2]   65 	ldw	x, (0x14, sp)
      00001C 72 FB 24         [ 2]   66 	addw	x, (0x24, sp)
      00001F 5A               [ 2]   67 	decw	x
      000020 1F 03            [ 2]   68 	ldw	(0x03, sp), x
      000022 7B 03            [ 1]   69 	ld	a, (0x03, sp)
      000024 88               [ 1]   70 	push	a
      000025 7B 05            [ 1]   71 	ld	a, (0x05, sp)
      000027 6B 1C            [ 1]   72 	ld	(0x1c, sp), a
      000029 84               [ 1]   73 	pop	a
                                     74 ;	../_memmove.c: 55: s = ((char *)src)+acount-1;
      00002A 1E 1C            [ 2]   75 	ldw	x, (0x1c, sp)
      00002C 72 FB 24         [ 2]   76 	addw	x, (0x24, sp)
      00002F 5A               [ 2]   77 	decw	x
      000030 1F 01            [ 2]   78 	ldw	(0x01, sp), x
      000032 1E 01            [ 2]   79 	ldw	x, (0x01, sp)
      000034 1F 18            [ 2]   80 	ldw	(0x18, sp), x
                                     81 ;	../_memmove.c: 56: while (acount--) {
      000036 1E 18            [ 2]   82 	ldw	x, (0x18, sp)
      000038 1F 12            [ 2]   83 	ldw	(0x12, sp), x
      00003A 6B 10            [ 1]   84 	ld	(0x10, sp), a
      00003C 7B 1B            [ 1]   85 	ld	a, (0x1b, sp)
      00003E 6B 11            [ 1]   86 	ld	(0x11, sp), a
      000040                         87 00101$:
      000040 93               [ 1]   88 	ldw	x, y
      000041 90 5A            [ 2]   89 	decw	y
      000043 5D               [ 2]   90 	tnzw	x
      000044 27 4D            [ 1]   91 	jreq	00109$
                                     92 ;	../_memmove.c: 57: *d-- = *s--;
      000046 1E 12            [ 2]   93 	ldw	x, (0x12, sp)
      000048 F6               [ 1]   94 	ld	a, (x)
      000049 1E 12            [ 2]   95 	ldw	x, (0x12, sp)
      00004B 5A               [ 2]   96 	decw	x
      00004C 1F 12            [ 2]   97 	ldw	(0x12, sp), x
      00004E 1E 10            [ 2]   98 	ldw	x, (0x10, sp)
      000050 F7               [ 1]   99 	ld	(x), a
      000051 1E 10            [ 2]  100 	ldw	x, (0x10, sp)
      000053 5A               [ 2]  101 	decw	x
      000054 1F 10            [ 2]  102 	ldw	(0x10, sp), x
      000056 20 E8            [ 2]  103 	jra	00101$
      000058                        104 00108$:
                                    105 ;	../_memmove.c: 64: d = dst;
      000058 7B 14            [ 1]  106 	ld	a, (0x14, sp)
      00005A 88               [ 1]  107 	push	a
      00005B 7B 16            [ 1]  108 	ld	a, (0x16, sp)
      00005D 6B 05            [ 1]  109 	ld	(0x05, sp), a
      00005F 84               [ 1]  110 	pop	a
                                    111 ;	../_memmove.c: 65: s = src;
      000060 1E 1C            [ 2]  112 	ldw	x, (0x1c, sp)
      000062 1F 01            [ 2]  113 	ldw	(0x01, sp), x
                                    114 ;	../_memmove.c: 66: while (acount--) {
      000064 1E 01            [ 2]  115 	ldw	x, (0x01, sp)
      000066 1F 0E            [ 2]  116 	ldw	(0x0e, sp), x
      000068 6B 0C            [ 1]  117 	ld	(0x0c, sp), a
      00006A 7B 04            [ 1]  118 	ld	a, (0x04, sp)
      00006C 6B 0D            [ 1]  119 	ld	(0x0d, sp), a
      00006E 17 0A            [ 2]  120 	ldw	(0x0a, sp), y
      000070                        121 00104$:
      000070 16 0A            [ 2]  122 	ldw	y, (0x0a, sp)
      000072 17 08            [ 2]  123 	ldw	(0x08, sp), y
      000074 1E 0A            [ 2]  124 	ldw	x, (0x0a, sp)
      000076 5A               [ 2]  125 	decw	x
      000077 1F 0A            [ 2]  126 	ldw	(0x0a, sp), x
      000079 1E 08            [ 2]  127 	ldw	x, (0x08, sp)
      00007B 27 16            [ 1]  128 	jreq	00109$
                                    129 ;	../_memmove.c: 67: *d++ = *s++;
      00007D 1E 0E            [ 2]  130 	ldw	x, (0x0e, sp)
      00007F F6               [ 1]  131 	ld	a, (x)
      000080 6B 07            [ 1]  132 	ld	(0x07, sp), a
      000082 1E 0E            [ 2]  133 	ldw	x, (0x0e, sp)
      000084 5C               [ 2]  134 	incw	x
      000085 1F 0E            [ 2]  135 	ldw	(0x0e, sp), x
      000087 1E 0C            [ 2]  136 	ldw	x, (0x0c, sp)
      000089 7B 07            [ 1]  137 	ld	a, (0x07, sp)
      00008B F7               [ 1]  138 	ld	(x), a
      00008C 1E 0C            [ 2]  139 	ldw	x, (0x0c, sp)
      00008E 5C               [ 2]  140 	incw	x
      00008F 1F 0C            [ 2]  141 	ldw	(0x0c, sp), x
      000091 20 DD            [ 2]  142 	jra	00104$
      000093                        143 00109$:
                                    144 ;	../_memmove.c: 71: return(ret);
      000093 1E 05            [ 2]  145 	ldw	x, (0x05, sp)
      000095 5B 1D            [ 2]  146 	addw	sp, #29
      000097 81               [ 4]  147 	ret
                                    148 	.area CODE
                                    149 	.area INITIALIZER
                                    150 	.area CABS (ABS)
