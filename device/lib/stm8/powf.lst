                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:39 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module powf
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _logf
                                     12 	.globl _expf
                                     13 	.globl _powf
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; absolute external ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DABS (ABS)
                                     26 ;--------------------------------------------------------
                                     27 ; global & static initialisations
                                     28 ;--------------------------------------------------------
                                     29 	.area HOME
                                     30 	.area GSINIT
                                     31 	.area GSFINAL
                                     32 	.area GSINIT
                                     33 ;--------------------------------------------------------
                                     34 ; Home
                                     35 ;--------------------------------------------------------
                                     36 	.area HOME
                                     37 	.area HOME
                                     38 ;--------------------------------------------------------
                                     39 ; code
                                     40 ;--------------------------------------------------------
                                     41 	.area CODE
                                     42 ;	../powf.c: 35: float powf(const float x, const float y)
                                     43 ;	-----------------------------------------
                                     44 ;	 function powf
                                     45 ;	-----------------------------------------
      000000                         46 _powf:
      000000 52 04            [ 2]   47 	sub	sp, #4
                                     48 ;	../powf.c: 37: if(y == 0.0) return 1.0;
      000002 1E 0D            [ 2]   49 	ldw	x, (0x0d, sp)
      000004 26 0B            [ 1]   50 	jrne	00102$
      000006 1E 0B            [ 2]   51 	ldw	x, (0x0b, sp)
      000008 26 07            [ 1]   52 	jrne	00102$
      00000A 5F               [ 1]   53 	clrw	x
      00000B 90 AE 3F 80      [ 2]   54 	ldw	y, #0x3f80
      00000F 20 56            [ 2]   55 	jra	00107$
      000011                         56 00102$:
                                     57 ;	../powf.c: 38: if(y==1.0) return x;
      000011 5F               [ 1]   58 	clrw	x
      000012 89               [ 2]   59 	pushw	x
      000013 4B 80            [ 1]   60 	push	#0x80
      000015 4B 3F            [ 1]   61 	push	#0x3f
      000017 1E 11            [ 2]   62 	ldw	x, (0x11, sp)
      000019 89               [ 2]   63 	pushw	x
      00001A 1E 11            [ 2]   64 	ldw	x, (0x11, sp)
      00001C 89               [ 2]   65 	pushw	x
      00001D CDr00r00         [ 4]   66 	call	___fseq
      000020 5B 08            [ 2]   67 	addw	sp, #8
      000022 4D               [ 1]   68 	tnz	a
      000023 27 06            [ 1]   69 	jreq	00104$
      000025 1E 09            [ 2]   70 	ldw	x, (0x09, sp)
      000027 16 07            [ 2]   71 	ldw	y, (0x07, sp)
      000029 20 3C            [ 2]   72 	jra	00107$
      00002B                         73 00104$:
                                     74 ;	../powf.c: 39: if(x <= 0.0) return 0.0;
      00002B 5F               [ 1]   75 	clrw	x
      00002C 89               [ 2]   76 	pushw	x
      00002D 5F               [ 1]   77 	clrw	x
      00002E 89               [ 2]   78 	pushw	x
      00002F 1E 0D            [ 2]   79 	ldw	x, (0x0d, sp)
      000031 89               [ 2]   80 	pushw	x
      000032 1E 0D            [ 2]   81 	ldw	x, (0x0d, sp)
      000034 89               [ 2]   82 	pushw	x
      000035 CDr00r00         [ 4]   83 	call	___fsgt
      000038 5B 08            [ 2]   84 	addw	sp, #8
      00003A 4D               [ 1]   85 	tnz	a
      00003B 26 05            [ 1]   86 	jrne	00106$
      00003D 5F               [ 1]   87 	clrw	x
      00003E 90 5F            [ 1]   88 	clrw	y
      000040 20 25            [ 2]   89 	jra	00107$
      000042                         90 00106$:
                                     91 ;	../powf.c: 40: return expf(logf(x) * y);
      000042 1E 09            [ 2]   92 	ldw	x, (0x09, sp)
      000044 89               [ 2]   93 	pushw	x
      000045 1E 09            [ 2]   94 	ldw	x, (0x09, sp)
      000047 89               [ 2]   95 	pushw	x
      000048 CDr00r00         [ 4]   96 	call	_logf
      00004B 5B 04            [ 2]   97 	addw	sp, #4
      00004D 1F 03            [ 2]   98 	ldw	(0x03, sp), x
      00004F 1E 0D            [ 2]   99 	ldw	x, (0x0d, sp)
      000051 89               [ 2]  100 	pushw	x
      000052 1E 0D            [ 2]  101 	ldw	x, (0x0d, sp)
      000054 89               [ 2]  102 	pushw	x
      000055 1E 07            [ 2]  103 	ldw	x, (0x07, sp)
      000057 89               [ 2]  104 	pushw	x
      000058 90 89            [ 2]  105 	pushw	y
      00005A CDr00r00         [ 4]  106 	call	___fsmul
      00005D 5B 08            [ 2]  107 	addw	sp, #8
      00005F 89               [ 2]  108 	pushw	x
      000060 90 89            [ 2]  109 	pushw	y
      000062 CDr00r00         [ 4]  110 	call	_expf
      000065 5B 04            [ 2]  111 	addw	sp, #4
      000067                        112 00107$:
      000067 5B 04            [ 2]  113 	addw	sp, #4
      000069 81               [ 4]  114 	ret
                                    115 	.area CODE
                                    116 	.area INITIALIZER
                                    117 	.area CABS (ABS)
