                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:52 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _memcmp
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _memcmp
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; absolute external ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DABS (ABS)
                                     24 ;--------------------------------------------------------
                                     25 ; global & static initialisations
                                     26 ;--------------------------------------------------------
                                     27 	.area HOME
                                     28 	.area GSINIT
                                     29 	.area GSFINAL
                                     30 	.area GSINIT
                                     31 ;--------------------------------------------------------
                                     32 ; Home
                                     33 ;--------------------------------------------------------
                                     34 	.area HOME
                                     35 	.area HOME
                                     36 ;--------------------------------------------------------
                                     37 ; code
                                     38 ;--------------------------------------------------------
                                     39 	.area CODE
                                     40 ;	../_memcmp.c: 31: int memcmp (
                                     41 ;	-----------------------------------------
                                     42 ;	 function memcmp
                                     43 ;	-----------------------------------------
      000000                         44 _memcmp:
      000000 52 05            [ 2]   45 	sub	sp, #5
                                     46 ;	../_memcmp.c: 37: if (!count)
      000002 1E 0C            [ 2]   47 	ldw	x, (0x0c, sp)
      000004 26 03            [ 1]   48 	jrne	00112$
                                     49 ;	../_memcmp.c: 38: return(0);
      000006 5F               [ 1]   50 	clrw	x
      000007 20 35            [ 2]   51 	jra	00107$
                                     52 ;	../_memcmp.c: 40: while ( --count && *((char *)buf1) == *((char *)buf2) ) {
      000009                         53 00112$:
      000009 16 0C            [ 2]   54 	ldw	y, (0x0c, sp)
      00000B 17 01            [ 2]   55 	ldw	(0x01, sp), y
      00000D                         56 00104$:
      00000D 1E 01            [ 2]   57 	ldw	x, (0x01, sp)
      00000F 5A               [ 2]   58 	decw	x
      000010 1F 01            [ 2]   59 	ldw	(0x01, sp), x
      000012 1E 01            [ 2]   60 	ldw	x, (0x01, sp)
      000014 27 18            [ 1]   61 	jreq	00106$
      000016 1E 08            [ 2]   62 	ldw	x, (0x08, sp)
      000018 F6               [ 1]   63 	ld	a, (x)
      000019 16 0A            [ 2]   64 	ldw	y, (0x0a, sp)
      00001B 88               [ 1]   65 	push	a
      00001C 90 F6            [ 1]   66 	ld	a, (y)
      00001E 6B 06            [ 1]   67 	ld	(0x06, sp), a
      000020 84               [ 1]   68 	pop	a
      000021 11 05            [ 1]   69 	cp	a, (0x05, sp)
      000023 26 09            [ 1]   70 	jrne	00106$
                                     71 ;	../_memcmp.c: 41: buf1 = (char *)buf1 + 1;
      000025 5C               [ 2]   72 	incw	x
      000026 1F 08            [ 2]   73 	ldw	(0x08, sp), x
                                     74 ;	../_memcmp.c: 42: buf2 = (char *)buf2 + 1;
      000028 93               [ 1]   75 	ldw	x, y
      000029 5C               [ 2]   76 	incw	x
      00002A 1F 0A            [ 2]   77 	ldw	(0x0a, sp), x
      00002C 20 DF            [ 2]   78 	jra	00104$
      00002E                         79 00106$:
                                     80 ;	../_memcmp.c: 45: return( *((unsigned char *)buf1) - *((unsigned char *)buf2) );
      00002E 1E 08            [ 2]   81 	ldw	x, (0x08, sp)
      000030 F6               [ 1]   82 	ld	a, (x)
      000031 5F               [ 1]   83 	clrw	x
      000032 97               [ 1]   84 	ld	xl, a
      000033 16 0A            [ 2]   85 	ldw	y, (0x0a, sp)
      000035 90 F6            [ 1]   86 	ld	a, (y)
      000037 6B 04            [ 1]   87 	ld	(0x04, sp), a
      000039 0F 03            [ 1]   88 	clr	(0x03, sp)
      00003B 72 F0 03         [ 2]   89 	subw	x, (0x03, sp)
      00003E                         90 00107$:
      00003E 5B 05            [ 2]   91 	addw	sp, #5
      000040 81               [ 4]   92 	ret
                                     93 	.area CODE
                                     94 	.area INITIALIZER
                                     95 	.area CABS (ABS)
