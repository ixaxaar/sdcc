                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:50 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _malloc
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_first_memheader
                                     13 	.globl _malloc
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
      000000                         33 __sdcc_first_memheader::
      000000                         34 	.ds 2
      000002                         35 _malloc_size_1_8:
      000002                         36 	.ds 2
                                     37 ;--------------------------------------------------------
                                     38 ; overlayable items in internal ram 
                                     39 ;--------------------------------------------------------
                                     40 	.area	OSEG    (OVR,DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; indirectly addressable internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area ISEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; absolute internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area IABS    (ABS,DATA)
                                     49 	.area IABS    (ABS,DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; bit data
                                     52 ;--------------------------------------------------------
                                     53 	.area BSEG    (BIT)
                                     54 ;--------------------------------------------------------
                                     55 ; paged external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area PSEG    (PAG,XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XSEG    (XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; absolute external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XABS    (ABS,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; external initialized ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XISEG   (XDATA)
                                     70 	.area HOME    (CODE)
                                     71 	.area GSINIT0 (CODE)
                                     72 	.area GSINIT1 (CODE)
                                     73 	.area GSINIT2 (CODE)
                                     74 	.area GSINIT3 (CODE)
                                     75 	.area GSINIT4 (CODE)
                                     76 	.area GSINIT5 (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area CSEG    (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; global & static initialisations
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 ;	_malloc.c:161: MEMHEADER __xdata * _sdcc_first_memheader = NULL;
      000000 E4               [12]   88 	clr	a
      000001 F5*00            [12]   89 	mov	__sdcc_first_memheader,a
      000003 F5*01            [12]   90 	mov	(__sdcc_first_memheader + 1),a
                                     91 ;--------------------------------------------------------
                                     92 ; Home
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area HOME    (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; code
                                     98 ;--------------------------------------------------------
                                     99 	.area CSEG    (CODE)
                                    100 ;------------------------------------------------------------
                                    101 ;Allocation info for local variables in function 'init_dynamic_memory'
                                    102 ;------------------------------------------------------------
                                    103 ;heap                      Allocated to registers r6 r7 
                                    104 ;size                      Allocated to registers r4 r5 
                                    105 ;------------------------------------------------------------
                                    106 ;	_malloc.c:166: static void init_dynamic_memory(void)
                                    107 ;	-----------------------------------------
                                    108 ;	 function init_dynamic_memory
                                    109 ;	-----------------------------------------
      000000                        110 _init_dynamic_memory:
                           000007   111 	ar7 = 0x07
                           000006   112 	ar6 = 0x06
                           000005   113 	ar5 = 0x05
                           000004   114 	ar4 = 0x04
                           000003   115 	ar3 = 0x03
                           000002   116 	ar2 = 0x02
                           000001   117 	ar1 = 0x01
                           000000   118 	ar0 = 0x00
                                    119 ;	_malloc.c:168: char __xdata * heap = (char __xdata *)_sdcc_heap;
      000000 7Er00            [12]  120 	mov	r6,#__sdcc_heap
      000002 7Fs00            [12]  121 	mov	r7,#(__sdcc_heap >> 8)
                                    122 ;	_malloc.c:169: unsigned int size = _sdcc_heap_size;
      000004 90r00r00         [24]  123 	mov	dptr,#__sdcc_heap_size
      000007 E4               [12]  124 	clr	a
      000008 93               [24]  125 	movc	a,@a+dptr
      000009 FC               [12]  126 	mov	r4,a
      00000A 74 01            [12]  127 	mov	a,#0x01
      00000C 93               [24]  128 	movc	a,@a+dptr
      00000D FD               [12]  129 	mov	r5,a
                                    130 ;	_malloc.c:171: if ( !heap ) //Reserved memory starts at 0x0000 but that's NULL...
      00000E EE               [12]  131 	mov	a,r6
      00000F 4F               [12]  132 	orl	a,r7
      000010 70 0A            [24]  133 	jnz	00102$
                                    134 ;	_malloc.c:173: heap++;
      000012 0E               [12]  135 	inc	r6
      000013 BE 00 01         [24]  136 	cjne	r6,#0x00,00109$
      000016 0F               [12]  137 	inc	r7
      000017                        138 00109$:
                                    139 ;	_malloc.c:174: size--;
      000017 1C               [12]  140 	dec	r4
      000018 BC FF 01         [24]  141 	cjne	r4,#0xFF,00110$
      00001B 1D               [12]  142 	dec	r5
      00001C                        143 00110$:
      00001C                        144 00102$:
                                    145 ;	_malloc.c:176: _sdcc_first_memheader = (MEMHEADER __xdata * ) heap;
      00001C 8E*00            [24]  146 	mov	__sdcc_first_memheader,r6
      00001E 8F*01            [24]  147 	mov	(__sdcc_first_memheader + 1),r7
                                    148 ;	_malloc.c:178: _sdcc_first_memheader->next = (MEMHEADER __xdata * )(heap + size - sizeof(MEMHEADER __xdata *));
      000020 85*00 82         [24]  149 	mov	dpl,__sdcc_first_memheader
      000023 85*01 83         [24]  150 	mov	dph,(__sdcc_first_memheader + 1)
      000026 EC               [12]  151 	mov	a,r4
      000027 2E               [12]  152 	add	a,r6
      000028 FE               [12]  153 	mov	r6,a
      000029 ED               [12]  154 	mov	a,r5
      00002A 3F               [12]  155 	addc	a,r7
      00002B FF               [12]  156 	mov	r7,a
      00002C EE               [12]  157 	mov	a,r6
      00002D 24 FE            [12]  158 	add	a,#0xFE
      00002F FE               [12]  159 	mov	r6,a
      000030 EF               [12]  160 	mov	a,r7
      000031 34 FF            [12]  161 	addc	a,#0xFF
      000033 FF               [12]  162 	mov	r7,a
      000034 EE               [12]  163 	mov	a,r6
      000035 F0               [24]  164 	movx	@dptr,a
      000036 EF               [12]  165 	mov	a,r7
      000037 A3               [24]  166 	inc	dptr
      000038 F0               [24]  167 	movx	@dptr,a
                                    168 ;	_malloc.c:179: _sdcc_first_memheader->next->next = (MEMHEADER __xdata * ) NULL; //And mark it as last
      000039 85*00 82         [24]  169 	mov	dpl,__sdcc_first_memheader
      00003C 85*01 83         [24]  170 	mov	dph,(__sdcc_first_memheader + 1)
      00003F E0               [24]  171 	movx	a,@dptr
      000040 FE               [12]  172 	mov	r6,a
      000041 A3               [24]  173 	inc	dptr
      000042 E0               [24]  174 	movx	a,@dptr
      000043 FF               [12]  175 	mov	r7,a
      000044 8E 82            [24]  176 	mov	dpl,r6
      000046 8F 83            [24]  177 	mov	dph,r7
      000048 E4               [12]  178 	clr	a
      000049 F0               [24]  179 	movx	@dptr,a
      00004A A3               [24]  180 	inc	dptr
      00004B F0               [24]  181 	movx	@dptr,a
                                    182 ;	_malloc.c:180: _sdcc_first_memheader->len        = 0;    //Empty and ready.
      00004C 85*00 82         [24]  183 	mov	dpl,__sdcc_first_memheader
      00004F 85*01 83         [24]  184 	mov	dph,(__sdcc_first_memheader + 1)
      000052 A3               [24]  185 	inc	dptr
      000053 A3               [24]  186 	inc	dptr
      000054 F0               [24]  187 	movx	@dptr,a
      000055 A3               [24]  188 	inc	dptr
      000056 F0               [24]  189 	movx	@dptr,a
      000057 22               [24]  190 	ret
                                    191 ;------------------------------------------------------------
                                    192 ;Allocation info for local variables in function 'malloc'
                                    193 ;------------------------------------------------------------
                                    194 ;size                      Allocated with name '_malloc_size_1_8'
                                    195 ;current_header            Allocated to registers r4 r5 
                                    196 ;new_header                Allocated to registers r0 r1 
                                    197 ;ret                       Allocated to registers r6 r7 
                                    198 ;------------------------------------------------------------
                                    199 ;	_malloc.c:183: void __xdata * malloc (unsigned int size)
                                    200 ;	-----------------------------------------
                                    201 ;	 function malloc
                                    202 ;	-----------------------------------------
      000058                        203 _malloc:
      000058 85 82*02         [24]  204 	mov	_malloc_size_1_8,dpl
      00005B 85 83*03         [24]  205 	mov	(_malloc_size_1_8 + 1),dph
                                    206 ;	_malloc.c:189: if (size>(0xFFFF-HEADER_SIZE))
      00005E C3               [12]  207 	clr	c
      00005F 74 FB            [12]  208 	mov	a,#0xFB
      000061 95*02            [12]  209 	subb	a,_malloc_size_1_8
      000063 74 FF            [12]  210 	mov	a,#0xFF
      000065 95*03            [12]  211 	subb	a,(_malloc_size_1_8 + 1)
      000067 50 04            [24]  212 	jnc	00102$
                                    213 ;	_malloc.c:190: return (void __xdata *) NULL; //To prevent overflow in next line
      000069 90 00 00         [24]  214 	mov	dptr,#0x0000
      00006C 22               [24]  215 	ret
      00006D                        216 00102$:
                                    217 ;	_malloc.c:191: size += HEADER_SIZE; //We need a memory for header too
      00006D 74 04            [12]  218 	mov	a,#0x04
      00006F 25*02            [12]  219 	add	a,_malloc_size_1_8
      000071 F5*02            [12]  220 	mov	_malloc_size_1_8,a
      000073 E4               [12]  221 	clr	a
      000074 35*03            [12]  222 	addc	a,(_malloc_size_1_8 + 1)
      000076 F5*03            [12]  223 	mov	(_malloc_size_1_8 + 1),a
                                    224 ;	_malloc.c:193: if (!_sdcc_first_memheader)
      000078 E5*00            [12]  225 	mov	a,__sdcc_first_memheader
      00007A 45*01            [12]  226 	orl	a,(__sdcc_first_memheader + 1)
      00007C 70 03            [24]  227 	jnz	00104$
                                    228 ;	_malloc.c:194: init_dynamic_memory();
      00007E 12r00r00         [24]  229 	lcall	_init_dynamic_memory
      000081                        230 00104$:
                                    231 ;	_malloc.c:196: current_header = _sdcc_first_memheader;
      000081 AC*00            [24]  232 	mov	r4,__sdcc_first_memheader
      000083 AD*01            [24]  233 	mov	r5,(__sdcc_first_memheader + 1)
                                    234 ;	_malloc.c:199: while (1)
      000085                        235 00110$:
                                    236 ;	_malloc.c:209: if ((((unsigned int)current_header->next) -
      000085 8C 82            [24]  237 	mov	dpl,r4
      000087 8D 83            [24]  238 	mov	dph,r5
      000089 E0               [24]  239 	movx	a,@dptr
      00008A FA               [12]  240 	mov	r2,a
      00008B A3               [24]  241 	inc	dptr
      00008C E0               [24]  242 	movx	a,@dptr
      00008D FB               [12]  243 	mov	r3,a
      00008E 8A 00            [24]  244 	mov	ar0,r2
      000090 8B 01            [24]  245 	mov	ar1,r3
                                    246 ;	_malloc.c:210: ((unsigned int)current_header) -
      000092 8C 06            [24]  247 	mov	ar6,r4
      000094 8D 07            [24]  248 	mov	ar7,r5
      000096 E8               [12]  249 	mov	a,r0
      000097 C3               [12]  250 	clr	c
      000098 9E               [12]  251 	subb	a,r6
      000099 F8               [12]  252 	mov	r0,a
      00009A E9               [12]  253 	mov	a,r1
      00009B 9F               [12]  254 	subb	a,r7
      00009C F9               [12]  255 	mov	r1,a
                                    256 ;	_malloc.c:211: current_header->len) >= size)
      00009D 8C 82            [24]  257 	mov	dpl,r4
      00009F 8D 83            [24]  258 	mov	dph,r5
      0000A1 A3               [24]  259 	inc	dptr
      0000A2 A3               [24]  260 	inc	dptr
      0000A3 E0               [24]  261 	movx	a,@dptr
      0000A4 FE               [12]  262 	mov	r6,a
      0000A5 A3               [24]  263 	inc	dptr
      0000A6 E0               [24]  264 	movx	a,@dptr
      0000A7 FF               [12]  265 	mov	r7,a
      0000A8 E8               [12]  266 	mov	a,r0
      0000A9 C3               [12]  267 	clr	c
      0000AA 9E               [12]  268 	subb	a,r6
      0000AB F8               [12]  269 	mov	r0,a
      0000AC E9               [12]  270 	mov	a,r1
      0000AD 9F               [12]  271 	subb	a,r7
      0000AE F9               [12]  272 	mov	r1,a
      0000AF C3               [12]  273 	clr	c
      0000B0 E8               [12]  274 	mov	a,r0
      0000B1 95*02            [12]  275 	subb	a,_malloc_size_1_8
      0000B3 E9               [12]  276 	mov	a,r1
      0000B4 95*03            [12]  277 	subb	a,(_malloc_size_1_8 + 1)
      0000B6 40 09            [24]  278 	jc	00106$
                                    279 ;	_malloc.c:213: ret = current_header->mem;
      0000B8 74 04            [12]  280 	mov	a,#0x04
      0000BA 2C               [12]  281 	add	a,r4
      0000BB FE               [12]  282 	mov	r6,a
      0000BC E4               [12]  283 	clr	a
      0000BD 3D               [12]  284 	addc	a,r5
      0000BE FF               [12]  285 	mov	r7,a
                                    286 ;	_malloc.c:214: break;
      0000BF 80 12            [24]  287 	sjmp	00111$
      0000C1                        288 00106$:
                                    289 ;	_malloc.c:216: current_header = current_header->next;    //else try next
      0000C1 8A 04            [24]  290 	mov	ar4,r2
      0000C3 8B 05            [24]  291 	mov	ar5,r3
                                    292 ;	_malloc.c:217: if (!current_header->next)
      0000C5 8C 82            [24]  293 	mov	dpl,r4
      0000C7 8D 83            [24]  294 	mov	dph,r5
      0000C9 E0               [24]  295 	movx	a,@dptr
      0000CA FA               [12]  296 	mov	r2,a
      0000CB A3               [24]  297 	inc	dptr
      0000CC E0               [24]  298 	movx	a,@dptr
      0000CD FB               [12]  299 	mov	r3,a
      0000CE 4A               [12]  300 	orl	a,r2
                                    301 ;	_malloc.c:219: ret = (void __xdata *) NULL;
      0000CF 70 B4            [24]  302 	jnz	00110$
      0000D1 FE               [12]  303 	mov	r6,a
      0000D2 FF               [12]  304 	mov	r7,a
                                    305 ;	_malloc.c:220: break;
      0000D3                        306 00111$:
                                    307 ;	_malloc.c:223: if (ret)
      0000D3 EE               [12]  308 	mov	a,r6
      0000D4 4F               [12]  309 	orl	a,r7
      0000D5 60 5D            [24]  310 	jz	00116$
                                    311 ;	_malloc.c:225: if (!current_header->len)
      0000D7 74 02            [12]  312 	mov	a,#0x02
      0000D9 2C               [12]  313 	add	a,r4
      0000DA FA               [12]  314 	mov	r2,a
      0000DB E4               [12]  315 	clr	a
      0000DC 3D               [12]  316 	addc	a,r5
      0000DD FB               [12]  317 	mov	r3,a
      0000DE 8A 82            [24]  318 	mov	dpl,r2
      0000E0 8B 83            [24]  319 	mov	dph,r3
      0000E2 E0               [24]  320 	movx	a,@dptr
      0000E3 F8               [12]  321 	mov	r0,a
      0000E4 A3               [24]  322 	inc	dptr
      0000E5 E0               [24]  323 	movx	a,@dptr
      0000E6 F9               [12]  324 	mov	r1,a
      0000E7 48               [12]  325 	orl	a,r0
      0000E8 70 0D            [24]  326 	jnz	00113$
                                    327 ;	_malloc.c:227: current_header->len = size; //for first allocation
      0000EA 8A 82            [24]  328 	mov	dpl,r2
      0000EC 8B 83            [24]  329 	mov	dph,r3
      0000EE E5*02            [12]  330 	mov	a,_malloc_size_1_8
      0000F0 F0               [24]  331 	movx	@dptr,a
      0000F1 E5*03            [12]  332 	mov	a,(_malloc_size_1_8 + 1)
      0000F3 A3               [24]  333 	inc	dptr
      0000F4 F0               [24]  334 	movx	@dptr,a
      0000F5 80 3D            [24]  335 	sjmp	00116$
      0000F7                        336 00113$:
                                    337 ;	_malloc.c:231: new_header = (MEMHEADER __xdata * )((char __xdata *)current_header + current_header->len);
      0000F7 8C 02            [24]  338 	mov	ar2,r4
      0000F9 8D 03            [24]  339 	mov	ar3,r5
      0000FB E8               [12]  340 	mov	a,r0
      0000FC 2A               [12]  341 	add	a,r2
      0000FD F8               [12]  342 	mov	r0,a
      0000FE E9               [12]  343 	mov	a,r1
      0000FF 3B               [12]  344 	addc	a,r3
      000100 F9               [12]  345 	mov	r1,a
                                    346 ;	_malloc.c:232: new_header->next = current_header->next; //and plug it into the chain
      000101 8C 82            [24]  347 	mov	dpl,r4
      000103 8D 83            [24]  348 	mov	dph,r5
      000105 E0               [24]  349 	movx	a,@dptr
      000106 FA               [12]  350 	mov	r2,a
      000107 A3               [24]  351 	inc	dptr
      000108 E0               [24]  352 	movx	a,@dptr
      000109 FB               [12]  353 	mov	r3,a
      00010A 88 82            [24]  354 	mov	dpl,r0
      00010C 89 83            [24]  355 	mov	dph,r1
      00010E EA               [12]  356 	mov	a,r2
      00010F F0               [24]  357 	movx	@dptr,a
      000110 EB               [12]  358 	mov	a,r3
      000111 A3               [24]  359 	inc	dptr
      000112 F0               [24]  360 	movx	@dptr,a
                                    361 ;	_malloc.c:233: current_header->next  = new_header;
      000113 8C 82            [24]  362 	mov	dpl,r4
      000115 8D 83            [24]  363 	mov	dph,r5
      000117 E8               [12]  364 	mov	a,r0
      000118 F0               [24]  365 	movx	@dptr,a
      000119 E9               [12]  366 	mov	a,r1
      00011A A3               [24]  367 	inc	dptr
      00011B F0               [24]  368 	movx	@dptr,a
                                    369 ;	_malloc.c:234: new_header->len  = size; //mark as used
      00011C 88 82            [24]  370 	mov	dpl,r0
      00011E 89 83            [24]  371 	mov	dph,r1
      000120 A3               [24]  372 	inc	dptr
      000121 A3               [24]  373 	inc	dptr
      000122 E5*02            [12]  374 	mov	a,_malloc_size_1_8
      000124 F0               [24]  375 	movx	@dptr,a
      000125 E5*03            [12]  376 	mov	a,(_malloc_size_1_8 + 1)
      000127 A3               [24]  377 	inc	dptr
      000128 F0               [24]  378 	movx	@dptr,a
                                    379 ;	_malloc.c:235: ret = new_header->mem;
      000129 74 04            [12]  380 	mov	a,#0x04
      00012B 28               [12]  381 	add	a,r0
      00012C F8               [12]  382 	mov	r0,a
      00012D E4               [12]  383 	clr	a
      00012E 39               [12]  384 	addc	a,r1
      00012F F9               [12]  385 	mov	r1,a
      000130 88 06            [24]  386 	mov	ar6,r0
      000132 89 07            [24]  387 	mov	ar7,r1
      000134                        388 00116$:
                                    389 ;	_malloc.c:239: return ret;
      000134 8E 82            [24]  390 	mov	dpl,r6
      000136 8F 83            [24]  391 	mov	dph,r7
      000138 22               [24]  392 	ret
                                    393 	.area CSEG    (CODE)
                                    394 	.area CONST   (CODE)
                                    395 	.area XINIT   (CODE)
                                    396 	.area CABS    (ABS,CODE)
