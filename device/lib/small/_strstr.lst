                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:50 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _strstr
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strstr_PARM_2
                                     13 	.globl _strstr
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 	.area	OSEG    (OVR,DATA)
      000000                         37 _strstr_PARM_2:
      000000                         38 	.ds 3
      000003                         39 _strstr_cp_1_22:
      000003                         40 	.ds 3
      000006                         41 _strstr_s1_1_22:
      000006                         42 	.ds 3
      000009                         43 _strstr_s2_1_22:
      000009                         44 	.ds 3
      00000C                         45 _strstr_sloc0_1_0:
      00000C                         46 	.ds 3
                                     47 ;--------------------------------------------------------
                                     48 ; indirectly addressable internal ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area ISEG    (DATA)
                                     51 ;--------------------------------------------------------
                                     52 ; absolute internal ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area IABS    (ABS,DATA)
                                     55 	.area IABS    (ABS,DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; bit data
                                     58 ;--------------------------------------------------------
                                     59 	.area BSEG    (BIT)
                                     60 ;--------------------------------------------------------
                                     61 ; paged external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area PSEG    (PAG,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; external ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XSEG    (XDATA)
                                     68 ;--------------------------------------------------------
                                     69 ; absolute external ram data
                                     70 ;--------------------------------------------------------
                                     71 	.area XABS    (ABS,XDATA)
                                     72 ;--------------------------------------------------------
                                     73 ; external initialized ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area XISEG   (XDATA)
                                     76 	.area HOME    (CODE)
                                     77 	.area GSINIT0 (CODE)
                                     78 	.area GSINIT1 (CODE)
                                     79 	.area GSINIT2 (CODE)
                                     80 	.area GSINIT3 (CODE)
                                     81 	.area GSINIT4 (CODE)
                                     82 	.area GSINIT5 (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area CSEG    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; global & static initialisations
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area GSINIT  (CODE)
                                     91 	.area GSFINAL (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 ;--------------------------------------------------------
                                     94 ; Home
                                     95 ;--------------------------------------------------------
                                     96 	.area HOME    (CODE)
                                     97 	.area HOME    (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; code
                                    100 ;--------------------------------------------------------
                                    101 	.area CSEG    (CODE)
                                    102 ;------------------------------------------------------------
                                    103 ;Allocation info for local variables in function 'strstr'
                                    104 ;------------------------------------------------------------
                                    105 ;str2                      Allocated with name '_strstr_PARM_2'
                                    106 ;str1                      Allocated to registers r5 r6 r7 
                                    107 ;cp                        Allocated with name '_strstr_cp_1_22'
                                    108 ;s1                        Allocated with name '_strstr_s1_1_22'
                                    109 ;s2                        Allocated with name '_strstr_s2_1_22'
                                    110 ;sloc0                     Allocated with name '_strstr_sloc0_1_0'
                                    111 ;------------------------------------------------------------
                                    112 ;	_strstr.c:31: char * strstr (
                                    113 ;	-----------------------------------------
                                    114 ;	 function strstr
                                    115 ;	-----------------------------------------
      000000                        116 _strstr:
                           000007   117 	ar7 = 0x07
                           000006   118 	ar6 = 0x06
                           000005   119 	ar5 = 0x05
                           000004   120 	ar4 = 0x04
                           000003   121 	ar3 = 0x03
                           000002   122 	ar2 = 0x02
                           000001   123 	ar1 = 0x01
                           000000   124 	ar0 = 0x00
      000000 AD 82            [24]  125 	mov	r5,dpl
      000002 AE 83            [24]  126 	mov	r6,dph
      000004 AF F0            [24]  127 	mov	r7,b
                                    128 ;	_strstr.c:36: const char * cp = str1;
      000006 8D*03            [24]  129 	mov	_strstr_cp_1_22,r5
      000008 8E*04            [24]  130 	mov	(_strstr_cp_1_22 + 1),r6
      00000A 8F*05            [24]  131 	mov	(_strstr_cp_1_22 + 2),r7
                                    132 ;	_strstr.c:40: if ( !*str2 )
      00000C 85*00*09         [24]  133 	mov	_strstr_s2_1_22,_strstr_PARM_2
      00000F 85*01*0A         [24]  134 	mov	(_strstr_s2_1_22 + 1),(_strstr_PARM_2 + 1)
      000012 85*02*0B         [24]  135 	mov	(_strstr_s2_1_22 + 2),(_strstr_PARM_2 + 2)
      000015 85*09 82         [24]  136 	mov	dpl,_strstr_s2_1_22
      000018 85*0A 83         [24]  137 	mov	dph,(_strstr_s2_1_22 + 1)
      00001B 85*0B F0         [24]  138 	mov	b,(_strstr_s2_1_22 + 2)
      00001E 12r00r00         [24]  139 	lcall	__gptrget
      000021 70 07            [24]  140 	jnz	00122$
                                    141 ;	_strstr.c:41: return str1;
      000023 8D 82            [24]  142 	mov	dpl,r5
      000025 8E 83            [24]  143 	mov	dph,r6
      000027 8F F0            [24]  144 	mov	b,r7
      000029 22               [24]  145 	ret
                                    146 ;	_strstr.c:43: while (*cp)
      00002A                        147 00122$:
      00002A 8D*06            [24]  148 	mov	_strstr_s1_1_22,r5
      00002C 8E*07            [24]  149 	mov	(_strstr_s1_1_22 + 1),r6
      00002E 8F*08            [24]  150 	mov	(_strstr_s1_1_22 + 2),r7
      000030                        151 00110$:
      000030 85*06 82         [24]  152 	mov	dpl,_strstr_s1_1_22
      000033 85*07 83         [24]  153 	mov	dph,(_strstr_s1_1_22 + 1)
      000036 85*08 F0         [24]  154 	mov	b,(_strstr_s1_1_22 + 2)
      000039 12r00r00         [24]  155 	lcall	__gptrget
      00003C 60 76            [24]  156 	jz	00112$
                                    157 ;	_strstr.c:46: s2 = str2;
      00003E AA*09            [24]  158 	mov	r2,_strstr_s2_1_22
      000040 AB*0A            [24]  159 	mov	r3,(_strstr_s2_1_22 + 1)
      000042 AC*0B            [24]  160 	mov	r4,(_strstr_s2_1_22 + 2)
                                    161 ;	_strstr.c:48: while ( *s1 && *s2 && !(*s1-*s2) )
      000044 85*06*0C         [24]  162 	mov	_strstr_sloc0_1_0,_strstr_s1_1_22
      000047 85*07*0D         [24]  163 	mov	(_strstr_sloc0_1_0 + 1),(_strstr_s1_1_22 + 1)
      00004A 85*08*0E         [24]  164 	mov	(_strstr_sloc0_1_0 + 2),(_strstr_s1_1_22 + 2)
      00004D                        165 00105$:
      00004D 85*0C 82         [24]  166 	mov	dpl,_strstr_sloc0_1_0
      000050 85*0D 83         [24]  167 	mov	dph,(_strstr_sloc0_1_0 + 1)
      000053 85*0E F0         [24]  168 	mov	b,(_strstr_sloc0_1_0 + 2)
      000056 12r00r00         [24]  169 	lcall	__gptrget
      000059 F9               [12]  170 	mov	r1,a
      00005A 60 2F            [24]  171 	jz	00107$
      00005C 8A 82            [24]  172 	mov	dpl,r2
      00005E 8B 83            [24]  173 	mov	dph,r3
      000060 8C F0            [24]  174 	mov	b,r4
      000062 12r00r00         [24]  175 	lcall	__gptrget
      000065 F8               [12]  176 	mov	r0,a
      000066 60 23            [24]  177 	jz	00107$
      000068 E9               [12]  178 	mov	a,r1
      000069 33               [12]  179 	rlc	a
      00006A 95 E0            [12]  180 	subb	a,acc
      00006C FF               [12]  181 	mov	r7,a
      00006D E8               [12]  182 	mov	a,r0
      00006E 33               [12]  183 	rlc	a
      00006F 95 E0            [12]  184 	subb	a,acc
      000071 FE               [12]  185 	mov	r6,a
      000072 E9               [12]  186 	mov	a,r1
      000073 C3               [12]  187 	clr	c
      000074 98               [12]  188 	subb	a,r0
      000075 F9               [12]  189 	mov	r1,a
      000076 EF               [12]  190 	mov	a,r7
      000077 9E               [12]  191 	subb	a,r6
      000078 FF               [12]  192 	mov	r7,a
      000079 49               [12]  193 	orl	a,r1
      00007A 70 0F            [24]  194 	jnz	00107$
                                    195 ;	_strstr.c:49: s1++, s2++;
      00007C 05*0C            [12]  196 	inc	_strstr_sloc0_1_0
      00007E E4               [12]  197 	clr	a
      00007F B5*0C 02         [24]  198 	cjne	a,_strstr_sloc0_1_0,00145$
      000082 05*0D            [12]  199 	inc	(_strstr_sloc0_1_0 + 1)
      000084                        200 00145$:
      000084 0A               [12]  201 	inc	r2
      000085 BA 00 C5         [24]  202 	cjne	r2,#0x00,00105$
      000088 0B               [12]  203 	inc	r3
      000089 80 C2            [24]  204 	sjmp	00105$
      00008B                        205 00107$:
                                    206 ;	_strstr.c:51: if (!*s2)
      00008B 8A 82            [24]  207 	mov	dpl,r2
      00008D 8B 83            [24]  208 	mov	dph,r3
      00008F 8C F0            [24]  209 	mov	b,r4
      000091 12r00r00         [24]  210 	lcall	__gptrget
      000094 70 0A            [24]  211 	jnz	00109$
                                    212 ;	_strstr.c:52: return( (char*)cp );
      000096 85*03 82         [24]  213 	mov	dpl,_strstr_cp_1_22
      000099 85*04 83         [24]  214 	mov	dph,(_strstr_cp_1_22 + 1)
      00009C 85*05 F0         [24]  215 	mov	b,(_strstr_cp_1_22 + 2)
      00009F 22               [24]  216 	ret
      0000A0                        217 00109$:
                                    218 ;	_strstr.c:54: cp++;
      0000A0 05*06            [12]  219 	inc	_strstr_s1_1_22
      0000A2 E4               [12]  220 	clr	a
      0000A3 B5*06 02         [24]  221 	cjne	a,_strstr_s1_1_22,00148$
      0000A6 05*07            [12]  222 	inc	(_strstr_s1_1_22 + 1)
      0000A8                        223 00148$:
      0000A8 85*06*03         [24]  224 	mov	_strstr_cp_1_22,_strstr_s1_1_22
      0000AB 85*07*04         [24]  225 	mov	(_strstr_cp_1_22 + 1),(_strstr_s1_1_22 + 1)
      0000AE 85*08*05         [24]  226 	mov	(_strstr_cp_1_22 + 2),(_strstr_s1_1_22 + 2)
      0000B1 02r00r30         [24]  227 	ljmp	00110$
      0000B4                        228 00112$:
                                    229 ;	_strstr.c:57: return (NULL) ;
      0000B4 90 00 00         [24]  230 	mov	dptr,#0x0000
      0000B7 75 F0 00         [24]  231 	mov	b,#0x00
      0000BA 22               [24]  232 	ret
                                    233 	.area CSEG    (CODE)
                                    234 	.area CONST   (CODE)
                                    235 	.area XINIT   (CODE)
                                    236 	.area CABS    (ABS,CODE)
