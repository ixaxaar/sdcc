                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:51 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module vprintf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _putchar
                                     13 	.globl __print_format
                                     14 	.globl _vprintf_PARM_2
                                     15 	.globl _vprintf
                                     16 	.globl _printf
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; internal ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DSEG    (DATA)
      000000                         36 _vprintf_PARM_2:
      000000                         37 	.ds 1
                                     38 ;--------------------------------------------------------
                                     39 ; overlayable items in internal ram 
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; indirectly addressable internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area ISEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; absolute internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area IABS    (ABS,DATA)
                                     49 	.area IABS    (ABS,DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; bit data
                                     52 ;--------------------------------------------------------
                                     53 	.area BSEG    (BIT)
                                     54 ;--------------------------------------------------------
                                     55 ; paged external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area PSEG    (PAG,XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XSEG    (XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; absolute external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XABS    (ABS,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; external initialized ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XISEG   (XDATA)
                                     70 	.area HOME    (CODE)
                                     71 	.area GSINIT0 (CODE)
                                     72 	.area GSINIT1 (CODE)
                                     73 	.area GSINIT2 (CODE)
                                     74 	.area GSINIT3 (CODE)
                                     75 	.area GSINIT4 (CODE)
                                     76 	.area GSINIT5 (CODE)
                                     77 	.area GSINIT  (CODE)
                                     78 	.area GSFINAL (CODE)
                                     79 	.area CSEG    (CODE)
                                     80 ;--------------------------------------------------------
                                     81 ; global & static initialisations
                                     82 ;--------------------------------------------------------
                                     83 	.area HOME    (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; Home
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area HOME    (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; code
                                     94 ;--------------------------------------------------------
                                     95 	.area CSEG    (CODE)
                                     96 ;------------------------------------------------------------
                                     97 ;Allocation info for local variables in function 'put_char_to_stdout'
                                     98 ;------------------------------------------------------------
                                     99 ;p                         Allocated to stack - _bp -5
                                    100 ;c                         Allocated to registers r7 
                                    101 ;------------------------------------------------------------
                                    102 ;	vprintf.c:34: put_char_to_stdout (char c, void* p) _REENTRANT
                                    103 ;	-----------------------------------------
                                    104 ;	 function put_char_to_stdout
                                    105 ;	-----------------------------------------
      000000                        106 _put_char_to_stdout:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 85 81*00         [24]  116 	mov	_bp,sp
                                    117 ;	vprintf.c:37: putchar (c);
      000005 12r00r00         [24]  118 	lcall	_putchar
      000008 D0*00            [24]  119 	pop	_bp
      00000A 22               [24]  120 	ret
                                    121 ;------------------------------------------------------------
                                    122 ;Allocation info for local variables in function 'vprintf'
                                    123 ;------------------------------------------------------------
                                    124 ;ap                        Allocated with name '_vprintf_PARM_2'
                                    125 ;format                    Allocated to registers 
                                    126 ;------------------------------------------------------------
                                    127 ;	vprintf.c:41: vprintf (const char *format, va_list ap)
                                    128 ;	-----------------------------------------
                                    129 ;	 function vprintf
                                    130 ;	-----------------------------------------
      00000B                        131 _vprintf:
      00000B 85 82*00         [24]  132 	mov	__print_format_PARM_3,dpl
      00000E 85 83*01         [24]  133 	mov	(__print_format_PARM_3 + 1),dph
      000011 85 F0*02         [24]  134 	mov	(__print_format_PARM_3 + 2),b
                                    135 ;	vprintf.c:43: return _print_format (put_char_to_stdout, NULL, format, ap);
      000014 E4               [12]  136 	clr	a
      000015 F5*00            [12]  137 	mov	__print_format_PARM_2,a
      000017 F5*01            [12]  138 	mov	(__print_format_PARM_2 + 1),a
                                    139 ;	1-genFromRTrack replaced	mov	(__print_format_PARM_2 + 2),#0x00
      000019 F5*02            [12]  140 	mov	(__print_format_PARM_2 + 2),a
      00001B 85*00*00         [24]  141 	mov	__print_format_PARM_4,_vprintf_PARM_2
      00001E 90r00r00         [24]  142 	mov	dptr,#_put_char_to_stdout
      000021 02r00r00         [24]  143 	ljmp	__print_format
                                    144 ;------------------------------------------------------------
                                    145 ;Allocation info for local variables in function 'printf'
                                    146 ;------------------------------------------------------------
                                    147 ;format                    Allocated to stack - _bp -5
                                    148 ;arg                       Allocated to registers 
                                    149 ;i                         Allocated to registers 
                                    150 ;------------------------------------------------------------
                                    151 ;	vprintf.c:47: printf (const char *format, ...)
                                    152 ;	-----------------------------------------
                                    153 ;	 function printf
                                    154 ;	-----------------------------------------
      000024                        155 _printf:
      000024 C0*00            [24]  156 	push	_bp
      000026 85 81*00         [24]  157 	mov	_bp,sp
                                    158 ;	vprintf.c:52: va_start (arg, format);
      000029 E5*00            [12]  159 	mov	a,_bp
      00002B 24 FB            [12]  160 	add	a,#0xFB
      00002D FF               [12]  161 	mov	r7,a
      00002E 8F*00            [24]  162 	mov	__print_format_PARM_4,r7
                                    163 ;	vprintf.c:53: i = _print_format (put_char_to_stdout, NULL, format, arg);
      000030 E4               [12]  164 	clr	a
      000031 F5*00            [12]  165 	mov	__print_format_PARM_2,a
      000033 F5*01            [12]  166 	mov	(__print_format_PARM_2 + 1),a
                                    167 ;	1-genFromRTrack replaced	mov	(__print_format_PARM_2 + 2),#0x00
      000035 F5*02            [12]  168 	mov	(__print_format_PARM_2 + 2),a
      000037 E5*00            [12]  169 	mov	a,_bp
      000039 24 FB            [12]  170 	add	a,#0xfb
      00003B F8               [12]  171 	mov	r0,a
      00003C 86*00            [24]  172 	mov	__print_format_PARM_3,@r0
      00003E 08               [12]  173 	inc	r0
      00003F 86*01            [24]  174 	mov	(__print_format_PARM_3 + 1),@r0
      000041 08               [12]  175 	inc	r0
      000042 86*02            [24]  176 	mov	(__print_format_PARM_3 + 2),@r0
      000044 90r00r00         [24]  177 	mov	dptr,#_put_char_to_stdout
      000047 12r00r00         [24]  178 	lcall	__print_format
                                    179 ;	vprintf.c:56: return i;
      00004A D0*00            [24]  180 	pop	_bp
      00004C 22               [24]  181 	ret
                                    182 	.area CSEG    (CODE)
                                    183 	.area CONST   (CODE)
                                    184 	.area XINIT   (CODE)
                                    185 	.area CABS    (ABS,CODE)
