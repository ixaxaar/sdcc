                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:50 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atoi
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
      000000                         32 _atoi_sloc0_1_0:
      000000                         33 	.ds 1
      000001                         34 _atoi_sloc1_1_0:
      000001                         35 	.ds 2
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable items in internal ram 
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XSEG    (XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XABS    (ABS,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; external initialized ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XISEG   (XDATA)
                                     68 	.area HOME    (CODE)
                                     69 	.area GSINIT0 (CODE)
                                     70 	.area GSINIT1 (CODE)
                                     71 	.area GSINIT2 (CODE)
                                     72 	.area GSINIT3 (CODE)
                                     73 	.area GSINIT4 (CODE)
                                     74 	.area GSINIT5 (CODE)
                                     75 	.area GSINIT  (CODE)
                                     76 	.area GSFINAL (CODE)
                                     77 	.area CSEG    (CODE)
                                     78 ;--------------------------------------------------------
                                     79 ; global & static initialisations
                                     80 ;--------------------------------------------------------
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area HOME    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; code
                                     92 ;--------------------------------------------------------
                                     93 	.area CSEG    (CODE)
                                     94 ;------------------------------------------------------------
                                     95 ;Allocation info for local variables in function 'atoi'
                                     96 ;------------------------------------------------------------
                                     97 ;s                         Allocated to registers r5 r6 r7 
                                     98 ;rv                        Allocated to registers r3 r4 
                                     99 ;sign                      Allocated to registers r0 
                                    100 ;sloc0                     Allocated with name '_atoi_sloc0_1_0'
                                    101 ;sloc1                     Allocated with name '_atoi_sloc1_1_0'
                                    102 ;------------------------------------------------------------
                                    103 ;	_atoi.c:29: int atoi(const char * s)
                                    104 ;	-----------------------------------------
                                    105 ;	 function atoi
                                    106 ;	-----------------------------------------
      000000                        107 _atoi:
                           000007   108 	ar7 = 0x07
                           000006   109 	ar6 = 0x06
                           000005   110 	ar5 = 0x05
                           000004   111 	ar4 = 0x04
                           000003   112 	ar3 = 0x03
                           000002   113 	ar2 = 0x02
                           000001   114 	ar1 = 0x01
                           000000   115 	ar0 = 0x00
      000000 AD 82            [24]  116 	mov	r5,dpl
      000002 AE 83            [24]  117 	mov	r6,dph
      000004 AF F0            [24]  118 	mov	r7,b
                                    119 ;	_atoi.c:31: register int rv=0; 
      000006 7B 00            [12]  120 	mov	r3,#0x00
      000008 7C 00            [12]  121 	mov	r4,#0x00
                                    122 ;	_atoi.c:35: while (*s) {
      00000A 8D 00            [24]  123 	mov	ar0,r5
      00000C 8E 01            [24]  124 	mov	ar1,r6
      00000E 8F 02            [24]  125 	mov	ar2,r7
      000010                        126 00107$:
      000010 88 82            [24]  127 	mov	dpl,r0
      000012 89 83            [24]  128 	mov	dph,r1
      000014 8A F0            [24]  129 	mov	b,r2
      000016 12r00r00         [24]  130 	lcall	__gptrget
      000019 F5*00            [12]  131 	mov	_atoi_sloc0_1_0,a
      00001B 60 35            [24]  132 	jz	00133$
                                    133 ;	_atoi.c:36: if (*s <= '9' && *s >= '0')
      00001D C3               [12]  134 	clr	c
      00001E 74 B9            [12]  135 	mov	a,#(0x39 ^ 0x80)
      000020 85*00 F0         [24]  136 	mov	b,_atoi_sloc0_1_0
      000023 63 F0 80         [24]  137 	xrl	b,#0x80
      000026 95 F0            [12]  138 	subb	a,b
      000028 40 08            [24]  139 	jc	00102$
      00002A E5*00            [12]  140 	mov	a,_atoi_sloc0_1_0
      00002C 64 80            [12]  141 	xrl	a,#0x80
      00002E 94 B0            [12]  142 	subb	a,#0xb0
      000030 50 20            [24]  143 	jnc	00133$
                                    144 ;	_atoi.c:37: break;
      000032                        145 00102$:
                                    146 ;	_atoi.c:38: if (*s == '-' || *s == '+') 
      000032 88 82            [24]  147 	mov	dpl,r0
      000034 89 83            [24]  148 	mov	dph,r1
      000036 8A F0            [24]  149 	mov	b,r2
      000038 12r00r00         [24]  150 	lcall	__gptrget
      00003B F5*00            [12]  151 	mov	_atoi_sloc0_1_0,a
      00003D 74 2D            [12]  152 	mov	a,#0x2D
      00003F B5*00 02         [24]  153 	cjne	a,_atoi_sloc0_1_0,00160$
      000042 80 0E            [24]  154 	sjmp	00133$
      000044                        155 00160$:
      000044 74 2B            [12]  156 	mov	a,#0x2B
      000046 B5*00 02         [24]  157 	cjne	a,_atoi_sloc0_1_0,00161$
      000049 80 07            [24]  158 	sjmp	00133$
      00004B                        159 00161$:
                                    160 ;	_atoi.c:40: s++;
      00004B 08               [12]  161 	inc	r0
      00004C B8 00 C1         [24]  162 	cjne	r0,#0x00,00107$
      00004F 09               [12]  163 	inc	r1
      000050 80 BE            [24]  164 	sjmp	00107$
      000052                        165 00133$:
      000052 88 05            [24]  166 	mov	ar5,r0
      000054 89 06            [24]  167 	mov	ar6,r1
      000056 8A 07            [24]  168 	mov	ar7,r2
                                    169 ;	_atoi.c:43: sign = (*s == '-');
      000058 88 82            [24]  170 	mov	dpl,r0
      00005A 89 83            [24]  171 	mov	dph,r1
      00005C 8A F0            [24]  172 	mov	b,r2
      00005E 12r00r00         [24]  173 	lcall	__gptrget
      000061 FA               [12]  174 	mov	r2,a
      000062 E4               [12]  175 	clr	a
      000063 BA 2D 01         [24]  176 	cjne	r2,#0x2D,00163$
      000066 04               [12]  177 	inc	a
      000067                        178 00163$:
                                    179 ;	_atoi.c:44: if (*s == '-' || *s == '+') s++;
      000067 F9               [12]  180 	mov	r1,a
      000068 F8               [12]  181 	mov	r0,a
      000069 70 03            [24]  182 	jnz	00110$
      00006B BA 2B 05         [24]  183 	cjne	r2,#0x2B,00131$
      00006E                        184 00110$:
      00006E 0D               [12]  185 	inc	r5
      00006F BD 00 01         [24]  186 	cjne	r5,#0x00,00168$
      000072 0E               [12]  187 	inc	r6
      000073                        188 00168$:
                                    189 ;	_atoi.c:46: while (*s && *s >= '0' && *s <= '9') {
      000073                        190 00131$:
      000073                        191 00115$:
      000073 8D 82            [24]  192 	mov	dpl,r5
      000075 8E 83            [24]  193 	mov	dph,r6
      000077 8F F0            [24]  194 	mov	b,r7
      000079 12r00r00         [24]  195 	lcall	__gptrget
      00007C FA               [12]  196 	mov	r2,a
      00007D 60 58            [24]  197 	jz	00117$
      00007F C3               [12]  198 	clr	c
      000080 EA               [12]  199 	mov	a,r2
      000081 64 80            [12]  200 	xrl	a,#0x80
      000083 94 B0            [12]  201 	subb	a,#0xb0
      000085 40 50            [24]  202 	jc	00117$
      000087 74 B9            [12]  203 	mov	a,#(0x39 ^ 0x80)
      000089 8A F0            [24]  204 	mov	b,r2
      00008B 63 F0 80         [24]  205 	xrl	b,#0x80
      00008E 95 F0            [12]  206 	subb	a,b
      000090 40 45            [24]  207 	jc	00117$
                                    208 ;	_atoi.c:47: rv = (rv * 10) + (*s - '0');
      000092 C0 00            [24]  209 	push	ar0
      000094 8B*00            [24]  210 	mov	__mulint_PARM_2,r3
      000096 8C*01            [24]  211 	mov	(__mulint_PARM_2 + 1),r4
      000098 90 00 0A         [24]  212 	mov	dptr,#0x000A
      00009B C0 07            [24]  213 	push	ar7
      00009D C0 06            [24]  214 	push	ar6
      00009F C0 05            [24]  215 	push	ar5
      0000A1 C0 02            [24]  216 	push	ar2
      0000A3 C0 00            [24]  217 	push	ar0
      0000A5 12r00r00         [24]  218 	lcall	__mulint
      0000A8 85 82*01         [24]  219 	mov	_atoi_sloc1_1_0,dpl
      0000AB 85 83*02         [24]  220 	mov	(_atoi_sloc1_1_0 + 1),dph
      0000AE D0 00            [24]  221 	pop	ar0
      0000B0 D0 02            [24]  222 	pop	ar2
      0000B2 D0 05            [24]  223 	pop	ar5
      0000B4 D0 06            [24]  224 	pop	ar6
      0000B6 D0 07            [24]  225 	pop	ar7
      0000B8 EA               [12]  226 	mov	a,r2
      0000B9 F9               [12]  227 	mov	r1,a
      0000BA 33               [12]  228 	rlc	a
      0000BB 95 E0            [12]  229 	subb	a,acc
      0000BD FA               [12]  230 	mov	r2,a
      0000BE E9               [12]  231 	mov	a,r1
      0000BF 24 D0            [12]  232 	add	a,#0xD0
      0000C1 F9               [12]  233 	mov	r1,a
      0000C2 EA               [12]  234 	mov	a,r2
      0000C3 34 FF            [12]  235 	addc	a,#0xFF
      0000C5 FA               [12]  236 	mov	r2,a
      0000C6 E9               [12]  237 	mov	a,r1
      0000C7 25*01            [12]  238 	add	a,_atoi_sloc1_1_0
      0000C9 FB               [12]  239 	mov	r3,a
      0000CA EA               [12]  240 	mov	a,r2
      0000CB 35*02            [12]  241 	addc	a,(_atoi_sloc1_1_0 + 1)
      0000CD FC               [12]  242 	mov	r4,a
                                    243 ;	_atoi.c:48: s++;
      0000CE 0D               [12]  244 	inc	r5
      0000CF BD 00 01         [24]  245 	cjne	r5,#0x00,00172$
      0000D2 0E               [12]  246 	inc	r6
      0000D3                        247 00172$:
      0000D3 D0 00            [24]  248 	pop	ar0
      0000D5 80 9C            [24]  249 	sjmp	00115$
      0000D7                        250 00117$:
                                    251 ;	_atoi.c:51: return (sign ? -rv : rv);
      0000D7 E8               [12]  252 	mov	a,r0
      0000D8 60 09            [24]  253 	jz	00120$
      0000DA C3               [12]  254 	clr	c
      0000DB E4               [12]  255 	clr	a
      0000DC 9B               [12]  256 	subb	a,r3
      0000DD FE               [12]  257 	mov	r6,a
      0000DE E4               [12]  258 	clr	a
      0000DF 9C               [12]  259 	subb	a,r4
      0000E0 FF               [12]  260 	mov	r7,a
      0000E1 80 04            [24]  261 	sjmp	00121$
      0000E3                        262 00120$:
      0000E3 8B 06            [24]  263 	mov	ar6,r3
      0000E5 8C 07            [24]  264 	mov	ar7,r4
      0000E7                        265 00121$:
      0000E7 8E 82            [24]  266 	mov	dpl,r6
      0000E9 8F 83            [24]  267 	mov	dph,r7
      0000EB 22               [24]  268 	ret
                                    269 	.area CSEG    (CODE)
                                    270 	.area CONST   (CODE)
                                    271 	.area XINIT   (CODE)
                                    272 	.area CABS    (ABS,CODE)
