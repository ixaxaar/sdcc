                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:50 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _strrchr
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strrchr_PARM_2
                                     13 	.globl _strrchr
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 	.area	OSEG    (OVR,DATA)
      000000                         37 _strrchr_PARM_2:
      000000                         38 	.ds 1
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XSEG    (XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XABS    (ABS,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; external initialized ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XISEG   (XDATA)
                                     68 	.area HOME    (CODE)
                                     69 	.area GSINIT0 (CODE)
                                     70 	.area GSINIT1 (CODE)
                                     71 	.area GSINIT2 (CODE)
                                     72 	.area GSINIT3 (CODE)
                                     73 	.area GSINIT4 (CODE)
                                     74 	.area GSINIT5 (CODE)
                                     75 	.area GSINIT  (CODE)
                                     76 	.area GSFINAL (CODE)
                                     77 	.area CSEG    (CODE)
                                     78 ;--------------------------------------------------------
                                     79 ; global & static initialisations
                                     80 ;--------------------------------------------------------
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area HOME    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; code
                                     92 ;--------------------------------------------------------
                                     93 	.area CSEG    (CODE)
                                     94 ;------------------------------------------------------------
                                     95 ;Allocation info for local variables in function 'strrchr'
                                     96 ;------------------------------------------------------------
                                     97 ;ch                        Allocated with name '_strrchr_PARM_2'
                                     98 ;string                    Allocated to registers r5 r6 r7 
                                     99 ;start                     Allocated to registers r2 r3 r4 
                                    100 ;------------------------------------------------------------
                                    101 ;	_strrchr.c:32: char * strrchr (
                                    102 ;	-----------------------------------------
                                    103 ;	 function strrchr
                                    104 ;	-----------------------------------------
      000000                        105 _strrchr:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 AD 82            [24]  114 	mov	r5,dpl
      000002 AE 83            [24]  115 	mov	r6,dph
      000004 AF F0            [24]  116 	mov	r7,b
                                    117 ;	_strrchr.c:43: const char * start = string;
      000006 8D 02            [24]  118 	mov	ar2,r5
      000008 8E 03            [24]  119 	mov	ar3,r6
      00000A 8F 04            [24]  120 	mov	ar4,r7
                                    121 ;	_strrchr.c:45: while (*string++)                       /* find end of string */
      00000C                        122 00101$:
      00000C 8D 82            [24]  123 	mov	dpl,r5
      00000E 8E 83            [24]  124 	mov	dph,r6
      000010 8F F0            [24]  125 	mov	b,r7
      000012 12r00r00         [24]  126 	lcall	__gptrget
      000015 F9               [12]  127 	mov	r1,a
      000016 A3               [24]  128 	inc	dptr
      000017 AD 82            [24]  129 	mov	r5,dpl
      000019 AE 83            [24]  130 	mov	r6,dph
      00001B E9               [12]  131 	mov	a,r1
      00001C 70 EE            [24]  132 	jnz	00101$
                                    133 ;	_strrchr.c:48: while (--string != start && *string != ch)
      00001E                        134 00105$:
      00001E 1D               [12]  135 	dec	r5
      00001F BD FF 01         [24]  136 	cjne	r5,#0xFF,00129$
      000022 1E               [12]  137 	dec	r6
      000023                        138 00129$:
      000023 C0 02            [24]  139 	push	ar2
      000025 C0 03            [24]  140 	push	ar3
      000027 C0 04            [24]  141 	push	ar4
      000029 8D 82            [24]  142 	mov	dpl,r5
      00002B 8E 83            [24]  143 	mov	dph,r6
      00002D 8F F0            [24]  144 	mov	b,r7
      00002F 12r00r00         [24]  145 	lcall	___gptr_cmp
      000032 15 81            [12]  146 	dec	sp
      000034 15 81            [12]  147 	dec	sp
      000036 15 81            [12]  148 	dec	sp
      000038 60 0D            [24]  149 	jz	00107$
      00003A 8D 82            [24]  150 	mov	dpl,r5
      00003C 8E 83            [24]  151 	mov	dph,r6
      00003E 8F F0            [24]  152 	mov	b,r7
      000040 12r00r00         [24]  153 	lcall	__gptrget
      000043 F9               [12]  154 	mov	r1,a
      000044 B5*00 D7         [24]  155 	cjne	a,_strrchr_PARM_2,00105$
      000047                        156 00107$:
                                    157 ;	_strrchr.c:51: if (*string == ch)                /* char found ? */
      000047 8D 82            [24]  158 	mov	dpl,r5
      000049 8E 83            [24]  159 	mov	dph,r6
      00004B 8F F0            [24]  160 	mov	b,r7
      00004D 12r00r00         [24]  161 	lcall	__gptrget
      000050 FC               [12]  162 	mov	r4,a
      000051 B5*00 07         [24]  163 	cjne	a,_strrchr_PARM_2,00109$
                                    164 ;	_strrchr.c:52: return( (char *)string );
      000054 8D 82            [24]  165 	mov	dpl,r5
      000056 8E 83            [24]  166 	mov	dph,r6
      000058 8F F0            [24]  167 	mov	b,r7
      00005A 22               [24]  168 	ret
      00005B                        169 00109$:
                                    170 ;	_strrchr.c:54: return (NULL) ;
      00005B 90 00 00         [24]  171 	mov	dptr,#0x0000
      00005E 75 F0 00         [24]  172 	mov	b,#0x00
      000061 22               [24]  173 	ret
                                    174 	.area CSEG    (CODE)
                                    175 	.area CONST   (CODE)
                                    176 	.area XINIT   (CODE)
                                    177 	.area CABS    (ABS,CODE)
