                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:51 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _ser
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _TF2
                                     13 	.globl _EXF2
                                     14 	.globl _RCLK
                                     15 	.globl _TCLK
                                     16 	.globl _EXEN2
                                     17 	.globl _TR2
                                     18 	.globl _C_T2
                                     19 	.globl _CP_RL2
                                     20 	.globl _T2CON_7
                                     21 	.globl _T2CON_6
                                     22 	.globl _T2CON_5
                                     23 	.globl _T2CON_4
                                     24 	.globl _T2CON_3
                                     25 	.globl _T2CON_2
                                     26 	.globl _T2CON_1
                                     27 	.globl _T2CON_0
                                     28 	.globl _PT2
                                     29 	.globl _ET2
                                     30 	.globl _CY
                                     31 	.globl _AC
                                     32 	.globl _F0
                                     33 	.globl _RS1
                                     34 	.globl _RS0
                                     35 	.globl _OV
                                     36 	.globl _F1
                                     37 	.globl _P
                                     38 	.globl _PS
                                     39 	.globl _PT1
                                     40 	.globl _PX1
                                     41 	.globl _PT0
                                     42 	.globl _PX0
                                     43 	.globl _RD
                                     44 	.globl _WR
                                     45 	.globl _T1
                                     46 	.globl _T0
                                     47 	.globl _INT1
                                     48 	.globl _INT0
                                     49 	.globl _TXD
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _EA
                                     60 	.globl _ES
                                     61 	.globl _ET1
                                     62 	.globl _EX1
                                     63 	.globl _ET0
                                     64 	.globl _EX0
                                     65 	.globl _P2_7
                                     66 	.globl _P2_6
                                     67 	.globl _P2_5
                                     68 	.globl _P2_4
                                     69 	.globl _P2_3
                                     70 	.globl _P2_2
                                     71 	.globl _P2_1
                                     72 	.globl _P2_0
                                     73 	.globl _SM0
                                     74 	.globl _SM1
                                     75 	.globl _SM2
                                     76 	.globl _REN
                                     77 	.globl _TB8
                                     78 	.globl _RB8
                                     79 	.globl _TI
                                     80 	.globl _RI
                                     81 	.globl _P1_7
                                     82 	.globl _P1_6
                                     83 	.globl _P1_5
                                     84 	.globl _P1_4
                                     85 	.globl _P1_3
                                     86 	.globl _P1_2
                                     87 	.globl _P1_1
                                     88 	.globl _P1_0
                                     89 	.globl _TF1
                                     90 	.globl _TR1
                                     91 	.globl _TF0
                                     92 	.globl _TR0
                                     93 	.globl _IE1
                                     94 	.globl _IT1
                                     95 	.globl _IE0
                                     96 	.globl _IT0
                                     97 	.globl _P0_7
                                     98 	.globl _P0_6
                                     99 	.globl _P0_5
                                    100 	.globl _P0_4
                                    101 	.globl _P0_3
                                    102 	.globl _P0_2
                                    103 	.globl _P0_1
                                    104 	.globl _P0_0
                                    105 	.globl _TH2
                                    106 	.globl _TL2
                                    107 	.globl _RCAP2H
                                    108 	.globl _RCAP2L
                                    109 	.globl _T2CON
                                    110 	.globl _B
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _IP
                                    114 	.globl _P3
                                    115 	.globl _IE
                                    116 	.globl _P2
                                    117 	.globl _SBUF
                                    118 	.globl _SCON
                                    119 	.globl _P1
                                    120 	.globl _TH1
                                    121 	.globl _TH0
                                    122 	.globl _TL1
                                    123 	.globl _TL0
                                    124 	.globl _TMOD
                                    125 	.globl _TCON
                                    126 	.globl _PCON
                                    127 	.globl _DPH
                                    128 	.globl _DPL
                                    129 	.globl _SP
                                    130 	.globl _P0
                                    131 	.globl _ser_rxBuffer
                                    132 	.globl _ser_txBuffer
                                    133 	.globl _ser_rxIndexOut
                                    134 	.globl _ser_rxIndexIn
                                    135 	.globl _ser_txIndexOut
                                    136 	.globl _ser_txIndexIn
                                    137 	.globl _ser_init
                                    138 	.globl _ser_interrupt_handler
                                    139 	.globl _ser_putc
                                    140 	.globl _ser_getc
                                    141 	.globl _ser_printString
                                    142 	.globl _ser_charAvail
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000D0   166 _PSW	=	0x00d0
                           0000E0   167 _ACC	=	0x00e0
                           0000F0   168 _B	=	0x00f0
                           0000C8   169 _T2CON	=	0x00c8
                           0000CA   170 _RCAP2L	=	0x00ca
                           0000CB   171 _RCAP2H	=	0x00cb
                           0000CC   172 _TL2	=	0x00cc
                           0000CD   173 _TH2	=	0x00cd
                                    174 ;--------------------------------------------------------
                                    175 ; special function bits
                                    176 ;--------------------------------------------------------
                                    177 	.area RSEG    (ABS,DATA)
      000000                        178 	.org 0x0000
                           000080   179 _P0_0	=	0x0080
                           000081   180 _P0_1	=	0x0081
                           000082   181 _P0_2	=	0x0082
                           000083   182 _P0_3	=	0x0083
                           000084   183 _P0_4	=	0x0084
                           000085   184 _P0_5	=	0x0085
                           000086   185 _P0_6	=	0x0086
                           000087   186 _P0_7	=	0x0087
                           000088   187 _IT0	=	0x0088
                           000089   188 _IE0	=	0x0089
                           00008A   189 _IT1	=	0x008a
                           00008B   190 _IE1	=	0x008b
                           00008C   191 _TR0	=	0x008c
                           00008D   192 _TF0	=	0x008d
                           00008E   193 _TR1	=	0x008e
                           00008F   194 _TF1	=	0x008f
                           000090   195 _P1_0	=	0x0090
                           000091   196 _P1_1	=	0x0091
                           000092   197 _P1_2	=	0x0092
                           000093   198 _P1_3	=	0x0093
                           000094   199 _P1_4	=	0x0094
                           000095   200 _P1_5	=	0x0095
                           000096   201 _P1_6	=	0x0096
                           000097   202 _P1_7	=	0x0097
                           000098   203 _RI	=	0x0098
                           000099   204 _TI	=	0x0099
                           00009A   205 _RB8	=	0x009a
                           00009B   206 _TB8	=	0x009b
                           00009C   207 _REN	=	0x009c
                           00009D   208 _SM2	=	0x009d
                           00009E   209 _SM1	=	0x009e
                           00009F   210 _SM0	=	0x009f
                           0000A0   211 _P2_0	=	0x00a0
                           0000A1   212 _P2_1	=	0x00a1
                           0000A2   213 _P2_2	=	0x00a2
                           0000A3   214 _P2_3	=	0x00a3
                           0000A4   215 _P2_4	=	0x00a4
                           0000A5   216 _P2_5	=	0x00a5
                           0000A6   217 _P2_6	=	0x00a6
                           0000A7   218 _P2_7	=	0x00a7
                           0000A8   219 _EX0	=	0x00a8
                           0000A9   220 _ET0	=	0x00a9
                           0000AA   221 _EX1	=	0x00aa
                           0000AB   222 _ET1	=	0x00ab
                           0000AC   223 _ES	=	0x00ac
                           0000AF   224 _EA	=	0x00af
                           0000B0   225 _P3_0	=	0x00b0
                           0000B1   226 _P3_1	=	0x00b1
                           0000B2   227 _P3_2	=	0x00b2
                           0000B3   228 _P3_3	=	0x00b3
                           0000B4   229 _P3_4	=	0x00b4
                           0000B5   230 _P3_5	=	0x00b5
                           0000B6   231 _P3_6	=	0x00b6
                           0000B7   232 _P3_7	=	0x00b7
                           0000B0   233 _RXD	=	0x00b0
                           0000B1   234 _TXD	=	0x00b1
                           0000B2   235 _INT0	=	0x00b2
                           0000B3   236 _INT1	=	0x00b3
                           0000B4   237 _T0	=	0x00b4
                           0000B5   238 _T1	=	0x00b5
                           0000B6   239 _WR	=	0x00b6
                           0000B7   240 _RD	=	0x00b7
                           0000B8   241 _PX0	=	0x00b8
                           0000B9   242 _PT0	=	0x00b9
                           0000BA   243 _PX1	=	0x00ba
                           0000BB   244 _PT1	=	0x00bb
                           0000BC   245 _PS	=	0x00bc
                           0000D0   246 _P	=	0x00d0
                           0000D1   247 _F1	=	0x00d1
                           0000D2   248 _OV	=	0x00d2
                           0000D3   249 _RS0	=	0x00d3
                           0000D4   250 _RS1	=	0x00d4
                           0000D5   251 _F0	=	0x00d5
                           0000D6   252 _AC	=	0x00d6
                           0000D7   253 _CY	=	0x00d7
                           0000AD   254 _ET2	=	0x00ad
                           0000BD   255 _PT2	=	0x00bd
                           0000C8   256 _T2CON_0	=	0x00c8
                           0000C9   257 _T2CON_1	=	0x00c9
                           0000CA   258 _T2CON_2	=	0x00ca
                           0000CB   259 _T2CON_3	=	0x00cb
                           0000CC   260 _T2CON_4	=	0x00cc
                           0000CD   261 _T2CON_5	=	0x00cd
                           0000CE   262 _T2CON_6	=	0x00ce
                           0000CF   263 _T2CON_7	=	0x00cf
                           0000C8   264 _CP_RL2	=	0x00c8
                           0000C9   265 _C_T2	=	0x00c9
                           0000CA   266 _TR2	=	0x00ca
                           0000CB   267 _EXEN2	=	0x00cb
                           0000CC   268 _TCLK	=	0x00cc
                           0000CD   269 _RCLK	=	0x00cd
                           0000CE   270 _EXF2	=	0x00ce
                           0000CF   271 _TF2	=	0x00cf
                                    272 ;--------------------------------------------------------
                                    273 ; overlayable register banks
                                    274 ;--------------------------------------------------------
                                    275 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        276 	.ds 8
                                    277 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        278 	.ds 8
                                    279 ;--------------------------------------------------------
                                    280 ; internal ram data
                                    281 ;--------------------------------------------------------
                                    282 	.area DSEG    (DATA)
                                    283 ;--------------------------------------------------------
                                    284 ; overlayable items in internal ram 
                                    285 ;--------------------------------------------------------
                                    286 	.area	OSEG    (OVR,DATA)
                                    287 	.area	OSEG    (OVR,DATA)
                                    288 	.area	OSEG    (OVR,DATA)
                                    289 ;--------------------------------------------------------
                                    290 ; indirectly addressable internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area ISEG    (DATA)
                                    293 ;--------------------------------------------------------
                                    294 ; absolute internal ram data
                                    295 ;--------------------------------------------------------
                                    296 	.area IABS    (ABS,DATA)
                                    297 	.area IABS    (ABS,DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; bit data
                                    300 ;--------------------------------------------------------
                                    301 	.area BSEG    (BIT)
      000000                        302 _ser_txBusy:
      000000                        303 	.ds 1
                                    304 ;--------------------------------------------------------
                                    305 ; paged external ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area PSEG    (PAG,XDATA)
                                    308 ;--------------------------------------------------------
                                    309 ; external ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area XSEG    (XDATA)
      000000                        312 _ser_txIndexIn::
      000000                        313 	.ds 1
      000001                        314 _ser_txIndexOut::
      000001                        315 	.ds 1
      000002                        316 _ser_rxIndexIn::
      000002                        317 	.ds 1
      000003                        318 _ser_rxIndexOut::
      000003                        319 	.ds 1
      000004                        320 _ser_txBuffer::
      000004                        321 	.ds 256
      000104                        322 _ser_rxBuffer::
      000104                        323 	.ds 256
                                    324 ;--------------------------------------------------------
                                    325 ; absolute external ram data
                                    326 ;--------------------------------------------------------
                                    327 	.area XABS    (ABS,XDATA)
                                    328 ;--------------------------------------------------------
                                    329 ; external initialized ram data
                                    330 ;--------------------------------------------------------
                                    331 	.area XISEG   (XDATA)
                                    332 	.area HOME    (CODE)
                                    333 	.area GSINIT0 (CODE)
                                    334 	.area GSINIT1 (CODE)
                                    335 	.area GSINIT2 (CODE)
                                    336 	.area GSINIT3 (CODE)
                                    337 	.area GSINIT4 (CODE)
                                    338 	.area GSINIT5 (CODE)
                                    339 	.area GSINIT  (CODE)
                                    340 	.area GSFINAL (CODE)
                                    341 	.area CSEG    (CODE)
                                    342 ;--------------------------------------------------------
                                    343 ; global & static initialisations
                                    344 ;--------------------------------------------------------
                                    345 	.area HOME    (CODE)
                                    346 	.area GSINIT  (CODE)
                                    347 	.area GSFINAL (CODE)
                                    348 	.area GSINIT  (CODE)
                                    349 ;--------------------------------------------------------
                                    350 ; Home
                                    351 ;--------------------------------------------------------
                                    352 	.area HOME    (CODE)
                                    353 	.area HOME    (CODE)
                                    354 ;--------------------------------------------------------
                                    355 ; code
                                    356 ;--------------------------------------------------------
                                    357 	.area CSEG    (CODE)
                                    358 ;------------------------------------------------------------
                                    359 ;Allocation info for local variables in function 'ser_init'
                                    360 ;------------------------------------------------------------
                                    361 ;	_ser.c:76: ser_init(void)
                                    362 ;	-----------------------------------------
                                    363 ;	 function ser_init
                                    364 ;	-----------------------------------------
      000000                        365 _ser_init:
                           000007   366 	ar7 = 0x07
                           000006   367 	ar6 = 0x06
                           000005   368 	ar5 = 0x05
                           000004   369 	ar4 = 0x04
                           000003   370 	ar3 = 0x03
                           000002   371 	ar2 = 0x02
                           000001   372 	ar1 = 0x01
                           000000   373 	ar0 = 0x00
                                    374 ;	_ser.c:78: ES = 0;
      000000 C2 AC            [12]  375 	clr	_ES
                                    376 ;	_ser.c:80: ser_txBusy     = 0;
      000002 C2*00            [12]  377 	clr	_ser_txBusy
                                    378 ;	_ser.c:82: ser_txIndexIn  = 0;
      000004 90r00r00         [24]  379 	mov	dptr,#_ser_txIndexIn
      000007 E4               [12]  380 	clr	a
      000008 F0               [24]  381 	movx	@dptr,a
                                    382 ;	_ser.c:83: ser_txIndexOut = 0;
      000009 90r00r01         [24]  383 	mov	dptr,#_ser_txIndexOut
      00000C F0               [24]  384 	movx	@dptr,a
                                    385 ;	_ser.c:84: ser_rxIndexIn  = 0;
      00000D 90r00r02         [24]  386 	mov	dptr,#_ser_rxIndexIn
      000010 F0               [24]  387 	movx	@dptr,a
                                    388 ;	_ser.c:85: ser_rxIndexOut = 0;
      000011 90r00r03         [24]  389 	mov	dptr,#_ser_rxIndexOut
      000014 F0               [24]  390 	movx	@dptr,a
                                    391 ;	_ser.c:87: T2CON = 0x30;
      000015 75 C8 30         [24]  392 	mov	_T2CON,#0x30
                                    393 ;	_ser.c:90: RCAP2H = 0xFF;
      000018 75 CB FF         [24]  394 	mov	_RCAP2H,#0xFF
                                    395 ;	_ser.c:91: RCAP2L = 0xDD;
      00001B 75 CA DD         [24]  396 	mov	_RCAP2L,#0xDD
                                    397 ;	_ser.c:94: T2CON = 0x34;
      00001E 75 C8 34         [24]  398 	mov	_T2CON,#0x34
                                    399 ;	_ser.c:96: SCON = 0x50;
      000021 75 98 50         [24]  400 	mov	_SCON,#0x50
                                    401 ;	_ser.c:98: if (TI) {
                                    402 ;	_ser.c:99: TI = 0;
      000024 10 99 02         [24]  403 	jbc	_TI,00113$
      000027 80 00            [24]  404 	sjmp	00102$
      000029                        405 00113$:
      000029                        406 00102$:
                                    407 ;	_ser.c:101: if (RI) {
                                    408 ;	_ser.c:102: RI = 0;
      000029 10 98 02         [24]  409 	jbc	_RI,00114$
      00002C 80 00            [24]  410 	sjmp	00104$
      00002E                        411 00114$:
      00002E                        412 00104$:
                                    413 ;	_ser.c:105: ES=1;  
      00002E D2 AC            [12]  414 	setb	_ES
      000030 22               [24]  415 	ret
                                    416 ;------------------------------------------------------------
                                    417 ;Allocation info for local variables in function 'ser_interrupt_handler'
                                    418 ;------------------------------------------------------------
                                    419 ;	_ser.c:109: ser_interrupt_handler(void) __interrupt 4 __using 1
                                    420 ;	-----------------------------------------
                                    421 ;	 function ser_interrupt_handler
                                    422 ;	-----------------------------------------
      000031                        423 _ser_interrupt_handler:
                           00000F   424 	ar7 = 0x0F
                           00000E   425 	ar6 = 0x0E
                           00000D   426 	ar5 = 0x0D
                           00000C   427 	ar4 = 0x0C
                           00000B   428 	ar3 = 0x0B
                           00000A   429 	ar2 = 0x0A
                           000009   430 	ar1 = 0x09
                           000008   431 	ar0 = 0x08
      000031 C0 E0            [24]  432 	push	acc
      000033 C0 82            [24]  433 	push	dpl
      000035 C0 83            [24]  434 	push	dph
      000037 C0 D0            [24]  435 	push	psw
      000039 75 D0 08         [24]  436 	mov	psw,#0x08
                                    437 ;	_ser.c:111: ES=0;
      00003C C2 AC            [12]  438 	clr	_ES
                                    439 ;	_ser.c:113: if (RI) {
                                    440 ;	_ser.c:114: RI = 0;
      00003E 10 98 02         [24]  441 	jbc	_RI,00119$
      000041 80 14            [24]  442 	sjmp	00102$
      000043                        443 00119$:
                                    444 ;	_ser.c:115: ser_rxBuffer[ser_rxIndexIn++] = SBUF;
      000043 90r00r02         [24]  445 	mov	dptr,#_ser_rxIndexIn
      000046 E0               [24]  446 	movx	a,@dptr
      000047 FF               [12]  447 	mov	r7,a
      000048 04               [12]  448 	inc	a
      000049 F0               [24]  449 	movx	@dptr,a
      00004A EF               [12]  450 	mov	a,r7
      00004B 24r04            [12]  451 	add	a,#_ser_rxBuffer
      00004D F5 82            [12]  452 	mov	dpl,a
      00004F E4               [12]  453 	clr	a
      000050 34s01            [12]  454 	addc	a,#(_ser_rxBuffer >> 8)
      000052 F5 83            [12]  455 	mov	dph,a
      000054 E5 99            [12]  456 	mov	a,_SBUF
      000056 F0               [24]  457 	movx	@dptr,a
      000057                        458 00102$:
                                    459 ;	_ser.c:118: if (TI) {
                                    460 ;	_ser.c:119: TI = 0;
      000057 10 99 02         [24]  461 	jbc	_TI,00120$
      00005A 80 25            [24]  462 	sjmp	00107$
      00005C                        463 00120$:
                                    464 ;	_ser.c:120: if (ser_txIndexIn == ser_txIndexOut) {
      00005C 90r00r00         [24]  465 	mov	dptr,#_ser_txIndexIn
      00005F E0               [24]  466 	movx	a,@dptr
      000060 FF               [12]  467 	mov	r7,a
      000061 90r00r01         [24]  468 	mov	dptr,#_ser_txIndexOut
      000064 E0               [24]  469 	movx	a,@dptr
      000065 FE               [12]  470 	mov	r6,a
      000066 EF               [12]  471 	mov	a,r7
      000067 B5 0E 04         [24]  472 	cjne	a,ar6,00104$
                                    473 ;	_ser.c:121: ser_txBusy = 0;
      00006A C2*00            [12]  474 	clr	_ser_txBusy
      00006C 80 13            [24]  475 	sjmp	00107$
      00006E                        476 00104$:
                                    477 ;	_ser.c:124: SBUF = ser_txBuffer[ser_txIndexOut++];
      00006E 90r00r01         [24]  478 	mov	dptr,#_ser_txIndexOut
      000071 EE               [12]  479 	mov	a,r6
      000072 04               [12]  480 	inc	a
      000073 F0               [24]  481 	movx	@dptr,a
      000074 EE               [12]  482 	mov	a,r6
      000075 24r04            [12]  483 	add	a,#_ser_txBuffer
      000077 F5 82            [12]  484 	mov	dpl,a
      000079 E4               [12]  485 	clr	a
      00007A 34s00            [12]  486 	addc	a,#(_ser_txBuffer >> 8)
      00007C F5 83            [12]  487 	mov	dph,a
      00007E E0               [24]  488 	movx	a,@dptr
      00007F F5 99            [12]  489 	mov	_SBUF,a
      000081                        490 00107$:
                                    491 ;	_ser.c:128: ES=1;
      000081 D2 AC            [12]  492 	setb	_ES
      000083 D0 D0            [24]  493 	pop	psw
      000085 D0 83            [24]  494 	pop	dph
      000087 D0 82            [24]  495 	pop	dpl
      000089 D0 E0            [24]  496 	pop	acc
      00008B 32               [24]  497 	reti
                                    498 ;	eliminated unneeded push/pop b
                                    499 ;------------------------------------------------------------
                                    500 ;Allocation info for local variables in function 'ser_putc'
                                    501 ;------------------------------------------------------------
                                    502 ;c                         Allocated to registers r7 
                                    503 ;------------------------------------------------------------
                                    504 ;	_ser.c:132: ser_putc(unsigned char c)
                                    505 ;	-----------------------------------------
                                    506 ;	 function ser_putc
                                    507 ;	-----------------------------------------
      00008C                        508 _ser_putc:
                           000007   509 	ar7 = 0x07
                           000006   510 	ar6 = 0x06
                           000005   511 	ar5 = 0x05
                           000004   512 	ar4 = 0x04
                           000003   513 	ar3 = 0x03
                           000002   514 	ar2 = 0x02
                           000001   515 	ar1 = 0x01
                           000000   516 	ar0 = 0x00
      00008C AF 82            [24]  517 	mov	r7,dpl
                                    518 ;	_ser.c:134: ES=0;
      00008E C2 AC            [12]  519 	clr	_ES
                                    520 ;	_ser.c:136: if (ser_txBusy) {
      000090 30*00 15         [24]  521 	jnb	_ser_txBusy,00102$
                                    522 ;	_ser.c:137: ser_txBuffer[ser_txIndexIn++] = c;
      000093 90r00r00         [24]  523 	mov	dptr,#_ser_txIndexIn
      000096 E0               [24]  524 	movx	a,@dptr
      000097 FE               [12]  525 	mov	r6,a
      000098 04               [12]  526 	inc	a
      000099 F0               [24]  527 	movx	@dptr,a
      00009A EE               [12]  528 	mov	a,r6
      00009B 24r04            [12]  529 	add	a,#_ser_txBuffer
      00009D F5 82            [12]  530 	mov	dpl,a
      00009F E4               [12]  531 	clr	a
      0000A0 34s00            [12]  532 	addc	a,#(_ser_txBuffer >> 8)
      0000A2 F5 83            [12]  533 	mov	dph,a
      0000A4 EF               [12]  534 	mov	a,r7
      0000A5 F0               [24]  535 	movx	@dptr,a
      0000A6 80 04            [24]  536 	sjmp	00103$
      0000A8                        537 00102$:
                                    538 ;	_ser.c:140: ser_txBusy = 1;
      0000A8 D2*00            [12]  539 	setb	_ser_txBusy
                                    540 ;	_ser.c:141: SBUF = c;
      0000AA 8F 99            [24]  541 	mov	_SBUF,r7
      0000AC                        542 00103$:
                                    543 ;	_ser.c:144: ES=1;
      0000AC D2 AC            [12]  544 	setb	_ES
      0000AE 22               [24]  545 	ret
                                    546 ;------------------------------------------------------------
                                    547 ;Allocation info for local variables in function 'ser_getc'
                                    548 ;------------------------------------------------------------
                                    549 ;tmp                       Allocated to registers r7 
                                    550 ;------------------------------------------------------------
                                    551 ;	_ser.c:148: ser_getc(void)
                                    552 ;	-----------------------------------------
                                    553 ;	 function ser_getc
                                    554 ;	-----------------------------------------
      0000AF                        555 _ser_getc:
                                    556 ;	_ser.c:153: if (ser_rxIndexIn != ser_rxIndexOut) {
      0000AF 90r00r02         [24]  557 	mov	dptr,#_ser_rxIndexIn
      0000B2 E0               [24]  558 	movx	a,@dptr
      0000B3 FF               [12]  559 	mov	r7,a
      0000B4 90r00r03         [24]  560 	mov	dptr,#_ser_rxIndexOut
      0000B7 E0               [24]  561 	movx	a,@dptr
      0000B8 FE               [12]  562 	mov	r6,a
      0000B9 EF               [12]  563 	mov	a,r7
      0000BA B5 06 02         [24]  564 	cjne	a,ar6,00109$
      0000BD 80 14            [24]  565 	sjmp	00102$
      0000BF                        566 00109$:
                                    567 ;	_ser.c:154: tmp = ser_rxBuffer[ser_rxIndexOut++];
      0000BF 90r00r03         [24]  568 	mov	dptr,#_ser_rxIndexOut
      0000C2 EE               [12]  569 	mov	a,r6
      0000C3 04               [12]  570 	inc	a
      0000C4 F0               [24]  571 	movx	@dptr,a
      0000C5 EE               [12]  572 	mov	a,r6
      0000C6 24r04            [12]  573 	add	a,#_ser_rxBuffer
      0000C8 F5 82            [12]  574 	mov	dpl,a
      0000CA E4               [12]  575 	clr	a
      0000CB 34s01            [12]  576 	addc	a,#(_ser_rxBuffer >> 8)
      0000CD F5 83            [12]  577 	mov	dph,a
      0000CF E0               [24]  578 	movx	a,@dptr
      0000D0 FF               [12]  579 	mov	r7,a
      0000D1 80 02            [24]  580 	sjmp	00103$
      0000D3                        581 00102$:
                                    582 ;	_ser.c:157: tmp = 0;
      0000D3 7F 00            [12]  583 	mov	r7,#0x00
      0000D5                        584 00103$:
                                    585 ;	_ser.c:161: return(tmp);
      0000D5 8F 82            [24]  586 	mov	dpl,r7
      0000D7 22               [24]  587 	ret
                                    588 ;------------------------------------------------------------
                                    589 ;Allocation info for local variables in function 'ser_printString'
                                    590 ;------------------------------------------------------------
                                    591 ;String                    Allocated to registers 
                                    592 ;------------------------------------------------------------
                                    593 ;	_ser.c:165: ser_printString(char *String)
                                    594 ;	-----------------------------------------
                                    595 ;	 function ser_printString
                                    596 ;	-----------------------------------------
      0000D8                        597 _ser_printString:
      0000D8 AD 82            [24]  598 	mov	r5,dpl
      0000DA AE 83            [24]  599 	mov	r6,dph
      0000DC AF F0            [24]  600 	mov	r7,b
                                    601 ;	_ser.c:167: while (*String) {
      0000DE                        602 00101$:
      0000DE 8D 82            [24]  603 	mov	dpl,r5
      0000E0 8E 83            [24]  604 	mov	dph,r6
      0000E2 8F F0            [24]  605 	mov	b,r7
      0000E4 12r00r00         [24]  606 	lcall	__gptrget
      0000E7 FC               [12]  607 	mov	r4,a
      0000E8 60 18            [24]  608 	jz	00104$
                                    609 ;	_ser.c:168: ser_putc(*String++);
      0000EA 8C 82            [24]  610 	mov	dpl,r4
      0000EC 0D               [12]  611 	inc	r5
      0000ED BD 00 01         [24]  612 	cjne	r5,#0x00,00114$
      0000F0 0E               [12]  613 	inc	r6
      0000F1                        614 00114$:
      0000F1 C0 07            [24]  615 	push	ar7
      0000F3 C0 06            [24]  616 	push	ar6
      0000F5 C0 05            [24]  617 	push	ar5
      0000F7 12r00r8C         [24]  618 	lcall	_ser_putc
      0000FA D0 05            [24]  619 	pop	ar5
      0000FC D0 06            [24]  620 	pop	ar6
      0000FE D0 07            [24]  621 	pop	ar7
      000100 80 DC            [24]  622 	sjmp	00101$
      000102                        623 00104$:
      000102 22               [24]  624 	ret
                                    625 ;------------------------------------------------------------
                                    626 ;Allocation info for local variables in function 'ser_charAvail'
                                    627 ;------------------------------------------------------------
                                    628 ;ret                       Allocated to registers r7 
                                    629 ;------------------------------------------------------------
                                    630 ;	_ser.c:173: ser_charAvail(void)
                                    631 ;	-----------------------------------------
                                    632 ;	 function ser_charAvail
                                    633 ;	-----------------------------------------
      000103                        634 _ser_charAvail:
                                    635 ;	_ser.c:175: char ret = 0;
      000103 7F 00            [12]  636 	mov	r7,#0x00
                                    637 ;	_ser.c:177: if (ser_rxIndexIn != ser_rxIndexOut) {
      000105 90r00r02         [24]  638 	mov	dptr,#_ser_rxIndexIn
      000108 E0               [24]  639 	movx	a,@dptr
      000109 FE               [12]  640 	mov	r6,a
      00010A 90r00r03         [24]  641 	mov	dptr,#_ser_rxIndexOut
      00010D E0               [24]  642 	movx	a,@dptr
      00010E FD               [12]  643 	mov	r5,a
      00010F EE               [12]  644 	mov	a,r6
      000110 B5 05 02         [24]  645 	cjne	a,ar5,00108$
      000113 80 02            [24]  646 	sjmp	00102$
      000115                        647 00108$:
                                    648 ;	_ser.c:178: ret = 1;
      000115 7F 01            [12]  649 	mov	r7,#0x01
      000117                        650 00102$:
                                    651 ;	_ser.c:181: return(ret);
      000117 8F 82            [24]  652 	mov	dpl,r7
      000119 22               [24]  653 	ret
                                    654 	.area CSEG    (CODE)
                                    655 	.area CONST   (CODE)
                                    656 	.area XINIT   (CODE)
                                    657 	.area CABS    (ABS,CODE)
