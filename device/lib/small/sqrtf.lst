                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:49 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sqrtf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _ldexpf
                                     13 	.globl _frexpf
                                     14 	.globl _sqrtf
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram 
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; external initialized ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'sqrtf'
                                     94 ;------------------------------------------------------------
                                     95 ;x                         Allocated to registers r4 r5 r6 r7 
                                     96 ;f                         Allocated to stack - _bp +5
                                     97 ;y                         Allocated to stack - _bp +9
                                     98 ;n                         Allocated to stack - _bp +13
                                     99 ;sloc0                     Allocated to stack - _bp +1
                                    100 ;------------------------------------------------------------
                                    101 ;	sqrtf.c:37: float sqrtf(const float x) _FLOAT_FUNC_REENTRANT
                                    102 ;	-----------------------------------------
                                    103 ;	 function sqrtf
                                    104 ;	-----------------------------------------
      000000                        105 _sqrtf:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 C0*00            [24]  114 	push	_bp
      000002 85 81*00         [24]  115 	mov	_bp,sp
      000005 AC 82            [24]  116 	mov	r4,dpl
      000007 AD 83            [24]  117 	mov	r5,dph
      000009 AE F0            [24]  118 	mov	r6,b
      00000B FF               [12]  119 	mov	r7,a
      00000C E5 81            [12]  120 	mov	a,sp
      00000E 24 0E            [12]  121 	add	a,#0x0E
      000010 F5 81            [12]  122 	mov	sp,a
                                    123 ;	sqrtf.c:42: if (x==0.0) return x;
      000012 8C F0            [24]  124 	mov	b,r4
      000014 ED               [12]  125 	mov	a,r5
      000015 42 F0            [12]  126 	orl	b,a
      000017 EE               [12]  127 	mov	a,r6
      000018 42 F0            [12]  128 	orl	b,a
      00001A EF               [12]  129 	mov	a,r7
      00001B 54 7F            [12]  130 	anl	a,#0x7F
      00001D 45 F0            [12]  131 	orl	a,b
      00001F 70 0A            [24]  132 	jnz	00107$
      000021 8C 82            [24]  133 	mov	dpl,r4
      000023 8D 83            [24]  134 	mov	dph,r5
      000025 8E F0            [24]  135 	mov	b,r6
      000027 EF               [12]  136 	mov	a,r7
      000028 02r02rAE         [24]  137 	ljmp	00111$
      00002B                        138 00107$:
                                    139 ;	sqrtf.c:43: else if (x==1.0) return 1.0;
      00002B C0 07            [24]  140 	push	ar7
      00002D C0 06            [24]  141 	push	ar6
      00002F C0 05            [24]  142 	push	ar5
      000031 C0 04            [24]  143 	push	ar4
      000033 E4               [12]  144 	clr	a
      000034 C0 E0            [24]  145 	push	acc
      000036 C0 E0            [24]  146 	push	acc
      000038 74 80            [12]  147 	mov	a,#0x80
      00003A C0 E0            [24]  148 	push	acc
      00003C 74 3F            [12]  149 	mov	a,#0x3F
      00003E C0 E0            [24]  150 	push	acc
      000040 8C 82            [24]  151 	mov	dpl,r4
      000042 8D 83            [24]  152 	mov	dph,r5
      000044 8E F0            [24]  153 	mov	b,r6
      000046 EF               [12]  154 	mov	a,r7
      000047 12r00r00         [24]  155 	lcall	___fseq
      00004A AB 82            [24]  156 	mov	r3,dpl
      00004C E5 81            [12]  157 	mov	a,sp
      00004E 24 FC            [12]  158 	add	a,#0xfc
      000050 F5 81            [12]  159 	mov	sp,a
      000052 D0 04            [24]  160 	pop	ar4
      000054 D0 05            [24]  161 	pop	ar5
      000056 D0 06            [24]  162 	pop	ar6
      000058 D0 07            [24]  163 	pop	ar7
      00005A EB               [12]  164 	mov	a,r3
      00005B 60 0B            [24]  165 	jz	00104$
      00005D 90 00 00         [24]  166 	mov	dptr,#0x0000
      000060 75 F0 80         [24]  167 	mov	b,#0x80
      000063 74 3F            [12]  168 	mov	a,#0x3F
      000065 02r02rAE         [24]  169 	ljmp	00111$
      000068                        170 00104$:
                                    171 ;	sqrtf.c:44: else if (x<0.0)
      000068 C0 07            [24]  172 	push	ar7
      00006A C0 06            [24]  173 	push	ar6
      00006C C0 05            [24]  174 	push	ar5
      00006E C0 04            [24]  175 	push	ar4
      000070 E4               [12]  176 	clr	a
      000071 C0 E0            [24]  177 	push	acc
      000073 C0 E0            [24]  178 	push	acc
      000075 C0 E0            [24]  179 	push	acc
      000077 C0 E0            [24]  180 	push	acc
      000079 8C 82            [24]  181 	mov	dpl,r4
      00007B 8D 83            [24]  182 	mov	dph,r5
      00007D 8E F0            [24]  183 	mov	b,r6
      00007F EF               [12]  184 	mov	a,r7
      000080 12r00r00         [24]  185 	lcall	___fslt
      000083 AB 82            [24]  186 	mov	r3,dpl
      000085 E5 81            [12]  187 	mov	a,sp
      000087 24 FC            [12]  188 	add	a,#0xfc
      000089 F5 81            [12]  189 	mov	sp,a
      00008B D0 04            [24]  190 	pop	ar4
      00008D D0 05            [24]  191 	pop	ar5
      00008F D0 06            [24]  192 	pop	ar6
      000091 D0 07            [24]  193 	pop	ar7
      000093 EB               [12]  194 	mov	a,r3
      000094 60 0F            [24]  195 	jz	00108$
                                    196 ;	sqrtf.c:46: errno=EDOM;
      000096 75*00 21         [24]  197 	mov	_errno,#0x21
      000099 75*01 00         [24]  198 	mov	(_errno + 1),#0x00
                                    199 ;	sqrtf.c:47: return 0.0;
      00009C 90 00 00         [24]  200 	mov	dptr,#(0x00&0x00ff)
      00009F E4               [12]  201 	clr	a
      0000A0 F5 F0            [12]  202 	mov	b,a
      0000A2 02r02rAE         [24]  203 	ljmp	00111$
      0000A5                        204 00108$:
                                    205 ;	sqrtf.c:49: f=frexpf(x, &n);
      0000A5 E5*00            [12]  206 	mov	a,_bp
      0000A7 24 0D            [12]  207 	add	a,#0x0D
      0000A9 FB               [12]  208 	mov	r3,a
      0000AA 8B*00            [24]  209 	mov	_frexpf_PARM_2,r3
      0000AC 75*01 00         [24]  210 	mov	(_frexpf_PARM_2 + 1),#0x00
      0000AF 75*02 40         [24]  211 	mov	(_frexpf_PARM_2 + 2),#0x40
      0000B2 8C 82            [24]  212 	mov	dpl,r4
      0000B4 8D 83            [24]  213 	mov	dph,r5
      0000B6 8E F0            [24]  214 	mov	b,r6
      0000B8 EF               [12]  215 	mov	a,r7
      0000B9 12r00r00         [24]  216 	lcall	_frexpf
      0000BC AC 82            [24]  217 	mov	r4,dpl
      0000BE AD 83            [24]  218 	mov	r5,dph
      0000C0 AE F0            [24]  219 	mov	r6,b
      0000C2 FF               [12]  220 	mov	r7,a
      0000C3 E5*00            [12]  221 	mov	a,_bp
      0000C5 24 05            [12]  222 	add	a,#0x05
      0000C7 F8               [12]  223 	mov	r0,a
      0000C8 A6 04            [24]  224 	mov	@r0,ar4
      0000CA 08               [12]  225 	inc	r0
      0000CB A6 05            [24]  226 	mov	@r0,ar5
      0000CD 08               [12]  227 	inc	r0
      0000CE A6 06            [24]  228 	mov	@r0,ar6
      0000D0 08               [12]  229 	inc	r0
      0000D1 A6 07            [24]  230 	mov	@r0,ar7
                                    231 ;	sqrtf.c:50: y=0.41731+0.59016*f; /*Educated guess*/
      0000D3 E5*00            [12]  232 	mov	a,_bp
      0000D5 24 05            [12]  233 	add	a,#0x05
      0000D7 F8               [12]  234 	mov	r0,a
      0000D8 E6               [12]  235 	mov	a,@r0
      0000D9 C0 E0            [24]  236 	push	acc
      0000DB 08               [12]  237 	inc	r0
      0000DC E6               [12]  238 	mov	a,@r0
      0000DD C0 E0            [24]  239 	push	acc
      0000DF 08               [12]  240 	inc	r0
      0000E0 E6               [12]  241 	mov	a,@r0
      0000E1 C0 E0            [24]  242 	push	acc
      0000E3 08               [12]  243 	inc	r0
      0000E4 E6               [12]  244 	mov	a,@r0
      0000E5 C0 E0            [24]  245 	push	acc
      0000E7 90 14 BA         [24]  246 	mov	dptr,#0x14BA
      0000EA 75 F0 17         [24]  247 	mov	b,#0x17
      0000ED 74 3F            [12]  248 	mov	a,#0x3F
      0000EF 12r00r00         [24]  249 	lcall	___fsmul
      0000F2 AA 82            [24]  250 	mov	r2,dpl
      0000F4 AB 83            [24]  251 	mov	r3,dph
      0000F6 AE F0            [24]  252 	mov	r6,b
      0000F8 FF               [12]  253 	mov	r7,a
      0000F9 E5 81            [12]  254 	mov	a,sp
      0000FB 24 FC            [12]  255 	add	a,#0xfc
      0000FD F5 81            [12]  256 	mov	sp,a
      0000FF 74 A8            [12]  257 	mov	a,#0xA8
      000101 C0 E0            [24]  258 	push	acc
      000103 04               [12]  259 	inc	a
      000104 C0 E0            [24]  260 	push	acc
      000106 74 D5            [12]  261 	mov	a,#0xD5
      000108 C0 E0            [24]  262 	push	acc
      00010A 74 3E            [12]  263 	mov	a,#0x3E
      00010C C0 E0            [24]  264 	push	acc
      00010E 8A 82            [24]  265 	mov	dpl,r2
      000110 8B 83            [24]  266 	mov	dph,r3
      000112 8E F0            [24]  267 	mov	b,r6
      000114 EF               [12]  268 	mov	a,r7
      000115 12r00r00         [24]  269 	lcall	___fsadd
      000118 AC 82            [24]  270 	mov	r4,dpl
      00011A AD 83            [24]  271 	mov	r5,dph
      00011C AE F0            [24]  272 	mov	r6,b
      00011E FF               [12]  273 	mov	r7,a
      00011F E5 81            [12]  274 	mov	a,sp
      000121 24 FC            [12]  275 	add	a,#0xfc
      000123 F5 81            [12]  276 	mov	sp,a
      000125 E5*00            [12]  277 	mov	a,_bp
      000127 24 09            [12]  278 	add	a,#0x09
      000129 F8               [12]  279 	mov	r0,a
      00012A A6 04            [24]  280 	mov	@r0,ar4
      00012C 08               [12]  281 	inc	r0
      00012D A6 05            [24]  282 	mov	@r0,ar5
      00012F 08               [12]  283 	inc	r0
      000130 A6 06            [24]  284 	mov	@r0,ar6
      000132 08               [12]  285 	inc	r0
      000133 A6 07            [24]  286 	mov	@r0,ar7
                                    287 ;	sqrtf.c:52: y+=f/y;
      000135 E5*00            [12]  288 	mov	a,_bp
      000137 24 09            [12]  289 	add	a,#0x09
      000139 F8               [12]  290 	mov	r0,a
      00013A E6               [12]  291 	mov	a,@r0
      00013B C0 E0            [24]  292 	push	acc
      00013D 08               [12]  293 	inc	r0
      00013E E6               [12]  294 	mov	a,@r0
      00013F C0 E0            [24]  295 	push	acc
      000141 08               [12]  296 	inc	r0
      000142 E6               [12]  297 	mov	a,@r0
      000143 C0 E0            [24]  298 	push	acc
      000145 08               [12]  299 	inc	r0
      000146 E6               [12]  300 	mov	a,@r0
      000147 C0 E0            [24]  301 	push	acc
      000149 E5*00            [12]  302 	mov	a,_bp
      00014B 24 05            [12]  303 	add	a,#0x05
      00014D F8               [12]  304 	mov	r0,a
      00014E 86 82            [24]  305 	mov	dpl,@r0
      000150 08               [12]  306 	inc	r0
      000151 86 83            [24]  307 	mov	dph,@r0
      000153 08               [12]  308 	inc	r0
      000154 86 F0            [24]  309 	mov	b,@r0
      000156 08               [12]  310 	inc	r0
      000157 E6               [12]  311 	mov	a,@r0
      000158 12r00r00         [24]  312 	lcall	___fsdiv
      00015B AA 82            [24]  313 	mov	r2,dpl
      00015D AB 83            [24]  314 	mov	r3,dph
      00015F AE F0            [24]  315 	mov	r6,b
      000161 FF               [12]  316 	mov	r7,a
      000162 E5 81            [12]  317 	mov	a,sp
      000164 24 FC            [12]  318 	add	a,#0xfc
      000166 F5 81            [12]  319 	mov	sp,a
      000168 C0 02            [24]  320 	push	ar2
      00016A C0 03            [24]  321 	push	ar3
      00016C C0 06            [24]  322 	push	ar6
      00016E C0 07            [24]  323 	push	ar7
      000170 E5*00            [12]  324 	mov	a,_bp
      000172 24 09            [12]  325 	add	a,#0x09
      000174 F8               [12]  326 	mov	r0,a
      000175 86 82            [24]  327 	mov	dpl,@r0
      000177 08               [12]  328 	inc	r0
      000178 86 83            [24]  329 	mov	dph,@r0
      00017A 08               [12]  330 	inc	r0
      00017B 86 F0            [24]  331 	mov	b,@r0
      00017D 08               [12]  332 	inc	r0
      00017E E6               [12]  333 	mov	a,@r0
      00017F 12r00r00         [24]  334 	lcall	___fsadd
      000182 AC 82            [24]  335 	mov	r4,dpl
      000184 AD 83            [24]  336 	mov	r5,dph
      000186 AE F0            [24]  337 	mov	r6,b
      000188 FF               [12]  338 	mov	r7,a
      000189 E5 81            [12]  339 	mov	a,sp
      00018B 24 FC            [12]  340 	add	a,#0xfc
      00018D F5 81            [12]  341 	mov	sp,a
      00018F E5*00            [12]  342 	mov	a,_bp
      000191 24 09            [12]  343 	add	a,#0x09
      000193 F8               [12]  344 	mov	r0,a
      000194 A6 04            [24]  345 	mov	@r0,ar4
      000196 08               [12]  346 	inc	r0
      000197 A6 05            [24]  347 	mov	@r0,ar5
      000199 08               [12]  348 	inc	r0
      00019A A6 06            [24]  349 	mov	@r0,ar6
      00019C 08               [12]  350 	inc	r0
      00019D A6 07            [24]  351 	mov	@r0,ar7
                                    352 ;	sqrtf.c:53: y=ldexpf(y, -2) + f/y; /*Faster version of 0.25 * y + f/y*/
      00019F 75*00 FE         [24]  353 	mov	_ldexpf_PARM_2,#0xFE
      0001A2 75*01 FF         [24]  354 	mov	(_ldexpf_PARM_2 + 1),#0xFF
      0001A5 E5*00            [12]  355 	mov	a,_bp
      0001A7 24 09            [12]  356 	add	a,#0x09
      0001A9 F8               [12]  357 	mov	r0,a
      0001AA 86 82            [24]  358 	mov	dpl,@r0
      0001AC 08               [12]  359 	inc	r0
      0001AD 86 83            [24]  360 	mov	dph,@r0
      0001AF 08               [12]  361 	inc	r0
      0001B0 86 F0            [24]  362 	mov	b,@r0
      0001B2 08               [12]  363 	inc	r0
      0001B3 E6               [12]  364 	mov	a,@r0
      0001B4 12r00r00         [24]  365 	lcall	_ldexpf
      0001B7 A8*00            [24]  366 	mov	r0,_bp
      0001B9 08               [12]  367 	inc	r0
      0001BA A6 82            [24]  368 	mov	@r0,dpl
      0001BC 08               [12]  369 	inc	r0
      0001BD A6 83            [24]  370 	mov	@r0,dph
      0001BF 08               [12]  371 	inc	r0
      0001C0 A6 F0            [24]  372 	mov	@r0,b
      0001C2 08               [12]  373 	inc	r0
      0001C3 F6               [12]  374 	mov	@r0,a
      0001C4 E5*00            [12]  375 	mov	a,_bp
      0001C6 24 09            [12]  376 	add	a,#0x09
      0001C8 F8               [12]  377 	mov	r0,a
      0001C9 E6               [12]  378 	mov	a,@r0
      0001CA C0 E0            [24]  379 	push	acc
      0001CC 08               [12]  380 	inc	r0
      0001CD E6               [12]  381 	mov	a,@r0
      0001CE C0 E0            [24]  382 	push	acc
      0001D0 08               [12]  383 	inc	r0
      0001D1 E6               [12]  384 	mov	a,@r0
      0001D2 C0 E0            [24]  385 	push	acc
      0001D4 08               [12]  386 	inc	r0
      0001D5 E6               [12]  387 	mov	a,@r0
      0001D6 C0 E0            [24]  388 	push	acc
      0001D8 E5*00            [12]  389 	mov	a,_bp
      0001DA 24 05            [12]  390 	add	a,#0x05
      0001DC F8               [12]  391 	mov	r0,a
      0001DD 86 82            [24]  392 	mov	dpl,@r0
      0001DF 08               [12]  393 	inc	r0
      0001E0 86 83            [24]  394 	mov	dph,@r0
      0001E2 08               [12]  395 	inc	r0
      0001E3 86 F0            [24]  396 	mov	b,@r0
      0001E5 08               [12]  397 	inc	r0
      0001E6 E6               [12]  398 	mov	a,@r0
      0001E7 12r00r00         [24]  399 	lcall	___fsdiv
      0001EA AA 82            [24]  400 	mov	r2,dpl
      0001EC AB 83            [24]  401 	mov	r3,dph
      0001EE AE F0            [24]  402 	mov	r6,b
      0001F0 FF               [12]  403 	mov	r7,a
      0001F1 E5 81            [12]  404 	mov	a,sp
      0001F3 24 FC            [12]  405 	add	a,#0xfc
      0001F5 F5 81            [12]  406 	mov	sp,a
      0001F7 C0 02            [24]  407 	push	ar2
      0001F9 C0 03            [24]  408 	push	ar3
      0001FB C0 06            [24]  409 	push	ar6
      0001FD C0 07            [24]  410 	push	ar7
      0001FF A8*00            [24]  411 	mov	r0,_bp
      000201 08               [12]  412 	inc	r0
      000202 86 82            [24]  413 	mov	dpl,@r0
      000204 08               [12]  414 	inc	r0
      000205 86 83            [24]  415 	mov	dph,@r0
      000207 08               [12]  416 	inc	r0
      000208 86 F0            [24]  417 	mov	b,@r0
      00020A 08               [12]  418 	inc	r0
      00020B E6               [12]  419 	mov	a,@r0
      00020C 12r00r00         [24]  420 	lcall	___fsadd
      00020F AC 82            [24]  421 	mov	r4,dpl
      000211 AD 83            [24]  422 	mov	r5,dph
      000213 AE F0            [24]  423 	mov	r6,b
      000215 FF               [12]  424 	mov	r7,a
      000216 E5 81            [12]  425 	mov	a,sp
      000218 24 FC            [12]  426 	add	a,#0xfc
      00021A F5 81            [12]  427 	mov	sp,a
      00021C E5*00            [12]  428 	mov	a,_bp
      00021E 24 09            [12]  429 	add	a,#0x09
      000220 F8               [12]  430 	mov	r0,a
      000221 A6 04            [24]  431 	mov	@r0,ar4
      000223 08               [12]  432 	inc	r0
      000224 A6 05            [24]  433 	mov	@r0,ar5
      000226 08               [12]  434 	inc	r0
      000227 A6 06            [24]  435 	mov	@r0,ar6
      000229 08               [12]  436 	inc	r0
      00022A A6 07            [24]  437 	mov	@r0,ar7
                                    438 ;	sqrtf.c:55: if (n&1)
      00022C E5*00            [12]  439 	mov	a,_bp
      00022E 24 0D            [12]  440 	add	a,#0x0d
      000230 F8               [12]  441 	mov	r0,a
      000231 E6               [12]  442 	mov	a,@r0
      000232 30 E0 47         [24]  443 	jnb	acc.0,00110$
                                    444 ;	sqrtf.c:57: y*=0.7071067812;
      000235 E5*00            [12]  445 	mov	a,_bp
      000237 24 09            [12]  446 	add	a,#0x09
      000239 F8               [12]  447 	mov	r0,a
      00023A E6               [12]  448 	mov	a,@r0
      00023B C0 E0            [24]  449 	push	acc
      00023D 08               [12]  450 	inc	r0
      00023E E6               [12]  451 	mov	a,@r0
      00023F C0 E0            [24]  452 	push	acc
      000241 08               [12]  453 	inc	r0
      000242 E6               [12]  454 	mov	a,@r0
      000243 C0 E0            [24]  455 	push	acc
      000245 08               [12]  456 	inc	r0
      000246 E6               [12]  457 	mov	a,@r0
      000247 C0 E0            [24]  458 	push	acc
      000249 90 04 F3         [24]  459 	mov	dptr,#0x04F3
      00024C 75 F0 35         [24]  460 	mov	b,#0x35
      00024F 74 3F            [12]  461 	mov	a,#0x3F
      000251 12r00r00         [24]  462 	lcall	___fsmul
      000254 AC 82            [24]  463 	mov	r4,dpl
      000256 AD 83            [24]  464 	mov	r5,dph
      000258 AE F0            [24]  465 	mov	r6,b
      00025A FF               [12]  466 	mov	r7,a
      00025B E5 81            [12]  467 	mov	a,sp
      00025D 24 FC            [12]  468 	add	a,#0xfc
      00025F F5 81            [12]  469 	mov	sp,a
      000261 E5*00            [12]  470 	mov	a,_bp
      000263 24 09            [12]  471 	add	a,#0x09
      000265 F8               [12]  472 	mov	r0,a
      000266 A6 04            [24]  473 	mov	@r0,ar4
      000268 08               [12]  474 	inc	r0
      000269 A6 05            [24]  475 	mov	@r0,ar5
      00026B 08               [12]  476 	inc	r0
      00026C A6 06            [24]  477 	mov	@r0,ar6
      00026E 08               [12]  478 	inc	r0
      00026F A6 07            [24]  479 	mov	@r0,ar7
                                    480 ;	sqrtf.c:58: ++n;
      000271 E5*00            [12]  481 	mov	a,_bp
      000273 24 0D            [12]  482 	add	a,#0x0d
      000275 F8               [12]  483 	mov	r0,a
      000276 06               [12]  484 	inc	@r0
      000277 B6 00 02         [24]  485 	cjne	@r0,#0x00,00129$
      00027A 08               [12]  486 	inc	r0
      00027B 06               [12]  487 	inc	@r0
      00027C                        488 00129$:
      00027C                        489 00110$:
                                    490 ;	sqrtf.c:60: return ldexpf(y, n/2);
      00027C 75*00 02         [24]  491 	mov	__divsint_PARM_2,#0x02
      00027F 75*01 00         [24]  492 	mov	(__divsint_PARM_2 + 1),#0x00
      000282 E5*00            [12]  493 	mov	a,_bp
      000284 24 0D            [12]  494 	add	a,#0x0d
      000286 F8               [12]  495 	mov	r0,a
      000287 86 82            [24]  496 	mov	dpl,@r0
      000289 08               [12]  497 	inc	r0
      00028A 86 83            [24]  498 	mov	dph,@r0
      00028C 12r00r00         [24]  499 	lcall	__divsint
      00028F 85 82*00         [24]  500 	mov	_ldexpf_PARM_2,dpl
      000292 85 83*01         [24]  501 	mov	(_ldexpf_PARM_2 + 1),dph
      000295 E5*00            [12]  502 	mov	a,_bp
      000297 24 09            [12]  503 	add	a,#0x09
      000299 F8               [12]  504 	mov	r0,a
      00029A 86 82            [24]  505 	mov	dpl,@r0
      00029C 08               [12]  506 	inc	r0
      00029D 86 83            [24]  507 	mov	dph,@r0
      00029F 08               [12]  508 	inc	r0
      0002A0 86 F0            [24]  509 	mov	b,@r0
      0002A2 08               [12]  510 	inc	r0
      0002A3 E6               [12]  511 	mov	a,@r0
      0002A4 12r00r00         [24]  512 	lcall	_ldexpf
      0002A7 AC 82            [24]  513 	mov	r4,dpl
      0002A9 AD 83            [24]  514 	mov	r5,dph
      0002AB AE F0            [24]  515 	mov	r6,b
      0002AD FF               [12]  516 	mov	r7,a
      0002AE                        517 00111$:
      0002AE 85*00 81         [24]  518 	mov	sp,_bp
      0002B1 D0*00            [24]  519 	pop	_bp
      0002B3 22               [24]  520 	ret
                                    521 	.area CSEG    (CODE)
                                    522 	.area CONST   (CODE)
                                    523 	.area XINIT   (CODE)
                                    524 	.area CABS    (ABS,CODE)
