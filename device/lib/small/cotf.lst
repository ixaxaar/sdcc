                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:49 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module cotf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tancotf
                                     13 	.globl _fabsf
                                     14 	.globl _cotf
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram 
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; external initialized ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'cotf'
                                     94 ;------------------------------------------------------------
                                     95 ;x                         Allocated to registers r4 r5 r6 r7 
                                     96 ;y                         Allocated to stack - _bp +1
                                     97 ;------------------------------------------------------------
                                     98 ;	cotf.c:37: float cotf(const float x) _FLOAT_FUNC_REENTRANT
                                     99 ;	-----------------------------------------
                                    100 ;	 function cotf
                                    101 ;	-----------------------------------------
      000000                        102 _cotf:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 C0*00            [24]  111 	push	_bp
      000002 85 81*00         [24]  112 	mov	_bp,sp
      000005 AC 82            [24]  113 	mov	r4,dpl
      000007 AD 83            [24]  114 	mov	r5,dph
      000009 AE F0            [24]  115 	mov	r6,b
      00000B FF               [12]  116 	mov	r7,a
      00000C E5 81            [12]  117 	mov	a,sp
      00000E 24 04            [12]  118 	add	a,#0x04
      000010 F5 81            [12]  119 	mov	sp,a
                                    120 ;	cotf.c:41: y=fabsf(x);
      000012 8C 82            [24]  121 	mov	dpl,r4
      000014 8D 83            [24]  122 	mov	dph,r5
      000016 8E F0            [24]  123 	mov	b,r6
      000018 EF               [12]  124 	mov	a,r7
      000019 C0 07            [24]  125 	push	ar7
      00001B C0 06            [24]  126 	push	ar6
      00001D C0 05            [24]  127 	push	ar5
      00001F C0 04            [24]  128 	push	ar4
      000021 12r00r00         [24]  129 	lcall	_fabsf
      000024 A8*00            [24]  130 	mov	r0,_bp
      000026 08               [12]  131 	inc	r0
      000027 A6 82            [24]  132 	mov	@r0,dpl
      000029 08               [12]  133 	inc	r0
      00002A A6 83            [24]  134 	mov	@r0,dph
      00002C 08               [12]  135 	inc	r0
      00002D A6 F0            [24]  136 	mov	@r0,b
      00002F 08               [12]  137 	inc	r0
      000030 F6               [12]  138 	mov	@r0,a
      000031 A8*00            [24]  139 	mov	r0,_bp
      000033 08               [12]  140 	inc	r0
                                    141 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
      000034 74 60            [12]  142 	mov	a,#0x60
      000036 C0 E0            [24]  143 	push	acc
      000038 74 42            [12]  144 	mov	a,#0x42
      00003A C0 E0            [24]  145 	push	acc
      00003C 74 A2            [12]  146 	mov	a,#0xA2
      00003E C0 E0            [24]  147 	push	acc
      000040 74 0D            [12]  148 	mov	a,#0x0D
      000042 C0 E0            [24]  149 	push	acc
      000044 A8*00            [24]  150 	mov	r0,_bp
      000046 08               [12]  151 	inc	r0
      000047 86 82            [24]  152 	mov	dpl,@r0
      000049 08               [12]  153 	inc	r0
      00004A 86 83            [24]  154 	mov	dph,@r0
      00004C 08               [12]  155 	inc	r0
      00004D 86 F0            [24]  156 	mov	b,@r0
      00004F 08               [12]  157 	inc	r0
      000050 E6               [12]  158 	mov	a,@r0
      000051 12r00r00         [24]  159 	lcall	___fslt
      000054 AB 82            [24]  160 	mov	r3,dpl
      000056 E5 81            [12]  161 	mov	a,sp
      000058 24 FC            [12]  162 	add	a,#0xfc
      00005A F5 81            [12]  163 	mov	sp,a
      00005C D0 04            [24]  164 	pop	ar4
      00005E D0 05            [24]  165 	pop	ar5
      000060 D0 06            [24]  166 	pop	ar6
      000062 D0 07            [24]  167 	pop	ar7
      000064 EB               [12]  168 	mov	a,r3
      000065 60 36            [24]  169 	jz	00105$
                                    170 ;	cotf.c:44: errno = ERANGE;
      000067 75*00 22         [24]  171 	mov	_errno,#0x22
                                    172 ;	cotf.c:45: if (x<0.0)
      00006A E4               [12]  173 	clr	a
      00006B F5*01            [12]  174 	mov	(_errno + 1),a
      00006D C0 E0            [24]  175 	push	acc
      00006F C0 E0            [24]  176 	push	acc
      000071 C0 E0            [24]  177 	push	acc
      000073 C0 E0            [24]  178 	push	acc
      000075 8C 82            [24]  179 	mov	dpl,r4
      000077 8D 83            [24]  180 	mov	dph,r5
      000079 8E F0            [24]  181 	mov	b,r6
      00007B EF               [12]  182 	mov	a,r7
      00007C 12r00r00         [24]  183 	lcall	___fslt
      00007F AB 82            [24]  184 	mov	r3,dpl
      000081 E5 81            [12]  185 	mov	a,sp
      000083 24 FC            [12]  186 	add	a,#0xfc
      000085 F5 81            [12]  187 	mov	sp,a
      000087 EB               [12]  188 	mov	a,r3
      000088 60 0A            [24]  189 	jz	00102$
                                    190 ;	cotf.c:46: return -HUGE_VALF;
      00008A 90 FF FF         [24]  191 	mov	dptr,#0xFFFF
      00008D 75 F0 7F         [24]  192 	mov	b,#0x7F
      000090 74 FF            [12]  193 	mov	a,#0xFF
      000092 80 1C            [24]  194 	sjmp	00106$
      000094                        195 00102$:
                                    196 ;	cotf.c:48: return +HUGE_VALF;
      000094 90 FF FF         [24]  197 	mov	dptr,#0xFFFF
      000097 74 7F            [12]  198 	mov	a,#0x7F
      000099 F5 F0            [12]  199 	mov	b,a
      00009B 80 13            [24]  200 	sjmp	00106$
      00009D                        201 00105$:
                                    202 ;	cotf.c:50: return tancotf(x, 1);
      00009D D2*00            [12]  203 	setb	_tancotf_PARM_2
      00009F 8C 82            [24]  204 	mov	dpl,r4
      0000A1 8D 83            [24]  205 	mov	dph,r5
      0000A3 8E F0            [24]  206 	mov	b,r6
      0000A5 EF               [12]  207 	mov	a,r7
      0000A6 12r00r00         [24]  208 	lcall	_tancotf
      0000A9 AC 82            [24]  209 	mov	r4,dpl
      0000AB AD 83            [24]  210 	mov	r5,dph
      0000AD AE F0            [24]  211 	mov	r6,b
      0000AF FF               [12]  212 	mov	r7,a
      0000B0                        213 00106$:
      0000B0 85*00 81         [24]  214 	mov	sp,_bp
      0000B3 D0*00            [24]  215 	pop	_bp
      0000B5 22               [24]  216 	ret
                                    217 	.area CSEG    (CODE)
                                    218 	.area CONST   (CODE)
                                    219 	.area XINIT   (CODE)
                                    220 	.area CABS    (ABS,CODE)
