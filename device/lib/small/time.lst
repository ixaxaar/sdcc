                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:51 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module time
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl ___day
                                     13 	.globl ___month
                                     14 	.globl _RtcRead
                                     15 	.globl _sprintf
                                     16 	.globl _time
                                     17 	.globl _asctime
                                     18 	.globl _ctime
                                     19 	.globl _localtime
                                     20 	.globl _gmtime
                                     21 	.globl _mktime
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; special function bits
                                     29 ;--------------------------------------------------------
                                     30 	.area RSEG    (ABS,DATA)
      000000                         31 	.org 0x0000
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable register banks
                                     34 ;--------------------------------------------------------
                                     35 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         36 	.ds 8
                                     37 ;--------------------------------------------------------
                                     38 ; internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DSEG    (DATA)
      000000                         41 _time_now_1_21:
      000000                         42 	.ds 12
      00000C                         43 _ascTimeBuffer:
      00000C                         44 	.ds 32
      00002C                         45 _asctime_timeptr_1_26:
      00002C                         46 	.ds 3
      00002F                         47 _asctime_sloc0_1_0:
      00002F                         48 	.ds 2
      000031                         49 _asctime_sloc1_1_0:
      000031                         50 	.ds 2
      000033                         51 _asctime_sloc2_1_0:
      000033                         52 	.ds 2
      000035                         53 _asctime_sloc3_1_0:
      000035                         54 	.ds 2
      000037                         55 _lastTime:
      000037                         56 	.ds 12
      000043                         57 _gmtime_epoch_1_33:
      000043                         58 	.ds 4
      000047                         59 _gmtime_days_1_33:
      000047                         60 	.ds 4
      00004B                         61 _gmtime_sloc0_1_0:
      00004B                         62 	.ds 4
      00004F                         63 _mktime_timeptr_1_42:
      00004F                         64 	.ds 3
      000052                         65 _mktime_year_1_43:
      000052                         66 	.ds 2
      000054                         67 _mktime_month_1_43:
      000054                         68 	.ds 2
      000056                         69 _mktime_i_1_43:
      000056                         70 	.ds 2
      000058                         71 _mktime_seconds_1_43:
      000058                         72 	.ds 4
      00005C                         73 _mktime_sloc0_1_0:
      00005C                         74 	.ds 4
                                     75 ;--------------------------------------------------------
                                     76 ; overlayable items in internal ram 
                                     77 ;--------------------------------------------------------
                                     78 	.area	OSEG    (OVR,DATA)
                                     79 	.area	OSEG    (OVR,DATA)
                                     80 ;--------------------------------------------------------
                                     81 ; indirectly addressable internal ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area ISEG    (DATA)
                                     84 ;--------------------------------------------------------
                                     85 ; absolute internal ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area IABS    (ABS,DATA)
                                     88 	.area IABS    (ABS,DATA)
                                     89 ;--------------------------------------------------------
                                     90 ; bit data
                                     91 ;--------------------------------------------------------
                                     92 	.area BSEG    (BIT)
                                     93 ;--------------------------------------------------------
                                     94 ; paged external ram data
                                     95 ;--------------------------------------------------------
                                     96 	.area PSEG    (PAG,XDATA)
                                     97 ;--------------------------------------------------------
                                     98 ; external ram data
                                     99 ;--------------------------------------------------------
                                    100 	.area XSEG    (XDATA)
                                    101 ;--------------------------------------------------------
                                    102 ; absolute external ram data
                                    103 ;--------------------------------------------------------
                                    104 	.area XABS    (ABS,XDATA)
                                    105 ;--------------------------------------------------------
                                    106 ; external initialized ram data
                                    107 ;--------------------------------------------------------
                                    108 	.area XISEG   (XDATA)
                                    109 	.area HOME    (CODE)
                                    110 	.area GSINIT0 (CODE)
                                    111 	.area GSINIT1 (CODE)
                                    112 	.area GSINIT2 (CODE)
                                    113 	.area GSINIT3 (CODE)
                                    114 	.area GSINIT4 (CODE)
                                    115 	.area GSINIT5 (CODE)
                                    116 	.area GSINIT  (CODE)
                                    117 	.area GSFINAL (CODE)
                                    118 	.area CSEG    (CODE)
                                    119 ;--------------------------------------------------------
                                    120 ; global & static initialisations
                                    121 ;--------------------------------------------------------
                                    122 	.area HOME    (CODE)
                                    123 	.area GSINIT  (CODE)
                                    124 	.area GSFINAL (CODE)
                                    125 	.area GSINIT  (CODE)
                                    126 ;--------------------------------------------------------
                                    127 ; Home
                                    128 ;--------------------------------------------------------
                                    129 	.area HOME    (CODE)
                                    130 	.area HOME    (CODE)
                                    131 ;--------------------------------------------------------
                                    132 ; code
                                    133 ;--------------------------------------------------------
                                    134 	.area CSEG    (CODE)
                                    135 ;------------------------------------------------------------
                                    136 ;Allocation info for local variables in function 'RtcRead'
                                    137 ;------------------------------------------------------------
                                    138 ;timeptr                   Allocated to registers 
                                    139 ;------------------------------------------------------------
                                    140 ;	time.c:42: unsigned char RtcRead(struct tm *timeptr) {
                                    141 ;	-----------------------------------------
                                    142 ;	 function RtcRead
                                    143 ;	-----------------------------------------
      000000                        144 _RtcRead:
                           000007   145 	ar7 = 0x07
                           000006   146 	ar6 = 0x06
                           000005   147 	ar5 = 0x05
                           000004   148 	ar4 = 0x04
                           000003   149 	ar3 = 0x03
                           000002   150 	ar2 = 0x02
                           000001   151 	ar1 = 0x01
                           000000   152 	ar0 = 0x00
                                    153 ;	time.c:45: return 0;
      000000 75 82 00         [24]  154 	mov	dpl,#0x00
      000003 22               [24]  155 	ret
                                    156 ;------------------------------------------------------------
                                    157 ;Allocation info for local variables in function 'time'
                                    158 ;------------------------------------------------------------
                                    159 ;timeptr                   Allocated to registers r5 r6 r7 
                                    160 ;now                       Allocated with name '_time_now_1_21'
                                    161 ;t                         Allocated to registers r1 r2 r3 r4 
                                    162 ;------------------------------------------------------------
                                    163 ;	time.c:50: time_t time(time_t *timeptr) {
                                    164 ;	-----------------------------------------
                                    165 ;	 function time
                                    166 ;	-----------------------------------------
      000004                        167 _time:
      000004 AD 82            [24]  168 	mov	r5,dpl
      000006 AE 83            [24]  169 	mov	r6,dph
      000008 AF F0            [24]  170 	mov	r7,b
                                    171 ;	time.c:52: time_t t=-1;
      00000A 79 FF            [12]  172 	mov	r1,#0xFF
      00000C 7A FF            [12]  173 	mov	r2,#0xFF
      00000E 7B FF            [12]  174 	mov	r3,#0xFF
      000010 7C FF            [12]  175 	mov	r4,#0xFF
                                    176 ;	time.c:54: if (RtcRead(&now)) {
      000012 90r00r00         [24]  177 	mov	dptr,#_time_now_1_21
      000015 75 F0 40         [24]  178 	mov	b,#0x40
      000018 C0 07            [24]  179 	push	ar7
      00001A C0 06            [24]  180 	push	ar6
      00001C C0 05            [24]  181 	push	ar5
      00001E C0 04            [24]  182 	push	ar4
      000020 C0 03            [24]  183 	push	ar3
      000022 C0 02            [24]  184 	push	ar2
      000024 C0 01            [24]  185 	push	ar1
      000026 12r00r00         [24]  186 	lcall	_RtcRead
      000029 E5 82            [12]  187 	mov	a,dpl
      00002B D0 01            [24]  188 	pop	ar1
      00002D D0 02            [24]  189 	pop	ar2
      00002F D0 03            [24]  190 	pop	ar3
      000031 D0 04            [24]  191 	pop	ar4
      000033 D0 05            [24]  192 	pop	ar5
      000035 D0 06            [24]  193 	pop	ar6
      000037 D0 07            [24]  194 	pop	ar7
      000039 60 1C            [24]  195 	jz	00102$
                                    196 ;	time.c:55: t=mktime(&now);
      00003B 90r00r00         [24]  197 	mov	dptr,#_time_now_1_21
      00003E 75 F0 40         [24]  198 	mov	b,#0x40
      000041 C0 07            [24]  199 	push	ar7
      000043 C0 06            [24]  200 	push	ar6
      000045 C0 05            [24]  201 	push	ar5
      000047 12r04rD0         [24]  202 	lcall	_mktime
      00004A A9 82            [24]  203 	mov	r1,dpl
      00004C AA 83            [24]  204 	mov	r2,dph
      00004E AB F0            [24]  205 	mov	r3,b
      000050 FC               [12]  206 	mov	r4,a
      000051 D0 05            [24]  207 	pop	ar5
      000053 D0 06            [24]  208 	pop	ar6
      000055 D0 07            [24]  209 	pop	ar7
      000057                        210 00102$:
                                    211 ;	time.c:57: if (timeptr) {
      000057 ED               [12]  212 	mov	a,r5
      000058 4E               [12]  213 	orl	a,r6
      000059 60 19            [24]  214 	jz	00104$
                                    215 ;	time.c:58: *timeptr=t;
      00005B 8D 82            [24]  216 	mov	dpl,r5
      00005D 8E 83            [24]  217 	mov	dph,r6
      00005F 8F F0            [24]  218 	mov	b,r7
      000061 E9               [12]  219 	mov	a,r1
      000062 12r00r00         [24]  220 	lcall	__gptrput
      000065 A3               [24]  221 	inc	dptr
      000066 EA               [12]  222 	mov	a,r2
      000067 12r00r00         [24]  223 	lcall	__gptrput
      00006A A3               [24]  224 	inc	dptr
      00006B EB               [12]  225 	mov	a,r3
      00006C 12r00r00         [24]  226 	lcall	__gptrput
      00006F A3               [24]  227 	inc	dptr
      000070 EC               [12]  228 	mov	a,r4
      000071 12r00r00         [24]  229 	lcall	__gptrput
      000074                        230 00104$:
                                    231 ;	time.c:60: return t;
      000074 89 82            [24]  232 	mov	dpl,r1
      000076 8A 83            [24]  233 	mov	dph,r2
      000078 8B F0            [24]  234 	mov	b,r3
      00007A EC               [12]  235 	mov	a,r4
      00007B 22               [24]  236 	ret
                                    237 ;------------------------------------------------------------
                                    238 ;Allocation info for local variables in function 'CheckTime'
                                    239 ;------------------------------------------------------------
                                    240 ;timeptr                   Allocated to registers r5 r6 r7 
                                    241 ;------------------------------------------------------------
                                    242 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                                    243 ;	-----------------------------------------
                                    244 ;	 function CheckTime
                                    245 ;	-----------------------------------------
      00007C                        246 _CheckTime:
                                    247 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      00007C AD 82            [24]  248 	mov	r5,dpl
      00007E AE 83            [24]  249 	mov	r6,dph
      000080 AF F0            [24]  250 	mov	r7,b
      000082 12r00r00         [24]  251 	lcall	__gptrget
      000085 FC               [12]  252 	mov  r4,a
      000086 24 C4            [12]  253 	add	a,#0xff - 0x3B
      000088 50 0B            [24]  254 	jnc	00102$
      00008A 8D 82            [24]  255 	mov	dpl,r5
      00008C 8E 83            [24]  256 	mov	dph,r6
      00008E 8F F0            [24]  257 	mov	b,r7
      000090 74 3B            [12]  258 	mov	a,#0x3B
      000092 12r00r00         [24]  259 	lcall	__gptrput
      000095                        260 00102$:
                                    261 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      000095 74 01            [12]  262 	mov	a,#0x01
      000097 2D               [12]  263 	add	a,r5
      000098 FA               [12]  264 	mov	r2,a
      000099 E4               [12]  265 	clr	a
      00009A 3E               [12]  266 	addc	a,r6
      00009B FB               [12]  267 	mov	r3,a
      00009C 8F 04            [24]  268 	mov	ar4,r7
      00009E 8A 82            [24]  269 	mov	dpl,r2
      0000A0 8B 83            [24]  270 	mov	dph,r3
      0000A2 8C F0            [24]  271 	mov	b,r4
      0000A4 12r00r00         [24]  272 	lcall	__gptrget
      0000A7 F9               [12]  273 	mov  r1,a
      0000A8 24 C4            [12]  274 	add	a,#0xff - 0x3B
      0000AA 50 0B            [24]  275 	jnc	00104$
      0000AC 8A 82            [24]  276 	mov	dpl,r2
      0000AE 8B 83            [24]  277 	mov	dph,r3
      0000B0 8C F0            [24]  278 	mov	b,r4
      0000B2 74 3B            [12]  279 	mov	a,#0x3B
      0000B4 12r00r00         [24]  280 	lcall	__gptrput
      0000B7                        281 00104$:
                                    282 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      0000B7 74 02            [12]  283 	mov	a,#0x02
      0000B9 2D               [12]  284 	add	a,r5
      0000BA FA               [12]  285 	mov	r2,a
      0000BB E4               [12]  286 	clr	a
      0000BC 3E               [12]  287 	addc	a,r6
      0000BD FB               [12]  288 	mov	r3,a
      0000BE 8F 04            [24]  289 	mov	ar4,r7
      0000C0 8A 82            [24]  290 	mov	dpl,r2
      0000C2 8B 83            [24]  291 	mov	dph,r3
      0000C4 8C F0            [24]  292 	mov	b,r4
      0000C6 12r00r00         [24]  293 	lcall	__gptrget
      0000C9 F9               [12]  294 	mov  r1,a
      0000CA 24 E8            [12]  295 	add	a,#0xff - 0x17
      0000CC 50 0B            [24]  296 	jnc	00106$
      0000CE 8A 82            [24]  297 	mov	dpl,r2
      0000D0 8B 83            [24]  298 	mov	dph,r3
      0000D2 8C F0            [24]  299 	mov	b,r4
      0000D4 74 17            [12]  300 	mov	a,#0x17
      0000D6 12r00r00         [24]  301 	lcall	__gptrput
      0000D9                        302 00106$:
                                    303 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      0000D9 74 07            [12]  304 	mov	a,#0x07
      0000DB 2D               [12]  305 	add	a,r5
      0000DC FA               [12]  306 	mov	r2,a
      0000DD E4               [12]  307 	clr	a
      0000DE 3E               [12]  308 	addc	a,r6
      0000DF FB               [12]  309 	mov	r3,a
      0000E0 8F 04            [24]  310 	mov	ar4,r7
      0000E2 8A 82            [24]  311 	mov	dpl,r2
      0000E4 8B 83            [24]  312 	mov	dph,r3
      0000E6 8C F0            [24]  313 	mov	b,r4
      0000E8 12r00r00         [24]  314 	lcall	__gptrget
      0000EB F9               [12]  315 	mov  r1,a
      0000EC 24 F9            [12]  316 	add	a,#0xff - 0x06
      0000EE 50 0B            [24]  317 	jnc	00108$
      0000F0 8A 82            [24]  318 	mov	dpl,r2
      0000F2 8B 83            [24]  319 	mov	dph,r3
      0000F4 8C F0            [24]  320 	mov	b,r4
      0000F6 74 06            [12]  321 	mov	a,#0x06
      0000F8 12r00r00         [24]  322 	lcall	__gptrput
      0000FB                        323 00108$:
                                    324 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      0000FB 74 03            [12]  325 	mov	a,#0x03
      0000FD 2D               [12]  326 	add	a,r5
      0000FE FA               [12]  327 	mov	r2,a
      0000FF E4               [12]  328 	clr	a
      000100 3E               [12]  329 	addc	a,r6
      000101 FB               [12]  330 	mov	r3,a
      000102 8F 04            [24]  331 	mov	ar4,r7
      000104 8A 82            [24]  332 	mov	dpl,r2
      000106 8B 83            [24]  333 	mov	dph,r3
      000108 8C F0            [24]  334 	mov	b,r4
      00010A 12r00r00         [24]  335 	lcall	__gptrget
      00010D F9               [12]  336 	mov	r1,a
      00010E B9 01 00         [24]  337 	cjne	r1,#0x01,00148$
      000111                        338 00148$:
      000111 50 0D            [24]  339 	jnc	00112$
      000113 8A 82            [24]  340 	mov	dpl,r2
      000115 8B 83            [24]  341 	mov	dph,r3
      000117 8C F0            [24]  342 	mov	b,r4
      000119 74 01            [12]  343 	mov	a,#0x01
      00011B 12r00r00         [24]  344 	lcall	__gptrput
      00011E 80 10            [24]  345 	sjmp	00113$
      000120                        346 00112$:
                                    347 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000120 E9               [12]  348 	mov	a,r1
      000121 24 E0            [12]  349 	add	a,#0xff - 0x1F
      000123 50 0B            [24]  350 	jnc	00113$
      000125 8A 82            [24]  351 	mov	dpl,r2
      000127 8B 83            [24]  352 	mov	dph,r3
      000129 8C F0            [24]  353 	mov	b,r4
      00012B 74 1F            [12]  354 	mov	a,#0x1F
      00012D 12r00r00         [24]  355 	lcall	__gptrput
      000130                        356 00113$:
                                    357 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      000130 74 04            [12]  358 	mov	a,#0x04
      000132 2D               [12]  359 	add	a,r5
      000133 FA               [12]  360 	mov	r2,a
      000134 E4               [12]  361 	clr	a
      000135 3E               [12]  362 	addc	a,r6
      000136 FB               [12]  363 	mov	r3,a
      000137 8F 04            [24]  364 	mov	ar4,r7
      000139 8A 82            [24]  365 	mov	dpl,r2
      00013B 8B 83            [24]  366 	mov	dph,r3
      00013D 8C F0            [24]  367 	mov	b,r4
      00013F 12r00r00         [24]  368 	lcall	__gptrget
      000142 F9               [12]  369 	mov  r1,a
      000143 24 F4            [12]  370 	add	a,#0xff - 0x0B
      000145 50 0B            [24]  371 	jnc	00115$
      000147 8A 82            [24]  372 	mov	dpl,r2
      000149 8B 83            [24]  373 	mov	dph,r3
      00014B 8C F0            [24]  374 	mov	b,r4
      00014D 74 0B            [12]  375 	mov	a,#0x0B
      00014F 12r00r00         [24]  376 	lcall	__gptrput
      000152                        377 00115$:
                                    378 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      000152 74 05            [12]  379 	mov	a,#0x05
      000154 2D               [12]  380 	add	a,r5
      000155 FD               [12]  381 	mov	r5,a
      000156 E4               [12]  382 	clr	a
      000157 3E               [12]  383 	addc	a,r6
      000158 FE               [12]  384 	mov	r6,a
      000159 8D 82            [24]  385 	mov	dpl,r5
      00015B 8E 83            [24]  386 	mov	dph,r6
      00015D 8F F0            [24]  387 	mov	b,r7
      00015F 12r00r00         [24]  388 	lcall	__gptrget
      000162 FB               [12]  389 	mov	r3,a
      000163 A3               [24]  390 	inc	dptr
      000164 12r00r00         [24]  391 	lcall	__gptrget
      000167 FC               [12]  392 	mov	r4,a
      000168 30 E7 0E         [24]  393 	jnb	acc.7,00118$
      00016B 8D 82            [24]  394 	mov	dpl,r5
      00016D 8E 83            [24]  395 	mov	dph,r6
      00016F 8F F0            [24]  396 	mov	b,r7
      000171 E4               [12]  397 	clr	a
      000172 12r00r00         [24]  398 	lcall	__gptrput
      000175 A3               [24]  399 	inc	dptr
      000176 02r00r00         [24]  400 	ljmp	__gptrput
      000179                        401 00118$:
      000179 22               [24]  402 	ret
                                    403 ;------------------------------------------------------------
                                    404 ;Allocation info for local variables in function 'asctime'
                                    405 ;------------------------------------------------------------
                                    406 ;timeptr                   Allocated with name '_asctime_timeptr_1_26'
                                    407 ;sloc0                     Allocated with name '_asctime_sloc0_1_0'
                                    408 ;sloc1                     Allocated with name '_asctime_sloc1_1_0'
                                    409 ;sloc2                     Allocated with name '_asctime_sloc2_1_0'
                                    410 ;sloc3                     Allocated with name '_asctime_sloc3_1_0'
                                    411 ;------------------------------------------------------------
                                    412 ;	time.c:95: char *asctime(struct tm *timeptr) {
                                    413 ;	-----------------------------------------
                                    414 ;	 function asctime
                                    415 ;	-----------------------------------------
      00017A                        416 _asctime:
                                    417 ;	time.c:96: CheckTime(timeptr);
      00017A 85 82*2C         [24]  418 	mov	_asctime_timeptr_1_26,dpl
      00017D 85 83*2D         [24]  419 	mov	(_asctime_timeptr_1_26 + 1),dph
      000180 85 F0*2E         [24]  420 	mov	(_asctime_timeptr_1_26 + 2),b
      000183 12r00r7C         [24]  421 	lcall	_CheckTime
                                    422 ;	time.c:100: timeptr->tm_year+1900);
      000186 74 05            [12]  423 	mov	a,#0x05
      000188 25*2C            [12]  424 	add	a,_asctime_timeptr_1_26
      00018A FA               [12]  425 	mov	r2,a
      00018B E4               [12]  426 	clr	a
      00018C 35*2D            [12]  427 	addc	a,(_asctime_timeptr_1_26 + 1)
      00018E FB               [12]  428 	mov	r3,a
      00018F AC*2E            [24]  429 	mov	r4,(_asctime_timeptr_1_26 + 2)
      000191 8A 82            [24]  430 	mov	dpl,r2
      000193 8B 83            [24]  431 	mov	dph,r3
      000195 8C F0            [24]  432 	mov	b,r4
      000197 12r00r00         [24]  433 	lcall	__gptrget
      00019A FA               [12]  434 	mov	r2,a
      00019B A3               [24]  435 	inc	dptr
      00019C 12r00r00         [24]  436 	lcall	__gptrget
      00019F FB               [12]  437 	mov	r3,a
      0001A0 74 6C            [12]  438 	mov	a,#0x6C
      0001A2 2A               [12]  439 	add	a,r2
      0001A3 FA               [12]  440 	mov	r2,a
      0001A4 74 07            [12]  441 	mov	a,#0x07
      0001A6 3B               [12]  442 	addc	a,r3
      0001A7 FB               [12]  443 	mov	r3,a
                                    444 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0001A8 85*2C 82         [24]  445 	mov	dpl,_asctime_timeptr_1_26
      0001AB 85*2D 83         [24]  446 	mov	dph,(_asctime_timeptr_1_26 + 1)
      0001AE 85*2E F0         [24]  447 	mov	b,(_asctime_timeptr_1_26 + 2)
      0001B1 12r00r00         [24]  448 	lcall	__gptrget
      0001B4 FC               [12]  449 	mov	r4,a
      0001B5 8C*35            [24]  450 	mov	_asctime_sloc3_1_0,r4
      0001B7 75*36 00         [24]  451 	mov	(_asctime_sloc3_1_0 + 1),#0x00
      0001BA 74 01            [12]  452 	mov	a,#0x01
      0001BC 25*2C            [12]  453 	add	a,_asctime_timeptr_1_26
      0001BE F8               [12]  454 	mov	r0,a
      0001BF E4               [12]  455 	clr	a
      0001C0 35*2D            [12]  456 	addc	a,(_asctime_timeptr_1_26 + 1)
      0001C2 FE               [12]  457 	mov	r6,a
      0001C3 AF*2E            [24]  458 	mov	r7,(_asctime_timeptr_1_26 + 2)
      0001C5 88 82            [24]  459 	mov	dpl,r0
      0001C7 8E 83            [24]  460 	mov	dph,r6
      0001C9 8F F0            [24]  461 	mov	b,r7
      0001CB 12r00r00         [24]  462 	lcall	__gptrget
      0001CE F8               [12]  463 	mov	r0,a
      0001CF 88*2F            [24]  464 	mov	_asctime_sloc0_1_0,r0
      0001D1 75*30 00         [24]  465 	mov	(_asctime_sloc0_1_0 + 1),#0x00
      0001D4 74 02            [12]  466 	mov	a,#0x02
      0001D6 25*2C            [12]  467 	add	a,_asctime_timeptr_1_26
      0001D8 FD               [12]  468 	mov	r5,a
      0001D9 E4               [12]  469 	clr	a
      0001DA 35*2D            [12]  470 	addc	a,(_asctime_timeptr_1_26 + 1)
      0001DC FE               [12]  471 	mov	r6,a
      0001DD AF*2E            [24]  472 	mov	r7,(_asctime_timeptr_1_26 + 2)
      0001DF 8D 82            [24]  473 	mov	dpl,r5
      0001E1 8E 83            [24]  474 	mov	dph,r6
      0001E3 8F F0            [24]  475 	mov	b,r7
      0001E5 12r00r00         [24]  476 	lcall	__gptrget
      0001E8 FD               [12]  477 	mov	r5,a
      0001E9 8D*31            [24]  478 	mov	_asctime_sloc1_1_0,r5
      0001EB 75*32 00         [24]  479 	mov	(_asctime_sloc1_1_0 + 1),#0x00
                                    480 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      0001EE 74 03            [12]  481 	mov	a,#0x03
      0001F0 25*2C            [12]  482 	add	a,_asctime_timeptr_1_26
      0001F2 F8               [12]  483 	mov	r0,a
      0001F3 E4               [12]  484 	clr	a
      0001F4 35*2D            [12]  485 	addc	a,(_asctime_timeptr_1_26 + 1)
      0001F6 FE               [12]  486 	mov	r6,a
      0001F7 AF*2E            [24]  487 	mov	r7,(_asctime_timeptr_1_26 + 2)
      0001F9 88 82            [24]  488 	mov	dpl,r0
      0001FB 8E 83            [24]  489 	mov	dph,r6
      0001FD 8F F0            [24]  490 	mov	b,r7
      0001FF 12r00r00         [24]  491 	lcall	__gptrget
      000202 F8               [12]  492 	mov	r0,a
      000203 88*33            [24]  493 	mov	_asctime_sloc2_1_0,r0
      000205 75*34 00         [24]  494 	mov	(_asctime_sloc2_1_0 + 1),#0x00
      000208 74 04            [12]  495 	mov	a,#0x04
      00020A 25*2C            [12]  496 	add	a,_asctime_timeptr_1_26
      00020C FD               [12]  497 	mov	r5,a
      00020D E4               [12]  498 	clr	a
      00020E 35*2D            [12]  499 	addc	a,(_asctime_timeptr_1_26 + 1)
      000210 FE               [12]  500 	mov	r6,a
      000211 AF*2E            [24]  501 	mov	r7,(_asctime_timeptr_1_26 + 2)
      000213 8D 82            [24]  502 	mov	dpl,r5
      000215 8E 83            [24]  503 	mov	dph,r6
      000217 8F F0            [24]  504 	mov	b,r7
      000219 12r00r00         [24]  505 	lcall	__gptrget
      00021C 75 F0 02         [24]  506 	mov	b,#0x02
      00021F A4               [48]  507 	mul	ab
      000220 24r0C            [12]  508 	add	a,#___month
      000222 F5 82            [12]  509 	mov	dpl,a
      000224 74s00            [12]  510 	mov	a,#(___month >> 8)
      000226 35 F0            [12]  511 	addc	a,b
      000228 F5 83            [12]  512 	mov	dph,a
      00022A E4               [12]  513 	clr	a
      00022B 93               [24]  514 	movc	a,@a+dptr
      00022C FE               [12]  515 	mov	r6,a
      00022D A3               [24]  516 	inc	dptr
      00022E E4               [12]  517 	clr	a
      00022F 93               [24]  518 	movc	a,@a+dptr
      000230 FF               [12]  519 	mov	r7,a
      000231 7D 80            [12]  520 	mov	r5,#0x80
      000233 74 07            [12]  521 	mov	a,#0x07
      000235 25*2C            [12]  522 	add	a,_asctime_timeptr_1_26
      000237 F8               [12]  523 	mov	r0,a
      000238 E4               [12]  524 	clr	a
      000239 35*2D            [12]  525 	addc	a,(_asctime_timeptr_1_26 + 1)
      00023B F9               [12]  526 	mov	r1,a
      00023C AC*2E            [24]  527 	mov	r4,(_asctime_timeptr_1_26 + 2)
      00023E 88 82            [24]  528 	mov	dpl,r0
      000240 89 83            [24]  529 	mov	dph,r1
      000242 8C F0            [24]  530 	mov	b,r4
      000244 12r00r00         [24]  531 	lcall	__gptrget
      000247 75 F0 02         [24]  532 	mov	b,#0x02
      00024A A4               [48]  533 	mul	ab
      00024B 24r24            [12]  534 	add	a,#___day
      00024D F5 82            [12]  535 	mov	dpl,a
      00024F 74s00            [12]  536 	mov	a,#(___day >> 8)
      000251 35 F0            [12]  537 	addc	a,b
      000253 F5 83            [12]  538 	mov	dph,a
      000255 E4               [12]  539 	clr	a
      000256 93               [24]  540 	movc	a,@a+dptr
      000257 F9               [12]  541 	mov	r1,a
      000258 A3               [24]  542 	inc	dptr
      000259 E4               [12]  543 	clr	a
      00025A 93               [24]  544 	movc	a,@a+dptr
      00025B F8               [12]  545 	mov	r0,a
      00025C 7C 80            [12]  546 	mov	r4,#0x80
                                    547 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      00025E C0 02            [24]  548 	push	ar2
      000260 C0 03            [24]  549 	push	ar3
      000262 C0*35            [24]  550 	push	_asctime_sloc3_1_0
      000264 C0*36            [24]  551 	push	(_asctime_sloc3_1_0 + 1)
      000266 C0*2F            [24]  552 	push	_asctime_sloc0_1_0
      000268 C0*30            [24]  553 	push	(_asctime_sloc0_1_0 + 1)
      00026A C0*31            [24]  554 	push	_asctime_sloc1_1_0
      00026C C0*32            [24]  555 	push	(_asctime_sloc1_1_0 + 1)
      00026E C0*33            [24]  556 	push	_asctime_sloc2_1_0
      000270 C0*34            [24]  557 	push	(_asctime_sloc2_1_0 + 1)
      000272 C0 06            [24]  558 	push	ar6
      000274 C0 07            [24]  559 	push	ar7
      000276 C0 05            [24]  560 	push	ar5
      000278 C0 01            [24]  561 	push	ar1
      00027A C0 00            [24]  562 	push	ar0
      00027C C0 04            [24]  563 	push	ar4
      00027E 74r32            [12]  564 	mov	a,#__str_0
      000280 C0 E0            [24]  565 	push	acc
      000282 74s00            [12]  566 	mov	a,#(__str_0 >> 8)
      000284 C0 E0            [24]  567 	push	acc
      000286 ED               [12]  568 	mov	a,r5
      000287 C0 E0            [24]  569 	push	acc
      000289 74r0C            [12]  570 	mov	a,#_ascTimeBuffer
      00028B C0 E0            [24]  571 	push	acc
      00028D 74s00            [12]  572 	mov	a,#(_ascTimeBuffer >> 8)
      00028F C0 E0            [24]  573 	push	acc
      000291 74 40            [12]  574 	mov	a,#0x40
      000293 C0 E0            [24]  575 	push	acc
      000295 12r00r00         [24]  576 	lcall	_sprintf
      000298 E5 81            [12]  577 	mov	a,sp
      00029A 24 EA            [12]  578 	add	a,#0xea
      00029C F5 81            [12]  579 	mov	sp,a
                                    580 ;	time.c:101: return ascTimeBuffer;
      00029E 90r00r0C         [24]  581 	mov	dptr,#_ascTimeBuffer
      0002A1 75 F0 40         [24]  582 	mov	b,#0x40
      0002A4 22               [24]  583 	ret
                                    584 ;------------------------------------------------------------
                                    585 ;Allocation info for local variables in function 'ctime'
                                    586 ;------------------------------------------------------------
                                    587 ;timep                     Allocated to registers r5 r6 r7 
                                    588 ;------------------------------------------------------------
                                    589 ;	time.c:104: char *ctime(time_t *timep) {
                                    590 ;	-----------------------------------------
                                    591 ;	 function ctime
                                    592 ;	-----------------------------------------
      0002A5                        593 _ctime:
                                    594 ;	time.c:105: return asctime(localtime(timep));
      0002A5 12r02rAB         [24]  595 	lcall	_localtime
      0002A8 02r01r7A         [24]  596 	ljmp	_asctime
                                    597 ;------------------------------------------------------------
                                    598 ;Allocation info for local variables in function 'localtime'
                                    599 ;------------------------------------------------------------
                                    600 ;timep                     Allocated to registers r5 r6 r7 
                                    601 ;------------------------------------------------------------
                                    602 ;	time.c:121: struct tm *localtime(time_t *timep) {
                                    603 ;	-----------------------------------------
                                    604 ;	 function localtime
                                    605 ;	-----------------------------------------
      0002AB                        606 _localtime:
                                    607 ;	time.c:122: return gmtime(timep);
      0002AB 02r02rAE         [24]  608 	ljmp	_gmtime
                                    609 ;------------------------------------------------------------
                                    610 ;Allocation info for local variables in function 'gmtime'
                                    611 ;------------------------------------------------------------
                                    612 ;timep                     Allocated to registers r5 r6 r7 
                                    613 ;epoch                     Allocated with name '_gmtime_epoch_1_33'
                                    614 ;year                      Allocated to registers r2 r3 
                                    615 ;month                     Allocated to registers r5 
                                    616 ;monthLength               Allocated to registers r4 
                                    617 ;days                      Allocated with name '_gmtime_days_1_33'
                                    618 ;sloc0                     Allocated with name '_gmtime_sloc0_1_0'
                                    619 ;------------------------------------------------------------
                                    620 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                                    621 ;	-----------------------------------------
                                    622 ;	 function gmtime
                                    623 ;	-----------------------------------------
      0002AE                        624 _gmtime:
                                    625 ;	time.c:126: unsigned long epoch=*timep;
      0002AE 12r00r00         [24]  626 	lcall	__gptrget
      0002B1 F5*43            [12]  627 	mov	_gmtime_epoch_1_33,a
      0002B3 A3               [24]  628 	inc	dptr
      0002B4 12r00r00         [24]  629 	lcall	__gptrget
      0002B7 F5*44            [12]  630 	mov	(_gmtime_epoch_1_33 + 1),a
      0002B9 A3               [24]  631 	inc	dptr
      0002BA 12r00r00         [24]  632 	lcall	__gptrget
      0002BD F5*45            [12]  633 	mov	(_gmtime_epoch_1_33 + 2),a
      0002BF A3               [24]  634 	inc	dptr
      0002C0 12r00r00         [24]  635 	lcall	__gptrget
      0002C3 F5*46            [12]  636 	mov	(_gmtime_epoch_1_33 + 3),a
                                    637 ;	time.c:131: lastTime.tm_sec=epoch%60;
      0002C5 75*00 3C         [24]  638 	mov	__modulong_PARM_2,#0x3C
      0002C8 E4               [12]  639 	clr	a
      0002C9 F5*01            [12]  640 	mov	(__modulong_PARM_2 + 1),a
      0002CB F5*02            [12]  641 	mov	(__modulong_PARM_2 + 2),a
      0002CD F5*03            [12]  642 	mov	(__modulong_PARM_2 + 3),a
      0002CF 85*43 82         [24]  643 	mov	dpl,_gmtime_epoch_1_33
      0002D2 85*44 83         [24]  644 	mov	dph,(_gmtime_epoch_1_33 + 1)
      0002D5 85*45 F0         [24]  645 	mov	b,(_gmtime_epoch_1_33 + 2)
      0002D8 E5*46            [12]  646 	mov	a,(_gmtime_epoch_1_33 + 3)
      0002DA 12r00r00         [24]  647 	lcall	__modulong
      0002DD AA 82            [24]  648 	mov	r2,dpl
      0002DF 8A*37            [24]  649 	mov	_lastTime,r2
                                    650 ;	time.c:132: epoch/=60; // now it is minutes
      0002E1 75*00 3C         [24]  651 	mov	__divulong_PARM_2,#0x3C
      0002E4 E4               [12]  652 	clr	a
      0002E5 F5*01            [12]  653 	mov	(__divulong_PARM_2 + 1),a
      0002E7 F5*02            [12]  654 	mov	(__divulong_PARM_2 + 2),a
      0002E9 F5*03            [12]  655 	mov	(__divulong_PARM_2 + 3),a
      0002EB 85*43 82         [24]  656 	mov	dpl,_gmtime_epoch_1_33
      0002EE 85*44 83         [24]  657 	mov	dph,(_gmtime_epoch_1_33 + 1)
      0002F1 85*45 F0         [24]  658 	mov	b,(_gmtime_epoch_1_33 + 2)
      0002F4 E5*46            [12]  659 	mov	a,(_gmtime_epoch_1_33 + 3)
      0002F6 12r00r00         [24]  660 	lcall	__divulong
      0002F9 85 82*43         [24]  661 	mov	_gmtime_epoch_1_33,dpl
      0002FC 85 83*44         [24]  662 	mov	(_gmtime_epoch_1_33 + 1),dph
      0002FF 85 F0*45         [24]  663 	mov	(_gmtime_epoch_1_33 + 2),b
      000302 F5*46            [12]  664 	mov	(_gmtime_epoch_1_33 + 3),a
                                    665 ;	time.c:133: lastTime.tm_min=epoch%60;
      000304 75*00 3C         [24]  666 	mov	__modulong_PARM_2,#0x3C
      000307 E4               [12]  667 	clr	a
      000308 F5*01            [12]  668 	mov	(__modulong_PARM_2 + 1),a
      00030A F5*02            [12]  669 	mov	(__modulong_PARM_2 + 2),a
      00030C F5*03            [12]  670 	mov	(__modulong_PARM_2 + 3),a
      00030E 85*43 82         [24]  671 	mov	dpl,_gmtime_epoch_1_33
      000311 85*44 83         [24]  672 	mov	dph,(_gmtime_epoch_1_33 + 1)
      000314 85*45 F0         [24]  673 	mov	b,(_gmtime_epoch_1_33 + 2)
      000317 E5*46            [12]  674 	mov	a,(_gmtime_epoch_1_33 + 3)
      000319 12r00r00         [24]  675 	lcall	__modulong
      00031C AC 82            [24]  676 	mov	r4,dpl
      00031E 8C*38            [24]  677 	mov	(_lastTime + 0x0001),r4
                                    678 ;	time.c:134: epoch/=60; // now it is hours
      000320 75*00 3C         [24]  679 	mov	__divulong_PARM_2,#0x3C
      000323 E4               [12]  680 	clr	a
      000324 F5*01            [12]  681 	mov	(__divulong_PARM_2 + 1),a
      000326 F5*02            [12]  682 	mov	(__divulong_PARM_2 + 2),a
      000328 F5*03            [12]  683 	mov	(__divulong_PARM_2 + 3),a
      00032A 85*43 82         [24]  684 	mov	dpl,_gmtime_epoch_1_33
      00032D 85*44 83         [24]  685 	mov	dph,(_gmtime_epoch_1_33 + 1)
      000330 85*45 F0         [24]  686 	mov	b,(_gmtime_epoch_1_33 + 2)
      000333 E5*46            [12]  687 	mov	a,(_gmtime_epoch_1_33 + 3)
      000335 12r00r00         [24]  688 	lcall	__divulong
      000338 85 82*43         [24]  689 	mov	_gmtime_epoch_1_33,dpl
      00033B 85 83*44         [24]  690 	mov	(_gmtime_epoch_1_33 + 1),dph
      00033E 85 F0*45         [24]  691 	mov	(_gmtime_epoch_1_33 + 2),b
      000341 F5*46            [12]  692 	mov	(_gmtime_epoch_1_33 + 3),a
                                    693 ;	time.c:135: lastTime.tm_hour=epoch%24;
      000343 75*00 18         [24]  694 	mov	__modulong_PARM_2,#0x18
      000346 E4               [12]  695 	clr	a
      000347 F5*01            [12]  696 	mov	(__modulong_PARM_2 + 1),a
      000349 F5*02            [12]  697 	mov	(__modulong_PARM_2 + 2),a
      00034B F5*03            [12]  698 	mov	(__modulong_PARM_2 + 3),a
      00034D 85*43 82         [24]  699 	mov	dpl,_gmtime_epoch_1_33
      000350 85*44 83         [24]  700 	mov	dph,(_gmtime_epoch_1_33 + 1)
      000353 85*45 F0         [24]  701 	mov	b,(_gmtime_epoch_1_33 + 2)
      000356 E5*46            [12]  702 	mov	a,(_gmtime_epoch_1_33 + 3)
      000358 12r00r00         [24]  703 	lcall	__modulong
      00035B AC 82            [24]  704 	mov	r4,dpl
      00035D 8C*39            [24]  705 	mov	(_lastTime + 0x0002),r4
                                    706 ;	time.c:136: epoch/=24; // now it is days
      00035F 75*00 18         [24]  707 	mov	__divulong_PARM_2,#0x18
      000362 E4               [12]  708 	clr	a
      000363 F5*01            [12]  709 	mov	(__divulong_PARM_2 + 1),a
      000365 F5*02            [12]  710 	mov	(__divulong_PARM_2 + 2),a
      000367 F5*03            [12]  711 	mov	(__divulong_PARM_2 + 3),a
      000369 85*43 82         [24]  712 	mov	dpl,_gmtime_epoch_1_33
      00036C 85*44 83         [24]  713 	mov	dph,(_gmtime_epoch_1_33 + 1)
      00036F 85*45 F0         [24]  714 	mov	b,(_gmtime_epoch_1_33 + 2)
      000372 E5*46            [12]  715 	mov	a,(_gmtime_epoch_1_33 + 3)
      000374 12r00r00         [24]  716 	lcall	__divulong
      000377 85 82*43         [24]  717 	mov	_gmtime_epoch_1_33,dpl
      00037A 85 83*44         [24]  718 	mov	(_gmtime_epoch_1_33 + 1),dph
      00037D 85 F0*45         [24]  719 	mov	(_gmtime_epoch_1_33 + 2),b
      000380 F5*46            [12]  720 	mov	(_gmtime_epoch_1_33 + 3),a
                                    721 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
      000382 74 04            [12]  722 	mov	a,#0x04
      000384 25*43            [12]  723 	add	a,_gmtime_epoch_1_33
      000386 FC               [12]  724 	mov	r4,a
      000387 E4               [12]  725 	clr	a
      000388 35*44            [12]  726 	addc	a,(_gmtime_epoch_1_33 + 1)
      00038A FD               [12]  727 	mov	r5,a
      00038B E4               [12]  728 	clr	a
      00038C 35*45            [12]  729 	addc	a,(_gmtime_epoch_1_33 + 2)
      00038E FE               [12]  730 	mov	r6,a
      00038F E4               [12]  731 	clr	a
      000390 35*46            [12]  732 	addc	a,(_gmtime_epoch_1_33 + 3)
      000392 FF               [12]  733 	mov	r7,a
      000393 75*00 07         [24]  734 	mov	__modulong_PARM_2,#0x07
      000396 E4               [12]  735 	clr	a
      000397 F5*01            [12]  736 	mov	(__modulong_PARM_2 + 1),a
      000399 F5*02            [12]  737 	mov	(__modulong_PARM_2 + 2),a
      00039B F5*03            [12]  738 	mov	(__modulong_PARM_2 + 3),a
      00039D 8C 82            [24]  739 	mov	dpl,r4
      00039F 8D 83            [24]  740 	mov	dph,r5
      0003A1 8E F0            [24]  741 	mov	b,r6
      0003A3 EF               [12]  742 	mov	a,r7
      0003A4 12r00r00         [24]  743 	lcall	__modulong
      0003A7 AC 82            [24]  744 	mov	r4,dpl
      0003A9 AD 83            [24]  745 	mov	r5,dph
      0003AB AE F0            [24]  746 	mov	r6,b
      0003AD FF               [12]  747 	mov	r7,a
      0003AE 8C*3E            [24]  748 	mov	(_lastTime + 0x0007),r4
                                    749 ;	time.c:140: days=0;
      0003B0 E4               [12]  750 	clr	a
      0003B1 F5*47            [12]  751 	mov	_gmtime_days_1_33,a
      0003B3 F5*48            [12]  752 	mov	(_gmtime_days_1_33 + 1),a
      0003B5 F5*49            [12]  753 	mov	(_gmtime_days_1_33 + 2),a
      0003B7 F5*4A            [12]  754 	mov	(_gmtime_days_1_33 + 3),a
                                    755 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      0003B9 7A B2            [12]  756 	mov	r2,#0xB2
      0003BB 7B 07            [12]  757 	mov	r3,#0x07
      0003BD                        758 00101$:
      0003BD 74 03            [12]  759 	mov	a,#0x03
      0003BF 5A               [12]  760 	anl	a,r2
      0003C0 FE               [12]  761 	mov	r6,a
      0003C1 7F 00            [12]  762 	mov	r7,#0x00
      0003C3 4F               [12]  763 	orl	a,r7
      0003C4 B4 01 00         [24]  764 	cjne	a,#0x01,00148$
      0003C7                        765 00148$:
      0003C7 E4               [12]  766 	clr	a
      0003C8 33               [12]  767 	rlc	a
      0003C9 FE               [12]  768 	mov	r6,a
      0003CA 60 06            [24]  769 	jz	00118$
      0003CC 7E 6E            [12]  770 	mov	r6,#0x6E
      0003CE 7F 01            [12]  771 	mov	r7,#0x01
      0003D0 80 04            [24]  772 	sjmp	00119$
      0003D2                        773 00118$:
      0003D2 7E 6D            [12]  774 	mov	r6,#0x6D
      0003D4 7F 01            [12]  775 	mov	r7,#0x01
      0003D6                        776 00119$:
      0003D6 EF               [12]  777 	mov	a,r7
      0003D7 33               [12]  778 	rlc	a
      0003D8 95 E0            [12]  779 	subb	a,acc
      0003DA FD               [12]  780 	mov	r5,a
      0003DB FC               [12]  781 	mov	r4,a
      0003DC EE               [12]  782 	mov	a,r6
      0003DD 25*47            [12]  783 	add	a,_gmtime_days_1_33
      0003DF FE               [12]  784 	mov	r6,a
      0003E0 EF               [12]  785 	mov	a,r7
      0003E1 35*48            [12]  786 	addc	a,(_gmtime_days_1_33 + 1)
      0003E3 FF               [12]  787 	mov	r7,a
      0003E4 ED               [12]  788 	mov	a,r5
      0003E5 35*49            [12]  789 	addc	a,(_gmtime_days_1_33 + 2)
      0003E7 FD               [12]  790 	mov	r5,a
      0003E8 EC               [12]  791 	mov	a,r4
      0003E9 35*4A            [12]  792 	addc	a,(_gmtime_days_1_33 + 3)
      0003EB FC               [12]  793 	mov	r4,a
      0003EC 8E*47            [24]  794 	mov	_gmtime_days_1_33,r6
      0003EE 8F*48            [24]  795 	mov	(_gmtime_days_1_33 + 1),r7
      0003F0 8D*49            [24]  796 	mov	(_gmtime_days_1_33 + 2),r5
      0003F2 8C*4A            [24]  797 	mov	(_gmtime_days_1_33 + 3),r4
      0003F4 C3               [12]  798 	clr	c
      0003F5 E5*43            [12]  799 	mov	a,_gmtime_epoch_1_33
      0003F7 9E               [12]  800 	subb	a,r6
      0003F8 E5*44            [12]  801 	mov	a,(_gmtime_epoch_1_33 + 1)
      0003FA 9F               [12]  802 	subb	a,r7
      0003FB E5*45            [12]  803 	mov	a,(_gmtime_epoch_1_33 + 2)
      0003FD 9D               [12]  804 	subb	a,r5
      0003FE E5*46            [12]  805 	mov	a,(_gmtime_epoch_1_33 + 3)
      000400 9C               [12]  806 	subb	a,r4
      000401 40 07            [24]  807 	jc	00103$
                                    808 ;	time.c:142: year++;
      000403 0A               [12]  809 	inc	r2
      000404 BA 00 B6         [24]  810 	cjne	r2,#0x00,00101$
      000407 0B               [12]  811 	inc	r3
      000408 80 B3            [24]  812 	sjmp	00101$
      00040A                        813 00103$:
                                    814 ;	time.c:144: lastTime.tm_year=year-1900;
      00040A EA               [12]  815 	mov	a,r2
      00040B 24 94            [12]  816 	add	a,#0x94
      00040D FE               [12]  817 	mov	r6,a
      00040E EB               [12]  818 	mov	a,r3
      00040F 34 F8            [12]  819 	addc	a,#0xF8
      000411 FF               [12]  820 	mov	r7,a
      000412 8E*3C            [24]  821 	mov	((_lastTime + 0x0005) + 0),r6
      000414 8F*3D            [24]  822 	mov	((_lastTime + 0x0005) + 1),r7
                                    823 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
      000416 74 03            [12]  824 	mov	a,#0x03
      000418 5A               [12]  825 	anl	a,r2
      000419 FE               [12]  826 	mov	r6,a
      00041A 7F 00            [12]  827 	mov	r7,#0x00
      00041C 4F               [12]  828 	orl	a,r7
      00041D B4 01 00         [24]  829 	cjne	a,#0x01,00152$
      000420                        830 00152$:
      000420 E4               [12]  831 	clr	a
      000421 33               [12]  832 	rlc	a
      000422 FD               [12]  833 	mov	r5,a
      000423 60 06            [24]  834 	jz	00120$
      000425 7C 6E            [12]  835 	mov	r4,#0x6E
      000427 7D 01            [12]  836 	mov	r5,#0x01
      000429 80 04            [24]  837 	sjmp	00121$
      00042B                        838 00120$:
      00042B 7C 6D            [12]  839 	mov	r4,#0x6D
      00042D 7D 01            [12]  840 	mov	r5,#0x01
      00042F                        841 00121$:
      00042F ED               [12]  842 	mov	a,r5
      000430 33               [12]  843 	rlc	a
      000431 95 E0            [12]  844 	subb	a,acc
      000433 FB               [12]  845 	mov	r3,a
      000434 FA               [12]  846 	mov	r2,a
      000435 E5*47            [12]  847 	mov	a,_gmtime_days_1_33
      000437 C3               [12]  848 	clr	c
      000438 9C               [12]  849 	subb	a,r4
      000439 F5*47            [12]  850 	mov	_gmtime_days_1_33,a
      00043B E5*48            [12]  851 	mov	a,(_gmtime_days_1_33 + 1)
      00043D 9D               [12]  852 	subb	a,r5
      00043E F5*48            [12]  853 	mov	(_gmtime_days_1_33 + 1),a
      000440 E5*49            [12]  854 	mov	a,(_gmtime_days_1_33 + 2)
      000442 9B               [12]  855 	subb	a,r3
      000443 F5*49            [12]  856 	mov	(_gmtime_days_1_33 + 2),a
      000445 E5*4A            [12]  857 	mov	a,(_gmtime_days_1_33 + 3)
      000447 9A               [12]  858 	subb	a,r2
      000448 F5*4A            [12]  859 	mov	(_gmtime_days_1_33 + 3),a
                                    860 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
      00044A E5*43            [12]  861 	mov	a,_gmtime_epoch_1_33
      00044C C3               [12]  862 	clr	c
      00044D 95*47            [12]  863 	subb	a,_gmtime_days_1_33
      00044F F5*43            [12]  864 	mov	_gmtime_epoch_1_33,a
      000451 E5*44            [12]  865 	mov	a,(_gmtime_epoch_1_33 + 1)
      000453 95*48            [12]  866 	subb	a,(_gmtime_days_1_33 + 1)
      000455 F5*44            [12]  867 	mov	(_gmtime_epoch_1_33 + 1),a
      000457 E5*45            [12]  868 	mov	a,(_gmtime_epoch_1_33 + 2)
      000459 95*49            [12]  869 	subb	a,(_gmtime_days_1_33 + 2)
      00045B F5*45            [12]  870 	mov	(_gmtime_epoch_1_33 + 2),a
      00045D E5*46            [12]  871 	mov	a,(_gmtime_epoch_1_33 + 3)
      00045F 95*4A            [12]  872 	subb	a,(_gmtime_days_1_33 + 3)
      000461 F5*46            [12]  873 	mov	(_gmtime_epoch_1_33 + 3),a
                                    874 ;	time.c:148: lastTime.tm_yday=epoch;
      000463 AC*43            [24]  875 	mov	r4,_gmtime_epoch_1_33
      000465 AD*44            [24]  876 	mov	r5,(_gmtime_epoch_1_33 + 1)
      000467 8C*3F            [24]  877 	mov	((_lastTime + 0x0008) + 0),r4
      000469 8D*40            [24]  878 	mov	((_lastTime + 0x0008) + 1),r5
                                    879 ;	time.c:153: for (month=0; month<12; month++) {
      00046B 7D 00            [12]  880 	mov	r5,#0x00
      00046D                        881 00114$:
                                    882 ;	time.c:154: if (month==1) { // februari
      00046D BD 01 0C         [24]  883 	cjne	r5,#0x01,00108$
                                    884 ;	time.c:155: if (LEAP_YEAR(year)) {
      000470 EE               [12]  885 	mov	a,r6
      000471 4F               [12]  886 	orl	a,r7
      000472 70 04            [24]  887 	jnz	00105$
                                    888 ;	time.c:156: monthLength=29;
      000474 7C 1D            [12]  889 	mov	r4,#0x1D
      000476 80 0A            [24]  890 	sjmp	00109$
      000478                        891 00105$:
                                    892 ;	time.c:158: monthLength=28;
      000478 7C 1C            [12]  893 	mov	r4,#0x1C
      00047A 80 06            [24]  894 	sjmp	00109$
      00047C                        895 00108$:
                                    896 ;	time.c:161: monthLength = monthDays[month];
      00047C ED               [12]  897 	mov	a,r5
      00047D 90r00r00         [24]  898 	mov	dptr,#_monthDays
      000480 93               [24]  899 	movc	a,@a+dptr
      000481 FC               [12]  900 	mov	r4,a
      000482                        901 00109$:
                                    902 ;	time.c:164: if (epoch>=monthLength) {
      000482 8C*4B            [24]  903 	mov	_gmtime_sloc0_1_0,r4
      000484 75*4C 00         [24]  904 	mov	(_gmtime_sloc0_1_0 + 1),#0x00
      000487 75*4D 00         [24]  905 	mov	(_gmtime_sloc0_1_0 + 2),#0x00
      00048A 75*4E 00         [24]  906 	mov	(_gmtime_sloc0_1_0 + 3),#0x00
      00048D C3               [12]  907 	clr	c
      00048E E5*43            [12]  908 	mov	a,_gmtime_epoch_1_33
      000490 95*4B            [12]  909 	subb	a,_gmtime_sloc0_1_0
      000492 E5*44            [12]  910 	mov	a,(_gmtime_epoch_1_33 + 1)
      000494 95*4C            [12]  911 	subb	a,(_gmtime_sloc0_1_0 + 1)
      000496 E5*45            [12]  912 	mov	a,(_gmtime_epoch_1_33 + 2)
      000498 95*4D            [12]  913 	subb	a,(_gmtime_sloc0_1_0 + 2)
      00049A E5*46            [12]  914 	mov	a,(_gmtime_epoch_1_33 + 3)
      00049C 95*4E            [12]  915 	subb	a,(_gmtime_sloc0_1_0 + 3)
      00049E 40 1F            [24]  916 	jc	00113$
                                    917 ;	time.c:165: epoch-=monthLength;
      0004A0 E5*43            [12]  918 	mov	a,_gmtime_epoch_1_33
      0004A2 C3               [12]  919 	clr	c
      0004A3 95*4B            [12]  920 	subb	a,_gmtime_sloc0_1_0
      0004A5 F5*43            [12]  921 	mov	_gmtime_epoch_1_33,a
      0004A7 E5*44            [12]  922 	mov	a,(_gmtime_epoch_1_33 + 1)
      0004A9 95*4C            [12]  923 	subb	a,(_gmtime_sloc0_1_0 + 1)
      0004AB F5*44            [12]  924 	mov	(_gmtime_epoch_1_33 + 1),a
      0004AD E5*45            [12]  925 	mov	a,(_gmtime_epoch_1_33 + 2)
      0004AF 95*4D            [12]  926 	subb	a,(_gmtime_sloc0_1_0 + 2)
      0004B1 F5*45            [12]  927 	mov	(_gmtime_epoch_1_33 + 2),a
      0004B3 E5*46            [12]  928 	mov	a,(_gmtime_epoch_1_33 + 3)
      0004B5 95*4E            [12]  929 	subb	a,(_gmtime_sloc0_1_0 + 3)
      0004B7 F5*46            [12]  930 	mov	(_gmtime_epoch_1_33 + 3),a
                                    931 ;	time.c:153: for (month=0; month<12; month++) {
      0004B9 0D               [12]  932 	inc	r5
      0004BA BD 0C 00         [24]  933 	cjne	r5,#0x0C,00158$
      0004BD                        934 00158$:
      0004BD 40 AE            [24]  935 	jc	00114$
      0004BF                        936 00113$:
                                    937 ;	time.c:170: lastTime.tm_mon=month;
      0004BF 8D*3B            [24]  938 	mov	(_lastTime + 0x0004),r5
                                    939 ;	time.c:171: lastTime.tm_mday=epoch+1;
      0004C1 E5*43            [12]  940 	mov	a,_gmtime_epoch_1_33
      0004C3 04               [12]  941 	inc	a
      0004C4 F5*3A            [12]  942 	mov	(_lastTime + 0x0003),a
                                    943 ;	time.c:173: lastTime.tm_isdst=0;
      0004C6 75*41 00         [24]  944 	mov	(_lastTime + 0x000a),#0x00
                                    945 ;	time.c:175: return &lastTime;
      0004C9 90r00r37         [24]  946 	mov	dptr,#_lastTime
      0004CC 75 F0 40         [24]  947 	mov	b,#0x40
      0004CF 22               [24]  948 	ret
                                    949 ;------------------------------------------------------------
                                    950 ;Allocation info for local variables in function 'mktime'
                                    951 ;------------------------------------------------------------
                                    952 ;timeptr                   Allocated with name '_mktime_timeptr_1_42'
                                    953 ;year                      Allocated with name '_mktime_year_1_43'
                                    954 ;month                     Allocated with name '_mktime_month_1_43'
                                    955 ;i                         Allocated with name '_mktime_i_1_43'
                                    956 ;seconds                   Allocated with name '_mktime_seconds_1_43'
                                    957 ;sloc0                     Allocated with name '_mktime_sloc0_1_0'
                                    958 ;------------------------------------------------------------
                                    959 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                                    960 ;	-----------------------------------------
                                    961 ;	 function mktime
                                    962 ;	-----------------------------------------
      0004D0                        963 _mktime:
      0004D0 85 82*4F         [24]  964 	mov	_mktime_timeptr_1_42,dpl
      0004D3 85 83*50         [24]  965 	mov	(_mktime_timeptr_1_42 + 1),dph
      0004D6 85 F0*51         [24]  966 	mov	(_mktime_timeptr_1_42 + 2),b
                                    967 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      0004D9 74 05            [12]  968 	mov	a,#0x05
      0004DB 25*4F            [12]  969 	add	a,_mktime_timeptr_1_42
      0004DD FA               [12]  970 	mov	r2,a
      0004DE E4               [12]  971 	clr	a
      0004DF 35*50            [12]  972 	addc	a,(_mktime_timeptr_1_42 + 1)
      0004E1 FB               [12]  973 	mov	r3,a
      0004E2 AC*51            [24]  974 	mov	r4,(_mktime_timeptr_1_42 + 2)
      0004E4 8A 82            [24]  975 	mov	dpl,r2
      0004E6 8B 83            [24]  976 	mov	dph,r3
      0004E8 8C F0            [24]  977 	mov	b,r4
      0004EA 12r00r00         [24]  978 	lcall	__gptrget
      0004ED FA               [12]  979 	mov	r2,a
      0004EE A3               [24]  980 	inc	dptr
      0004EF 12r00r00         [24]  981 	lcall	__gptrget
      0004F2 FB               [12]  982 	mov	r3,a
      0004F3 74 6C            [12]  983 	mov	a,#0x6C
      0004F5 2A               [12]  984 	add	a,r2
      0004F6 F5*52            [12]  985 	mov	_mktime_year_1_43,a
      0004F8 74 07            [12]  986 	mov	a,#0x07
      0004FA 3B               [12]  987 	addc	a,r3
      0004FB F5*53            [12]  988 	mov	(_mktime_year_1_43 + 1),a
      0004FD 74 04            [12]  989 	mov	a,#0x04
      0004FF 25*4F            [12]  990 	add	a,_mktime_timeptr_1_42
      000501 F8               [12]  991 	mov	r0,a
      000502 E4               [12]  992 	clr	a
      000503 35*50            [12]  993 	addc	a,(_mktime_timeptr_1_42 + 1)
      000505 F9               [12]  994 	mov	r1,a
      000506 AA*51            [24]  995 	mov	r2,(_mktime_timeptr_1_42 + 2)
      000508 88 82            [24]  996 	mov	dpl,r0
      00050A 89 83            [24]  997 	mov	dph,r1
      00050C 8A F0            [24]  998 	mov	b,r2
      00050E 12r00r00         [24]  999 	lcall	__gptrget
      000511 F8               [12] 1000 	mov	r0,a
      000512 88*54            [24] 1001 	mov	_mktime_month_1_43,r0
      000514 75*55 00         [24] 1002 	mov	(_mktime_month_1_43 + 1),#0x00
                                   1003 ;	time.c:183: CheckTime(timeptr);
      000517 85*4F 82         [24] 1004 	mov	dpl,_mktime_timeptr_1_42
      00051A 85*50 83         [24] 1005 	mov	dph,(_mktime_timeptr_1_42 + 1)
      00051D 85*51 F0         [24] 1006 	mov	b,(_mktime_timeptr_1_42 + 2)
      000520 12r00r7C         [24] 1007 	lcall	_CheckTime
                                   1008 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
      000523 E5*52            [12] 1009 	mov	a,_mktime_year_1_43
      000525 24 4E            [12] 1010 	add	a,#0x4E
      000527 F9               [12] 1011 	mov	r1,a
      000528 E5*53            [12] 1012 	mov	a,(_mktime_year_1_43 + 1)
      00052A 34 F8            [12] 1013 	addc	a,#0xF8
      00052C FA               [12] 1014 	mov	r2,a
      00052D 89*00            [24] 1015 	mov	__mullong_PARM_2,r1
      00052F EA               [12] 1016 	mov	a,r2
      000530 F5*01            [12] 1017 	mov	(__mullong_PARM_2 + 1),a
      000532 33               [12] 1018 	rlc	a
      000533 95 E0            [12] 1019 	subb	a,acc
      000535 F5*02            [12] 1020 	mov	(__mullong_PARM_2 + 2),a
      000537 F5*03            [12] 1021 	mov	(__mullong_PARM_2 + 3),a
      000539 90 33 80         [24] 1022 	mov	dptr,#0x3380
      00053C 75 F0 E1         [24] 1023 	mov	b,#0xE1
      00053F 74 01            [12] 1024 	mov	a,#0x01
      000541 12r00r00         [24] 1025 	lcall	__mullong
      000544 85 82*58         [24] 1026 	mov	_mktime_seconds_1_43,dpl
      000547 85 83*59         [24] 1027 	mov	(_mktime_seconds_1_43 + 1),dph
      00054A 85 F0*5A         [24] 1028 	mov	(_mktime_seconds_1_43 + 2),b
      00054D F5*5B            [12] 1029 	mov	(_mktime_seconds_1_43 + 3),a
                                   1030 ;	time.c:189: for (i=1970; i<year; i++) {
      00054F 85*58*5C         [24] 1031 	mov	_mktime_sloc0_1_0,_mktime_seconds_1_43
      000552 85*59*5D         [24] 1032 	mov	(_mktime_sloc0_1_0 + 1),(_mktime_seconds_1_43 + 1)
      000555 85*5A*5E         [24] 1033 	mov	(_mktime_sloc0_1_0 + 2),(_mktime_seconds_1_43 + 2)
      000558 85*5B*5F         [24] 1034 	mov	(_mktime_sloc0_1_0 + 3),(_mktime_seconds_1_43 + 3)
      00055B 7E B2            [12] 1035 	mov	r6,#0xB2
      00055D 7F 07            [12] 1036 	mov	r7,#0x07
      00055F                       1037 00110$:
      00055F C3               [12] 1038 	clr	c
      000560 EE               [12] 1039 	mov	a,r6
      000561 95*52            [12] 1040 	subb	a,_mktime_year_1_43
      000563 EF               [12] 1041 	mov	a,r7
      000564 64 80            [12] 1042 	xrl	a,#0x80
      000566 85*53 F0         [24] 1043 	mov	b,(_mktime_year_1_43 + 1)
      000569 63 F0 80         [24] 1044 	xrl	b,#0x80
      00056C 95 F0            [12] 1045 	subb	a,b
      00056E 50 3C            [24] 1046 	jnc	00124$
                                   1047 ;	time.c:190: if (LEAP_YEAR(i)) {
      000570 75*00 04         [24] 1048 	mov	__modsint_PARM_2,#0x04
      000573 75*01 00         [24] 1049 	mov	(__modsint_PARM_2 + 1),#0x00
      000576 8E 82            [24] 1050 	mov	dpl,r6
      000578 8F 83            [24] 1051 	mov	dph,r7
      00057A C0 07            [24] 1052 	push	ar7
      00057C C0 06            [24] 1053 	push	ar6
      00057E 12r00r00         [24] 1054 	lcall	__modsint
      000581 E5 82            [12] 1055 	mov	a,dpl
      000583 85 83 F0         [24] 1056 	mov	b,dph
      000586 D0 06            [24] 1057 	pop	ar6
      000588 D0 07            [24] 1058 	pop	ar7
      00058A 45 F0            [12] 1059 	orl	a,b
      00058C 70 17            [24] 1060 	jnz	00111$
                                   1061 ;	time.c:191: seconds+= 60*60*24L;
      00058E 74 80            [12] 1062 	mov	a,#0x80
      000590 25*5C            [12] 1063 	add	a,_mktime_sloc0_1_0
      000592 F5*5C            [12] 1064 	mov	_mktime_sloc0_1_0,a
      000594 74 51            [12] 1065 	mov	a,#0x51
      000596 35*5D            [12] 1066 	addc	a,(_mktime_sloc0_1_0 + 1)
      000598 F5*5D            [12] 1067 	mov	(_mktime_sloc0_1_0 + 1),a
      00059A 74 01            [12] 1068 	mov	a,#0x01
      00059C 35*5E            [12] 1069 	addc	a,(_mktime_sloc0_1_0 + 2)
      00059E F5*5E            [12] 1070 	mov	(_mktime_sloc0_1_0 + 2),a
      0005A0 E4               [12] 1071 	clr	a
      0005A1 35*5F            [12] 1072 	addc	a,(_mktime_sloc0_1_0 + 3)
      0005A3 F5*5F            [12] 1073 	mov	(_mktime_sloc0_1_0 + 3),a
      0005A5                       1074 00111$:
                                   1075 ;	time.c:189: for (i=1970; i<year; i++) {
      0005A5 0E               [12] 1076 	inc	r6
      0005A6 BE 00 B6         [24] 1077 	cjne	r6,#0x00,00110$
      0005A9 0F               [12] 1078 	inc	r7
      0005AA 80 B3            [24] 1079 	sjmp	00110$
      0005AC                       1080 00124$:
      0005AC 85*5C*58         [24] 1081 	mov	_mktime_seconds_1_43,_mktime_sloc0_1_0
      0005AF 85*5D*59         [24] 1082 	mov	(_mktime_seconds_1_43 + 1),(_mktime_sloc0_1_0 + 1)
      0005B2 85*5E*5A         [24] 1083 	mov	(_mktime_seconds_1_43 + 2),(_mktime_sloc0_1_0 + 2)
      0005B5 85*5F*5B         [24] 1084 	mov	(_mktime_seconds_1_43 + 3),(_mktime_sloc0_1_0 + 3)
                                   1085 ;	time.c:196: for (i=0; i<month; i++) {
      0005B8 75*00 04         [24] 1086 	mov	__modsint_PARM_2,#0x04
      0005BB 75*01 00         [24] 1087 	mov	(__modsint_PARM_2 + 1),#0x00
      0005BE 85*52 82         [24] 1088 	mov	dpl,_mktime_year_1_43
      0005C1 85*53 83         [24] 1089 	mov	dph,(_mktime_year_1_43 + 1)
      0005C4 12r00r00         [24] 1090 	lcall	__modsint
      0005C7 AE 82            [24] 1091 	mov	r6,dpl
      0005C9 AF 83            [24] 1092 	mov	r7,dph
      0005CB E4               [12] 1093 	clr	a
      0005CC F5*56            [12] 1094 	mov	_mktime_i_1_43,a
      0005CE F5*57            [12] 1095 	mov	(_mktime_i_1_43 + 1),a
      0005D0                       1096 00113$:
      0005D0 C3               [12] 1097 	clr	c
      0005D1 E5*56            [12] 1098 	mov	a,_mktime_i_1_43
      0005D3 95*54            [12] 1099 	subb	a,_mktime_month_1_43
      0005D5 E5*57            [12] 1100 	mov	a,(_mktime_i_1_43 + 1)
      0005D7 64 80            [12] 1101 	xrl	a,#0x80
      0005D9 85*55 F0         [24] 1102 	mov	b,(_mktime_month_1_43 + 1)
      0005DC 63 F0 80         [24] 1103 	xrl	b,#0x80
      0005DF 95 F0            [12] 1104 	subb	a,b
      0005E1 40 03            [24] 1105 	jc	00143$
      0005E3 02r06r62         [24] 1106 	ljmp	00108$
      0005E6                       1107 00143$:
                                   1108 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
      0005E6 74 01            [12] 1109 	mov	a,#0x01
      0005E8 B5*56 06         [24] 1110 	cjne	a,_mktime_i_1_43,00144$
      0005EB E4               [12] 1111 	clr	a
      0005EC B5*57 02         [24] 1112 	cjne	a,(_mktime_i_1_43 + 1),00144$
      0005EF 80 02            [24] 1113 	sjmp	00145$
      0005F1                       1114 00144$:
      0005F1 80 1D            [24] 1115 	sjmp	00105$
      0005F3                       1116 00145$:
      0005F3 EE               [12] 1117 	mov	a,r6
      0005F4 4F               [12] 1118 	orl	a,r7
      0005F5 70 19            [24] 1119 	jnz	00105$
                                   1120 ;	time.c:198: seconds+= 60*60*24L*29;
      0005F7 74 80            [12] 1121 	mov	a,#0x80
      0005F9 25*58            [12] 1122 	add	a,_mktime_seconds_1_43
      0005FB F5*58            [12] 1123 	mov	_mktime_seconds_1_43,a
      0005FD 74 3B            [12] 1124 	mov	a,#0x3B
      0005FF 35*59            [12] 1125 	addc	a,(_mktime_seconds_1_43 + 1)
      000601 F5*59            [12] 1126 	mov	(_mktime_seconds_1_43 + 1),a
      000603 74 26            [12] 1127 	mov	a,#0x26
      000605 35*5A            [12] 1128 	addc	a,(_mktime_seconds_1_43 + 2)
      000607 F5*5A            [12] 1129 	mov	(_mktime_seconds_1_43 + 2),a
      000609 E4               [12] 1130 	clr	a
      00060A 35*5B            [12] 1131 	addc	a,(_mktime_seconds_1_43 + 3)
      00060C F5*5B            [12] 1132 	mov	(_mktime_seconds_1_43 + 3),a
      00060E 80 47            [24] 1133 	sjmp	00114$
      000610                       1134 00105$:
                                   1135 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      000610 E5*56            [12] 1136 	mov	a,_mktime_i_1_43
      000612 24r00            [12] 1137 	add	a,#_monthDays
      000614 F5 82            [12] 1138 	mov	dpl,a
      000616 E5*57            [12] 1139 	mov	a,(_mktime_i_1_43 + 1)
      000618 34s00            [12] 1140 	addc	a,#(_monthDays >> 8)
      00061A F5 83            [12] 1141 	mov	dph,a
      00061C E4               [12] 1142 	clr	a
      00061D 93               [24] 1143 	movc	a,@a+dptr
      00061E FD               [12] 1144 	mov	r5,a
      00061F 8D*00            [24] 1145 	mov	__mullong_PARM_2,r5
      000621 33               [12] 1146 	rlc	a
      000622 95 E0            [12] 1147 	subb	a,acc
      000624 F5*01            [12] 1148 	mov	(__mullong_PARM_2 + 1),a
      000626 F5*02            [12] 1149 	mov	(__mullong_PARM_2 + 2),a
      000628 F5*03            [12] 1150 	mov	(__mullong_PARM_2 + 3),a
      00062A 90 51 80         [24] 1151 	mov	dptr,#0x5180
      00062D 75 F0 01         [24] 1152 	mov	b,#0x01
      000630 E4               [12] 1153 	clr	a
      000631 C0 07            [24] 1154 	push	ar7
      000633 C0 06            [24] 1155 	push	ar6
      000635 12r00r00         [24] 1156 	lcall	__mullong
      000638 AA 82            [24] 1157 	mov	r2,dpl
      00063A AB 83            [24] 1158 	mov	r3,dph
      00063C AC F0            [24] 1159 	mov	r4,b
      00063E FD               [12] 1160 	mov	r5,a
      00063F D0 06            [24] 1161 	pop	ar6
      000641 D0 07            [24] 1162 	pop	ar7
      000643 EA               [12] 1163 	mov	a,r2
      000644 25*58            [12] 1164 	add	a,_mktime_seconds_1_43
      000646 F5*58            [12] 1165 	mov	_mktime_seconds_1_43,a
      000648 EB               [12] 1166 	mov	a,r3
      000649 35*59            [12] 1167 	addc	a,(_mktime_seconds_1_43 + 1)
      00064B F5*59            [12] 1168 	mov	(_mktime_seconds_1_43 + 1),a
      00064D EC               [12] 1169 	mov	a,r4
      00064E 35*5A            [12] 1170 	addc	a,(_mktime_seconds_1_43 + 2)
      000650 F5*5A            [12] 1171 	mov	(_mktime_seconds_1_43 + 2),a
      000652 ED               [12] 1172 	mov	a,r5
      000653 35*5B            [12] 1173 	addc	a,(_mktime_seconds_1_43 + 3)
      000655 F5*5B            [12] 1174 	mov	(_mktime_seconds_1_43 + 3),a
      000657                       1175 00114$:
                                   1176 ;	time.c:196: for (i=0; i<month; i++) {
      000657 05*56            [12] 1177 	inc	_mktime_i_1_43
      000659 E4               [12] 1178 	clr	a
      00065A B5*56 02         [24] 1179 	cjne	a,_mktime_i_1_43,00147$
      00065D 05*57            [12] 1180 	inc	(_mktime_i_1_43 + 1)
      00065F                       1181 00147$:
      00065F 02r05rD0         [24] 1182 	ljmp	00113$
      000662                       1183 00108$:
                                   1184 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      000662 74 03            [12] 1185 	mov	a,#0x03
      000664 25*4F            [12] 1186 	add	a,_mktime_timeptr_1_42
      000666 FD               [12] 1187 	mov	r5,a
      000667 E4               [12] 1188 	clr	a
      000668 35*50            [12] 1189 	addc	a,(_mktime_timeptr_1_42 + 1)
      00066A FE               [12] 1190 	mov	r6,a
      00066B AF*51            [24] 1191 	mov	r7,(_mktime_timeptr_1_42 + 2)
      00066D 8D 82            [24] 1192 	mov	dpl,r5
      00066F 8E 83            [24] 1193 	mov	dph,r6
      000671 8F F0            [24] 1194 	mov	b,r7
      000673 12r00r00         [24] 1195 	lcall	__gptrget
      000676 FD               [12] 1196 	mov	r5,a
      000677 7F 00            [12] 1197 	mov	r7,#0x00
      000679 1D               [12] 1198 	dec	r5
      00067A BD FF 01         [24] 1199 	cjne	r5,#0xFF,00148$
      00067D 1F               [12] 1200 	dec	r7
      00067E                       1201 00148$:
      00067E 8D*00            [24] 1202 	mov	__mullong_PARM_2,r5
      000680 EF               [12] 1203 	mov	a,r7
      000681 F5*01            [12] 1204 	mov	(__mullong_PARM_2 + 1),a
      000683 33               [12] 1205 	rlc	a
      000684 95 E0            [12] 1206 	subb	a,acc
      000686 F5*02            [12] 1207 	mov	(__mullong_PARM_2 + 2),a
      000688 F5*03            [12] 1208 	mov	(__mullong_PARM_2 + 3),a
      00068A 90 51 80         [24] 1209 	mov	dptr,#0x5180
      00068D 75 F0 01         [24] 1210 	mov	b,#0x01
      000690 E4               [12] 1211 	clr	a
      000691 12r00r00         [24] 1212 	lcall	__mullong
      000694 AC 82            [24] 1213 	mov	r4,dpl
      000696 AD 83            [24] 1214 	mov	r5,dph
      000698 AE F0            [24] 1215 	mov	r6,b
      00069A FF               [12] 1216 	mov	r7,a
      00069B EC               [12] 1217 	mov	a,r4
      00069C 25*58            [12] 1218 	add	a,_mktime_seconds_1_43
      00069E F5*58            [12] 1219 	mov	_mktime_seconds_1_43,a
      0006A0 ED               [12] 1220 	mov	a,r5
      0006A1 35*59            [12] 1221 	addc	a,(_mktime_seconds_1_43 + 1)
      0006A3 F5*59            [12] 1222 	mov	(_mktime_seconds_1_43 + 1),a
      0006A5 EE               [12] 1223 	mov	a,r6
      0006A6 35*5A            [12] 1224 	addc	a,(_mktime_seconds_1_43 + 2)
      0006A8 F5*5A            [12] 1225 	mov	(_mktime_seconds_1_43 + 2),a
      0006AA EF               [12] 1226 	mov	a,r7
      0006AB 35*5B            [12] 1227 	addc	a,(_mktime_seconds_1_43 + 3)
      0006AD F5*5B            [12] 1228 	mov	(_mktime_seconds_1_43 + 3),a
                                   1229 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
      0006AF 74 02            [12] 1230 	mov	a,#0x02
      0006B1 25*4F            [12] 1231 	add	a,_mktime_timeptr_1_42
      0006B3 FD               [12] 1232 	mov	r5,a
      0006B4 E4               [12] 1233 	clr	a
      0006B5 35*50            [12] 1234 	addc	a,(_mktime_timeptr_1_42 + 1)
      0006B7 FE               [12] 1235 	mov	r6,a
      0006B8 AF*51            [24] 1236 	mov	r7,(_mktime_timeptr_1_42 + 2)
      0006BA 8D 82            [24] 1237 	mov	dpl,r5
      0006BC 8E 83            [24] 1238 	mov	dph,r6
      0006BE 8F F0            [24] 1239 	mov	b,r7
      0006C0 12r00r00         [24] 1240 	lcall	__gptrget
      0006C3 FD               [12] 1241 	mov	r5,a
      0006C4 8D*00            [24] 1242 	mov	__mullong_PARM_2,r5
      0006C6 75*01 00         [24] 1243 	mov	(__mullong_PARM_2 + 1),#0x00
      0006C9 75*02 00         [24] 1244 	mov	(__mullong_PARM_2 + 2),#0x00
      0006CC 75*03 00         [24] 1245 	mov	(__mullong_PARM_2 + 3),#0x00
      0006CF 90 0E 10         [24] 1246 	mov	dptr,#0x0E10
      0006D2 E4               [12] 1247 	clr	a
      0006D3 F5 F0            [12] 1248 	mov	b,a
      0006D5 12r00r00         [24] 1249 	lcall	__mullong
      0006D8 AC 82            [24] 1250 	mov	r4,dpl
      0006DA AD 83            [24] 1251 	mov	r5,dph
      0006DC AE F0            [24] 1252 	mov	r6,b
      0006DE FF               [12] 1253 	mov	r7,a
      0006DF EC               [12] 1254 	mov	a,r4
      0006E0 25*58            [12] 1255 	add	a,_mktime_seconds_1_43
      0006E2 F5*58            [12] 1256 	mov	_mktime_seconds_1_43,a
      0006E4 ED               [12] 1257 	mov	a,r5
      0006E5 35*59            [12] 1258 	addc	a,(_mktime_seconds_1_43 + 1)
      0006E7 F5*59            [12] 1259 	mov	(_mktime_seconds_1_43 + 1),a
      0006E9 EE               [12] 1260 	mov	a,r6
      0006EA 35*5A            [12] 1261 	addc	a,(_mktime_seconds_1_43 + 2)
      0006EC F5*5A            [12] 1262 	mov	(_mktime_seconds_1_43 + 2),a
      0006EE EF               [12] 1263 	mov	a,r7
      0006EF 35*5B            [12] 1264 	addc	a,(_mktime_seconds_1_43 + 3)
      0006F1 F5*5B            [12] 1265 	mov	(_mktime_seconds_1_43 + 3),a
                                   1266 ;	time.c:206: seconds+= timeptr->tm_min*60;
      0006F3 74 01            [12] 1267 	mov	a,#0x01
      0006F5 25*4F            [12] 1268 	add	a,_mktime_timeptr_1_42
      0006F7 FD               [12] 1269 	mov	r5,a
      0006F8 E4               [12] 1270 	clr	a
      0006F9 35*50            [12] 1271 	addc	a,(_mktime_timeptr_1_42 + 1)
      0006FB FE               [12] 1272 	mov	r6,a
      0006FC AF*51            [24] 1273 	mov	r7,(_mktime_timeptr_1_42 + 2)
      0006FE 8D 82            [24] 1274 	mov	dpl,r5
      000700 8E 83            [24] 1275 	mov	dph,r6
      000702 8F F0            [24] 1276 	mov	b,r7
      000704 12r00r00         [24] 1277 	lcall	__gptrget
      000707 75 F0 3C         [24] 1278 	mov	b,#0x3C
      00070A A4               [48] 1279 	mul	ab
      00070B FD               [12] 1280 	mov	r5,a
      00070C E5 F0            [12] 1281 	mov	a,b
      00070E FF               [12] 1282 	mov	r7,a
      00070F 33               [12] 1283 	rlc	a
      000710 95 E0            [12] 1284 	subb	a,acc
      000712 FE               [12] 1285 	mov	r6,a
      000713 FC               [12] 1286 	mov	r4,a
      000714 ED               [12] 1287 	mov	a,r5
      000715 25*58            [12] 1288 	add	a,_mktime_seconds_1_43
      000717 F5*58            [12] 1289 	mov	_mktime_seconds_1_43,a
      000719 EF               [12] 1290 	mov	a,r7
      00071A 35*59            [12] 1291 	addc	a,(_mktime_seconds_1_43 + 1)
      00071C F5*59            [12] 1292 	mov	(_mktime_seconds_1_43 + 1),a
      00071E EE               [12] 1293 	mov	a,r6
      00071F 35*5A            [12] 1294 	addc	a,(_mktime_seconds_1_43 + 2)
      000721 F5*5A            [12] 1295 	mov	(_mktime_seconds_1_43 + 2),a
      000723 EC               [12] 1296 	mov	a,r4
      000724 35*5B            [12] 1297 	addc	a,(_mktime_seconds_1_43 + 3)
      000726 F5*5B            [12] 1298 	mov	(_mktime_seconds_1_43 + 3),a
                                   1299 ;	time.c:207: seconds+= timeptr->tm_sec;
      000728 85*4F 82         [24] 1300 	mov	dpl,_mktime_timeptr_1_42
      00072B 85*50 83         [24] 1301 	mov	dph,(_mktime_timeptr_1_42 + 1)
      00072E 85*51 F0         [24] 1302 	mov	b,(_mktime_timeptr_1_42 + 2)
      000731 12r00r00         [24] 1303 	lcall	__gptrget
      000734 FF               [12] 1304 	mov	r7,a
      000735 E4               [12] 1305 	clr	a
      000736 FE               [12] 1306 	mov	r6,a
      000737 33               [12] 1307 	rlc	a
      000738 95 E0            [12] 1308 	subb	a,acc
      00073A FD               [12] 1309 	mov	r5,a
      00073B FC               [12] 1310 	mov	r4,a
      00073C EF               [12] 1311 	mov	a,r7
      00073D 25*58            [12] 1312 	add	a,_mktime_seconds_1_43
      00073F F5*58            [12] 1313 	mov	_mktime_seconds_1_43,a
      000741 EE               [12] 1314 	mov	a,r6
      000742 35*59            [12] 1315 	addc	a,(_mktime_seconds_1_43 + 1)
      000744 F5*59            [12] 1316 	mov	(_mktime_seconds_1_43 + 1),a
      000746 ED               [12] 1317 	mov	a,r5
      000747 35*5A            [12] 1318 	addc	a,(_mktime_seconds_1_43 + 2)
      000749 F5*5A            [12] 1319 	mov	(_mktime_seconds_1_43 + 2),a
      00074B EC               [12] 1320 	mov	a,r4
      00074C 35*5B            [12] 1321 	addc	a,(_mktime_seconds_1_43 + 3)
                                   1322 ;	time.c:208: return seconds;
      00074E F5*5B            [12] 1323 	mov	(_mktime_seconds_1_43 + 3),a
      000750 85*58 82         [24] 1324 	mov	dpl,_mktime_seconds_1_43
      000753 85*59 83         [24] 1325 	mov	dph,(_mktime_seconds_1_43 + 1)
      000756 85*5A F0         [24] 1326 	mov	b,(_mktime_seconds_1_43 + 2)
      000759 22               [24] 1327 	ret
                                   1328 	.area CSEG    (CODE)
                                   1329 	.area CONST   (CODE)
      000000                       1330 _monthDays:
      000000 1F                    1331 	.db #0x1F	;  31
      000001 1C                    1332 	.db #0x1C	;  28
      000002 1F                    1333 	.db #0x1F	;  31
      000003 1E                    1334 	.db #0x1E	;  30
      000004 1F                    1335 	.db #0x1F	;  31
      000005 1E                    1336 	.db #0x1E	;  30
      000006 1F                    1337 	.db #0x1F	;  31
      000007 1F                    1338 	.db #0x1F	;  31
      000008 1E                    1339 	.db #0x1E	;  30
      000009 1F                    1340 	.db #0x1F	;  31
      00000A 1E                    1341 	.db #0x1E	;  30
      00000B 1F                    1342 	.db #0x1F	;  31
      00000C                       1343 ___month:
      00000Cr51s00                 1344 	.byte _str_1,(_str_1 >> 8)
      00000Er55s00                 1345 	.byte _str_2,(_str_2 >> 8)
      000010r59s00                 1346 	.byte _str_3,(_str_3 >> 8)
      000012r5Ds00                 1347 	.byte _str_4,(_str_4 >> 8)
      000014r61s00                 1348 	.byte _str_5,(_str_5 >> 8)
      000016r65s00                 1349 	.byte _str_6,(_str_6 >> 8)
      000018r69s00                 1350 	.byte _str_7,(_str_7 >> 8)
      00001Ar6Ds00                 1351 	.byte _str_8,(_str_8 >> 8)
      00001Cr71s00                 1352 	.byte _str_9,(_str_9 >> 8)
      00001Er75s00                 1353 	.byte _str_10,(_str_10 >> 8)
      000020r79s00                 1354 	.byte _str_11,(_str_11 >> 8)
      000022r7Ds00                 1355 	.byte _str_12,(_str_12 >> 8)
      000024                       1356 ___day:
      000024r81s00                 1357 	.byte _str_13,(_str_13 >> 8)
      000026r85s00                 1358 	.byte _str_14,(_str_14 >> 8)
      000028r89s00                 1359 	.byte _str_15,(_str_15 >> 8)
      00002Ar8Ds00                 1360 	.byte _str_16,(_str_16 >> 8)
      00002Cr91s00                 1361 	.byte _str_17,(_str_17 >> 8)
      00002Er95s00                 1362 	.byte _str_18,(_str_18 >> 8)
      000030r99s00                 1363 	.byte _str_19,(_str_19 >> 8)
      000032                       1364 __str_0:
      000032 25 73 20 25 73 20 25  1365 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      00004F 0A                    1366 	.db 0x0A
      000050 00                    1367 	.db 0x00
      000051                       1368 _str_1:
      000051 4A 61 6E              1369 	.ascii "Jan"
      000054 00                    1370 	.db 0x00
      000055                       1371 _str_2:
      000055 46 65 62              1372 	.ascii "Feb"
      000058 00                    1373 	.db 0x00
      000059                       1374 _str_3:
      000059 4D 61 72              1375 	.ascii "Mar"
      00005C 00                    1376 	.db 0x00
      00005D                       1377 _str_4:
      00005D 41 70 72              1378 	.ascii "Apr"
      000060 00                    1379 	.db 0x00
      000061                       1380 _str_5:
      000061 4D 61 79              1381 	.ascii "May"
      000064 00                    1382 	.db 0x00
      000065                       1383 _str_6:
      000065 4A 75 6E              1384 	.ascii "Jun"
      000068 00                    1385 	.db 0x00
      000069                       1386 _str_7:
      000069 4A 75 6C              1387 	.ascii "Jul"
      00006C 00                    1388 	.db 0x00
      00006D                       1389 _str_8:
      00006D 41 75 67              1390 	.ascii "Aug"
      000070 00                    1391 	.db 0x00
      000071                       1392 _str_9:
      000071 53 65 70              1393 	.ascii "Sep"
      000074 00                    1394 	.db 0x00
      000075                       1395 _str_10:
      000075 4F 63 74              1396 	.ascii "Oct"
      000078 00                    1397 	.db 0x00
      000079                       1398 _str_11:
      000079 4E 6F 76              1399 	.ascii "Nov"
      00007C 00                    1400 	.db 0x00
      00007D                       1401 _str_12:
      00007D 44 65 63              1402 	.ascii "Dec"
      000080 00                    1403 	.db 0x00
      000081                       1404 _str_13:
      000081 53 75 6E              1405 	.ascii "Sun"
      000084 00                    1406 	.db 0x00
      000085                       1407 _str_14:
      000085 4D 6F 6E              1408 	.ascii "Mon"
      000088 00                    1409 	.db 0x00
      000089                       1410 _str_15:
      000089 54 75 65              1411 	.ascii "Tue"
      00008C 00                    1412 	.db 0x00
      00008D                       1413 _str_16:
      00008D 57 65 64              1414 	.ascii "Wed"
      000090 00                    1415 	.db 0x00
      000091                       1416 _str_17:
      000091 54 68 75              1417 	.ascii "Thu"
      000094 00                    1418 	.db 0x00
      000095                       1419 _str_18:
      000095 46 72 69              1420 	.ascii "Fri"
      000098 00                    1421 	.db 0x00
      000099                       1422 _str_19:
      000099 53 61 74              1423 	.ascii "Sat"
      00009C 00                    1424 	.db 0x00
                                   1425 	.area XINIT   (CODE)
                                   1426 	.area CABS    (ABS,CODE)
