                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:07 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _modulong
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __modulong
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function '_modulong'
                                     92 ;------------------------------------------------------------
                                     93 ;b                         Allocated to stack - _bp -6
                                     94 ;a                         Allocated to registers r4 r5 r6 r7 
                                     95 ;count                     Allocated to stack - _bp +1
                                     96 ;------------------------------------------------------------
                                     97 ;	_modulong.c:340: _modulong (unsigned long a, unsigned long b)
                                     98 ;	-----------------------------------------
                                     99 ;	 function _modulong
                                    100 ;	-----------------------------------------
      000000                        101 __modulong:
                           000007   102 	ar7 = 0x07
                           000006   103 	ar6 = 0x06
                           000005   104 	ar5 = 0x05
                           000004   105 	ar4 = 0x04
                           000003   106 	ar3 = 0x03
                           000002   107 	ar2 = 0x02
                           000001   108 	ar1 = 0x01
                           000000   109 	ar0 = 0x00
      000000 C0*00            [24]  110 	push	_bp
      000002 85 81*00         [24]  111 	mov	_bp,sp
      000005 AC 82            [24]  112 	mov	r4,dpl
      000007 AD 83            [24]  113 	mov	r5,dph
      000009 AE F0            [24]  114 	mov	r6,b
      00000B FF               [12]  115 	mov	r7,a
      00000C 05 81            [12]  116 	inc	sp
                                    117 ;	_modulong.c:342: unsigned char count = 0;
      00000E 7B 00            [12]  118 	mov	r3,#0x00
                                    119 ;	_modulong.c:344: while (!MSB_SET(b))
      000010 A8*00            [24]  120 	mov	r0,_bp
      000012 08               [12]  121 	inc	r0
      000013 76 00            [12]  122 	mov	@r0,#0x00
      000015                        123 00103$:
      000015 E5*00            [12]  124 	mov	a,_bp
      000017 24 FA            [12]  125 	add	a,#0xfa
      000019 F8               [12]  126 	mov	r0,a
      00001A 08               [12]  127 	inc	r0
      00001B 08               [12]  128 	inc	r0
      00001C 08               [12]  129 	inc	r0
      00001D E6               [12]  130 	mov	a,@r0
      00001E 23               [12]  131 	rl	a
      00001F 54 01            [12]  132 	anl	a,#0x01
      000021 FA               [12]  133 	mov	r2,a
      000022 70 4D            [24]  134 	jnz	00117$
                                    135 ;	_modulong.c:346: b <<= 1;
      000024 E5*00            [12]  136 	mov	a,_bp
      000026 24 FA            [12]  137 	add	a,#0xfa
      000028 F8               [12]  138 	mov	r0,a
      000029 E6               [12]  139 	mov	a,@r0
      00002A 25 E0            [12]  140 	add	a,acc
      00002C F6               [12]  141 	mov	@r0,a
      00002D 08               [12]  142 	inc	r0
      00002E E6               [12]  143 	mov	a,@r0
      00002F 33               [12]  144 	rlc	a
      000030 F6               [12]  145 	mov	@r0,a
      000031 08               [12]  146 	inc	r0
      000032 E6               [12]  147 	mov	a,@r0
      000033 33               [12]  148 	rlc	a
      000034 F6               [12]  149 	mov	@r0,a
      000035 08               [12]  150 	inc	r0
      000036 E6               [12]  151 	mov	a,@r0
      000037 33               [12]  152 	rlc	a
      000038 F6               [12]  153 	mov	@r0,a
                                    154 ;	_modulong.c:347: if (b > a)
      000039 E5*00            [12]  155 	mov	a,_bp
      00003B 24 FA            [12]  156 	add	a,#0xfa
      00003D F8               [12]  157 	mov	r0,a
      00003E C3               [12]  158 	clr	c
      00003F EC               [12]  159 	mov	a,r4
      000040 96               [12]  160 	subb	a,@r0
      000041 ED               [12]  161 	mov	a,r5
      000042 08               [12]  162 	inc	r0
      000043 96               [12]  163 	subb	a,@r0
      000044 EE               [12]  164 	mov	a,r6
      000045 08               [12]  165 	inc	r0
      000046 96               [12]  166 	subb	a,@r0
      000047 EF               [12]  167 	mov	a,r7
      000048 08               [12]  168 	inc	r0
      000049 96               [12]  169 	subb	a,@r0
      00004A 50 1A            [24]  170 	jnc	00102$
                                    171 ;	_modulong.c:349: b >>=1;
      00004C E5*00            [12]  172 	mov	a,_bp
      00004E 24 FA            [12]  173 	add	a,#0xfa
      000050 F8               [12]  174 	mov	r0,a
      000051 08               [12]  175 	inc	r0
      000052 08               [12]  176 	inc	r0
      000053 08               [12]  177 	inc	r0
      000054 E6               [12]  178 	mov	a,@r0
      000055 C3               [12]  179 	clr	c
      000056 13               [12]  180 	rrc	a
      000057 F6               [12]  181 	mov	@r0,a
      000058 18               [12]  182 	dec	r0
      000059 E6               [12]  183 	mov	a,@r0
      00005A 13               [12]  184 	rrc	a
      00005B F6               [12]  185 	mov	@r0,a
      00005C 18               [12]  186 	dec	r0
      00005D E6               [12]  187 	mov	a,@r0
      00005E 13               [12]  188 	rrc	a
      00005F F6               [12]  189 	mov	@r0,a
      000060 18               [12]  190 	dec	r0
      000061 E6               [12]  191 	mov	a,@r0
      000062 13               [12]  192 	rrc	a
      000063 F6               [12]  193 	mov	@r0,a
                                    194 ;	_modulong.c:350: break;
      000064 80 0B            [24]  195 	sjmp	00117$
      000066                        196 00102$:
                                    197 ;	_modulong.c:352: count++;
      000066 A8*00            [24]  198 	mov	r0,_bp
      000068 08               [12]  199 	inc	r0
      000069 06               [12]  200 	inc	@r0
      00006A A8*00            [24]  201 	mov	r0,_bp
      00006C 08               [12]  202 	inc	r0
      00006D 86 03            [24]  203 	mov	ar3,@r0
                                    204 ;	_modulong.c:354: do
      00006F 80 A4            [24]  205 	sjmp	00103$
      000071                        206 00117$:
      000071                        207 00108$:
                                    208 ;	_modulong.c:356: if (a >= b)
      000071 E5*00            [12]  209 	mov	a,_bp
      000073 24 FA            [12]  210 	add	a,#0xfa
      000075 F8               [12]  211 	mov	r0,a
      000076 C3               [12]  212 	clr	c
      000077 EC               [12]  213 	mov	a,r4
      000078 96               [12]  214 	subb	a,@r0
      000079 ED               [12]  215 	mov	a,r5
      00007A 08               [12]  216 	inc	r0
      00007B 96               [12]  217 	subb	a,@r0
      00007C EE               [12]  218 	mov	a,r6
      00007D 08               [12]  219 	inc	r0
      00007E 96               [12]  220 	subb	a,@r0
      00007F EF               [12]  221 	mov	a,r7
      000080 08               [12]  222 	inc	r0
      000081 96               [12]  223 	subb	a,@r0
      000082 40 15            [24]  224 	jc	00107$
                                    225 ;	_modulong.c:357: a -= b;
      000084 E5*00            [12]  226 	mov	a,_bp
      000086 24 FA            [12]  227 	add	a,#0xfa
      000088 F8               [12]  228 	mov	r0,a
      000089 EC               [12]  229 	mov	a,r4
      00008A C3               [12]  230 	clr	c
      00008B 96               [12]  231 	subb	a,@r0
      00008C FC               [12]  232 	mov	r4,a
      00008D ED               [12]  233 	mov	a,r5
      00008E 08               [12]  234 	inc	r0
      00008F 96               [12]  235 	subb	a,@r0
      000090 FD               [12]  236 	mov	r5,a
      000091 EE               [12]  237 	mov	a,r6
      000092 08               [12]  238 	inc	r0
      000093 96               [12]  239 	subb	a,@r0
      000094 FE               [12]  240 	mov	r6,a
      000095 EF               [12]  241 	mov	a,r7
      000096 08               [12]  242 	inc	r0
      000097 96               [12]  243 	subb	a,@r0
      000098 FF               [12]  244 	mov	r7,a
      000099                        245 00107$:
                                    246 ;	_modulong.c:358: b >>= 1;
      000099 E5*00            [12]  247 	mov	a,_bp
      00009B 24 FA            [12]  248 	add	a,#0xfa
      00009D F8               [12]  249 	mov	r0,a
      00009E 08               [12]  250 	inc	r0
      00009F 08               [12]  251 	inc	r0
      0000A0 08               [12]  252 	inc	r0
      0000A1 E6               [12]  253 	mov	a,@r0
      0000A2 C3               [12]  254 	clr	c
      0000A3 13               [12]  255 	rrc	a
      0000A4 F6               [12]  256 	mov	@r0,a
      0000A5 18               [12]  257 	dec	r0
      0000A6 E6               [12]  258 	mov	a,@r0
      0000A7 13               [12]  259 	rrc	a
      0000A8 F6               [12]  260 	mov	@r0,a
      0000A9 18               [12]  261 	dec	r0
      0000AA E6               [12]  262 	mov	a,@r0
      0000AB 13               [12]  263 	rrc	a
      0000AC F6               [12]  264 	mov	@r0,a
      0000AD 18               [12]  265 	dec	r0
      0000AE E6               [12]  266 	mov	a,@r0
      0000AF 13               [12]  267 	rrc	a
      0000B0 F6               [12]  268 	mov	@r0,a
                                    269 ;	_modulong.c:360: while (count--);
      0000B1 8B 02            [24]  270 	mov	ar2,r3
      0000B3 1B               [12]  271 	dec	r3
      0000B4 EA               [12]  272 	mov	a,r2
      0000B5 70 BA            [24]  273 	jnz	00108$
                                    274 ;	_modulong.c:362: return a;
      0000B7 8C 82            [24]  275 	mov	dpl,r4
      0000B9 8D 83            [24]  276 	mov	dph,r5
      0000BB 8E F0            [24]  277 	mov	b,r6
      0000BD EF               [12]  278 	mov	a,r7
      0000BE 15 81            [12]  279 	dec	sp
      0000C0 D0*00            [24]  280 	pop	_bp
      0000C2 22               [24]  281 	ret
                                    282 	.area CSEG    (CODE)
                                    283 	.area CONST   (CODE)
                                    284 	.area XINIT   (CODE)
                                    285 	.area CABS    (ABS,CODE)
