                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:07 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _divulong
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __divulong
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable bit register bank
                                     30 ;--------------------------------------------------------
                                     31 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         32 bits:
      000000                         33 	.ds 1
                           008000    34 	b0 = bits[0]
                           008100    35 	b1 = bits[1]
                           008200    36 	b2 = bits[2]
                           008300    37 	b3 = bits[3]
                           008400    38 	b4 = bits[4]
                           008500    39 	b5 = bits[5]
                           008600    40 	b6 = bits[6]
                           008700    41 	b7 = bits[7]
                                     42 ;--------------------------------------------------------
                                     43 ; internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area DSEG    (DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; overlayable items in internal ram 
                                     48 ;--------------------------------------------------------
                                     49 ;--------------------------------------------------------
                                     50 ; indirectly addressable internal ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area ISEG    (DATA)
                                     53 ;--------------------------------------------------------
                                     54 ; absolute internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area IABS    (ABS,DATA)
                                     57 	.area IABS    (ABS,DATA)
                                     58 ;--------------------------------------------------------
                                     59 ; bit data
                                     60 ;--------------------------------------------------------
                                     61 	.area BSEG    (BIT)
                                     62 ;--------------------------------------------------------
                                     63 ; paged external ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area PSEG    (PAG,XDATA)
                                     66 ;--------------------------------------------------------
                                     67 ; external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area XSEG    (XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; absolute external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XABS    (ABS,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; external initialized ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XISEG   (XDATA)
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT0 (CODE)
                                     80 	.area GSINIT1 (CODE)
                                     81 	.area GSINIT2 (CODE)
                                     82 	.area GSINIT3 (CODE)
                                     83 	.area GSINIT4 (CODE)
                                     84 	.area GSINIT5 (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 	.area GSFINAL (CODE)
                                     87 	.area CSEG    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME    (CODE)
                                     92 	.area GSINIT  (CODE)
                                     93 	.area GSFINAL (CODE)
                                     94 	.area GSINIT  (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; Home
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME    (CODE)
                                     99 	.area HOME    (CODE)
                                    100 ;--------------------------------------------------------
                                    101 ; code
                                    102 ;--------------------------------------------------------
                                    103 	.area CSEG    (CODE)
                                    104 ;------------------------------------------------------------
                                    105 ;Allocation info for local variables in function '_divulong'
                                    106 ;------------------------------------------------------------
                                    107 ;y                         Allocated to stack - _bp -6
                                    108 ;x                         Allocated to stack - _bp +1
                                    109 ;reste                     Allocated to registers r2 r3 r6 r7 
                                    110 ;count                     Allocated to registers r5 
                                    111 ;c                         Allocated to registers b0 
                                    112 ;------------------------------------------------------------
                                    113 ;	_divulong.c:331: _divulong (unsigned long x, unsigned long y)
                                    114 ;	-----------------------------------------
                                    115 ;	 function _divulong
                                    116 ;	-----------------------------------------
      000000                        117 __divulong:
                           000007   118 	ar7 = 0x07
                           000006   119 	ar6 = 0x06
                           000005   120 	ar5 = 0x05
                           000004   121 	ar4 = 0x04
                           000003   122 	ar3 = 0x03
                           000002   123 	ar2 = 0x02
                           000001   124 	ar1 = 0x01
                           000000   125 	ar0 = 0x00
      000000 C0*00            [24]  126 	push	_bp
      000002 85 81*00         [24]  127 	mov	_bp,sp
      000005 C0 82            [24]  128 	push	dpl
      000007 C0 83            [24]  129 	push	dph
      000009 C0 F0            [24]  130 	push	b
      00000B C0 E0            [24]  131 	push	acc
                                    132 ;	_divulong.c:333: unsigned long reste = 0L;
      00000D 7A 00            [12]  133 	mov	r2,#0x00
      00000F 7B 00            [12]  134 	mov	r3,#0x00
      000011 7E 00            [12]  135 	mov	r6,#0x00
      000013 7F 00            [12]  136 	mov	r7,#0x00
                                    137 ;	_divulong.c:337: do
      000015 7D 20            [12]  138 	mov	r5,#0x20
      000017                        139 00105$:
                                    140 ;	_divulong.c:340: c = MSB_SET(x);
      000017 A8*00            [24]  141 	mov	r0,_bp
      000019 08               [12]  142 	inc	r0
      00001A 08               [12]  143 	inc	r0
      00001B 08               [12]  144 	inc	r0
      00001C 08               [12]  145 	inc	r0
      00001D E6               [12]  146 	mov	a,@r0
      00001E 33               [12]  147 	rlc	a
      00001F 92*00            [24]  148 	mov	b0,c
                                    149 ;	_divulong.c:341: x <<= 1;
      000021 A8*00            [24]  150 	mov	r0,_bp
      000023 08               [12]  151 	inc	r0
      000024 E6               [12]  152 	mov	a,@r0
      000025 25 E0            [12]  153 	add	a,acc
      000027 F6               [12]  154 	mov	@r0,a
      000028 08               [12]  155 	inc	r0
      000029 E6               [12]  156 	mov	a,@r0
      00002A 33               [12]  157 	rlc	a
      00002B F6               [12]  158 	mov	@r0,a
      00002C 08               [12]  159 	inc	r0
      00002D E6               [12]  160 	mov	a,@r0
      00002E 33               [12]  161 	rlc	a
      00002F F6               [12]  162 	mov	@r0,a
      000030 08               [12]  163 	inc	r0
      000031 E6               [12]  164 	mov	a,@r0
      000032 33               [12]  165 	rlc	a
      000033 F6               [12]  166 	mov	@r0,a
                                    167 ;	_divulong.c:342: reste <<= 1;
      000034 EA               [12]  168 	mov	a,r2
      000035 2A               [12]  169 	add	a,r2
      000036 FA               [12]  170 	mov	r2,a
      000037 EB               [12]  171 	mov	a,r3
      000038 33               [12]  172 	rlc	a
      000039 FB               [12]  173 	mov	r3,a
      00003A EE               [12]  174 	mov	a,r6
      00003B 33               [12]  175 	rlc	a
      00003C FE               [12]  176 	mov	r6,a
      00003D EF               [12]  177 	mov	a,r7
      00003E 33               [12]  178 	rlc	a
      00003F FF               [12]  179 	mov	r7,a
                                    180 ;	_divulong.c:343: if (c)
      000040 30*00 03         [24]  181 	jnb	b0,00102$
                                    182 ;	_divulong.c:344: reste |= 1L;
      000043 43 02 01         [24]  183 	orl	ar2,#0x01
      000046                        184 00102$:
                                    185 ;	_divulong.c:346: if (reste >= y)
      000046 E5*00            [12]  186 	mov	a,_bp
      000048 24 FA            [12]  187 	add	a,#0xfa
      00004A F8               [12]  188 	mov	r0,a
      00004B C3               [12]  189 	clr	c
      00004C EA               [12]  190 	mov	a,r2
      00004D 96               [12]  191 	subb	a,@r0
      00004E EB               [12]  192 	mov	a,r3
      00004F 08               [12]  193 	inc	r0
      000050 96               [12]  194 	subb	a,@r0
      000051 EE               [12]  195 	mov	a,r6
      000052 08               [12]  196 	inc	r0
      000053 96               [12]  197 	subb	a,@r0
      000054 EF               [12]  198 	mov	a,r7
      000055 08               [12]  199 	inc	r0
      000056 96               [12]  200 	subb	a,@r0
      000057 40 1C            [24]  201 	jc	00106$
                                    202 ;	_divulong.c:348: reste -= y;
      000059 E5*00            [12]  203 	mov	a,_bp
      00005B 24 FA            [12]  204 	add	a,#0xfa
      00005D F8               [12]  205 	mov	r0,a
      00005E EA               [12]  206 	mov	a,r2
      00005F C3               [12]  207 	clr	c
      000060 96               [12]  208 	subb	a,@r0
      000061 FA               [12]  209 	mov	r2,a
      000062 EB               [12]  210 	mov	a,r3
      000063 08               [12]  211 	inc	r0
      000064 96               [12]  212 	subb	a,@r0
      000065 FB               [12]  213 	mov	r3,a
      000066 EE               [12]  214 	mov	a,r6
      000067 08               [12]  215 	inc	r0
      000068 96               [12]  216 	subb	a,@r0
      000069 FE               [12]  217 	mov	r6,a
      00006A EF               [12]  218 	mov	a,r7
      00006B 08               [12]  219 	inc	r0
      00006C 96               [12]  220 	subb	a,@r0
      00006D FF               [12]  221 	mov	r7,a
                                    222 ;	_divulong.c:350: x |= 1L;
      00006E A8*00            [24]  223 	mov	r0,_bp
      000070 08               [12]  224 	inc	r0
      000071 E6               [12]  225 	mov	a,@r0
      000072 44 01            [12]  226 	orl	a,#0x01
      000074 F6               [12]  227 	mov	@r0,a
      000075                        228 00106$:
                                    229 ;	_divulong.c:353: while (--count);
      000075 DD A0            [24]  230 	djnz	r5,00105$
                                    231 ;	_divulong.c:354: return x;
      000077 A8*00            [24]  232 	mov	r0,_bp
      000079 08               [12]  233 	inc	r0
      00007A 86 82            [24]  234 	mov	dpl,@r0
      00007C 08               [12]  235 	inc	r0
      00007D 86 83            [24]  236 	mov	dph,@r0
      00007F 08               [12]  237 	inc	r0
      000080 86 F0            [24]  238 	mov	b,@r0
      000082 08               [12]  239 	inc	r0
      000083 E6               [12]  240 	mov	a,@r0
      000084 85*00 81         [24]  241 	mov	sp,_bp
      000087 D0*00            [24]  242 	pop	_bp
      000089 22               [24]  243 	ret
                                    244 	.area CSEG    (CODE)
                                    245 	.area CONST   (CODE)
                                    246 	.area XINIT   (CODE)
                                    247 	.area CABS    (ABS,CODE)
