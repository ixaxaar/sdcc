                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:07 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _strncat
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strncat
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'strncat'
                                     92 ;------------------------------------------------------------
                                     93 ;back                      Allocated to stack - _bp -5
                                     94 ;count                     Allocated to stack - _bp -7
                                     95 ;front                     Allocated to stack - _bp +1
                                     96 ;start                     Allocated to stack - _bp +9
                                     97 ;sloc0                     Allocated to stack - _bp +4
                                     98 ;sloc1                     Allocated to stack - _bp +7
                                     99 ;------------------------------------------------------------
                                    100 ;	_strncat.c:31: char * strncat (
                                    101 ;	-----------------------------------------
                                    102 ;	 function strncat
                                    103 ;	-----------------------------------------
      000000                        104 _strncat:
                           000007   105 	ar7 = 0x07
                           000006   106 	ar6 = 0x06
                           000005   107 	ar5 = 0x05
                           000004   108 	ar4 = 0x04
                           000003   109 	ar3 = 0x03
                           000002   110 	ar2 = 0x02
                           000001   111 	ar1 = 0x01
                           000000   112 	ar0 = 0x00
      000000 C0*00            [24]  113 	push	_bp
      000002 85 81*00         [24]  114 	mov	_bp,sp
      000005 C0 82            [24]  115 	push	dpl
      000007 C0 83            [24]  116 	push	dph
      000009 C0 F0            [24]  117 	push	b
      00000B E5 81            [12]  118 	mov	a,sp
      00000D 24 08            [12]  119 	add	a,#0x08
      00000F F5 81            [12]  120 	mov	sp,a
                                    121 ;	_strncat.c:37: char *start = front;
      000011 A8*00            [24]  122 	mov	r0,_bp
      000013 08               [12]  123 	inc	r0
      000014 E5*00            [12]  124 	mov	a,_bp
      000016 24 09            [12]  125 	add	a,#0x09
      000018 F9               [12]  126 	mov	r1,a
      000019 E6               [12]  127 	mov	a,@r0
      00001A F7               [12]  128 	mov	@r1,a
      00001B 08               [12]  129 	inc	r0
      00001C 09               [12]  130 	inc	r1
      00001D E6               [12]  131 	mov	a,@r0
      00001E F7               [12]  132 	mov	@r1,a
      00001F 08               [12]  133 	inc	r0
      000020 09               [12]  134 	inc	r1
      000021 E6               [12]  135 	mov	a,@r0
      000022 F7               [12]  136 	mov	@r1,a
                                    137 ;	_strncat.c:39: while (*front++);
      000023 A8*00            [24]  138 	mov	r0,_bp
      000025 08               [12]  139 	inc	r0
      000026 86 07            [24]  140 	mov	ar7,@r0
      000028 08               [12]  141 	inc	r0
      000029 86 06            [24]  142 	mov	ar6,@r0
      00002B 08               [12]  143 	inc	r0
      00002C 86 05            [24]  144 	mov	ar5,@r0
      00002E                        145 00101$:
      00002E 8F 82            [24]  146 	mov	dpl,r7
      000030 8E 83            [24]  147 	mov	dph,r6
      000032 8D F0            [24]  148 	mov	b,r5
      000034 12r00r00         [24]  149 	lcall	__gptrget
      000037 FC               [12]  150 	mov	r4,a
      000038 A3               [24]  151 	inc	dptr
      000039 AF 82            [24]  152 	mov	r7,dpl
      00003B AE 83            [24]  153 	mov	r6,dph
      00003D EC               [12]  154 	mov	a,r4
      00003E 70 EE            [24]  155 	jnz	00101$
                                    156 ;	_strncat.c:41: front--;
      000040 A8*00            [24]  157 	mov	r0,_bp
      000042 08               [12]  158 	inc	r0
      000043 EF               [12]  159 	mov	a,r7
      000044 24 FF            [12]  160 	add	a,#0xFF
      000046 F6               [12]  161 	mov	@r0,a
      000047 EE               [12]  162 	mov	a,r6
      000048 34 FF            [12]  163 	addc	a,#0xFF
      00004A 08               [12]  164 	inc	r0
      00004B F6               [12]  165 	mov	@r0,a
      00004C 08               [12]  166 	inc	r0
      00004D A6 05            [24]  167 	mov	@r0,ar5
                                    168 ;	_strncat.c:43: while (count--)
      00004F E5*00            [12]  169 	mov	a,_bp
      000051 24 FB            [12]  170 	add	a,#0xfb
      000053 F8               [12]  171 	mov	r0,a
      000054 86 02            [24]  172 	mov	ar2,@r0
      000056 08               [12]  173 	inc	r0
      000057 86 03            [24]  174 	mov	ar3,@r0
      000059 08               [12]  175 	inc	r0
      00005A 86 04            [24]  176 	mov	ar4,@r0
      00005C A8*00            [24]  177 	mov	r0,_bp
      00005E 08               [12]  178 	inc	r0
      00005F E5*00            [12]  179 	mov	a,_bp
      000061 24 04            [12]  180 	add	a,#0x04
      000063 F9               [12]  181 	mov	r1,a
      000064 E6               [12]  182 	mov	a,@r0
      000065 F7               [12]  183 	mov	@r1,a
      000066 08               [12]  184 	inc	r0
      000067 09               [12]  185 	inc	r1
      000068 E6               [12]  186 	mov	a,@r0
      000069 F7               [12]  187 	mov	@r1,a
      00006A 08               [12]  188 	inc	r0
      00006B 09               [12]  189 	inc	r1
      00006C E6               [12]  190 	mov	a,@r0
      00006D F7               [12]  191 	mov	@r1,a
      00006E E5*00            [12]  192 	mov	a,_bp
      000070 24 F9            [12]  193 	add	a,#0xf9
      000072 F8               [12]  194 	mov	r0,a
      000073 E5*00            [12]  195 	mov	a,_bp
      000075 24 07            [12]  196 	add	a,#0x07
      000077 F9               [12]  197 	mov	r1,a
      000078 E6               [12]  198 	mov	a,@r0
      000079 F7               [12]  199 	mov	@r1,a
      00007A 08               [12]  200 	inc	r0
      00007B 09               [12]  201 	inc	r1
      00007C E6               [12]  202 	mov	a,@r0
      00007D F7               [12]  203 	mov	@r1,a
      00007E                        204 00106$:
      00007E E5*00            [12]  205 	mov	a,_bp
      000080 24 07            [12]  206 	add	a,#0x07
      000082 F8               [12]  207 	mov	r0,a
      000083 86 06            [24]  208 	mov	ar6,@r0
      000085 08               [12]  209 	inc	r0
      000086 86 07            [24]  210 	mov	ar7,@r0
      000088 E5*00            [12]  211 	mov	a,_bp
      00008A 24 07            [12]  212 	add	a,#0x07
      00008C F8               [12]  213 	mov	r0,a
      00008D 16               [12]  214 	dec	@r0
      00008E B6 FF 02         [24]  215 	cjne	@r0,#0xFF,00128$
      000091 08               [12]  216 	inc	r0
      000092 16               [12]  217 	dec	@r0
      000093                        218 00128$:
      000093 EE               [12]  219 	mov	a,r6
      000094 4F               [12]  220 	orl	a,r7
      000095 60 4C            [24]  221 	jz	00108$
                                    222 ;	_strncat.c:44: if (!(*front++ = *back++))
      000097 8A 82            [24]  223 	mov	dpl,r2
      000099 8B 83            [24]  224 	mov	dph,r3
      00009B 8C F0            [24]  225 	mov	b,r4
      00009D 12r00r00         [24]  226 	lcall	__gptrget
      0000A0 FF               [12]  227 	mov	r7,a
      0000A1 A3               [24]  228 	inc	dptr
      0000A2 AA 82            [24]  229 	mov	r2,dpl
      0000A4 AB 83            [24]  230 	mov	r3,dph
      0000A6 E5*00            [12]  231 	mov	a,_bp
      0000A8 24 04            [12]  232 	add	a,#0x04
      0000AA F8               [12]  233 	mov	r0,a
      0000AB 86 82            [24]  234 	mov	dpl,@r0
      0000AD 08               [12]  235 	inc	r0
      0000AE 86 83            [24]  236 	mov	dph,@r0
      0000B0 08               [12]  237 	inc	r0
      0000B1 86 F0            [24]  238 	mov	b,@r0
      0000B3 EF               [12]  239 	mov	a,r7
      0000B4 12r00r00         [24]  240 	lcall	__gptrput
      0000B7 A3               [24]  241 	inc	dptr
      0000B8 18               [12]  242 	dec	r0
      0000B9 18               [12]  243 	dec	r0
      0000BA A6 82            [24]  244 	mov	@r0,dpl
      0000BC 08               [12]  245 	inc	r0
      0000BD A6 83            [24]  246 	mov	@r0,dph
      0000BF E5*00            [12]  247 	mov	a,_bp
      0000C1 24 04            [12]  248 	add	a,#0x04
      0000C3 F8               [12]  249 	mov	r0,a
      0000C4 A9*00            [24]  250 	mov	r1,_bp
      0000C6 09               [12]  251 	inc	r1
      0000C7 E6               [12]  252 	mov	a,@r0
      0000C8 F7               [12]  253 	mov	@r1,a
      0000C9 08               [12]  254 	inc	r0
      0000CA 09               [12]  255 	inc	r1
      0000CB E6               [12]  256 	mov	a,@r0
      0000CC F7               [12]  257 	mov	@r1,a
      0000CD 08               [12]  258 	inc	r0
      0000CE 09               [12]  259 	inc	r1
      0000CF E6               [12]  260 	mov	a,@r0
      0000D0 F7               [12]  261 	mov	@r1,a
      0000D1 EF               [12]  262 	mov	a,r7
      0000D2 70 AA            [24]  263 	jnz	00106$
                                    264 ;	_strncat.c:45: return(start);
      0000D4 E5*00            [12]  265 	mov	a,_bp
      0000D6 24 09            [12]  266 	add	a,#0x09
      0000D8 F8               [12]  267 	mov	r0,a
      0000D9 86 82            [24]  268 	mov	dpl,@r0
      0000DB 08               [12]  269 	inc	r0
      0000DC 86 83            [24]  270 	mov	dph,@r0
      0000DE 08               [12]  271 	inc	r0
      0000DF 86 F0            [24]  272 	mov	b,@r0
      0000E1 80 1C            [24]  273 	sjmp	00109$
      0000E3                        274 00108$:
                                    275 ;	_strncat.c:47: *front = '\0';
      0000E3 A8*00            [24]  276 	mov	r0,_bp
      0000E5 08               [12]  277 	inc	r0
      0000E6 86 82            [24]  278 	mov	dpl,@r0
      0000E8 08               [12]  279 	inc	r0
      0000E9 86 83            [24]  280 	mov	dph,@r0
      0000EB 08               [12]  281 	inc	r0
      0000EC 86 F0            [24]  282 	mov	b,@r0
      0000EE E4               [12]  283 	clr	a
      0000EF 12r00r00         [24]  284 	lcall	__gptrput
                                    285 ;	_strncat.c:48: return(start);
      0000F2 E5*00            [12]  286 	mov	a,_bp
      0000F4 24 09            [12]  287 	add	a,#0x09
      0000F6 F8               [12]  288 	mov	r0,a
      0000F7 86 82            [24]  289 	mov	dpl,@r0
      0000F9 08               [12]  290 	inc	r0
      0000FA 86 83            [24]  291 	mov	dph,@r0
      0000FC 08               [12]  292 	inc	r0
      0000FD 86 F0            [24]  293 	mov	b,@r0
      0000FF                        294 00109$:
      0000FF 85*00 81         [24]  295 	mov	sp,_bp
      000102 D0*00            [24]  296 	pop	_bp
      000104 22               [24]  297 	ret
                                    298 	.area CSEG    (CODE)
                                    299 	.area CONST   (CODE)
                                    300 	.area XINIT   (CODE)
                                    301 	.area CABS    (ABS,CODE)
