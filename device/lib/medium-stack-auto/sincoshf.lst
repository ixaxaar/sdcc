                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:06 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sincoshf
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincoshf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincoshf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscosh                    Allocated to stack - _bp -4
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;y                         Allocated to registers r7 r6 r5 r4 
                                    111 ;w                         Allocated to registers r7 r6 r5 r4 
                                    112 ;z                         Allocated to stack - _bp +9
                                    113 ;sign                      Allocated to registers b0 
                                    114 ;sloc0                     Allocated to stack - _bp +5
                                    115 ;------------------------------------------------------------
                                    116 ;	sincoshf.c:56: float sincoshf(const float x, const int iscosh)
                                    117 ;	-----------------------------------------
                                    118 ;	 function sincoshf
                                    119 ;	-----------------------------------------
      000000                        120 _sincoshf:
                           000007   121 	ar7 = 0x07
                           000006   122 	ar6 = 0x06
                           000005   123 	ar5 = 0x05
                           000004   124 	ar4 = 0x04
                           000003   125 	ar3 = 0x03
                           000002   126 	ar2 = 0x02
                           000001   127 	ar1 = 0x01
                           000000   128 	ar0 = 0x00
      000000 C0*00            [24]  129 	push	_bp
      000002 85 81*00         [24]  130 	mov	_bp,sp
      000005 C0 82            [24]  131 	push	dpl
      000007 C0 83            [24]  132 	push	dph
      000009 C0 F0            [24]  133 	push	b
      00000B C0 E0            [24]  134 	push	acc
      00000D E5 81            [12]  135 	mov	a,sp
      00000F 24 08            [12]  136 	add	a,#0x08
      000011 F5 81            [12]  137 	mov	sp,a
                                    138 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      000013 E4               [12]  139 	clr	a
      000014 C0 E0            [24]  140 	push	acc
      000016 C0 E0            [24]  141 	push	acc
      000018 C0 E0            [24]  142 	push	acc
      00001A C0 E0            [24]  143 	push	acc
      00001C A8*00            [24]  144 	mov	r0,_bp
      00001E 08               [12]  145 	inc	r0
      00001F 86 82            [24]  146 	mov	dpl,@r0
      000021 08               [12]  147 	inc	r0
      000022 86 83            [24]  148 	mov	dph,@r0
      000024 08               [12]  149 	inc	r0
      000025 86 F0            [24]  150 	mov	b,@r0
      000027 08               [12]  151 	inc	r0
      000028 E6               [12]  152 	mov	a,@r0
      000029 12r00r00         [24]  153 	lcall	___fslt
      00002C AB 82            [24]  154 	mov	r3,dpl
      00002E E5 81            [12]  155 	mov	a,sp
      000030 24 FC            [12]  156 	add	a,#0xfc
      000032 F5 81            [12]  157 	mov	sp,a
      000034 EB               [12]  158 	mov	a,r3
      000035 60 14            [24]  159 	jz	00102$
      000037 A8*00            [24]  160 	mov	r0,_bp
      000039 08               [12]  161 	inc	r0
      00003A 86 07            [24]  162 	mov	ar7,@r0
      00003C 08               [12]  163 	inc	r0
      00003D 86 06            [24]  164 	mov	ar6,@r0
      00003F 08               [12]  165 	inc	r0
      000040 86 05            [24]  166 	mov	ar5,@r0
      000042 08               [12]  167 	inc	r0
      000043 E6               [12]  168 	mov	a,@r0
      000044 B2 E7            [12]  169 	cpl	acc.7
      000046 FC               [12]  170 	mov	r4,a
      000047 D2*00            [12]  171 	setb	b0
      000049 80 10            [24]  172 	sjmp	00103$
      00004B                        173 00102$:
                                    174 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00004B A8*00            [24]  175 	mov	r0,_bp
      00004D 08               [12]  176 	inc	r0
      00004E 86 07            [24]  177 	mov	ar7,@r0
      000050 08               [12]  178 	inc	r0
      000051 86 06            [24]  179 	mov	ar6,@r0
      000053 08               [12]  180 	inc	r0
      000054 86 05            [24]  181 	mov	ar5,@r0
      000056 08               [12]  182 	inc	r0
      000057 86 04            [24]  183 	mov	ar4,@r0
      000059 C2*00            [12]  184 	clr	b0
      00005B                        185 00103$:
                                    186 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      00005B C0 07            [24]  187 	push	ar7
      00005D C0 06            [24]  188 	push	ar6
      00005F C0 05            [24]  189 	push	ar5
      000061 C0 04            [24]  190 	push	ar4
      000063 C0*00            [24]  191 	push	bits
      000065 E4               [12]  192 	clr	a
      000066 C0 E0            [24]  193 	push	acc
      000068 C0 E0            [24]  194 	push	acc
      00006A 74 80            [12]  195 	mov	a,#0x80
      00006C C0 E0            [24]  196 	push	acc
      00006E 74 3F            [12]  197 	mov	a,#0x3F
      000070 C0 E0            [24]  198 	push	acc
      000072 8F 82            [24]  199 	mov	dpl,r7
      000074 8E 83            [24]  200 	mov	dph,r6
      000076 8D F0            [24]  201 	mov	b,r5
      000078 EC               [12]  202 	mov	a,r4
      000079 12r00r00         [24]  203 	lcall	___fsgt
      00007C AB 82            [24]  204 	mov	r3,dpl
      00007E E5 81            [12]  205 	mov	a,sp
      000080 24 FC            [12]  206 	add	a,#0xfc
      000082 F5 81            [12]  207 	mov	sp,a
      000084 D0*00            [24]  208 	pop	bits
      000086 D0 04            [24]  209 	pop	ar4
      000088 D0 05            [24]  210 	pop	ar5
      00008A D0 06            [24]  211 	pop	ar6
      00008C D0 07            [24]  212 	pop	ar7
      00008E EB               [12]  213 	mov	a,r3
      00008F 70 0D            [24]  214 	jnz	00117$
      000091 E5*00            [12]  215 	mov	a,_bp
      000093 24 FC            [12]  216 	add	a,#0xfc
      000095 F8               [12]  217 	mov	r0,a
      000096 E6               [12]  218 	mov	a,@r0
      000097 08               [12]  219 	inc	r0
      000098 46               [12]  220 	orl	a,@r0
      000099 70 03            [24]  221 	jnz	00146$
      00009B 02r02rDE         [24]  222 	ljmp	00118$
      00009E                        223 00146$:
      00009E                        224 00117$:
                                    225 ;	sincoshf.c:66: if(y>YBAR)
      00009E C0 07            [24]  226 	push	ar7
      0000A0 C0 06            [24]  227 	push	ar6
      0000A2 C0 05            [24]  228 	push	ar5
      0000A4 C0 04            [24]  229 	push	ar4
      0000A6 C0*00            [24]  230 	push	bits
      0000A8 E4               [12]  231 	clr	a
      0000A9 C0 E0            [24]  232 	push	acc
      0000AB C0 E0            [24]  233 	push	acc
      0000AD 74 10            [12]  234 	mov	a,#0x10
      0000AF C0 E0            [24]  235 	push	acc
      0000B1 74 41            [12]  236 	mov	a,#0x41
      0000B3 C0 E0            [24]  237 	push	acc
      0000B5 8F 82            [24]  238 	mov	dpl,r7
      0000B7 8E 83            [24]  239 	mov	dph,r6
      0000B9 8D F0            [24]  240 	mov	b,r5
      0000BB EC               [12]  241 	mov	a,r4
      0000BC 12r00r00         [24]  242 	lcall	___fsgt
      0000BF AB 82            [24]  243 	mov	r3,dpl
      0000C1 E5 81            [12]  244 	mov	a,sp
      0000C3 24 FC            [12]  245 	add	a,#0xfc
      0000C5 F5 81            [12]  246 	mov	sp,a
      0000C7 D0*00            [24]  247 	pop	bits
      0000C9 D0 04            [24]  248 	pop	ar4
      0000CB D0 05            [24]  249 	pop	ar5
      0000CD D0 06            [24]  250 	pop	ar6
      0000CF D0 07            [24]  251 	pop	ar7
      0000D1 EB               [12]  252 	mov	a,r3
      0000D2 70 03            [24]  253 	jnz	00147$
      0000D4 02r01rE8         [24]  254 	ljmp	00110$
      0000D7                        255 00147$:
                                    256 ;	sincoshf.c:68: w=y-K1;
      0000D7 C0*00            [24]  257 	push	bits
      0000D9 E4               [12]  258 	clr	a
      0000DA C0 E0            [24]  259 	push	acc
      0000DC 74 73            [12]  260 	mov	a,#0x73
      0000DE C0 E0            [24]  261 	push	acc
      0000E0 74 31            [12]  262 	mov	a,#0x31
      0000E2 C0 E0            [24]  263 	push	acc
      0000E4 74 3F            [12]  264 	mov	a,#0x3F
      0000E6 C0 E0            [24]  265 	push	acc
      0000E8 8F 82            [24]  266 	mov	dpl,r7
      0000EA 8E 83            [24]  267 	mov	dph,r6
      0000EC 8D F0            [24]  268 	mov	b,r5
      0000EE EC               [12]  269 	mov	a,r4
      0000EF 12r00r00         [24]  270 	lcall	___fssub
      0000F2 AF 82            [24]  271 	mov	r7,dpl
      0000F4 AE 83            [24]  272 	mov	r6,dph
      0000F6 AD F0            [24]  273 	mov	r5,b
      0000F8 FC               [12]  274 	mov	r4,a
      0000F9 E5 81            [12]  275 	mov	a,sp
      0000FB 24 FC            [12]  276 	add	a,#0xfc
      0000FD F5 81            [12]  277 	mov	sp,a
      0000FF D0*00            [24]  278 	pop	bits
                                    279 ;	sincoshf.c:69: if (w>WMAX)
      000101 C0 07            [24]  280 	push	ar7
      000103 C0 06            [24]  281 	push	ar6
      000105 C0 05            [24]  282 	push	ar5
      000107 C0 04            [24]  283 	push	ar4
      000109 C0*00            [24]  284 	push	bits
      00010B 74 CF            [12]  285 	mov	a,#0xCF
      00010D C0 E0            [24]  286 	push	acc
      00010F 74 BD            [12]  287 	mov	a,#0xBD
      000111 C0 E0            [24]  288 	push	acc
      000113 74 33            [12]  289 	mov	a,#0x33
      000115 C0 E0            [24]  290 	push	acc
      000117 74 42            [12]  291 	mov	a,#0x42
      000119 C0 E0            [24]  292 	push	acc
      00011B 8F 82            [24]  293 	mov	dpl,r7
      00011D 8E 83            [24]  294 	mov	dph,r6
      00011F 8D F0            [24]  295 	mov	b,r5
      000121 EC               [12]  296 	mov	a,r4
      000122 12r00r00         [24]  297 	lcall	___fsgt
      000125 AB 82            [24]  298 	mov	r3,dpl
      000127 E5 81            [12]  299 	mov	a,sp
      000129 24 FC            [12]  300 	add	a,#0xfc
      00012B F5 81            [12]  301 	mov	sp,a
      00012D D0*00            [24]  302 	pop	bits
      00012F D0 04            [24]  303 	pop	ar4
      000131 D0 05            [24]  304 	pop	ar5
      000133 D0 06            [24]  305 	pop	ar6
      000135 D0 07            [24]  306 	pop	ar7
      000137 EB               [12]  307 	mov	a,r3
      000138 60 1B            [24]  308 	jz	00105$
                                    309 ;	sincoshf.c:71: errno=ERANGE;
      00013A 78r00            [12]  310 	mov	r0,#_errno
      00013C 74 22            [12]  311 	mov	a,#0x22
      00013E F2               [24]  312 	movx	@r0,a
      00013F 08               [12]  313 	inc	r0
      000140 E4               [12]  314 	clr	a
      000141 F2               [24]  315 	movx	@r0,a
                                    316 ;	sincoshf.c:72: z=HUGE_VALF;
      000142 E5*00            [12]  317 	mov	a,_bp
      000144 24 09            [12]  318 	add	a,#0x09
      000146 F8               [12]  319 	mov	r0,a
      000147 76 FF            [12]  320 	mov	@r0,#0xFF
      000149 08               [12]  321 	inc	r0
      00014A 76 FF            [12]  322 	mov	@r0,#0xFF
      00014C 08               [12]  323 	inc	r0
      00014D 76 7F            [12]  324 	mov	@r0,#0x7F
      00014F 08               [12]  325 	inc	r0
      000150 76 7F            [12]  326 	mov	@r0,#0x7F
      000152 02r02rC3         [24]  327 	ljmp	00111$
      000155                        328 00105$:
                                    329 ;	sincoshf.c:76: z=expf(w);
      000155 8F 82            [24]  330 	mov	dpl,r7
      000157 8E 83            [24]  331 	mov	dph,r6
      000159 8D F0            [24]  332 	mov	b,r5
      00015B EC               [12]  333 	mov	a,r4
      00015C C0*00            [24]  334 	push	bits
      00015E 12r00r00         [24]  335 	lcall	_expf
      000161 AF 82            [24]  336 	mov	r7,dpl
      000163 AE 83            [24]  337 	mov	r6,dph
      000165 AD F0            [24]  338 	mov	r5,b
      000167 FC               [12]  339 	mov	r4,a
      000168 D0*00            [24]  340 	pop	bits
      00016A E5*00            [12]  341 	mov	a,_bp
      00016C 24 09            [12]  342 	add	a,#0x09
      00016E F8               [12]  343 	mov	r0,a
      00016F A6 07            [24]  344 	mov	@r0,ar7
      000171 08               [12]  345 	inc	r0
      000172 A6 06            [24]  346 	mov	@r0,ar6
      000174 08               [12]  347 	inc	r0
      000175 A6 05            [24]  348 	mov	@r0,ar5
      000177 08               [12]  349 	inc	r0
      000178 A6 04            [24]  350 	mov	@r0,ar4
                                    351 ;	sincoshf.c:77: z+=K3*z;
      00017A C0*00            [24]  352 	push	bits
      00017C E5*00            [12]  353 	mov	a,_bp
      00017E 24 09            [12]  354 	add	a,#0x09
      000180 F8               [12]  355 	mov	r0,a
      000181 E6               [12]  356 	mov	a,@r0
      000182 C0 E0            [24]  357 	push	acc
      000184 08               [12]  358 	inc	r0
      000185 E6               [12]  359 	mov	a,@r0
      000186 C0 E0            [24]  360 	push	acc
      000188 08               [12]  361 	inc	r0
      000189 E6               [12]  362 	mov	a,@r0
      00018A C0 E0            [24]  363 	push	acc
      00018C 08               [12]  364 	inc	r0
      00018D E6               [12]  365 	mov	a,@r0
      00018E C0 E0            [24]  366 	push	acc
      000190 90 08 97         [24]  367 	mov	dptr,#0x0897
      000193 75 F0 68         [24]  368 	mov	b,#0x68
      000196 74 37            [12]  369 	mov	a,#0x37
      000198 12r00r00         [24]  370 	lcall	___fsmul
      00019B AF 82            [24]  371 	mov	r7,dpl
      00019D AE 83            [24]  372 	mov	r6,dph
      00019F AD F0            [24]  373 	mov	r5,b
      0001A1 FC               [12]  374 	mov	r4,a
      0001A2 E5 81            [12]  375 	mov	a,sp
      0001A4 24 FC            [12]  376 	add	a,#0xfc
      0001A6 F5 81            [12]  377 	mov	sp,a
      0001A8 D0*00            [24]  378 	pop	bits
      0001AA C0*00            [24]  379 	push	bits
      0001AC C0 07            [24]  380 	push	ar7
      0001AE C0 06            [24]  381 	push	ar6
      0001B0 C0 05            [24]  382 	push	ar5
      0001B2 C0 04            [24]  383 	push	ar4
      0001B4 E5*00            [12]  384 	mov	a,_bp
      0001B6 24 09            [12]  385 	add	a,#0x09
      0001B8 F8               [12]  386 	mov	r0,a
      0001B9 86 82            [24]  387 	mov	dpl,@r0
      0001BB 08               [12]  388 	inc	r0
      0001BC 86 83            [24]  389 	mov	dph,@r0
      0001BE 08               [12]  390 	inc	r0
      0001BF 86 F0            [24]  391 	mov	b,@r0
      0001C1 08               [12]  392 	inc	r0
      0001C2 E6               [12]  393 	mov	a,@r0
      0001C3 12r00r00         [24]  394 	lcall	___fsadd
      0001C6 AF 82            [24]  395 	mov	r7,dpl
      0001C8 AE 83            [24]  396 	mov	r6,dph
      0001CA AD F0            [24]  397 	mov	r5,b
      0001CC FC               [12]  398 	mov	r4,a
      0001CD E5 81            [12]  399 	mov	a,sp
      0001CF 24 FC            [12]  400 	add	a,#0xfc
      0001D1 F5 81            [12]  401 	mov	sp,a
      0001D3 D0*00            [24]  402 	pop	bits
      0001D5 E5*00            [12]  403 	mov	a,_bp
      0001D7 24 09            [12]  404 	add	a,#0x09
      0001D9 F8               [12]  405 	mov	r0,a
      0001DA A6 07            [24]  406 	mov	@r0,ar7
      0001DC 08               [12]  407 	inc	r0
      0001DD A6 06            [24]  408 	mov	@r0,ar6
      0001DF 08               [12]  409 	inc	r0
      0001E0 A6 05            [24]  410 	mov	@r0,ar5
      0001E2 08               [12]  411 	inc	r0
      0001E3 A6 04            [24]  412 	mov	@r0,ar4
      0001E5 02r02rC3         [24]  413 	ljmp	00111$
      0001E8                        414 00110$:
                                    415 ;	sincoshf.c:82: z=expf(y);
      0001E8 8F 82            [24]  416 	mov	dpl,r7
      0001EA 8E 83            [24]  417 	mov	dph,r6
      0001EC 8D F0            [24]  418 	mov	b,r5
      0001EE EC               [12]  419 	mov	a,r4
      0001EF C0*00            [24]  420 	push	bits
      0001F1 12r00r00         [24]  421 	lcall	_expf
      0001F4 AF 82            [24]  422 	mov	r7,dpl
      0001F6 AE 83            [24]  423 	mov	r6,dph
      0001F8 AD F0            [24]  424 	mov	r5,b
      0001FA FC               [12]  425 	mov	r4,a
      0001FB D0*00            [24]  426 	pop	bits
      0001FD E5*00            [12]  427 	mov	a,_bp
      0001FF 24 09            [12]  428 	add	a,#0x09
      000201 F8               [12]  429 	mov	r0,a
      000202 A6 07            [24]  430 	mov	@r0,ar7
      000204 08               [12]  431 	inc	r0
      000205 A6 06            [24]  432 	mov	@r0,ar6
      000207 08               [12]  433 	inc	r0
      000208 A6 05            [24]  434 	mov	@r0,ar5
      00020A 08               [12]  435 	inc	r0
      00020B A6 04            [24]  436 	mov	@r0,ar4
                                    437 ;	sincoshf.c:83: w=1.0/z;
      00020D C0*00            [24]  438 	push	bits
      00020F E5*00            [12]  439 	mov	a,_bp
      000211 24 09            [12]  440 	add	a,#0x09
      000213 F8               [12]  441 	mov	r0,a
      000214 E6               [12]  442 	mov	a,@r0
      000215 C0 E0            [24]  443 	push	acc
      000217 08               [12]  444 	inc	r0
      000218 E6               [12]  445 	mov	a,@r0
      000219 C0 E0            [24]  446 	push	acc
      00021B 08               [12]  447 	inc	r0
      00021C E6               [12]  448 	mov	a,@r0
      00021D C0 E0            [24]  449 	push	acc
      00021F 08               [12]  450 	inc	r0
      000220 E6               [12]  451 	mov	a,@r0
      000221 C0 E0            [24]  452 	push	acc
      000223 90 00 00         [24]  453 	mov	dptr,#0x0000
      000226 75 F0 80         [24]  454 	mov	b,#0x80
      000229 74 3F            [12]  455 	mov	a,#0x3F
      00022B 12r00r00         [24]  456 	lcall	___fsdiv
      00022E C8               [12]  457 	xch	a,r0
      00022F E5*00            [12]  458 	mov	a,_bp
      000231 24 05            [12]  459 	add	a,#0x05
      000233 C8               [12]  460 	xch	a,r0
      000234 A6 82            [24]  461 	mov	@r0,dpl
      000236 08               [12]  462 	inc	r0
      000237 A6 83            [24]  463 	mov	@r0,dph
      000239 08               [12]  464 	inc	r0
      00023A A6 F0            [24]  465 	mov	@r0,b
      00023C 08               [12]  466 	inc	r0
      00023D F6               [12]  467 	mov	@r0,a
      00023E E5 81            [12]  468 	mov	a,sp
      000240 24 FC            [12]  469 	add	a,#0xfc
      000242 F5 81            [12]  470 	mov	sp,a
      000244 D0*00            [24]  471 	pop	bits
      000246 E5*00            [12]  472 	mov	a,_bp
      000248 24 05            [12]  473 	add	a,#0x05
      00024A F8               [12]  474 	mov	r0,a
      00024B 86 07            [24]  475 	mov	ar7,@r0
      00024D 08               [12]  476 	inc	r0
      00024E 86 06            [24]  477 	mov	ar6,@r0
      000250 08               [12]  478 	inc	r0
      000251 86 05            [24]  479 	mov	ar5,@r0
      000253 08               [12]  480 	inc	r0
      000254 86 04            [24]  481 	mov	ar4,@r0
                                    482 ;	sincoshf.c:84: if(!iscosh) w=-w;
      000256 E5*00            [12]  483 	mov	a,_bp
      000258 24 FC            [12]  484 	add	a,#0xfc
      00025A F8               [12]  485 	mov	r0,a
      00025B E6               [12]  486 	mov	a,@r0
      00025C 08               [12]  487 	inc	r0
      00025D 46               [12]  488 	orl	a,@r0
      00025E 70 04            [24]  489 	jnz	00108$
      000260 EC               [12]  490 	mov	a,r4
      000261 B2 E7            [12]  491 	cpl	acc.7
      000263 FC               [12]  492 	mov	r4,a
      000264                        493 00108$:
                                    494 ;	sincoshf.c:85: z=(z+w)*0.5;
      000264 C0*00            [24]  495 	push	bits
      000266 C0 07            [24]  496 	push	ar7
      000268 C0 06            [24]  497 	push	ar6
      00026A C0 05            [24]  498 	push	ar5
      00026C C0 04            [24]  499 	push	ar4
      00026E E5*00            [12]  500 	mov	a,_bp
      000270 24 09            [12]  501 	add	a,#0x09
      000272 F8               [12]  502 	mov	r0,a
      000273 86 82            [24]  503 	mov	dpl,@r0
      000275 08               [12]  504 	inc	r0
      000276 86 83            [24]  505 	mov	dph,@r0
      000278 08               [12]  506 	inc	r0
      000279 86 F0            [24]  507 	mov	b,@r0
      00027B 08               [12]  508 	inc	r0
      00027C E6               [12]  509 	mov	a,@r0
      00027D 12r00r00         [24]  510 	lcall	___fsadd
      000280 AF 82            [24]  511 	mov	r7,dpl
      000282 AE 83            [24]  512 	mov	r6,dph
      000284 AD F0            [24]  513 	mov	r5,b
      000286 FC               [12]  514 	mov	r4,a
      000287 E5 81            [12]  515 	mov	a,sp
      000289 24 FC            [12]  516 	add	a,#0xfc
      00028B F5 81            [12]  517 	mov	sp,a
      00028D D0*00            [24]  518 	pop	bits
      00028F C0*00            [24]  519 	push	bits
      000291 C0 07            [24]  520 	push	ar7
      000293 C0 06            [24]  521 	push	ar6
      000295 C0 05            [24]  522 	push	ar5
      000297 C0 04            [24]  523 	push	ar4
      000299 90 00 00         [24]  524 	mov	dptr,#(0x00&0x00ff)
      00029C E4               [12]  525 	clr	a
      00029D F5 F0            [12]  526 	mov	b,a
      00029F 74 3F            [12]  527 	mov	a,#0x3F
      0002A1 12r00r00         [24]  528 	lcall	___fsmul
      0002A4 AF 82            [24]  529 	mov	r7,dpl
      0002A6 AE 83            [24]  530 	mov	r6,dph
      0002A8 AD F0            [24]  531 	mov	r5,b
      0002AA FC               [12]  532 	mov	r4,a
      0002AB E5 81            [12]  533 	mov	a,sp
      0002AD 24 FC            [12]  534 	add	a,#0xfc
      0002AF F5 81            [12]  535 	mov	sp,a
      0002B1 D0*00            [24]  536 	pop	bits
      0002B3 E5*00            [12]  537 	mov	a,_bp
      0002B5 24 09            [12]  538 	add	a,#0x09
      0002B7 F8               [12]  539 	mov	r0,a
      0002B8 A6 07            [24]  540 	mov	@r0,ar7
      0002BA 08               [12]  541 	inc	r0
      0002BB A6 06            [24]  542 	mov	@r0,ar6
      0002BD 08               [12]  543 	inc	r0
      0002BE A6 05            [24]  544 	mov	@r0,ar5
      0002C0 08               [12]  545 	inc	r0
      0002C1 A6 04            [24]  546 	mov	@r0,ar4
      0002C3                        547 00111$:
                                    548 ;	sincoshf.c:87: if(sign) z=-z;
      0002C3 20*00 03         [24]  549 	jb	b0,00150$
      0002C6 02r04rA0         [24]  550 	ljmp	00119$
      0002C9                        551 00150$:
      0002C9 E5*00            [12]  552 	mov	a,_bp
      0002CB 24 09            [12]  553 	add	a,#0x09
      0002CD F8               [12]  554 	mov	r0,a
      0002CE E6               [12]  555 	mov	a,@r0
      0002CF F6               [12]  556 	mov	@r0,a
      0002D0 08               [12]  557 	inc	r0
      0002D1 E6               [12]  558 	mov	a,@r0
      0002D2 F6               [12]  559 	mov	@r0,a
      0002D3 08               [12]  560 	inc	r0
      0002D4 E6               [12]  561 	mov	a,@r0
      0002D5 F6               [12]  562 	mov	@r0,a
      0002D6 08               [12]  563 	inc	r0
      0002D7 E6               [12]  564 	mov	a,@r0
      0002D8 B2 E7            [12]  565 	cpl	acc.7
      0002DA F6               [12]  566 	mov	@r0,a
      0002DB 02r04rA0         [24]  567 	ljmp	00119$
      0002DE                        568 00118$:
                                    569 ;	sincoshf.c:91: if (y<EPS)
      0002DE E4               [12]  570 	clr	a
      0002DF C0 E0            [24]  571 	push	acc
      0002E1 C0 E0            [24]  572 	push	acc
      0002E3 74 80            [12]  573 	mov	a,#0x80
      0002E5 C0 E0            [24]  574 	push	acc
      0002E7 74 39            [12]  575 	mov	a,#0x39
      0002E9 C0 E0            [24]  576 	push	acc
      0002EB 8F 82            [24]  577 	mov	dpl,r7
      0002ED 8E 83            [24]  578 	mov	dph,r6
      0002EF 8D F0            [24]  579 	mov	b,r5
      0002F1 EC               [12]  580 	mov	a,r4
      0002F2 12r00r00         [24]  581 	lcall	___fslt
      0002F5 AB 82            [24]  582 	mov	r3,dpl
      0002F7 E5 81            [12]  583 	mov	a,sp
      0002F9 24 FC            [12]  584 	add	a,#0xfc
      0002FB F5 81            [12]  585 	mov	sp,a
      0002FD EB               [12]  586 	mov	a,r3
      0002FE 60 19            [24]  587 	jz	00115$
                                    588 ;	sincoshf.c:92: z=x;
      000300 A8*00            [24]  589 	mov	r0,_bp
      000302 08               [12]  590 	inc	r0
      000303 E5*00            [12]  591 	mov	a,_bp
      000305 24 09            [12]  592 	add	a,#0x09
      000307 F9               [12]  593 	mov	r1,a
      000308 E6               [12]  594 	mov	a,@r0
      000309 F7               [12]  595 	mov	@r1,a
      00030A 08               [12]  596 	inc	r0
      00030B 09               [12]  597 	inc	r1
      00030C E6               [12]  598 	mov	a,@r0
      00030D F7               [12]  599 	mov	@r1,a
      00030E 08               [12]  600 	inc	r0
      00030F 09               [12]  601 	inc	r1
      000310 E6               [12]  602 	mov	a,@r0
      000311 F7               [12]  603 	mov	@r1,a
      000312 08               [12]  604 	inc	r0
      000313 09               [12]  605 	inc	r1
      000314 E6               [12]  606 	mov	a,@r0
      000315 F7               [12]  607 	mov	@r1,a
      000316 02r04rA0         [24]  608 	ljmp	00119$
      000319                        609 00115$:
                                    610 ;	sincoshf.c:95: z=x*x;
      000319 A8*00            [24]  611 	mov	r0,_bp
      00031B 08               [12]  612 	inc	r0
      00031C E6               [12]  613 	mov	a,@r0
      00031D C0 E0            [24]  614 	push	acc
      00031F 08               [12]  615 	inc	r0
      000320 E6               [12]  616 	mov	a,@r0
      000321 C0 E0            [24]  617 	push	acc
      000323 08               [12]  618 	inc	r0
      000324 E6               [12]  619 	mov	a,@r0
      000325 C0 E0            [24]  620 	push	acc
      000327 08               [12]  621 	inc	r0
      000328 E6               [12]  622 	mov	a,@r0
      000329 C0 E0            [24]  623 	push	acc
      00032B A8*00            [24]  624 	mov	r0,_bp
      00032D 08               [12]  625 	inc	r0
      00032E 86 82            [24]  626 	mov	dpl,@r0
      000330 08               [12]  627 	inc	r0
      000331 86 83            [24]  628 	mov	dph,@r0
      000333 08               [12]  629 	inc	r0
      000334 86 F0            [24]  630 	mov	b,@r0
      000336 08               [12]  631 	inc	r0
      000337 E6               [12]  632 	mov	a,@r0
      000338 12r00r00         [24]  633 	lcall	___fsmul
      00033B AA 82            [24]  634 	mov	r2,dpl
      00033D AB 83            [24]  635 	mov	r3,dph
      00033F AE F0            [24]  636 	mov	r6,b
      000341 FF               [12]  637 	mov	r7,a
      000342 E5 81            [12]  638 	mov	a,sp
      000344 24 FC            [12]  639 	add	a,#0xfc
      000346 F5 81            [12]  640 	mov	sp,a
      000348 E5*00            [12]  641 	mov	a,_bp
      00034A 24 09            [12]  642 	add	a,#0x09
      00034C F8               [12]  643 	mov	r0,a
      00034D A6 02            [24]  644 	mov	@r0,ar2
      00034F 08               [12]  645 	inc	r0
      000350 A6 03            [24]  646 	mov	@r0,ar3
      000352 08               [12]  647 	inc	r0
      000353 A6 06            [24]  648 	mov	@r0,ar6
      000355 08               [12]  649 	inc	r0
      000356 A6 07            [24]  650 	mov	@r0,ar7
                                    651 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      000358 E5*00            [12]  652 	mov	a,_bp
      00035A 24 09            [12]  653 	add	a,#0x09
      00035C F8               [12]  654 	mov	r0,a
      00035D E6               [12]  655 	mov	a,@r0
      00035E C0 E0            [24]  656 	push	acc
      000360 08               [12]  657 	inc	r0
      000361 E6               [12]  658 	mov	a,@r0
      000362 C0 E0            [24]  659 	push	acc
      000364 08               [12]  660 	inc	r0
      000365 E6               [12]  661 	mov	a,@r0
      000366 C0 E0            [24]  662 	push	acc
      000368 08               [12]  663 	inc	r0
      000369 E6               [12]  664 	mov	a,@r0
      00036A C0 E0            [24]  665 	push	acc
      00036C A8*00            [24]  666 	mov	r0,_bp
      00036E 08               [12]  667 	inc	r0
      00036F 86 82            [24]  668 	mov	dpl,@r0
      000371 08               [12]  669 	inc	r0
      000372 86 83            [24]  670 	mov	dph,@r0
      000374 08               [12]  671 	inc	r0
      000375 86 F0            [24]  672 	mov	b,@r0
      000377 08               [12]  673 	inc	r0
      000378 E6               [12]  674 	mov	a,@r0
      000379 12r00r00         [24]  675 	lcall	___fsmul
      00037C C8               [12]  676 	xch	a,r0
      00037D E5*00            [12]  677 	mov	a,_bp
      00037F 24 05            [12]  678 	add	a,#0x05
      000381 C8               [12]  679 	xch	a,r0
      000382 A6 82            [24]  680 	mov	@r0,dpl
      000384 08               [12]  681 	inc	r0
      000385 A6 83            [24]  682 	mov	@r0,dph
      000387 08               [12]  683 	inc	r0
      000388 A6 F0            [24]  684 	mov	@r0,b
      00038A 08               [12]  685 	inc	r0
      00038B F6               [12]  686 	mov	@r0,a
      00038C E5 81            [12]  687 	mov	a,sp
      00038E 24 FC            [12]  688 	add	a,#0xfc
      000390 F5 81            [12]  689 	mov	sp,a
      000392 E5*00            [12]  690 	mov	a,_bp
      000394 24 09            [12]  691 	add	a,#0x09
      000396 F8               [12]  692 	mov	r0,a
      000397 E6               [12]  693 	mov	a,@r0
      000398 C0 E0            [24]  694 	push	acc
      00039A 08               [12]  695 	inc	r0
      00039B E6               [12]  696 	mov	a,@r0
      00039C C0 E0            [24]  697 	push	acc
      00039E 08               [12]  698 	inc	r0
      00039F E6               [12]  699 	mov	a,@r0
      0003A0 C0 E0            [24]  700 	push	acc
      0003A2 08               [12]  701 	inc	r0
      0003A3 E6               [12]  702 	mov	a,@r0
      0003A4 C0 E0            [24]  703 	push	acc
      0003A6 90 E6 EA         [24]  704 	mov	dptr,#0xE6EA
      0003A9 75 F0 42         [24]  705 	mov	b,#0x42
      0003AC 74 BE            [12]  706 	mov	a,#0xBE
      0003AE 12r00r00         [24]  707 	lcall	___fsmul
      0003B1 AA 82            [24]  708 	mov	r2,dpl
      0003B3 AB 83            [24]  709 	mov	r3,dph
      0003B5 AE F0            [24]  710 	mov	r6,b
      0003B7 FF               [12]  711 	mov	r7,a
      0003B8 E5 81            [12]  712 	mov	a,sp
      0003BA 24 FC            [12]  713 	add	a,#0xfc
      0003BC F5 81            [12]  714 	mov	sp,a
      0003BE 74 F0            [12]  715 	mov	a,#0xF0
      0003C0 C0 E0            [24]  716 	push	acc
      0003C2 74 69            [12]  717 	mov	a,#0x69
      0003C4 C0 E0            [24]  718 	push	acc
      0003C6 74 E4            [12]  719 	mov	a,#0xE4
      0003C8 C0 E0            [24]  720 	push	acc
      0003CA 74 C0            [12]  721 	mov	a,#0xC0
      0003CC C0 E0            [24]  722 	push	acc
      0003CE 8A 82            [24]  723 	mov	dpl,r2
      0003D0 8B 83            [24]  724 	mov	dph,r3
      0003D2 8E F0            [24]  725 	mov	b,r6
      0003D4 EF               [12]  726 	mov	a,r7
      0003D5 12r00r00         [24]  727 	lcall	___fsadd
      0003D8 AC 82            [24]  728 	mov	r4,dpl
      0003DA AD 83            [24]  729 	mov	r5,dph
      0003DC AE F0            [24]  730 	mov	r6,b
      0003DE FF               [12]  731 	mov	r7,a
      0003DF E5 81            [12]  732 	mov	a,sp
      0003E1 24 FC            [12]  733 	add	a,#0xfc
      0003E3 F5 81            [12]  734 	mov	sp,a
      0003E5 C0 04            [24]  735 	push	ar4
      0003E7 C0 05            [24]  736 	push	ar5
      0003E9 C0 06            [24]  737 	push	ar6
      0003EB C0 07            [24]  738 	push	ar7
      0003ED E5*00            [12]  739 	mov	a,_bp
      0003EF 24 05            [12]  740 	add	a,#0x05
      0003F1 F8               [12]  741 	mov	r0,a
      0003F2 86 82            [24]  742 	mov	dpl,@r0
      0003F4 08               [12]  743 	inc	r0
      0003F5 86 83            [24]  744 	mov	dph,@r0
      0003F7 08               [12]  745 	inc	r0
      0003F8 86 F0            [24]  746 	mov	b,@r0
      0003FA 08               [12]  747 	inc	r0
      0003FB E6               [12]  748 	mov	a,@r0
      0003FC 12r00r00         [24]  749 	lcall	___fsmul
      0003FF C8               [12]  750 	xch	a,r0
      000400 E5*00            [12]  751 	mov	a,_bp
      000402 24 05            [12]  752 	add	a,#0x05
      000404 C8               [12]  753 	xch	a,r0
      000405 A6 82            [24]  754 	mov	@r0,dpl
      000407 08               [12]  755 	inc	r0
      000408 A6 83            [24]  756 	mov	@r0,dph
      00040A 08               [12]  757 	inc	r0
      00040B A6 F0            [24]  758 	mov	@r0,b
      00040D 08               [12]  759 	inc	r0
      00040E F6               [12]  760 	mov	@r0,a
      00040F E5 81            [12]  761 	mov	a,sp
      000411 24 FC            [12]  762 	add	a,#0xfc
      000413 F5 81            [12]  763 	mov	sp,a
      000415 74 93            [12]  764 	mov	a,#0x93
      000417 C0 E0            [24]  765 	push	acc
      000419 74 4F            [12]  766 	mov	a,#0x4F
      00041B C0 E0            [24]  767 	push	acc
      00041D 74 2B            [12]  768 	mov	a,#0x2B
      00041F C0 E0            [24]  769 	push	acc
      000421 74 C2            [12]  770 	mov	a,#0xC2
      000423 C0 E0            [24]  771 	push	acc
      000425 E5*00            [12]  772 	mov	a,_bp
      000427 24 09            [12]  773 	add	a,#0x09
      000429 F8               [12]  774 	mov	r0,a
      00042A 86 82            [24]  775 	mov	dpl,@r0
      00042C 08               [12]  776 	inc	r0
      00042D 86 83            [24]  777 	mov	dph,@r0
      00042F 08               [12]  778 	inc	r0
      000430 86 F0            [24]  779 	mov	b,@r0
      000432 08               [12]  780 	inc	r0
      000433 E6               [12]  781 	mov	a,@r0
      000434 12r00r00         [24]  782 	lcall	___fsadd
      000437 AA 82            [24]  783 	mov	r2,dpl
      000439 AB 83            [24]  784 	mov	r3,dph
      00043B AE F0            [24]  785 	mov	r6,b
      00043D FF               [12]  786 	mov	r7,a
      00043E E5 81            [12]  787 	mov	a,sp
      000440 24 FC            [12]  788 	add	a,#0xfc
      000442 F5 81            [12]  789 	mov	sp,a
      000444 C0 02            [24]  790 	push	ar2
      000446 C0 03            [24]  791 	push	ar3
      000448 C0 06            [24]  792 	push	ar6
      00044A C0 07            [24]  793 	push	ar7
      00044C E5*00            [12]  794 	mov	a,_bp
      00044E 24 05            [12]  795 	add	a,#0x05
      000450 F8               [12]  796 	mov	r0,a
      000451 86 82            [24]  797 	mov	dpl,@r0
      000453 08               [12]  798 	inc	r0
      000454 86 83            [24]  799 	mov	dph,@r0
      000456 08               [12]  800 	inc	r0
      000457 86 F0            [24]  801 	mov	b,@r0
      000459 08               [12]  802 	inc	r0
      00045A E6               [12]  803 	mov	a,@r0
      00045B 12r00r00         [24]  804 	lcall	___fsdiv
      00045E AC 82            [24]  805 	mov	r4,dpl
      000460 AD 83            [24]  806 	mov	r5,dph
      000462 AE F0            [24]  807 	mov	r6,b
      000464 FF               [12]  808 	mov	r7,a
      000465 E5 81            [12]  809 	mov	a,sp
      000467 24 FC            [12]  810 	add	a,#0xfc
      000469 F5 81            [12]  811 	mov	sp,a
      00046B C0 04            [24]  812 	push	ar4
      00046D C0 05            [24]  813 	push	ar5
      00046F C0 06            [24]  814 	push	ar6
      000471 C0 07            [24]  815 	push	ar7
      000473 A8*00            [24]  816 	mov	r0,_bp
      000475 08               [12]  817 	inc	r0
      000476 86 82            [24]  818 	mov	dpl,@r0
      000478 08               [12]  819 	inc	r0
      000479 86 83            [24]  820 	mov	dph,@r0
      00047B 08               [12]  821 	inc	r0
      00047C 86 F0            [24]  822 	mov	b,@r0
      00047E 08               [12]  823 	inc	r0
      00047F E6               [12]  824 	mov	a,@r0
      000480 12r00r00         [24]  825 	lcall	___fsadd
      000483 AC 82            [24]  826 	mov	r4,dpl
      000485 AD 83            [24]  827 	mov	r5,dph
      000487 AE F0            [24]  828 	mov	r6,b
      000489 FF               [12]  829 	mov	r7,a
      00048A E5 81            [12]  830 	mov	a,sp
      00048C 24 FC            [12]  831 	add	a,#0xfc
      00048E F5 81            [12]  832 	mov	sp,a
      000490 E5*00            [12]  833 	mov	a,_bp
      000492 24 09            [12]  834 	add	a,#0x09
      000494 F8               [12]  835 	mov	r0,a
      000495 A6 04            [24]  836 	mov	@r0,ar4
      000497 08               [12]  837 	inc	r0
      000498 A6 05            [24]  838 	mov	@r0,ar5
      00049A 08               [12]  839 	inc	r0
      00049B A6 06            [24]  840 	mov	@r0,ar6
      00049D 08               [12]  841 	inc	r0
      00049E A6 07            [24]  842 	mov	@r0,ar7
      0004A0                        843 00119$:
                                    844 ;	sincoshf.c:99: return z;
      0004A0 E5*00            [12]  845 	mov	a,_bp
      0004A2 24 09            [12]  846 	add	a,#0x09
      0004A4 F8               [12]  847 	mov	r0,a
      0004A5 86 82            [24]  848 	mov	dpl,@r0
      0004A7 08               [12]  849 	inc	r0
      0004A8 86 83            [24]  850 	mov	dph,@r0
      0004AA 08               [12]  851 	inc	r0
      0004AB 86 F0            [24]  852 	mov	b,@r0
      0004AD 08               [12]  853 	inc	r0
      0004AE E6               [12]  854 	mov	a,@r0
      0004AF 85*00 81         [24]  855 	mov	sp,_bp
      0004B2 D0*00            [24]  856 	pop	_bp
      0004B4 22               [24]  857 	ret
                                    858 	.area CSEG    (CODE)
                                    859 	.area CONST   (CODE)
                                    860 	.area XINIT   (CODE)
                                    861 	.area CABS    (ABS,CODE)
