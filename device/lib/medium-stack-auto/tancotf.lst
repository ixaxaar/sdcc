                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:06 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module tancotf
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tancotf
                                     13 	.globl _fabsf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'tancotf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscotan                   Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;f                         Allocated to stack - _bp +9
                                    111 ;g                         Allocated to stack - _bp +13
                                    112 ;xn                        Allocated to stack - _bp +17
                                    113 ;xnum                      Allocated to stack - _bp +21
                                    114 ;xden                      Allocated to stack - _bp +25
                                    115 ;n                         Allocated to stack - _bp +29
                                    116 ;sloc0                     Allocated to stack - _bp +5
                                    117 ;------------------------------------------------------------
                                    118 ;	tancotf.c:53: float tancotf(const float x, const bool iscotan)
                                    119 ;	-----------------------------------------
                                    120 ;	 function tancotf
                                    121 ;	-----------------------------------------
      000000                        122 _tancotf:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 85 81*00         [24]  132 	mov	_bp,sp
      000005 C0 82            [24]  133 	push	dpl
      000007 C0 83            [24]  134 	push	dph
      000009 C0 F0            [24]  135 	push	b
      00000B C0 E0            [24]  136 	push	acc
      00000D E5 81            [12]  137 	mov	a,sp
      00000F 24 1A            [12]  138 	add	a,#0x1A
      000011 F5 81            [12]  139 	mov	sp,a
                                    140 ;	tancotf.c:58: if (fabsf(x) > YMAX)
      000013 A8*00            [24]  141 	mov	r0,_bp
      000015 08               [12]  142 	inc	r0
      000016 86 82            [24]  143 	mov	dpl,@r0
      000018 08               [12]  144 	inc	r0
      000019 86 83            [24]  145 	mov	dph,@r0
      00001B 08               [12]  146 	inc	r0
      00001C 86 F0            [24]  147 	mov	b,@r0
      00001E 08               [12]  148 	inc	r0
      00001F E6               [12]  149 	mov	a,@r0
      000020 C0*00            [24]  150 	push	bits
      000022 12r00r00         [24]  151 	lcall	_fabsf
      000025 AA 82            [24]  152 	mov	r2,dpl
      000027 AB 83            [24]  153 	mov	r3,dph
      000029 AE F0            [24]  154 	mov	r6,b
      00002B FF               [12]  155 	mov	r7,a
      00002C D0*00            [24]  156 	pop	bits
      00002E C0*00            [24]  157 	push	bits
      000030 E4               [12]  158 	clr	a
      000031 C0 E0            [24]  159 	push	acc
      000033 74 08            [12]  160 	mov	a,#0x08
      000035 C0 E0            [24]  161 	push	acc
      000037 74 C9            [12]  162 	mov	a,#0xC9
      000039 C0 E0            [24]  163 	push	acc
      00003B 74 45            [12]  164 	mov	a,#0x45
      00003D C0 E0            [24]  165 	push	acc
      00003F 8A 82            [24]  166 	mov	dpl,r2
      000041 8B 83            [24]  167 	mov	dph,r3
      000043 8E F0            [24]  168 	mov	b,r6
      000045 EF               [12]  169 	mov	a,r7
      000046 12r00r00         [24]  170 	lcall	___fsgt
      000049 AF 82            [24]  171 	mov	r7,dpl
      00004B E5 81            [12]  172 	mov	a,sp
      00004D 24 FC            [12]  173 	add	a,#0xfc
      00004F F5 81            [12]  174 	mov	sp,a
      000051 D0*00            [24]  175 	pop	bits
      000053 EF               [12]  176 	mov	a,r7
      000054 60 11            [24]  177 	jz	00102$
                                    178 ;	tancotf.c:60: errno = ERANGE;
      000056 78r00            [12]  179 	mov	r0,#_errno
      000058 74 22            [12]  180 	mov	a,#0x22
      00005A F2               [24]  181 	movx	@r0,a
      00005B 08               [12]  182 	inc	r0
      00005C E4               [12]  183 	clr	a
      00005D F2               [24]  184 	movx	@r0,a
                                    185 ;	tancotf.c:61: return 0.0;
      00005E 90 00 00         [24]  186 	mov	dptr,#(0x00&0x00ff)
      000061 E4               [12]  187 	clr	a
      000062 F5 F0            [12]  188 	mov	b,a
      000064 02r05rFB         [24]  189 	ljmp	00115$
      000067                        190 00102$:
                                    191 ;	tancotf.c:65: n=(x*TWO_O_PI+(x>0.0?0.5:-0.5)); /*works for +-x*/
      000067 C0*00            [24]  192 	push	bits
      000069 A8*00            [24]  193 	mov	r0,_bp
      00006B 08               [12]  194 	inc	r0
      00006C E6               [12]  195 	mov	a,@r0
      00006D C0 E0            [24]  196 	push	acc
      00006F 08               [12]  197 	inc	r0
      000070 E6               [12]  198 	mov	a,@r0
      000071 C0 E0            [24]  199 	push	acc
      000073 08               [12]  200 	inc	r0
      000074 E6               [12]  201 	mov	a,@r0
      000075 C0 E0            [24]  202 	push	acc
      000077 08               [12]  203 	inc	r0
      000078 E6               [12]  204 	mov	a,@r0
      000079 C0 E0            [24]  205 	push	acc
      00007B 90 F9 83         [24]  206 	mov	dptr,#0xF983
      00007E 75 F0 22         [24]  207 	mov	b,#0x22
      000081 74 3F            [12]  208 	mov	a,#0x3F
      000083 12r00r00         [24]  209 	lcall	___fsmul
      000086 AC 82            [24]  210 	mov	r4,dpl
      000088 AD 83            [24]  211 	mov	r5,dph
      00008A AE F0            [24]  212 	mov	r6,b
      00008C FF               [12]  213 	mov	r7,a
      00008D E5 81            [12]  214 	mov	a,sp
      00008F 24 FC            [12]  215 	add	a,#0xfc
      000091 F5 81            [12]  216 	mov	sp,a
      000093 D0*00            [24]  217 	pop	bits
      000095 C0 07            [24]  218 	push	ar7
      000097 C0 06            [24]  219 	push	ar6
      000099 C0 05            [24]  220 	push	ar5
      00009B C0 04            [24]  221 	push	ar4
      00009D C0*00            [24]  222 	push	bits
      00009F E4               [12]  223 	clr	a
      0000A0 C0 E0            [24]  224 	push	acc
      0000A2 C0 E0            [24]  225 	push	acc
      0000A4 C0 E0            [24]  226 	push	acc
      0000A6 C0 E0            [24]  227 	push	acc
      0000A8 A8*00            [24]  228 	mov	r0,_bp
      0000AA 08               [12]  229 	inc	r0
      0000AB 86 82            [24]  230 	mov	dpl,@r0
      0000AD 08               [12]  231 	inc	r0
      0000AE 86 83            [24]  232 	mov	dph,@r0
      0000B0 08               [12]  233 	inc	r0
      0000B1 86 F0            [24]  234 	mov	b,@r0
      0000B3 08               [12]  235 	inc	r0
      0000B4 E6               [12]  236 	mov	a,@r0
      0000B5 12r00r00         [24]  237 	lcall	___fsgt
      0000B8 AB 82            [24]  238 	mov	r3,dpl
      0000BA E5 81            [12]  239 	mov	a,sp
      0000BC 24 FC            [12]  240 	add	a,#0xfc
      0000BE F5 81            [12]  241 	mov	sp,a
      0000C0 D0*00            [24]  242 	pop	bits
      0000C2 D0 04            [24]  243 	pop	ar4
      0000C4 D0 05            [24]  244 	pop	ar5
      0000C6 D0 06            [24]  245 	pop	ar6
      0000C8 D0 07            [24]  246 	pop	ar7
      0000CA EB               [12]  247 	mov	a,r3
      0000CB 60 10            [24]  248 	jz	00117$
      0000CD E5*00            [12]  249 	mov	a,_bp
      0000CF 24 05            [12]  250 	add	a,#0x05
      0000D1 F8               [12]  251 	mov	r0,a
      0000D2 E4               [12]  252 	clr	a
      0000D3 F6               [12]  253 	mov	@r0,a
      0000D4 08               [12]  254 	inc	r0
      0000D5 F6               [12]  255 	mov	@r0,a
      0000D6 08               [12]  256 	inc	r0
      0000D7 F6               [12]  257 	mov	@r0,a
      0000D8 08               [12]  258 	inc	r0
      0000D9 76 3F            [12]  259 	mov	@r0,#0x3F
      0000DB 80 0E            [24]  260 	sjmp	00118$
      0000DD                        261 00117$:
      0000DD E5*00            [12]  262 	mov	a,_bp
      0000DF 24 05            [12]  263 	add	a,#0x05
      0000E1 F8               [12]  264 	mov	r0,a
      0000E2 E4               [12]  265 	clr	a
      0000E3 F6               [12]  266 	mov	@r0,a
      0000E4 08               [12]  267 	inc	r0
      0000E5 F6               [12]  268 	mov	@r0,a
      0000E6 08               [12]  269 	inc	r0
      0000E7 F6               [12]  270 	mov	@r0,a
      0000E8 08               [12]  271 	inc	r0
      0000E9 76 BF            [12]  272 	mov	@r0,#0xBF
      0000EB                        273 00118$:
      0000EB C0*00            [24]  274 	push	bits
      0000ED E5*00            [12]  275 	mov	a,_bp
      0000EF 24 05            [12]  276 	add	a,#0x05
      0000F1 F8               [12]  277 	mov	r0,a
      0000F2 E6               [12]  278 	mov	a,@r0
      0000F3 C0 E0            [24]  279 	push	acc
      0000F5 08               [12]  280 	inc	r0
      0000F6 E6               [12]  281 	mov	a,@r0
      0000F7 C0 E0            [24]  282 	push	acc
      0000F9 08               [12]  283 	inc	r0
      0000FA E6               [12]  284 	mov	a,@r0
      0000FB C0 E0            [24]  285 	push	acc
      0000FD 08               [12]  286 	inc	r0
      0000FE E6               [12]  287 	mov	a,@r0
      0000FF C0 E0            [24]  288 	push	acc
      000101 8C 82            [24]  289 	mov	dpl,r4
      000103 8D 83            [24]  290 	mov	dph,r5
      000105 8E F0            [24]  291 	mov	b,r6
      000107 EF               [12]  292 	mov	a,r7
      000108 12r00r00         [24]  293 	lcall	___fsadd
      00010B AC 82            [24]  294 	mov	r4,dpl
      00010D AD 83            [24]  295 	mov	r5,dph
      00010F AE F0            [24]  296 	mov	r6,b
      000111 FF               [12]  297 	mov	r7,a
      000112 E5 81            [12]  298 	mov	a,sp
      000114 24 FC            [12]  299 	add	a,#0xfc
      000116 F5 81            [12]  300 	mov	sp,a
      000118 D0*00            [24]  301 	pop	bits
      00011A 8C 82            [24]  302 	mov	dpl,r4
      00011C 8D 83            [24]  303 	mov	dph,r5
      00011E 8E F0            [24]  304 	mov	b,r6
      000120 EF               [12]  305 	mov	a,r7
      000121 C0*00            [24]  306 	push	bits
      000123 12r00r00         [24]  307 	lcall	___fs2sint
      000126 AE 82            [24]  308 	mov	r6,dpl
      000128 AF 83            [24]  309 	mov	r7,dph
      00012A D0*00            [24]  310 	pop	bits
      00012C E5*00            [12]  311 	mov	a,_bp
      00012E 24 1D            [12]  312 	add	a,#0x1d
      000130 F8               [12]  313 	mov	r0,a
      000131 A6 06            [24]  314 	mov	@r0,ar6
      000133 08               [12]  315 	inc	r0
      000134 A6 07            [24]  316 	mov	@r0,ar7
                                    317 ;	tancotf.c:66: xn=n;
      000136 E5*00            [12]  318 	mov	a,_bp
      000138 24 1D            [12]  319 	add	a,#0x1d
      00013A F8               [12]  320 	mov	r0,a
      00013B 86 82            [24]  321 	mov	dpl,@r0
      00013D 08               [12]  322 	inc	r0
      00013E 86 83            [24]  323 	mov	dph,@r0
      000140 C0*00            [24]  324 	push	bits
      000142 12r00r00         [24]  325 	lcall	___sint2fs
      000145 AA 82            [24]  326 	mov	r2,dpl
      000147 AB 83            [24]  327 	mov	r3,dph
      000149 AC F0            [24]  328 	mov	r4,b
      00014B FD               [12]  329 	mov	r5,a
      00014C D0*00            [24]  330 	pop	bits
      00014E E5*00            [12]  331 	mov	a,_bp
      000150 24 11            [12]  332 	add	a,#0x11
      000152 F8               [12]  333 	mov	r0,a
      000153 A6 02            [24]  334 	mov	@r0,ar2
      000155 08               [12]  335 	inc	r0
      000156 A6 03            [24]  336 	mov	@r0,ar3
      000158 08               [12]  337 	inc	r0
      000159 A6 04            [24]  338 	mov	@r0,ar4
      00015B 08               [12]  339 	inc	r0
      00015C A6 05            [24]  340 	mov	@r0,ar5
                                    341 ;	tancotf.c:68: xnum=(int)x;
      00015E A8*00            [24]  342 	mov	r0,_bp
      000160 08               [12]  343 	inc	r0
      000161 86 82            [24]  344 	mov	dpl,@r0
      000163 08               [12]  345 	inc	r0
      000164 86 83            [24]  346 	mov	dph,@r0
      000166 08               [12]  347 	inc	r0
      000167 86 F0            [24]  348 	mov	b,@r0
      000169 08               [12]  349 	inc	r0
      00016A E6               [12]  350 	mov	a,@r0
      00016B C0*00            [24]  351 	push	bits
      00016D 12r00r00         [24]  352 	lcall	___fs2sint
      000170 D0*00            [24]  353 	pop	bits
      000172 C0*00            [24]  354 	push	bits
      000174 12r00r00         [24]  355 	lcall	___sint2fs
      000177 AF 82            [24]  356 	mov	r7,dpl
      000179 AE 83            [24]  357 	mov	r6,dph
      00017B AD F0            [24]  358 	mov	r5,b
      00017D FC               [12]  359 	mov	r4,a
      00017E D0*00            [24]  360 	pop	bits
      000180 E5*00            [12]  361 	mov	a,_bp
      000182 24 15            [12]  362 	add	a,#0x15
      000184 F8               [12]  363 	mov	r0,a
      000185 A6 07            [24]  364 	mov	@r0,ar7
      000187 08               [12]  365 	inc	r0
      000188 A6 06            [24]  366 	mov	@r0,ar6
      00018A 08               [12]  367 	inc	r0
      00018B A6 05            [24]  368 	mov	@r0,ar5
      00018D 08               [12]  369 	inc	r0
      00018E A6 04            [24]  370 	mov	@r0,ar4
                                    371 ;	tancotf.c:69: xden=x-xnum;
      000190 C0*00            [24]  372 	push	bits
      000192 E5*00            [12]  373 	mov	a,_bp
      000194 24 15            [12]  374 	add	a,#0x15
      000196 F8               [12]  375 	mov	r0,a
      000197 E6               [12]  376 	mov	a,@r0
      000198 C0 E0            [24]  377 	push	acc
      00019A 08               [12]  378 	inc	r0
      00019B E6               [12]  379 	mov	a,@r0
      00019C C0 E0            [24]  380 	push	acc
      00019E 08               [12]  381 	inc	r0
      00019F E6               [12]  382 	mov	a,@r0
      0001A0 C0 E0            [24]  383 	push	acc
      0001A2 08               [12]  384 	inc	r0
      0001A3 E6               [12]  385 	mov	a,@r0
      0001A4 C0 E0            [24]  386 	push	acc
      0001A6 A8*00            [24]  387 	mov	r0,_bp
      0001A8 08               [12]  388 	inc	r0
      0001A9 86 82            [24]  389 	mov	dpl,@r0
      0001AB 08               [12]  390 	inc	r0
      0001AC 86 83            [24]  391 	mov	dph,@r0
      0001AE 08               [12]  392 	inc	r0
      0001AF 86 F0            [24]  393 	mov	b,@r0
      0001B1 08               [12]  394 	inc	r0
      0001B2 E6               [12]  395 	mov	a,@r0
      0001B3 12r00r00         [24]  396 	lcall	___fssub
      0001B6 AF 82            [24]  397 	mov	r7,dpl
      0001B8 AE 83            [24]  398 	mov	r6,dph
      0001BA AD F0            [24]  399 	mov	r5,b
      0001BC FC               [12]  400 	mov	r4,a
      0001BD E5 81            [12]  401 	mov	a,sp
      0001BF 24 FC            [12]  402 	add	a,#0xfc
      0001C1 F5 81            [12]  403 	mov	sp,a
      0001C3 D0*00            [24]  404 	pop	bits
      0001C5 E5*00            [12]  405 	mov	a,_bp
      0001C7 24 19            [12]  406 	add	a,#0x19
      0001C9 F8               [12]  407 	mov	r0,a
      0001CA A6 07            [24]  408 	mov	@r0,ar7
      0001CC 08               [12]  409 	inc	r0
      0001CD A6 06            [24]  410 	mov	@r0,ar6
      0001CF 08               [12]  411 	inc	r0
      0001D0 A6 05            [24]  412 	mov	@r0,ar5
      0001D2 08               [12]  413 	inc	r0
      0001D3 A6 04            [24]  414 	mov	@r0,ar4
                                    415 ;	tancotf.c:70: f=((xnum-xn*C1)+xden)-xn*C2;
      0001D5 C0*00            [24]  416 	push	bits
      0001D7 E5*00            [12]  417 	mov	a,_bp
      0001D9 24 11            [12]  418 	add	a,#0x11
      0001DB F8               [12]  419 	mov	r0,a
      0001DC E6               [12]  420 	mov	a,@r0
      0001DD C0 E0            [24]  421 	push	acc
      0001DF 08               [12]  422 	inc	r0
      0001E0 E6               [12]  423 	mov	a,@r0
      0001E1 C0 E0            [24]  424 	push	acc
      0001E3 08               [12]  425 	inc	r0
      0001E4 E6               [12]  426 	mov	a,@r0
      0001E5 C0 E0            [24]  427 	push	acc
      0001E7 08               [12]  428 	inc	r0
      0001E8 E6               [12]  429 	mov	a,@r0
      0001E9 C0 E0            [24]  430 	push	acc
      0001EB 90 00 00         [24]  431 	mov	dptr,#0x0000
      0001EE 75 F0 C9         [24]  432 	mov	b,#0xC9
      0001F1 74 3F            [12]  433 	mov	a,#0x3F
      0001F3 12r00r00         [24]  434 	lcall	___fsmul
      0001F6 AC 82            [24]  435 	mov	r4,dpl
      0001F8 AD 83            [24]  436 	mov	r5,dph
      0001FA AE F0            [24]  437 	mov	r6,b
      0001FC FF               [12]  438 	mov	r7,a
      0001FD E5 81            [12]  439 	mov	a,sp
      0001FF 24 FC            [12]  440 	add	a,#0xfc
      000201 F5 81            [12]  441 	mov	sp,a
      000203 D0*00            [24]  442 	pop	bits
      000205 C0*00            [24]  443 	push	bits
      000207 C0 04            [24]  444 	push	ar4
      000209 C0 05            [24]  445 	push	ar5
      00020B C0 06            [24]  446 	push	ar6
      00020D C0 07            [24]  447 	push	ar7
      00020F E5*00            [12]  448 	mov	a,_bp
      000211 24 15            [12]  449 	add	a,#0x15
      000213 F8               [12]  450 	mov	r0,a
      000214 86 82            [24]  451 	mov	dpl,@r0
      000216 08               [12]  452 	inc	r0
      000217 86 83            [24]  453 	mov	dph,@r0
      000219 08               [12]  454 	inc	r0
      00021A 86 F0            [24]  455 	mov	b,@r0
      00021C 08               [12]  456 	inc	r0
      00021D E6               [12]  457 	mov	a,@r0
      00021E 12r00r00         [24]  458 	lcall	___fssub
      000221 AC 82            [24]  459 	mov	r4,dpl
      000223 AD 83            [24]  460 	mov	r5,dph
      000225 AE F0            [24]  461 	mov	r6,b
      000227 FF               [12]  462 	mov	r7,a
      000228 E5 81            [12]  463 	mov	a,sp
      00022A 24 FC            [12]  464 	add	a,#0xfc
      00022C F5 81            [12]  465 	mov	sp,a
      00022E D0*00            [24]  466 	pop	bits
      000230 C0*00            [24]  467 	push	bits
      000232 E5*00            [12]  468 	mov	a,_bp
      000234 24 19            [12]  469 	add	a,#0x19
      000236 F8               [12]  470 	mov	r0,a
      000237 E6               [12]  471 	mov	a,@r0
      000238 C0 E0            [24]  472 	push	acc
      00023A 08               [12]  473 	inc	r0
      00023B E6               [12]  474 	mov	a,@r0
      00023C C0 E0            [24]  475 	push	acc
      00023E 08               [12]  476 	inc	r0
      00023F E6               [12]  477 	mov	a,@r0
      000240 C0 E0            [24]  478 	push	acc
      000242 08               [12]  479 	inc	r0
      000243 E6               [12]  480 	mov	a,@r0
      000244 C0 E0            [24]  481 	push	acc
      000246 8C 82            [24]  482 	mov	dpl,r4
      000248 8D 83            [24]  483 	mov	dph,r5
      00024A 8E F0            [24]  484 	mov	b,r6
      00024C EF               [12]  485 	mov	a,r7
      00024D 12r00r00         [24]  486 	lcall	___fsadd
      000250 C8               [12]  487 	xch	a,r0
      000251 E5*00            [12]  488 	mov	a,_bp
      000253 24 05            [12]  489 	add	a,#0x05
      000255 C8               [12]  490 	xch	a,r0
      000256 A6 82            [24]  491 	mov	@r0,dpl
      000258 08               [12]  492 	inc	r0
      000259 A6 83            [24]  493 	mov	@r0,dph
      00025B 08               [12]  494 	inc	r0
      00025C A6 F0            [24]  495 	mov	@r0,b
      00025E 08               [12]  496 	inc	r0
      00025F F6               [12]  497 	mov	@r0,a
      000260 E5 81            [12]  498 	mov	a,sp
      000262 24 FC            [12]  499 	add	a,#0xfc
      000264 F5 81            [12]  500 	mov	sp,a
      000266 D0*00            [24]  501 	pop	bits
      000268 C0*00            [24]  502 	push	bits
      00026A E5*00            [12]  503 	mov	a,_bp
      00026C 24 11            [12]  504 	add	a,#0x11
      00026E F8               [12]  505 	mov	r0,a
      00026F E6               [12]  506 	mov	a,@r0
      000270 C0 E0            [24]  507 	push	acc
      000272 08               [12]  508 	inc	r0
      000273 E6               [12]  509 	mov	a,@r0
      000274 C0 E0            [24]  510 	push	acc
      000276 08               [12]  511 	inc	r0
      000277 E6               [12]  512 	mov	a,@r0
      000278 C0 E0            [24]  513 	push	acc
      00027A 08               [12]  514 	inc	r0
      00027B E6               [12]  515 	mov	a,@r0
      00027C C0 E0            [24]  516 	push	acc
      00027E 90 AA 22         [24]  517 	mov	dptr,#0xAA22
      000281 75 F0 FD         [24]  518 	mov	b,#0xFD
      000284 74 39            [12]  519 	mov	a,#0x39
      000286 12r00r00         [24]  520 	lcall	___fsmul
      000289 AA 82            [24]  521 	mov	r2,dpl
      00028B AB 83            [24]  522 	mov	r3,dph
      00028D AE F0            [24]  523 	mov	r6,b
      00028F FF               [12]  524 	mov	r7,a
      000290 E5 81            [12]  525 	mov	a,sp
      000292 24 FC            [12]  526 	add	a,#0xfc
      000294 F5 81            [12]  527 	mov	sp,a
      000296 D0*00            [24]  528 	pop	bits
      000298 C0*00            [24]  529 	push	bits
      00029A C0 02            [24]  530 	push	ar2
      00029C C0 03            [24]  531 	push	ar3
      00029E C0 06            [24]  532 	push	ar6
      0002A0 C0 07            [24]  533 	push	ar7
      0002A2 E5*00            [12]  534 	mov	a,_bp
      0002A4 24 05            [12]  535 	add	a,#0x05
      0002A6 F8               [12]  536 	mov	r0,a
      0002A7 86 82            [24]  537 	mov	dpl,@r0
      0002A9 08               [12]  538 	inc	r0
      0002AA 86 83            [24]  539 	mov	dph,@r0
      0002AC 08               [12]  540 	inc	r0
      0002AD 86 F0            [24]  541 	mov	b,@r0
      0002AF 08               [12]  542 	inc	r0
      0002B0 E6               [12]  543 	mov	a,@r0
      0002B1 12r00r00         [24]  544 	lcall	___fssub
      0002B4 AC 82            [24]  545 	mov	r4,dpl
      0002B6 AD 83            [24]  546 	mov	r5,dph
      0002B8 AE F0            [24]  547 	mov	r6,b
      0002BA FF               [12]  548 	mov	r7,a
      0002BB E5 81            [12]  549 	mov	a,sp
      0002BD 24 FC            [12]  550 	add	a,#0xfc
      0002BF F5 81            [12]  551 	mov	sp,a
      0002C1 D0*00            [24]  552 	pop	bits
      0002C3 E5*00            [12]  553 	mov	a,_bp
      0002C5 24 09            [12]  554 	add	a,#0x09
      0002C7 F8               [12]  555 	mov	r0,a
      0002C8 A6 04            [24]  556 	mov	@r0,ar4
      0002CA 08               [12]  557 	inc	r0
      0002CB A6 05            [24]  558 	mov	@r0,ar5
      0002CD 08               [12]  559 	inc	r0
      0002CE A6 06            [24]  560 	mov	@r0,ar6
      0002D0 08               [12]  561 	inc	r0
      0002D1 A6 07            [24]  562 	mov	@r0,ar7
                                    563 ;	tancotf.c:72: if (fabsf(f) < EPS)
      0002D3 E5*00            [12]  564 	mov	a,_bp
      0002D5 24 09            [12]  565 	add	a,#0x09
      0002D7 F8               [12]  566 	mov	r0,a
      0002D8 86 82            [24]  567 	mov	dpl,@r0
      0002DA 08               [12]  568 	inc	r0
      0002DB 86 83            [24]  569 	mov	dph,@r0
      0002DD 08               [12]  570 	inc	r0
      0002DE 86 F0            [24]  571 	mov	b,@r0
      0002E0 08               [12]  572 	inc	r0
      0002E1 E6               [12]  573 	mov	a,@r0
      0002E2 C0*00            [24]  574 	push	bits
      0002E4 12r00r00         [24]  575 	lcall	_fabsf
      0002E7 AA 82            [24]  576 	mov	r2,dpl
      0002E9 AB 83            [24]  577 	mov	r3,dph
      0002EB AE F0            [24]  578 	mov	r6,b
      0002ED FF               [12]  579 	mov	r7,a
      0002EE D0*00            [24]  580 	pop	bits
      0002F0 C0*00            [24]  581 	push	bits
      0002F2 E4               [12]  582 	clr	a
      0002F3 C0 E0            [24]  583 	push	acc
      0002F5 C0 E0            [24]  584 	push	acc
      0002F7 74 80            [12]  585 	mov	a,#0x80
      0002F9 C0 E0            [24]  586 	push	acc
      0002FB 74 39            [12]  587 	mov	a,#0x39
      0002FD C0 E0            [24]  588 	push	acc
      0002FF 8A 82            [24]  589 	mov	dpl,r2
      000301 8B 83            [24]  590 	mov	dph,r3
      000303 8E F0            [24]  591 	mov	b,r6
      000305 EF               [12]  592 	mov	a,r7
      000306 12r00r00         [24]  593 	lcall	___fslt
      000309 AF 82            [24]  594 	mov	r7,dpl
      00030B E5 81            [12]  595 	mov	a,sp
      00030D 24 FC            [12]  596 	add	a,#0xfc
      00030F F5 81            [12]  597 	mov	sp,a
      000311 D0*00            [24]  598 	pop	bits
      000313 EF               [12]  599 	mov	a,r7
      000314 60 2A            [24]  600 	jz	00104$
                                    601 ;	tancotf.c:74: xnum = f;
      000316 E5*00            [12]  602 	mov	a,_bp
      000318 24 09            [12]  603 	add	a,#0x09
      00031A F8               [12]  604 	mov	r0,a
      00031B E5*00            [12]  605 	mov	a,_bp
      00031D 24 15            [12]  606 	add	a,#0x15
      00031F F9               [12]  607 	mov	r1,a
      000320 E6               [12]  608 	mov	a,@r0
      000321 F7               [12]  609 	mov	@r1,a
      000322 08               [12]  610 	inc	r0
      000323 09               [12]  611 	inc	r1
      000324 E6               [12]  612 	mov	a,@r0
      000325 F7               [12]  613 	mov	@r1,a
      000326 08               [12]  614 	inc	r0
      000327 09               [12]  615 	inc	r1
      000328 E6               [12]  616 	mov	a,@r0
      000329 F7               [12]  617 	mov	@r1,a
      00032A 08               [12]  618 	inc	r0
      00032B 09               [12]  619 	inc	r1
      00032C E6               [12]  620 	mov	a,@r0
      00032D F7               [12]  621 	mov	@r1,a
                                    622 ;	tancotf.c:75: xden = 1.0;
      00032E E5*00            [12]  623 	mov	a,_bp
      000330 24 19            [12]  624 	add	a,#0x19
      000332 F8               [12]  625 	mov	r0,a
      000333 E4               [12]  626 	clr	a
      000334 F6               [12]  627 	mov	@r0,a
      000335 08               [12]  628 	inc	r0
      000336 F6               [12]  629 	mov	@r0,a
      000337 08               [12]  630 	inc	r0
      000338 76 80            [12]  631 	mov	@r0,#0x80
      00033A 08               [12]  632 	inc	r0
      00033B 76 3F            [12]  633 	mov	@r0,#0x3F
      00033D 02r04rE6         [24]  634 	ljmp	00105$
      000340                        635 00104$:
                                    636 ;	tancotf.c:79: g = f*f;
      000340 C0*00            [24]  637 	push	bits
      000342 E5*00            [12]  638 	mov	a,_bp
      000344 24 09            [12]  639 	add	a,#0x09
      000346 F8               [12]  640 	mov	r0,a
      000347 E6               [12]  641 	mov	a,@r0
      000348 C0 E0            [24]  642 	push	acc
      00034A 08               [12]  643 	inc	r0
      00034B E6               [12]  644 	mov	a,@r0
      00034C C0 E0            [24]  645 	push	acc
      00034E 08               [12]  646 	inc	r0
      00034F E6               [12]  647 	mov	a,@r0
      000350 C0 E0            [24]  648 	push	acc
      000352 08               [12]  649 	inc	r0
      000353 E6               [12]  650 	mov	a,@r0
      000354 C0 E0            [24]  651 	push	acc
      000356 E5*00            [12]  652 	mov	a,_bp
      000358 24 09            [12]  653 	add	a,#0x09
      00035A F8               [12]  654 	mov	r0,a
      00035B 86 82            [24]  655 	mov	dpl,@r0
      00035D 08               [12]  656 	inc	r0
      00035E 86 83            [24]  657 	mov	dph,@r0
      000360 08               [12]  658 	inc	r0
      000361 86 F0            [24]  659 	mov	b,@r0
      000363 08               [12]  660 	inc	r0
      000364 E6               [12]  661 	mov	a,@r0
      000365 12r00r00         [24]  662 	lcall	___fsmul
      000368 AC 82            [24]  663 	mov	r4,dpl
      00036A AD 83            [24]  664 	mov	r5,dph
      00036C AE F0            [24]  665 	mov	r6,b
      00036E FF               [12]  666 	mov	r7,a
      00036F E5 81            [12]  667 	mov	a,sp
      000371 24 FC            [12]  668 	add	a,#0xfc
      000373 F5 81            [12]  669 	mov	sp,a
      000375 D0*00            [24]  670 	pop	bits
      000377 E5*00            [12]  671 	mov	a,_bp
      000379 24 0D            [12]  672 	add	a,#0x0d
      00037B F8               [12]  673 	mov	r0,a
      00037C A6 04            [24]  674 	mov	@r0,ar4
      00037E 08               [12]  675 	inc	r0
      00037F A6 05            [24]  676 	mov	@r0,ar5
      000381 08               [12]  677 	inc	r0
      000382 A6 06            [24]  678 	mov	@r0,ar6
      000384 08               [12]  679 	inc	r0
      000385 A6 07            [24]  680 	mov	@r0,ar7
                                    681 ;	tancotf.c:80: xnum = P(f,g);
      000387 C0*00            [24]  682 	push	bits
      000389 E5*00            [12]  683 	mov	a,_bp
      00038B 24 0D            [12]  684 	add	a,#0x0d
      00038D F8               [12]  685 	mov	r0,a
      00038E E6               [12]  686 	mov	a,@r0
      00038F C0 E0            [24]  687 	push	acc
      000391 08               [12]  688 	inc	r0
      000392 E6               [12]  689 	mov	a,@r0
      000393 C0 E0            [24]  690 	push	acc
      000395 08               [12]  691 	inc	r0
      000396 E6               [12]  692 	mov	a,@r0
      000397 C0 E0            [24]  693 	push	acc
      000399 08               [12]  694 	inc	r0
      00039A E6               [12]  695 	mov	a,@r0
      00039B C0 E0            [24]  696 	push	acc
      00039D 90 33 B8         [24]  697 	mov	dptr,#0x33B8
      0003A0 75 F0 C4         [24]  698 	mov	b,#0xC4
      0003A3 74 BD            [12]  699 	mov	a,#0xBD
      0003A5 12r00r00         [24]  700 	lcall	___fsmul
      0003A8 AA 82            [24]  701 	mov	r2,dpl
      0003AA AB 83            [24]  702 	mov	r3,dph
      0003AC AE F0            [24]  703 	mov	r6,b
      0003AE FF               [12]  704 	mov	r7,a
      0003AF E5 81            [12]  705 	mov	a,sp
      0003B1 24 FC            [12]  706 	add	a,#0xfc
      0003B3 F5 81            [12]  707 	mov	sp,a
      0003B5 D0*00            [24]  708 	pop	bits
      0003B7 C0*00            [24]  709 	push	bits
      0003B9 E5*00            [12]  710 	mov	a,_bp
      0003BB 24 09            [12]  711 	add	a,#0x09
      0003BD F8               [12]  712 	mov	r0,a
      0003BE E6               [12]  713 	mov	a,@r0
      0003BF C0 E0            [24]  714 	push	acc
      0003C1 08               [12]  715 	inc	r0
      0003C2 E6               [12]  716 	mov	a,@r0
      0003C3 C0 E0            [24]  717 	push	acc
      0003C5 08               [12]  718 	inc	r0
      0003C6 E6               [12]  719 	mov	a,@r0
      0003C7 C0 E0            [24]  720 	push	acc
      0003C9 08               [12]  721 	inc	r0
      0003CA E6               [12]  722 	mov	a,@r0
      0003CB C0 E0            [24]  723 	push	acc
      0003CD 8A 82            [24]  724 	mov	dpl,r2
      0003CF 8B 83            [24]  725 	mov	dph,r3
      0003D1 8E F0            [24]  726 	mov	b,r6
      0003D3 EF               [12]  727 	mov	a,r7
      0003D4 12r00r00         [24]  728 	lcall	___fsmul
      0003D7 AC 82            [24]  729 	mov	r4,dpl
      0003D9 AD 83            [24]  730 	mov	r5,dph
      0003DB AE F0            [24]  731 	mov	r6,b
      0003DD FF               [12]  732 	mov	r7,a
      0003DE E5 81            [12]  733 	mov	a,sp
      0003E0 24 FC            [12]  734 	add	a,#0xfc
      0003E2 F5 81            [12]  735 	mov	sp,a
      0003E4 D0*00            [24]  736 	pop	bits
      0003E6 C0*00            [24]  737 	push	bits
      0003E8 E5*00            [12]  738 	mov	a,_bp
      0003EA 24 09            [12]  739 	add	a,#0x09
      0003EC F8               [12]  740 	mov	r0,a
      0003ED E6               [12]  741 	mov	a,@r0
      0003EE C0 E0            [24]  742 	push	acc
      0003F0 08               [12]  743 	inc	r0
      0003F1 E6               [12]  744 	mov	a,@r0
      0003F2 C0 E0            [24]  745 	push	acc
      0003F4 08               [12]  746 	inc	r0
      0003F5 E6               [12]  747 	mov	a,@r0
      0003F6 C0 E0            [24]  748 	push	acc
      0003F8 08               [12]  749 	inc	r0
      0003F9 E6               [12]  750 	mov	a,@r0
      0003FA C0 E0            [24]  751 	push	acc
      0003FC 8C 82            [24]  752 	mov	dpl,r4
      0003FE 8D 83            [24]  753 	mov	dph,r5
      000400 8E F0            [24]  754 	mov	b,r6
      000402 EF               [12]  755 	mov	a,r7
      000403 12r00r00         [24]  756 	lcall	___fsadd
      000406 AC 82            [24]  757 	mov	r4,dpl
      000408 AD 83            [24]  758 	mov	r5,dph
      00040A AE F0            [24]  759 	mov	r6,b
      00040C FF               [12]  760 	mov	r7,a
      00040D E5 81            [12]  761 	mov	a,sp
      00040F 24 FC            [12]  762 	add	a,#0xfc
      000411 F5 81            [12]  763 	mov	sp,a
      000413 D0*00            [24]  764 	pop	bits
      000415 E5*00            [12]  765 	mov	a,_bp
      000417 24 15            [12]  766 	add	a,#0x15
      000419 F8               [12]  767 	mov	r0,a
      00041A A6 04            [24]  768 	mov	@r0,ar4
      00041C 08               [12]  769 	inc	r0
      00041D A6 05            [24]  770 	mov	@r0,ar5
      00041F 08               [12]  771 	inc	r0
      000420 A6 06            [24]  772 	mov	@r0,ar6
      000422 08               [12]  773 	inc	r0
      000423 A6 07            [24]  774 	mov	@r0,ar7
                                    775 ;	tancotf.c:81: xden = Q(g);
      000425 C0*00            [24]  776 	push	bits
      000427 E5*00            [12]  777 	mov	a,_bp
      000429 24 0D            [12]  778 	add	a,#0x0d
      00042B F8               [12]  779 	mov	r0,a
      00042C E6               [12]  780 	mov	a,@r0
      00042D C0 E0            [24]  781 	push	acc
      00042F 08               [12]  782 	inc	r0
      000430 E6               [12]  783 	mov	a,@r0
      000431 C0 E0            [24]  784 	push	acc
      000433 08               [12]  785 	inc	r0
      000434 E6               [12]  786 	mov	a,@r0
      000435 C0 E0            [24]  787 	push	acc
      000437 08               [12]  788 	inc	r0
      000438 E6               [12]  789 	mov	a,@r0
      000439 C0 E0            [24]  790 	push	acc
      00043B 90 33 75         [24]  791 	mov	dptr,#0x3375
      00043E 75 F0 1F         [24]  792 	mov	b,#0x1F
      000441 74 3C            [12]  793 	mov	a,#0x3C
      000443 12r00r00         [24]  794 	lcall	___fsmul
      000446 AC 82            [24]  795 	mov	r4,dpl
      000448 AD 83            [24]  796 	mov	r5,dph
      00044A AE F0            [24]  797 	mov	r6,b
      00044C FF               [12]  798 	mov	r7,a
      00044D E5 81            [12]  799 	mov	a,sp
      00044F 24 FC            [12]  800 	add	a,#0xfc
      000451 F5 81            [12]  801 	mov	sp,a
      000453 D0*00            [24]  802 	pop	bits
      000455 C0*00            [24]  803 	push	bits
      000457 74 AF            [12]  804 	mov	a,#0xAF
      000459 C0 E0            [24]  805 	push	acc
      00045B 74 B7            [12]  806 	mov	a,#0xB7
      00045D C0 E0            [24]  807 	push	acc
      00045F 03               [12]  808 	rr	a
      000460 C0 E0            [24]  809 	push	acc
      000462 74 BE            [12]  810 	mov	a,#0xBE
      000464 C0 E0            [24]  811 	push	acc
      000466 8C 82            [24]  812 	mov	dpl,r4
      000468 8D 83            [24]  813 	mov	dph,r5
      00046A 8E F0            [24]  814 	mov	b,r6
      00046C EF               [12]  815 	mov	a,r7
      00046D 12r00r00         [24]  816 	lcall	___fsadd
      000470 AC 82            [24]  817 	mov	r4,dpl
      000472 AD 83            [24]  818 	mov	r5,dph
      000474 AE F0            [24]  819 	mov	r6,b
      000476 FF               [12]  820 	mov	r7,a
      000477 E5 81            [12]  821 	mov	a,sp
      000479 24 FC            [12]  822 	add	a,#0xfc
      00047B F5 81            [12]  823 	mov	sp,a
      00047D D0*00            [24]  824 	pop	bits
      00047F C0*00            [24]  825 	push	bits
      000481 E5*00            [12]  826 	mov	a,_bp
      000483 24 0D            [12]  827 	add	a,#0x0d
      000485 F8               [12]  828 	mov	r0,a
      000486 E6               [12]  829 	mov	a,@r0
      000487 C0 E0            [24]  830 	push	acc
      000489 08               [12]  831 	inc	r0
      00048A E6               [12]  832 	mov	a,@r0
      00048B C0 E0            [24]  833 	push	acc
      00048D 08               [12]  834 	inc	r0
      00048E E6               [12]  835 	mov	a,@r0
      00048F C0 E0            [24]  836 	push	acc
      000491 08               [12]  837 	inc	r0
      000492 E6               [12]  838 	mov	a,@r0
      000493 C0 E0            [24]  839 	push	acc
      000495 8C 82            [24]  840 	mov	dpl,r4
      000497 8D 83            [24]  841 	mov	dph,r5
      000499 8E F0            [24]  842 	mov	b,r6
      00049B EF               [12]  843 	mov	a,r7
      00049C 12r00r00         [24]  844 	lcall	___fsmul
      00049F AC 82            [24]  845 	mov	r4,dpl
      0004A1 AD 83            [24]  846 	mov	r5,dph
      0004A3 AE F0            [24]  847 	mov	r6,b
      0004A5 FF               [12]  848 	mov	r7,a
      0004A6 E5 81            [12]  849 	mov	a,sp
      0004A8 24 FC            [12]  850 	add	a,#0xfc
      0004AA F5 81            [12]  851 	mov	sp,a
      0004AC D0*00            [24]  852 	pop	bits
      0004AE C0*00            [24]  853 	push	bits
      0004B0 E4               [12]  854 	clr	a
      0004B1 C0 E0            [24]  855 	push	acc
      0004B3 C0 E0            [24]  856 	push	acc
      0004B5 74 80            [12]  857 	mov	a,#0x80
      0004B7 C0 E0            [24]  858 	push	acc
      0004B9 74 3F            [12]  859 	mov	a,#0x3F
      0004BB C0 E0            [24]  860 	push	acc
      0004BD 8C 82            [24]  861 	mov	dpl,r4
      0004BF 8D 83            [24]  862 	mov	dph,r5
      0004C1 8E F0            [24]  863 	mov	b,r6
      0004C3 EF               [12]  864 	mov	a,r7
      0004C4 12r00r00         [24]  865 	lcall	___fsadd
      0004C7 AC 82            [24]  866 	mov	r4,dpl
      0004C9 AD 83            [24]  867 	mov	r5,dph
      0004CB AE F0            [24]  868 	mov	r6,b
      0004CD FF               [12]  869 	mov	r7,a
      0004CE E5 81            [12]  870 	mov	a,sp
      0004D0 24 FC            [12]  871 	add	a,#0xfc
      0004D2 F5 81            [12]  872 	mov	sp,a
      0004D4 D0*00            [24]  873 	pop	bits
      0004D6 E5*00            [12]  874 	mov	a,_bp
      0004D8 24 19            [12]  875 	add	a,#0x19
      0004DA F8               [12]  876 	mov	r0,a
      0004DB A6 04            [24]  877 	mov	@r0,ar4
      0004DD 08               [12]  878 	inc	r0
      0004DE A6 05            [24]  879 	mov	@r0,ar5
      0004E0 08               [12]  880 	inc	r0
      0004E1 A6 06            [24]  881 	mov	@r0,ar6
      0004E3 08               [12]  882 	inc	r0
      0004E4 A6 07            [24]  883 	mov	@r0,ar7
      0004E6                        884 00105$:
                                    885 ;	tancotf.c:84: if(n&1)
      0004E6 E5*00            [12]  886 	mov	a,_bp
      0004E8 24 1D            [12]  887 	add	a,#0x1d
      0004EA F8               [12]  888 	mov	r0,a
      0004EB E6               [12]  889 	mov	a,@r0
      0004EC 20 E0 03         [24]  890 	jb	acc.0,00140$
      0004EF 02r05r82         [24]  891 	ljmp	00113$
      0004F2                        892 00140$:
                                    893 ;	tancotf.c:87: if(iscotan) return (-xnum/xden);
      0004F2 30*00 47         [24]  894 	jnb	b0,00107$
      0004F5 E5*00            [12]  895 	mov	a,_bp
      0004F7 24 15            [12]  896 	add	a,#0x15
      0004F9 F8               [12]  897 	mov	r0,a
      0004FA 86 04            [24]  898 	mov	ar4,@r0
      0004FC 08               [12]  899 	inc	r0
      0004FD 86 05            [24]  900 	mov	ar5,@r0
      0004FF 08               [12]  901 	inc	r0
      000500 86 06            [24]  902 	mov	ar6,@r0
      000502 08               [12]  903 	inc	r0
      000503 E6               [12]  904 	mov	a,@r0
      000504 B2 E7            [12]  905 	cpl	acc.7
      000506 FF               [12]  906 	mov	r7,a
      000507 E5*00            [12]  907 	mov	a,_bp
      000509 24 19            [12]  908 	add	a,#0x19
      00050B F8               [12]  909 	mov	r0,a
      00050C E6               [12]  910 	mov	a,@r0
      00050D C0 E0            [24]  911 	push	acc
      00050F 08               [12]  912 	inc	r0
      000510 E6               [12]  913 	mov	a,@r0
      000511 C0 E0            [24]  914 	push	acc
      000513 08               [12]  915 	inc	r0
      000514 E6               [12]  916 	mov	a,@r0
      000515 C0 E0            [24]  917 	push	acc
      000517 08               [12]  918 	inc	r0
      000518 E6               [12]  919 	mov	a,@r0
      000519 C0 E0            [24]  920 	push	acc
      00051B 8C 82            [24]  921 	mov	dpl,r4
      00051D 8D 83            [24]  922 	mov	dph,r5
      00051F 8E F0            [24]  923 	mov	b,r6
      000521 EF               [12]  924 	mov	a,r7
      000522 12r00r00         [24]  925 	lcall	___fsdiv
      000525 AC 82            [24]  926 	mov	r4,dpl
      000527 AD 83            [24]  927 	mov	r5,dph
      000529 AE F0            [24]  928 	mov	r6,b
      00052B FF               [12]  929 	mov	r7,a
      00052C E5 81            [12]  930 	mov	a,sp
      00052E 24 FC            [12]  931 	add	a,#0xfc
      000530 F5 81            [12]  932 	mov	sp,a
      000532 8C 82            [24]  933 	mov	dpl,r4
      000534 8D 83            [24]  934 	mov	dph,r5
      000536 8E F0            [24]  935 	mov	b,r6
      000538 EF               [12]  936 	mov	a,r7
      000539 02r05rFB         [24]  937 	ljmp	00115$
      00053C                        938 00107$:
                                    939 ;	tancotf.c:88: else return (-xden/xnum);
      00053C E5*00            [12]  940 	mov	a,_bp
      00053E 24 19            [12]  941 	add	a,#0x19
      000540 F8               [12]  942 	mov	r0,a
      000541 86 04            [24]  943 	mov	ar4,@r0
      000543 08               [12]  944 	inc	r0
      000544 86 05            [24]  945 	mov	ar5,@r0
      000546 08               [12]  946 	inc	r0
      000547 86 06            [24]  947 	mov	ar6,@r0
      000549 08               [12]  948 	inc	r0
      00054A E6               [12]  949 	mov	a,@r0
      00054B B2 E7            [12]  950 	cpl	acc.7
      00054D FF               [12]  951 	mov	r7,a
      00054E E5*00            [12]  952 	mov	a,_bp
      000550 24 15            [12]  953 	add	a,#0x15
      000552 F8               [12]  954 	mov	r0,a
      000553 E6               [12]  955 	mov	a,@r0
      000554 C0 E0            [24]  956 	push	acc
      000556 08               [12]  957 	inc	r0
      000557 E6               [12]  958 	mov	a,@r0
      000558 C0 E0            [24]  959 	push	acc
      00055A 08               [12]  960 	inc	r0
      00055B E6               [12]  961 	mov	a,@r0
      00055C C0 E0            [24]  962 	push	acc
      00055E 08               [12]  963 	inc	r0
      00055F E6               [12]  964 	mov	a,@r0
      000560 C0 E0            [24]  965 	push	acc
      000562 8C 82            [24]  966 	mov	dpl,r4
      000564 8D 83            [24]  967 	mov	dph,r5
      000566 8E F0            [24]  968 	mov	b,r6
      000568 EF               [12]  969 	mov	a,r7
      000569 12r00r00         [24]  970 	lcall	___fsdiv
      00056C AC 82            [24]  971 	mov	r4,dpl
      00056E AD 83            [24]  972 	mov	r5,dph
      000570 AE F0            [24]  973 	mov	r6,b
      000572 FF               [12]  974 	mov	r7,a
      000573 E5 81            [12]  975 	mov	a,sp
      000575 24 FC            [12]  976 	add	a,#0xfc
      000577 F5 81            [12]  977 	mov	sp,a
      000579 8C 82            [24]  978 	mov	dpl,r4
      00057B 8D 83            [24]  979 	mov	dph,r5
      00057D 8E F0            [24]  980 	mov	b,r6
      00057F EF               [12]  981 	mov	a,r7
      000580 80 79            [24]  982 	sjmp	00115$
      000582                        983 00113$:
                                    984 ;	tancotf.c:92: if(iscotan) return (xden/xnum);
      000582 30*00 3C         [24]  985 	jnb	b0,00110$
      000585 E5*00            [12]  986 	mov	a,_bp
      000587 24 15            [12]  987 	add	a,#0x15
      000589 F8               [12]  988 	mov	r0,a
      00058A E6               [12]  989 	mov	a,@r0
      00058B C0 E0            [24]  990 	push	acc
      00058D 08               [12]  991 	inc	r0
      00058E E6               [12]  992 	mov	a,@r0
      00058F C0 E0            [24]  993 	push	acc
      000591 08               [12]  994 	inc	r0
      000592 E6               [12]  995 	mov	a,@r0
      000593 C0 E0            [24]  996 	push	acc
      000595 08               [12]  997 	inc	r0
      000596 E6               [12]  998 	mov	a,@r0
      000597 C0 E0            [24]  999 	push	acc
      000599 E5*00            [12] 1000 	mov	a,_bp
      00059B 24 19            [12] 1001 	add	a,#0x19
      00059D F8               [12] 1002 	mov	r0,a
      00059E 86 82            [24] 1003 	mov	dpl,@r0
      0005A0 08               [12] 1004 	inc	r0
      0005A1 86 83            [24] 1005 	mov	dph,@r0
      0005A3 08               [12] 1006 	inc	r0
      0005A4 86 F0            [24] 1007 	mov	b,@r0
      0005A6 08               [12] 1008 	inc	r0
      0005A7 E6               [12] 1009 	mov	a,@r0
      0005A8 12r00r00         [24] 1010 	lcall	___fsdiv
      0005AB AC 82            [24] 1011 	mov	r4,dpl
      0005AD AD 83            [24] 1012 	mov	r5,dph
      0005AF AE F0            [24] 1013 	mov	r6,b
      0005B1 FF               [12] 1014 	mov	r7,a
      0005B2 E5 81            [12] 1015 	mov	a,sp
      0005B4 24 FC            [12] 1016 	add	a,#0xfc
      0005B6 F5 81            [12] 1017 	mov	sp,a
      0005B8 8C 82            [24] 1018 	mov	dpl,r4
      0005BA 8D 83            [24] 1019 	mov	dph,r5
      0005BC 8E F0            [24] 1020 	mov	b,r6
      0005BE EF               [12] 1021 	mov	a,r7
      0005BF 80 3A            [24] 1022 	sjmp	00115$
      0005C1                       1023 00110$:
                                   1024 ;	tancotf.c:93: else return (xnum/xden);
      0005C1 E5*00            [12] 1025 	mov	a,_bp
      0005C3 24 19            [12] 1026 	add	a,#0x19
      0005C5 F8               [12] 1027 	mov	r0,a
      0005C6 E6               [12] 1028 	mov	a,@r0
      0005C7 C0 E0            [24] 1029 	push	acc
      0005C9 08               [12] 1030 	inc	r0
      0005CA E6               [12] 1031 	mov	a,@r0
      0005CB C0 E0            [24] 1032 	push	acc
      0005CD 08               [12] 1033 	inc	r0
      0005CE E6               [12] 1034 	mov	a,@r0
      0005CF C0 E0            [24] 1035 	push	acc
      0005D1 08               [12] 1036 	inc	r0
      0005D2 E6               [12] 1037 	mov	a,@r0
      0005D3 C0 E0            [24] 1038 	push	acc
      0005D5 E5*00            [12] 1039 	mov	a,_bp
      0005D7 24 15            [12] 1040 	add	a,#0x15
      0005D9 F8               [12] 1041 	mov	r0,a
      0005DA 86 82            [24] 1042 	mov	dpl,@r0
      0005DC 08               [12] 1043 	inc	r0
      0005DD 86 83            [24] 1044 	mov	dph,@r0
      0005DF 08               [12] 1045 	inc	r0
      0005E0 86 F0            [24] 1046 	mov	b,@r0
      0005E2 08               [12] 1047 	inc	r0
      0005E3 E6               [12] 1048 	mov	a,@r0
      0005E4 12r00r00         [24] 1049 	lcall	___fsdiv
      0005E7 AC 82            [24] 1050 	mov	r4,dpl
      0005E9 AD 83            [24] 1051 	mov	r5,dph
      0005EB AE F0            [24] 1052 	mov	r6,b
      0005ED FF               [12] 1053 	mov	r7,a
      0005EE E5 81            [12] 1054 	mov	a,sp
      0005F0 24 FC            [12] 1055 	add	a,#0xfc
      0005F2 F5 81            [12] 1056 	mov	sp,a
      0005F4 8C 82            [24] 1057 	mov	dpl,r4
      0005F6 8D 83            [24] 1058 	mov	dph,r5
      0005F8 8E F0            [24] 1059 	mov	b,r6
      0005FA EF               [12] 1060 	mov	a,r7
      0005FB                       1061 00115$:
      0005FB 85*00 81         [24] 1062 	mov	sp,_bp
      0005FE D0*00            [24] 1063 	pop	_bp
      000600 22               [24] 1064 	ret
                                   1065 	.area CSEG    (CODE)
                                   1066 	.area CONST   (CODE)
                                   1067 	.area XINIT   (CODE)
                                   1068 	.area CABS    (ABS,CODE)
