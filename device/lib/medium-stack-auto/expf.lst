                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:06 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module expf
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _ldexpf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'expf'
                                    107 ;------------------------------------------------------------
                                    108 ;x                         Allocated to registers r7 r6 r5 r4 
                                    109 ;n                         Allocated to stack - _bp +5
                                    110 ;xn                        Allocated to stack - _bp +7
                                    111 ;g                         Allocated to stack - _bp +11
                                    112 ;r                         Allocated to stack - _bp +15
                                    113 ;z                         Allocated to stack - _bp +19
                                    114 ;y                         Allocated to stack - _bp +23
                                    115 ;sign                      Allocated to registers b0 
                                    116 ;sloc0                     Allocated to stack - _bp +1
                                    117 ;------------------------------------------------------------
                                    118 ;	expf.c:331: float expf(const float x)
                                    119 ;	-----------------------------------------
                                    120 ;	 function expf
                                    121 ;	-----------------------------------------
      000000                        122 _expf:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 85 81*00         [24]  132 	mov	_bp,sp
      000005 AF 82            [24]  133 	mov	r7,dpl
      000007 AE 83            [24]  134 	mov	r6,dph
      000009 AD F0            [24]  135 	mov	r5,b
      00000B FC               [12]  136 	mov	r4,a
      00000C E5 81            [12]  137 	mov	a,sp
      00000E 24 1A            [12]  138 	add	a,#0x1A
      000010 F5 81            [12]  139 	mov	sp,a
                                    140 ;	expf.c:337: if(x>=0.0)
      000012 C0 07            [24]  141 	push	ar7
      000014 C0 06            [24]  142 	push	ar6
      000016 C0 05            [24]  143 	push	ar5
      000018 C0 04            [24]  144 	push	ar4
      00001A E4               [12]  145 	clr	a
      00001B C0 E0            [24]  146 	push	acc
      00001D C0 E0            [24]  147 	push	acc
      00001F C0 E0            [24]  148 	push	acc
      000021 C0 E0            [24]  149 	push	acc
      000023 8F 82            [24]  150 	mov	dpl,r7
      000025 8E 83            [24]  151 	mov	dph,r6
      000027 8D F0            [24]  152 	mov	b,r5
      000029 EC               [12]  153 	mov	a,r4
      00002A 12r00r00         [24]  154 	lcall	___fslt
      00002D AB 82            [24]  155 	mov	r3,dpl
      00002F E5 81            [12]  156 	mov	a,sp
      000031 24 FC            [12]  157 	add	a,#0xfc
      000033 F5 81            [12]  158 	mov	sp,a
      000035 D0 04            [24]  159 	pop	ar4
      000037 D0 05            [24]  160 	pop	ar5
      000039 D0 06            [24]  161 	pop	ar6
      00003B D0 07            [24]  162 	pop	ar7
      00003D EB               [12]  163 	mov	a,r3
      00003E 70 14            [24]  164 	jnz	00102$
                                    165 ;	expf.c:338: { y=x;  sign=0; }
      000040 E5*00            [12]  166 	mov	a,_bp
      000042 24 17            [12]  167 	add	a,#0x17
      000044 F8               [12]  168 	mov	r0,a
      000045 A6 07            [24]  169 	mov	@r0,ar7
      000047 08               [12]  170 	inc	r0
      000048 A6 06            [24]  171 	mov	@r0,ar6
      00004A 08               [12]  172 	inc	r0
      00004B A6 05            [24]  173 	mov	@r0,ar5
      00004D 08               [12]  174 	inc	r0
      00004E A6 04            [24]  175 	mov	@r0,ar4
      000050 C2*00            [12]  176 	clr	b0
      000052 80 16            [24]  177 	sjmp	00103$
      000054                        178 00102$:
                                    179 ;	expf.c:340: { y=-x; sign=1; }
      000054 EC               [12]  180 	mov	a,r4
      000055 B2 E7            [12]  181 	cpl	acc.7
      000057 FC               [12]  182 	mov	r4,a
      000058 E5*00            [12]  183 	mov	a,_bp
      00005A 24 17            [12]  184 	add	a,#0x17
      00005C F8               [12]  185 	mov	r0,a
      00005D A6 07            [24]  186 	mov	@r0,ar7
      00005F 08               [12]  187 	inc	r0
      000060 A6 06            [24]  188 	mov	@r0,ar6
      000062 08               [12]  189 	inc	r0
      000063 A6 05            [24]  190 	mov	@r0,ar5
      000065 08               [12]  191 	inc	r0
      000066 A6 04            [24]  192 	mov	@r0,ar4
      000068 D2*00            [12]  193 	setb	b0
      00006A                        194 00103$:
                                    195 ;	expf.c:342: if(y<EXPEPS) return 1.0;
      00006A C0*00            [24]  196 	push	bits
      00006C 74 95            [12]  197 	mov	a,#0x95
      00006E C0 E0            [24]  198 	push	acc
      000070 74 BF            [12]  199 	mov	a,#0xBF
      000072 C0 E0            [24]  200 	push	acc
      000074 74 D6            [12]  201 	mov	a,#0xD6
      000076 C0 E0            [24]  202 	push	acc
      000078 74 33            [12]  203 	mov	a,#0x33
      00007A C0 E0            [24]  204 	push	acc
      00007C E5*00            [12]  205 	mov	a,_bp
      00007E 24 17            [12]  206 	add	a,#0x17
      000080 F8               [12]  207 	mov	r0,a
      000081 86 82            [24]  208 	mov	dpl,@r0
      000083 08               [12]  209 	inc	r0
      000084 86 83            [24]  210 	mov	dph,@r0
      000086 08               [12]  211 	inc	r0
      000087 86 F0            [24]  212 	mov	b,@r0
      000089 08               [12]  213 	inc	r0
      00008A E6               [12]  214 	mov	a,@r0
      00008B 12r00r00         [24]  215 	lcall	___fslt
      00008E AD 82            [24]  216 	mov	r5,dpl
      000090 E5 81            [12]  217 	mov	a,sp
      000092 24 FC            [12]  218 	add	a,#0xfc
      000094 F5 81            [12]  219 	mov	sp,a
      000096 D0*00            [24]  220 	pop	bits
      000098 ED               [12]  221 	mov	a,r5
      000099 60 0B            [24]  222 	jz	00105$
      00009B 90 00 00         [24]  223 	mov	dptr,#0x0000
      00009E 75 F0 80         [24]  224 	mov	b,#0x80
      0000A1 74 3F            [12]  225 	mov	a,#0x3F
      0000A3 02r05r25         [24]  226 	ljmp	00118$
      0000A6                        227 00105$:
                                    228 ;	expf.c:344: if(y>BIGX)
      0000A6 C0*00            [24]  229 	push	bits
      0000A8 74 18            [12]  230 	mov	a,#0x18
      0000AA C0 E0            [24]  231 	push	acc
      0000AC 74 72            [12]  232 	mov	a,#0x72
      0000AE C0 E0            [24]  233 	push	acc
      0000B0 74 B1            [12]  234 	mov	a,#0xB1
      0000B2 C0 E0            [24]  235 	push	acc
      0000B4 74 42            [12]  236 	mov	a,#0x42
      0000B6 C0 E0            [24]  237 	push	acc
      0000B8 E5*00            [12]  238 	mov	a,_bp
      0000BA 24 17            [12]  239 	add	a,#0x17
      0000BC F8               [12]  240 	mov	r0,a
      0000BD 86 82            [24]  241 	mov	dpl,@r0
      0000BF 08               [12]  242 	inc	r0
      0000C0 86 83            [24]  243 	mov	dph,@r0
      0000C2 08               [12]  244 	inc	r0
      0000C3 86 F0            [24]  245 	mov	b,@r0
      0000C5 08               [12]  246 	inc	r0
      0000C6 E6               [12]  247 	mov	a,@r0
      0000C7 12r00r00         [24]  248 	lcall	___fsgt
      0000CA AD 82            [24]  249 	mov	r5,dpl
      0000CC E5 81            [12]  250 	mov	a,sp
      0000CE 24 FC            [12]  251 	add	a,#0xfc
      0000D0 F5 81            [12]  252 	mov	sp,a
      0000D2 D0*00            [24]  253 	pop	bits
      0000D4 ED               [12]  254 	mov	a,r5
      0000D5 60 1E            [24]  255 	jz	00110$
                                    256 ;	expf.c:346: if(sign)
      0000D7 30*00 12         [24]  257 	jnb	b0,00107$
                                    258 ;	expf.c:348: errno=ERANGE;
      0000DA 78r00            [12]  259 	mov	r0,#_errno
      0000DC 74 22            [12]  260 	mov	a,#0x22
      0000DE F2               [24]  261 	movx	@r0,a
      0000DF 08               [12]  262 	inc	r0
      0000E0 E4               [12]  263 	clr	a
      0000E1 F2               [24]  264 	movx	@r0,a
                                    265 ;	expf.c:350: ;
      0000E2 90 FF FF         [24]  266 	mov	dptr,#0xFFFF
      0000E5 74 7F            [12]  267 	mov	a,#0x7F
      0000E7 F5 F0            [12]  268 	mov	b,a
      0000E9 02r05r25         [24]  269 	ljmp	00118$
      0000EC                        270 00107$:
                                    271 ;	expf.c:354: return 0.0;
      0000EC 90 00 00         [24]  272 	mov	dptr,#(0x00&0x00ff)
      0000EF E4               [12]  273 	clr	a
      0000F0 F5 F0            [12]  274 	mov	b,a
      0000F2 02r05r25         [24]  275 	ljmp	00118$
      0000F5                        276 00110$:
                                    277 ;	expf.c:358: z=y*K1;
      0000F5 C0*00            [24]  278 	push	bits
      0000F7 E5*00            [12]  279 	mov	a,_bp
      0000F9 24 17            [12]  280 	add	a,#0x17
      0000FB F8               [12]  281 	mov	r0,a
      0000FC E6               [12]  282 	mov	a,@r0
      0000FD C0 E0            [24]  283 	push	acc
      0000FF 08               [12]  284 	inc	r0
      000100 E6               [12]  285 	mov	a,@r0
      000101 C0 E0            [24]  286 	push	acc
      000103 08               [12]  287 	inc	r0
      000104 E6               [12]  288 	mov	a,@r0
      000105 C0 E0            [24]  289 	push	acc
      000107 08               [12]  290 	inc	r0
      000108 E6               [12]  291 	mov	a,@r0
      000109 C0 E0            [24]  292 	push	acc
      00010B 90 AA 3B         [24]  293 	mov	dptr,#0xAA3B
      00010E 75 F0 B8         [24]  294 	mov	b,#0xB8
      000111 74 3F            [12]  295 	mov	a,#0x3F
      000113 12r00r00         [24]  296 	lcall	___fsmul
      000116 AF 82            [24]  297 	mov	r7,dpl
      000118 AE 83            [24]  298 	mov	r6,dph
      00011A AD F0            [24]  299 	mov	r5,b
      00011C FC               [12]  300 	mov	r4,a
      00011D E5 81            [12]  301 	mov	a,sp
      00011F 24 FC            [12]  302 	add	a,#0xfc
      000121 F5 81            [12]  303 	mov	sp,a
      000123 D0*00            [24]  304 	pop	bits
      000125 E5*00            [12]  305 	mov	a,_bp
      000127 24 13            [12]  306 	add	a,#0x13
      000129 F8               [12]  307 	mov	r0,a
      00012A A6 07            [24]  308 	mov	@r0,ar7
      00012C 08               [12]  309 	inc	r0
      00012D A6 06            [24]  310 	mov	@r0,ar6
      00012F 08               [12]  311 	inc	r0
      000130 A6 05            [24]  312 	mov	@r0,ar5
      000132 08               [12]  313 	inc	r0
      000133 A6 04            [24]  314 	mov	@r0,ar4
                                    315 ;	expf.c:359: n=z;
      000135 E5*00            [12]  316 	mov	a,_bp
      000137 24 13            [12]  317 	add	a,#0x13
      000139 F8               [12]  318 	mov	r0,a
      00013A 86 82            [24]  319 	mov	dpl,@r0
      00013C 08               [12]  320 	inc	r0
      00013D 86 83            [24]  321 	mov	dph,@r0
      00013F 08               [12]  322 	inc	r0
      000140 86 F0            [24]  323 	mov	b,@r0
      000142 08               [12]  324 	inc	r0
      000143 E6               [12]  325 	mov	a,@r0
      000144 C0*00            [24]  326 	push	bits
      000146 12r00r00         [24]  327 	lcall	___fs2sint
      000149 AA 82            [24]  328 	mov	r2,dpl
      00014B AB 83            [24]  329 	mov	r3,dph
      00014D D0*00            [24]  330 	pop	bits
      00014F E5*00            [12]  331 	mov	a,_bp
      000151 24 05            [12]  332 	add	a,#0x05
      000153 F8               [12]  333 	mov	r0,a
      000154 A6 02            [24]  334 	mov	@r0,ar2
      000156 08               [12]  335 	inc	r0
      000157 A6 03            [24]  336 	mov	@r0,ar3
                                    337 ;	expf.c:361: if(n<0) --n;
      000159 E5*00            [12]  338 	mov	a,_bp
      00015B 24 05            [12]  339 	add	a,#0x05
      00015D F8               [12]  340 	mov	r0,a
      00015E 08               [12]  341 	inc	r0
      00015F E6               [12]  342 	mov	a,@r0
      000160 30 E7 0B         [24]  343 	jnb	acc.7,00112$
      000163 E5*00            [12]  344 	mov	a,_bp
      000165 24 05            [12]  345 	add	a,#0x05
      000167 F8               [12]  346 	mov	r0,a
      000168 16               [12]  347 	dec	@r0
      000169 B6 FF 02         [24]  348 	cjne	@r0,#0xFF,00146$
      00016C 08               [12]  349 	inc	r0
      00016D 16               [12]  350 	dec	@r0
      00016E                        351 00146$:
      00016E                        352 00112$:
                                    353 ;	expf.c:362: if(z-n>=0.5) ++n;
      00016E E5*00            [12]  354 	mov	a,_bp
      000170 24 05            [12]  355 	add	a,#0x05
      000172 F8               [12]  356 	mov	r0,a
      000173 86 82            [24]  357 	mov	dpl,@r0
      000175 08               [12]  358 	inc	r0
      000176 86 83            [24]  359 	mov	dph,@r0
      000178 C0*00            [24]  360 	push	bits
      00017A 12r00r00         [24]  361 	lcall	___sint2fs
      00017D AC 82            [24]  362 	mov	r4,dpl
      00017F AD 83            [24]  363 	mov	r5,dph
      000181 AE F0            [24]  364 	mov	r6,b
      000183 FF               [12]  365 	mov	r7,a
      000184 D0*00            [24]  366 	pop	bits
      000186 C0*00            [24]  367 	push	bits
      000188 C0 04            [24]  368 	push	ar4
      00018A C0 05            [24]  369 	push	ar5
      00018C C0 06            [24]  370 	push	ar6
      00018E C0 07            [24]  371 	push	ar7
      000190 E5*00            [12]  372 	mov	a,_bp
      000192 24 13            [12]  373 	add	a,#0x13
      000194 F8               [12]  374 	mov	r0,a
      000195 86 82            [24]  375 	mov	dpl,@r0
      000197 08               [12]  376 	inc	r0
      000198 86 83            [24]  377 	mov	dph,@r0
      00019A 08               [12]  378 	inc	r0
      00019B 86 F0            [24]  379 	mov	b,@r0
      00019D 08               [12]  380 	inc	r0
      00019E E6               [12]  381 	mov	a,@r0
      00019F 12r00r00         [24]  382 	lcall	___fssub
      0001A2 AC 82            [24]  383 	mov	r4,dpl
      0001A4 AD 83            [24]  384 	mov	r5,dph
      0001A6 AE F0            [24]  385 	mov	r6,b
      0001A8 FF               [12]  386 	mov	r7,a
      0001A9 E5 81            [12]  387 	mov	a,sp
      0001AB 24 FC            [12]  388 	add	a,#0xfc
      0001AD F5 81            [12]  389 	mov	sp,a
      0001AF D0*00            [24]  390 	pop	bits
      0001B1 C0*00            [24]  391 	push	bits
      0001B3 E4               [12]  392 	clr	a
      0001B4 C0 E0            [24]  393 	push	acc
      0001B6 C0 E0            [24]  394 	push	acc
      0001B8 C0 E0            [24]  395 	push	acc
      0001BA 74 3F            [12]  396 	mov	a,#0x3F
      0001BC C0 E0            [24]  397 	push	acc
      0001BE 8C 82            [24]  398 	mov	dpl,r4
      0001C0 8D 83            [24]  399 	mov	dph,r5
      0001C2 8E F0            [24]  400 	mov	b,r6
      0001C4 EF               [12]  401 	mov	a,r7
      0001C5 12r00r00         [24]  402 	lcall	___fslt
      0001C8 AF 82            [24]  403 	mov	r7,dpl
      0001CA E5 81            [12]  404 	mov	a,sp
      0001CC 24 FC            [12]  405 	add	a,#0xfc
      0001CE F5 81            [12]  406 	mov	sp,a
      0001D0 D0*00            [24]  407 	pop	bits
      0001D2 EF               [12]  408 	mov	a,r7
      0001D3 70 0B            [24]  409 	jnz	00114$
      0001D5 E5*00            [12]  410 	mov	a,_bp
      0001D7 24 05            [12]  411 	add	a,#0x05
      0001D9 F8               [12]  412 	mov	r0,a
      0001DA 06               [12]  413 	inc	@r0
      0001DB B6 00 02         [24]  414 	cjne	@r0,#0x00,00148$
      0001DE 08               [12]  415 	inc	r0
      0001DF 06               [12]  416 	inc	@r0
      0001E0                        417 00148$:
      0001E0                        418 00114$:
                                    419 ;	expf.c:363: xn=n;
      0001E0 E5*00            [12]  420 	mov	a,_bp
      0001E2 24 05            [12]  421 	add	a,#0x05
      0001E4 F8               [12]  422 	mov	r0,a
      0001E5 86 82            [24]  423 	mov	dpl,@r0
      0001E7 08               [12]  424 	inc	r0
      0001E8 86 83            [24]  425 	mov	dph,@r0
      0001EA C0*00            [24]  426 	push	bits
      0001EC 12r00r00         [24]  427 	lcall	___sint2fs
      0001EF AC 82            [24]  428 	mov	r4,dpl
      0001F1 AD 83            [24]  429 	mov	r5,dph
      0001F3 AE F0            [24]  430 	mov	r6,b
      0001F5 FF               [12]  431 	mov	r7,a
      0001F6 D0*00            [24]  432 	pop	bits
      0001F8 E5*00            [12]  433 	mov	a,_bp
      0001FA 24 07            [12]  434 	add	a,#0x07
      0001FC F8               [12]  435 	mov	r0,a
      0001FD A6 04            [24]  436 	mov	@r0,ar4
      0001FF 08               [12]  437 	inc	r0
      000200 A6 05            [24]  438 	mov	@r0,ar5
      000202 08               [12]  439 	inc	r0
      000203 A6 06            [24]  440 	mov	@r0,ar6
      000205 08               [12]  441 	inc	r0
      000206 A6 07            [24]  442 	mov	@r0,ar7
                                    443 ;	expf.c:364: g=((y-xn*C1))-xn*C2;
      000208 C0*00            [24]  444 	push	bits
      00020A E5*00            [12]  445 	mov	a,_bp
      00020C 24 07            [12]  446 	add	a,#0x07
      00020E F8               [12]  447 	mov	r0,a
      00020F E6               [12]  448 	mov	a,@r0
      000210 C0 E0            [24]  449 	push	acc
      000212 08               [12]  450 	inc	r0
      000213 E6               [12]  451 	mov	a,@r0
      000214 C0 E0            [24]  452 	push	acc
      000216 08               [12]  453 	inc	r0
      000217 E6               [12]  454 	mov	a,@r0
      000218 C0 E0            [24]  455 	push	acc
      00021A 08               [12]  456 	inc	r0
      00021B E6               [12]  457 	mov	a,@r0
      00021C C0 E0            [24]  458 	push	acc
      00021E 90 80 00         [24]  459 	mov	dptr,#0x8000
      000221 75 F0 31         [24]  460 	mov	b,#0x31
      000224 74 3F            [12]  461 	mov	a,#0x3F
      000226 12r00r00         [24]  462 	lcall	___fsmul
      000229 AC 82            [24]  463 	mov	r4,dpl
      00022B AD 83            [24]  464 	mov	r5,dph
      00022D AE F0            [24]  465 	mov	r6,b
      00022F FF               [12]  466 	mov	r7,a
      000230 E5 81            [12]  467 	mov	a,sp
      000232 24 FC            [12]  468 	add	a,#0xfc
      000234 F5 81            [12]  469 	mov	sp,a
      000236 D0*00            [24]  470 	pop	bits
      000238 C0*00            [24]  471 	push	bits
      00023A C0 04            [24]  472 	push	ar4
      00023C C0 05            [24]  473 	push	ar5
      00023E C0 06            [24]  474 	push	ar6
      000240 C0 07            [24]  475 	push	ar7
      000242 E5*00            [12]  476 	mov	a,_bp
      000244 24 17            [12]  477 	add	a,#0x17
      000246 F8               [12]  478 	mov	r0,a
      000247 86 82            [24]  479 	mov	dpl,@r0
      000249 08               [12]  480 	inc	r0
      00024A 86 83            [24]  481 	mov	dph,@r0
      00024C 08               [12]  482 	inc	r0
      00024D 86 F0            [24]  483 	mov	b,@r0
      00024F 08               [12]  484 	inc	r0
      000250 E6               [12]  485 	mov	a,@r0
      000251 12r00r00         [24]  486 	lcall	___fssub
      000254 A8*00            [24]  487 	mov	r0,_bp
      000256 08               [12]  488 	inc	r0
      000257 A6 82            [24]  489 	mov	@r0,dpl
      000259 08               [12]  490 	inc	r0
      00025A A6 83            [24]  491 	mov	@r0,dph
      00025C 08               [12]  492 	inc	r0
      00025D A6 F0            [24]  493 	mov	@r0,b
      00025F 08               [12]  494 	inc	r0
      000260 F6               [12]  495 	mov	@r0,a
      000261 E5 81            [12]  496 	mov	a,sp
      000263 24 FC            [12]  497 	add	a,#0xfc
      000265 F5 81            [12]  498 	mov	sp,a
      000267 D0*00            [24]  499 	pop	bits
      000269 C0*00            [24]  500 	push	bits
      00026B E5*00            [12]  501 	mov	a,_bp
      00026D 24 07            [12]  502 	add	a,#0x07
      00026F F8               [12]  503 	mov	r0,a
      000270 E6               [12]  504 	mov	a,@r0
      000271 C0 E0            [24]  505 	push	acc
      000273 08               [12]  506 	inc	r0
      000274 E6               [12]  507 	mov	a,@r0
      000275 C0 E0            [24]  508 	push	acc
      000277 08               [12]  509 	inc	r0
      000278 E6               [12]  510 	mov	a,@r0
      000279 C0 E0            [24]  511 	push	acc
      00027B 08               [12]  512 	inc	r0
      00027C E6               [12]  513 	mov	a,@r0
      00027D C0 E0            [24]  514 	push	acc
      00027F 90 80 83         [24]  515 	mov	dptr,#0x8083
      000282 75 F0 5E         [24]  516 	mov	b,#0x5E
      000285 74 B9            [12]  517 	mov	a,#0xB9
      000287 12r00r00         [24]  518 	lcall	___fsmul
      00028A AA 82            [24]  519 	mov	r2,dpl
      00028C AB 83            [24]  520 	mov	r3,dph
      00028E AE F0            [24]  521 	mov	r6,b
      000290 FF               [12]  522 	mov	r7,a
      000291 E5 81            [12]  523 	mov	a,sp
      000293 24 FC            [12]  524 	add	a,#0xfc
      000295 F5 81            [12]  525 	mov	sp,a
      000297 D0*00            [24]  526 	pop	bits
      000299 C0*00            [24]  527 	push	bits
      00029B C0 02            [24]  528 	push	ar2
      00029D C0 03            [24]  529 	push	ar3
      00029F C0 06            [24]  530 	push	ar6
      0002A1 C0 07            [24]  531 	push	ar7
      0002A3 A8*00            [24]  532 	mov	r0,_bp
      0002A5 08               [12]  533 	inc	r0
      0002A6 86 82            [24]  534 	mov	dpl,@r0
      0002A8 08               [12]  535 	inc	r0
      0002A9 86 83            [24]  536 	mov	dph,@r0
      0002AB 08               [12]  537 	inc	r0
      0002AC 86 F0            [24]  538 	mov	b,@r0
      0002AE 08               [12]  539 	inc	r0
      0002AF E6               [12]  540 	mov	a,@r0
      0002B0 12r00r00         [24]  541 	lcall	___fssub
      0002B3 AC 82            [24]  542 	mov	r4,dpl
      0002B5 AD 83            [24]  543 	mov	r5,dph
      0002B7 AE F0            [24]  544 	mov	r6,b
      0002B9 FF               [12]  545 	mov	r7,a
      0002BA E5 81            [12]  546 	mov	a,sp
      0002BC 24 FC            [12]  547 	add	a,#0xfc
      0002BE F5 81            [12]  548 	mov	sp,a
      0002C0 D0*00            [24]  549 	pop	bits
      0002C2 E5*00            [12]  550 	mov	a,_bp
      0002C4 24 0B            [12]  551 	add	a,#0x0b
      0002C6 F8               [12]  552 	mov	r0,a
      0002C7 A6 04            [24]  553 	mov	@r0,ar4
      0002C9 08               [12]  554 	inc	r0
      0002CA A6 05            [24]  555 	mov	@r0,ar5
      0002CC 08               [12]  556 	inc	r0
      0002CD A6 06            [24]  557 	mov	@r0,ar6
      0002CF 08               [12]  558 	inc	r0
      0002D0 A6 07            [24]  559 	mov	@r0,ar7
                                    560 ;	expf.c:365: z=g*g;
      0002D2 C0*00            [24]  561 	push	bits
      0002D4 E5*00            [12]  562 	mov	a,_bp
      0002D6 24 0B            [12]  563 	add	a,#0x0b
      0002D8 F8               [12]  564 	mov	r0,a
      0002D9 E6               [12]  565 	mov	a,@r0
      0002DA C0 E0            [24]  566 	push	acc
      0002DC 08               [12]  567 	inc	r0
      0002DD E6               [12]  568 	mov	a,@r0
      0002DE C0 E0            [24]  569 	push	acc
      0002E0 08               [12]  570 	inc	r0
      0002E1 E6               [12]  571 	mov	a,@r0
      0002E2 C0 E0            [24]  572 	push	acc
      0002E4 08               [12]  573 	inc	r0
      0002E5 E6               [12]  574 	mov	a,@r0
      0002E6 C0 E0            [24]  575 	push	acc
      0002E8 E5*00            [12]  576 	mov	a,_bp
      0002EA 24 0B            [12]  577 	add	a,#0x0b
      0002EC F8               [12]  578 	mov	r0,a
      0002ED 86 82            [24]  579 	mov	dpl,@r0
      0002EF 08               [12]  580 	inc	r0
      0002F0 86 83            [24]  581 	mov	dph,@r0
      0002F2 08               [12]  582 	inc	r0
      0002F3 86 F0            [24]  583 	mov	b,@r0
      0002F5 08               [12]  584 	inc	r0
      0002F6 E6               [12]  585 	mov	a,@r0
      0002F7 12r00r00         [24]  586 	lcall	___fsmul
      0002FA AA 82            [24]  587 	mov	r2,dpl
      0002FC AB 83            [24]  588 	mov	r3,dph
      0002FE AE F0            [24]  589 	mov	r6,b
      000300 FF               [12]  590 	mov	r7,a
      000301 E5 81            [12]  591 	mov	a,sp
      000303 24 FC            [12]  592 	add	a,#0xfc
      000305 F5 81            [12]  593 	mov	sp,a
      000307 D0*00            [24]  594 	pop	bits
      000309 E5*00            [12]  595 	mov	a,_bp
      00030B 24 13            [12]  596 	add	a,#0x13
      00030D F8               [12]  597 	mov	r0,a
      00030E A6 02            [24]  598 	mov	@r0,ar2
      000310 08               [12]  599 	inc	r0
      000311 A6 03            [24]  600 	mov	@r0,ar3
      000313 08               [12]  601 	inc	r0
      000314 A6 06            [24]  602 	mov	@r0,ar6
      000316 08               [12]  603 	inc	r0
      000317 A6 07            [24]  604 	mov	@r0,ar7
                                    605 ;	expf.c:366: r=P(z)*g;
      000319 C0*00            [24]  606 	push	bits
      00031B E5*00            [12]  607 	mov	a,_bp
      00031D 24 13            [12]  608 	add	a,#0x13
      00031F F8               [12]  609 	mov	r0,a
      000320 E6               [12]  610 	mov	a,@r0
      000321 C0 E0            [24]  611 	push	acc
      000323 08               [12]  612 	inc	r0
      000324 E6               [12]  613 	mov	a,@r0
      000325 C0 E0            [24]  614 	push	acc
      000327 08               [12]  615 	inc	r0
      000328 E6               [12]  616 	mov	a,@r0
      000329 C0 E0            [24]  617 	push	acc
      00032B 08               [12]  618 	inc	r0
      00032C E6               [12]  619 	mov	a,@r0
      00032D C0 E0            [24]  620 	push	acc
      00032F 90 53 08         [24]  621 	mov	dptr,#0x5308
      000332 75 F0 88         [24]  622 	mov	b,#0x88
      000335 74 3B            [12]  623 	mov	a,#0x3B
      000337 12r00r00         [24]  624 	lcall	___fsmul
      00033A AC 82            [24]  625 	mov	r4,dpl
      00033C AD 83            [24]  626 	mov	r5,dph
      00033E AE F0            [24]  627 	mov	r6,b
      000340 FF               [12]  628 	mov	r7,a
      000341 E5 81            [12]  629 	mov	a,sp
      000343 24 FC            [12]  630 	add	a,#0xfc
      000345 F5 81            [12]  631 	mov	sp,a
      000347 D0*00            [24]  632 	pop	bits
      000349 C0*00            [24]  633 	push	bits
      00034B E4               [12]  634 	clr	a
      00034C C0 E0            [24]  635 	push	acc
      00034E C0 E0            [24]  636 	push	acc
      000350 74 80            [12]  637 	mov	a,#0x80
      000352 C0 E0            [24]  638 	push	acc
      000354 74 3E            [12]  639 	mov	a,#0x3E
      000356 C0 E0            [24]  640 	push	acc
      000358 8C 82            [24]  641 	mov	dpl,r4
      00035A 8D 83            [24]  642 	mov	dph,r5
      00035C 8E F0            [24]  643 	mov	b,r6
      00035E EF               [12]  644 	mov	a,r7
      00035F 12r00r00         [24]  645 	lcall	___fsadd
      000362 AC 82            [24]  646 	mov	r4,dpl
      000364 AD 83            [24]  647 	mov	r5,dph
      000366 AE F0            [24]  648 	mov	r6,b
      000368 FF               [12]  649 	mov	r7,a
      000369 E5 81            [12]  650 	mov	a,sp
      00036B 24 FC            [12]  651 	add	a,#0xfc
      00036D F5 81            [12]  652 	mov	sp,a
      00036F D0*00            [24]  653 	pop	bits
      000371 C0*00            [24]  654 	push	bits
      000373 E5*00            [12]  655 	mov	a,_bp
      000375 24 0B            [12]  656 	add	a,#0x0b
      000377 F8               [12]  657 	mov	r0,a
      000378 E6               [12]  658 	mov	a,@r0
      000379 C0 E0            [24]  659 	push	acc
      00037B 08               [12]  660 	inc	r0
      00037C E6               [12]  661 	mov	a,@r0
      00037D C0 E0            [24]  662 	push	acc
      00037F 08               [12]  663 	inc	r0
      000380 E6               [12]  664 	mov	a,@r0
      000381 C0 E0            [24]  665 	push	acc
      000383 08               [12]  666 	inc	r0
      000384 E6               [12]  667 	mov	a,@r0
      000385 C0 E0            [24]  668 	push	acc
      000387 8C 82            [24]  669 	mov	dpl,r4
      000389 8D 83            [24]  670 	mov	dph,r5
      00038B 8E F0            [24]  671 	mov	b,r6
      00038D EF               [12]  672 	mov	a,r7
      00038E 12r00r00         [24]  673 	lcall	___fsmul
      000391 AC 82            [24]  674 	mov	r4,dpl
      000393 AD 83            [24]  675 	mov	r5,dph
      000395 AE F0            [24]  676 	mov	r6,b
      000397 FF               [12]  677 	mov	r7,a
      000398 E5 81            [12]  678 	mov	a,sp
      00039A 24 FC            [12]  679 	add	a,#0xfc
      00039C F5 81            [12]  680 	mov	sp,a
      00039E D0*00            [24]  681 	pop	bits
      0003A0 E5*00            [12]  682 	mov	a,_bp
      0003A2 24 0F            [12]  683 	add	a,#0x0f
      0003A4 F8               [12]  684 	mov	r0,a
      0003A5 A6 04            [24]  685 	mov	@r0,ar4
      0003A7 08               [12]  686 	inc	r0
      0003A8 A6 05            [24]  687 	mov	@r0,ar5
      0003AA 08               [12]  688 	inc	r0
      0003AB A6 06            [24]  689 	mov	@r0,ar6
      0003AD 08               [12]  690 	inc	r0
      0003AE A6 07            [24]  691 	mov	@r0,ar7
                                    692 ;	expf.c:367: r=0.5+(r/(Q(z)-r));
      0003B0 C0*00            [24]  693 	push	bits
      0003B2 E5*00            [12]  694 	mov	a,_bp
      0003B4 24 13            [12]  695 	add	a,#0x13
      0003B6 F8               [12]  696 	mov	r0,a
      0003B7 E6               [12]  697 	mov	a,@r0
      0003B8 C0 E0            [24]  698 	push	acc
      0003BA 08               [12]  699 	inc	r0
      0003BB E6               [12]  700 	mov	a,@r0
      0003BC C0 E0            [24]  701 	push	acc
      0003BE 08               [12]  702 	inc	r0
      0003BF E6               [12]  703 	mov	a,@r0
      0003C0 C0 E0            [24]  704 	push	acc
      0003C2 08               [12]  705 	inc	r0
      0003C3 E6               [12]  706 	mov	a,@r0
      0003C4 C0 E0            [24]  707 	push	acc
      0003C6 90 BF 5B         [24]  708 	mov	dptr,#0xBF5B
      0003C9 75 F0 4C         [24]  709 	mov	b,#0x4C
      0003CC 74 3D            [12]  710 	mov	a,#0x3D
      0003CE 12r00r00         [24]  711 	lcall	___fsmul
      0003D1 AA 82            [24]  712 	mov	r2,dpl
      0003D3 AB 83            [24]  713 	mov	r3,dph
      0003D5 AE F0            [24]  714 	mov	r6,b
      0003D7 FF               [12]  715 	mov	r7,a
      0003D8 E5 81            [12]  716 	mov	a,sp
      0003DA 24 FC            [12]  717 	add	a,#0xfc
      0003DC F5 81            [12]  718 	mov	sp,a
      0003DE D0*00            [24]  719 	pop	bits
      0003E0 C0*00            [24]  720 	push	bits
      0003E2 E4               [12]  721 	clr	a
      0003E3 C0 E0            [24]  722 	push	acc
      0003E5 C0 E0            [24]  723 	push	acc
      0003E7 C0 E0            [24]  724 	push	acc
      0003E9 74 3F            [12]  725 	mov	a,#0x3F
      0003EB C0 E0            [24]  726 	push	acc
      0003ED 8A 82            [24]  727 	mov	dpl,r2
      0003EF 8B 83            [24]  728 	mov	dph,r3
      0003F1 8E F0            [24]  729 	mov	b,r6
      0003F3 EF               [12]  730 	mov	a,r7
      0003F4 12r00r00         [24]  731 	lcall	___fsadd
      0003F7 AC 82            [24]  732 	mov	r4,dpl
      0003F9 AD 83            [24]  733 	mov	r5,dph
      0003FB AE F0            [24]  734 	mov	r6,b
      0003FD FF               [12]  735 	mov	r7,a
      0003FE E5 81            [12]  736 	mov	a,sp
      000400 24 FC            [12]  737 	add	a,#0xfc
      000402 F5 81            [12]  738 	mov	sp,a
      000404 D0*00            [24]  739 	pop	bits
      000406 C0*00            [24]  740 	push	bits
      000408 E5*00            [12]  741 	mov	a,_bp
      00040A 24 0F            [12]  742 	add	a,#0x0f
      00040C F8               [12]  743 	mov	r0,a
      00040D E6               [12]  744 	mov	a,@r0
      00040E C0 E0            [24]  745 	push	acc
      000410 08               [12]  746 	inc	r0
      000411 E6               [12]  747 	mov	a,@r0
      000412 C0 E0            [24]  748 	push	acc
      000414 08               [12]  749 	inc	r0
      000415 E6               [12]  750 	mov	a,@r0
      000416 C0 E0            [24]  751 	push	acc
      000418 08               [12]  752 	inc	r0
      000419 E6               [12]  753 	mov	a,@r0
      00041A C0 E0            [24]  754 	push	acc
      00041C 8C 82            [24]  755 	mov	dpl,r4
      00041E 8D 83            [24]  756 	mov	dph,r5
      000420 8E F0            [24]  757 	mov	b,r6
      000422 EF               [12]  758 	mov	a,r7
      000423 12r00r00         [24]  759 	lcall	___fssub
      000426 AC 82            [24]  760 	mov	r4,dpl
      000428 AD 83            [24]  761 	mov	r5,dph
      00042A AE F0            [24]  762 	mov	r6,b
      00042C FF               [12]  763 	mov	r7,a
      00042D E5 81            [12]  764 	mov	a,sp
      00042F 24 FC            [12]  765 	add	a,#0xfc
      000431 F5 81            [12]  766 	mov	sp,a
      000433 D0*00            [24]  767 	pop	bits
      000435 C0*00            [24]  768 	push	bits
      000437 C0 04            [24]  769 	push	ar4
      000439 C0 05            [24]  770 	push	ar5
      00043B C0 06            [24]  771 	push	ar6
      00043D C0 07            [24]  772 	push	ar7
      00043F E5*00            [12]  773 	mov	a,_bp
      000441 24 0F            [12]  774 	add	a,#0x0f
      000443 F8               [12]  775 	mov	r0,a
      000444 86 82            [24]  776 	mov	dpl,@r0
      000446 08               [12]  777 	inc	r0
      000447 86 83            [24]  778 	mov	dph,@r0
      000449 08               [12]  779 	inc	r0
      00044A 86 F0            [24]  780 	mov	b,@r0
      00044C 08               [12]  781 	inc	r0
      00044D E6               [12]  782 	mov	a,@r0
      00044E 12r00r00         [24]  783 	lcall	___fsdiv
      000451 AC 82            [24]  784 	mov	r4,dpl
      000453 AD 83            [24]  785 	mov	r5,dph
      000455 AE F0            [24]  786 	mov	r6,b
      000457 FF               [12]  787 	mov	r7,a
      000458 E5 81            [12]  788 	mov	a,sp
      00045A 24 FC            [12]  789 	add	a,#0xfc
      00045C F5 81            [12]  790 	mov	sp,a
      00045E D0*00            [24]  791 	pop	bits
      000460 C0*00            [24]  792 	push	bits
      000462 E4               [12]  793 	clr	a
      000463 C0 E0            [24]  794 	push	acc
      000465 C0 E0            [24]  795 	push	acc
      000467 C0 E0            [24]  796 	push	acc
      000469 74 3F            [12]  797 	mov	a,#0x3F
      00046B C0 E0            [24]  798 	push	acc
      00046D 8C 82            [24]  799 	mov	dpl,r4
      00046F 8D 83            [24]  800 	mov	dph,r5
      000471 8E F0            [24]  801 	mov	b,r6
      000473 EF               [12]  802 	mov	a,r7
      000474 12r00r00         [24]  803 	lcall	___fsadd
      000477 AC 82            [24]  804 	mov	r4,dpl
      000479 AD 83            [24]  805 	mov	r5,dph
      00047B AE F0            [24]  806 	mov	r6,b
      00047D FF               [12]  807 	mov	r7,a
      00047E E5 81            [12]  808 	mov	a,sp
      000480 24 FC            [12]  809 	add	a,#0xfc
      000482 F5 81            [12]  810 	mov	sp,a
      000484 D0*00            [24]  811 	pop	bits
      000486 E5*00            [12]  812 	mov	a,_bp
      000488 24 0F            [12]  813 	add	a,#0x0f
      00048A F8               [12]  814 	mov	r0,a
      00048B A6 04            [24]  815 	mov	@r0,ar4
      00048D 08               [12]  816 	inc	r0
      00048E A6 05            [24]  817 	mov	@r0,ar5
      000490 08               [12]  818 	inc	r0
      000491 A6 06            [24]  819 	mov	@r0,ar6
      000493 08               [12]  820 	inc	r0
      000494 A6 07            [24]  821 	mov	@r0,ar7
                                    822 ;	expf.c:369: n++;
      000496 E5*00            [12]  823 	mov	a,_bp
      000498 24 05            [12]  824 	add	a,#0x05
      00049A F8               [12]  825 	mov	r0,a
      00049B 06               [12]  826 	inc	@r0
      00049C B6 00 02         [24]  827 	cjne	@r0,#0x00,00149$
      00049F 08               [12]  828 	inc	r0
      0004A0 06               [12]  829 	inc	@r0
      0004A1                        830 00149$:
                                    831 ;	expf.c:370: z=ldexpf(r, n);
      0004A1 C0*00            [24]  832 	push	bits
      0004A3 E5*00            [12]  833 	mov	a,_bp
      0004A5 24 05            [12]  834 	add	a,#0x05
      0004A7 F8               [12]  835 	mov	r0,a
      0004A8 E6               [12]  836 	mov	a,@r0
      0004A9 C0 E0            [24]  837 	push	acc
      0004AB 08               [12]  838 	inc	r0
      0004AC E6               [12]  839 	mov	a,@r0
      0004AD C0 E0            [24]  840 	push	acc
      0004AF E5*00            [12]  841 	mov	a,_bp
      0004B1 24 0F            [12]  842 	add	a,#0x0f
      0004B3 F8               [12]  843 	mov	r0,a
      0004B4 86 82            [24]  844 	mov	dpl,@r0
      0004B6 08               [12]  845 	inc	r0
      0004B7 86 83            [24]  846 	mov	dph,@r0
      0004B9 08               [12]  847 	inc	r0
      0004BA 86 F0            [24]  848 	mov	b,@r0
      0004BC 08               [12]  849 	inc	r0
      0004BD E6               [12]  850 	mov	a,@r0
      0004BE 12r00r00         [24]  851 	lcall	_ldexpf
      0004C1 AC 82            [24]  852 	mov	r4,dpl
      0004C3 AD 83            [24]  853 	mov	r5,dph
      0004C5 AE F0            [24]  854 	mov	r6,b
      0004C7 FF               [12]  855 	mov	r7,a
      0004C8 15 81            [12]  856 	dec	sp
      0004CA 15 81            [12]  857 	dec	sp
      0004CC D0*00            [24]  858 	pop	bits
      0004CE E5*00            [12]  859 	mov	a,_bp
      0004D0 24 13            [12]  860 	add	a,#0x13
      0004D2 F8               [12]  861 	mov	r0,a
      0004D3 A6 04            [24]  862 	mov	@r0,ar4
      0004D5 08               [12]  863 	inc	r0
      0004D6 A6 05            [24]  864 	mov	@r0,ar5
      0004D8 08               [12]  865 	inc	r0
      0004D9 A6 06            [24]  866 	mov	@r0,ar6
      0004DB 08               [12]  867 	inc	r0
      0004DC A6 07            [24]  868 	mov	@r0,ar7
                                    869 ;	expf.c:371: if(sign)
      0004DE 30*00 35         [24]  870 	jnb	b0,00116$
                                    871 ;	expf.c:372: return 1.0/z;
      0004E1 E5*00            [12]  872 	mov	a,_bp
      0004E3 24 13            [12]  873 	add	a,#0x13
      0004E5 F8               [12]  874 	mov	r0,a
      0004E6 E6               [12]  875 	mov	a,@r0
      0004E7 C0 E0            [24]  876 	push	acc
      0004E9 08               [12]  877 	inc	r0
      0004EA E6               [12]  878 	mov	a,@r0
      0004EB C0 E0            [24]  879 	push	acc
      0004ED 08               [12]  880 	inc	r0
      0004EE E6               [12]  881 	mov	a,@r0
      0004EF C0 E0            [24]  882 	push	acc
      0004F1 08               [12]  883 	inc	r0
      0004F2 E6               [12]  884 	mov	a,@r0
      0004F3 C0 E0            [24]  885 	push	acc
      0004F5 90 00 00         [24]  886 	mov	dptr,#0x0000
      0004F8 75 F0 80         [24]  887 	mov	b,#0x80
      0004FB 74 3F            [12]  888 	mov	a,#0x3F
      0004FD 12r00r00         [24]  889 	lcall	___fsdiv
      000500 AC 82            [24]  890 	mov	r4,dpl
      000502 AD 83            [24]  891 	mov	r5,dph
      000504 AE F0            [24]  892 	mov	r6,b
      000506 FF               [12]  893 	mov	r7,a
      000507 E5 81            [12]  894 	mov	a,sp
      000509 24 FC            [12]  895 	add	a,#0xfc
      00050B F5 81            [12]  896 	mov	sp,a
      00050D 8C 82            [24]  897 	mov	dpl,r4
      00050F 8D 83            [24]  898 	mov	dph,r5
      000511 8E F0            [24]  899 	mov	b,r6
      000513 EF               [12]  900 	mov	a,r7
      000514 80 0F            [24]  901 	sjmp	00118$
      000516                        902 00116$:
                                    903 ;	expf.c:374: return z;
      000516 E5*00            [12]  904 	mov	a,_bp
      000518 24 13            [12]  905 	add	a,#0x13
      00051A F8               [12]  906 	mov	r0,a
      00051B 86 82            [24]  907 	mov	dpl,@r0
      00051D 08               [12]  908 	inc	r0
      00051E 86 83            [24]  909 	mov	dph,@r0
      000520 08               [12]  910 	inc	r0
      000521 86 F0            [24]  911 	mov	b,@r0
      000523 08               [12]  912 	inc	r0
      000524 E6               [12]  913 	mov	a,@r0
      000525                        914 00118$:
      000525 85*00 81         [24]  915 	mov	sp,_bp
      000528 D0*00            [24]  916 	pop	_bp
      00052A 22               [24]  917 	ret
                                    918 	.area CSEG    (CODE)
                                    919 	.area CONST   (CODE)
                                    920 	.area XINIT   (CODE)
                                    921 	.area CABS    (ABS,CODE)
