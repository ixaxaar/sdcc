                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:05 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _atof
                                      7 	.optsdcc -mmcs51 --model-medium
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _atoi
                                     13 	.globl _isspace
                                     14 	.globl _islower
                                     15 	.globl _isdigit
                                     16 	.globl _atof
                                     17 ;--------------------------------------------------------
                                     18 ; special function registers
                                     19 ;--------------------------------------------------------
                                     20 	.area RSEG    (ABS,DATA)
      000000                         21 	.org 0x0000
                                     22 ;--------------------------------------------------------
                                     23 ; special function bits
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; overlayable register banks
                                     29 ;--------------------------------------------------------
                                     30 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         31 	.ds 8
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable bit register bank
                                     34 ;--------------------------------------------------------
                                     35 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         36 bits:
      000000                         37 	.ds 1
                           008000    38 	b0 = bits[0]
                           008100    39 	b1 = bits[1]
                           008200    40 	b2 = bits[2]
                           008300    41 	b3 = bits[3]
                           008400    42 	b4 = bits[4]
                           008500    43 	b5 = bits[5]
                           008600    44 	b6 = bits[6]
                           008700    45 	b7 = bits[7]
                                     46 ;--------------------------------------------------------
                                     47 ; internal ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area DSEG    (DATA)
                                     50 ;--------------------------------------------------------
                                     51 ; overlayable items in internal ram 
                                     52 ;--------------------------------------------------------
                                     53 ;--------------------------------------------------------
                                     54 ; indirectly addressable internal ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area ISEG    (DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area IABS    (ABS,DATA)
                                     61 	.area IABS    (ABS,DATA)
                                     62 ;--------------------------------------------------------
                                     63 ; bit data
                                     64 ;--------------------------------------------------------
                                     65 	.area BSEG    (BIT)
                                     66 ;--------------------------------------------------------
                                     67 ; paged external ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area PSEG    (PAG,XDATA)
                                     70 ;--------------------------------------------------------
                                     71 ; external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area XSEG    (XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; absolute external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XABS    (ABS,XDATA)
                                     78 ;--------------------------------------------------------
                                     79 ; external initialized ram data
                                     80 ;--------------------------------------------------------
                                     81 	.area XISEG   (XDATA)
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT0 (CODE)
                                     84 	.area GSINIT1 (CODE)
                                     85 	.area GSINIT2 (CODE)
                                     86 	.area GSINIT3 (CODE)
                                     87 	.area GSINIT4 (CODE)
                                     88 	.area GSINIT5 (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 	.area GSFINAL (CODE)
                                     91 	.area CSEG    (CODE)
                                     92 ;--------------------------------------------------------
                                     93 ; global & static initialisations
                                     94 ;--------------------------------------------------------
                                     95 	.area HOME    (CODE)
                                     96 	.area GSINIT  (CODE)
                                     97 	.area GSFINAL (CODE)
                                     98 	.area GSINIT  (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME    (CODE)
                                    103 	.area HOME    (CODE)
                                    104 ;--------------------------------------------------------
                                    105 ; code
                                    106 ;--------------------------------------------------------
                                    107 	.area CSEG    (CODE)
                                    108 ;------------------------------------------------------------
                                    109 ;Allocation info for local variables in function 'atof'
                                    110 ;------------------------------------------------------------
                                    111 ;s                         Allocated to registers r6 r5 r3 
                                    112 ;value                     Allocated to stack - _bp +8
                                    113 ;fraction                  Allocated to stack - _bp +12
                                    114 ;iexp                      Allocated to registers r6 
                                    115 ;sign                      Allocated to registers b0 
                                    116 ;sloc0                     Allocated to stack - _bp +1
                                    117 ;sloc1                     Allocated to stack - _bp +4
                                    118 ;------------------------------------------------------------
                                    119 ;	_atof.c:33: float atof(const char * s)
                                    120 ;	-----------------------------------------
                                    121 ;	 function atof
                                    122 ;	-----------------------------------------
      000000                        123 _atof:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
      000000 C0*00            [24]  132 	push	_bp
      000002 E5 81            [12]  133 	mov	a,sp
      000004 F5*00            [12]  134 	mov	_bp,a
      000006 24 0F            [12]  135 	add	a,#0x0F
      000008 F5 81            [12]  136 	mov	sp,a
      00000A AE 82            [24]  137 	mov	r6,dpl
      00000C AD 83            [24]  138 	mov	r5,dph
      00000E AB F0            [24]  139 	mov	r3,b
                                    140 ;	_atof.c:40: while (isspace(*s)) s++;
      000010 A8*00            [24]  141 	mov	r0,_bp
      000012 08               [12]  142 	inc	r0
      000013 A6 06            [24]  143 	mov	@r0,ar6
      000015 08               [12]  144 	inc	r0
      000016 A6 05            [24]  145 	mov	@r0,ar5
      000018 08               [12]  146 	inc	r0
      000019 A6 03            [24]  147 	mov	@r0,ar3
      00001B                        148 00101$:
      00001B A8*00            [24]  149 	mov	r0,_bp
      00001D 08               [12]  150 	inc	r0
      00001E 86 82            [24]  151 	mov	dpl,@r0
      000020 08               [12]  152 	inc	r0
      000021 86 83            [24]  153 	mov	dph,@r0
      000023 08               [12]  154 	inc	r0
      000024 86 F0            [24]  155 	mov	b,@r0
      000026 12r00r00         [24]  156 	lcall	__gptrget
      000029 F5 82            [12]  157 	mov	dpl,a
      00002B 12r00r00         [24]  158 	lcall	_isspace
      00002E E5 82            [12]  159 	mov	a,dpl
      000030 60 0B            [24]  160 	jz	00148$
      000032 A8*00            [24]  161 	mov	r0,_bp
      000034 08               [12]  162 	inc	r0
      000035 06               [12]  163 	inc	@r0
      000036 B6 00 02         [24]  164 	cjne	@r0,#0x00,00182$
      000039 08               [12]  165 	inc	r0
      00003A 06               [12]  166 	inc	@r0
      00003B                        167 00182$:
      00003B 80 DE            [24]  168 	sjmp	00101$
      00003D                        169 00148$:
      00003D A8*00            [24]  170 	mov	r0,_bp
      00003F 08               [12]  171 	inc	r0
      000040 86 06            [24]  172 	mov	ar6,@r0
      000042 08               [12]  173 	inc	r0
      000043 86 05            [24]  174 	mov	ar5,@r0
      000045 08               [12]  175 	inc	r0
      000046 86 03            [24]  176 	mov	ar3,@r0
                                    177 ;	_atof.c:43: if (*s == '-')
      000048 A8*00            [24]  178 	mov	r0,_bp
      00004A 08               [12]  179 	inc	r0
      00004B 86 82            [24]  180 	mov	dpl,@r0
      00004D 08               [12]  181 	inc	r0
      00004E 86 83            [24]  182 	mov	dph,@r0
      000050 08               [12]  183 	inc	r0
      000051 86 F0            [24]  184 	mov	b,@r0
      000053 12r00r00         [24]  185 	lcall	__gptrget
      000056 FC               [12]  186 	mov	r4,a
      000057 BC 2D 12         [24]  187 	cjne	r4,#0x2D,00107$
                                    188 ;	_atof.c:45: sign=1;
      00005A D2*00            [12]  189 	setb	b0
                                    190 ;	_atof.c:46: s++;
      00005C A8*00            [24]  191 	mov	r0,_bp
      00005E 08               [12]  192 	inc	r0
      00005F 74 01            [12]  193 	mov	a,#0x01
      000061 26               [12]  194 	add	a,@r0
      000062 FE               [12]  195 	mov	r6,a
      000063 E4               [12]  196 	clr	a
      000064 08               [12]  197 	inc	r0
      000065 36               [12]  198 	addc	a,@r0
      000066 FD               [12]  199 	mov	r5,a
      000067 08               [12]  200 	inc	r0
      000068 86 03            [24]  201 	mov	ar3,@r0
      00006A 80 13            [24]  202 	sjmp	00108$
      00006C                        203 00107$:
                                    204 ;	_atof.c:50: sign=0;
      00006C C2*00            [12]  205 	clr	b0
                                    206 ;	_atof.c:51: if (*s == '+') s++;
      00006E BC 2B 0E         [24]  207 	cjne	r4,#0x2B,00108$
      000071 A8*00            [24]  208 	mov	r0,_bp
      000073 08               [12]  209 	inc	r0
      000074 74 01            [12]  210 	mov	a,#0x01
      000076 26               [12]  211 	add	a,@r0
      000077 FE               [12]  212 	mov	r6,a
      000078 E4               [12]  213 	clr	a
      000079 08               [12]  214 	inc	r0
      00007A 36               [12]  215 	addc	a,@r0
      00007B FD               [12]  216 	mov	r5,a
      00007C 08               [12]  217 	inc	r0
      00007D 86 03            [24]  218 	mov	ar3,@r0
      00007F                        219 00108$:
                                    220 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00007F E5*00            [12]  221 	mov	a,_bp
      000081 24 08            [12]  222 	add	a,#0x08
      000083 F8               [12]  223 	mov	r0,a
      000084 E4               [12]  224 	clr	a
      000085 F6               [12]  225 	mov	@r0,a
      000086 08               [12]  226 	inc	r0
      000087 F6               [12]  227 	mov	@r0,a
      000088 08               [12]  228 	inc	r0
      000089 F6               [12]  229 	mov	@r0,a
      00008A 08               [12]  230 	inc	r0
      00008B F6               [12]  231 	mov	@r0,a
      00008C A8*00            [24]  232 	mov	r0,_bp
      00008E 08               [12]  233 	inc	r0
      00008F A6 06            [24]  234 	mov	@r0,ar6
      000091 08               [12]  235 	inc	r0
      000092 A6 05            [24]  236 	mov	@r0,ar5
      000094 08               [12]  237 	inc	r0
      000095 A6 03            [24]  238 	mov	@r0,ar3
      000097                        239 00124$:
      000097 A8*00            [24]  240 	mov	r0,_bp
      000099 08               [12]  241 	inc	r0
      00009A 86 82            [24]  242 	mov	dpl,@r0
      00009C 08               [12]  243 	inc	r0
      00009D 86 83            [24]  244 	mov	dph,@r0
      00009F 08               [12]  245 	inc	r0
      0000A0 86 F0            [24]  246 	mov	b,@r0
      0000A2 12r00r00         [24]  247 	lcall	__gptrget
      0000A5 F5 82            [12]  248 	mov	dpl,a
      0000A7 C0*00            [24]  249 	push	bits
      0000A9 12r00r00         [24]  250 	lcall	_isdigit
      0000AC E5 82            [12]  251 	mov	a,dpl
      0000AE D0*00            [24]  252 	pop	bits
      0000B0 70 03            [24]  253 	jnz	00187$
      0000B2 02r01r60         [24]  254 	ljmp	00149$
      0000B5                        255 00187$:
                                    256 ;	_atof.c:57: value=10.0*value+(*s-'0');
      0000B5 C0*00            [24]  257 	push	bits
      0000B7 E5*00            [12]  258 	mov	a,_bp
      0000B9 24 08            [12]  259 	add	a,#0x08
      0000BB F8               [12]  260 	mov	r0,a
      0000BC E6               [12]  261 	mov	a,@r0
      0000BD C0 E0            [24]  262 	push	acc
      0000BF 08               [12]  263 	inc	r0
      0000C0 E6               [12]  264 	mov	a,@r0
      0000C1 C0 E0            [24]  265 	push	acc
      0000C3 08               [12]  266 	inc	r0
      0000C4 E6               [12]  267 	mov	a,@r0
      0000C5 C0 E0            [24]  268 	push	acc
      0000C7 08               [12]  269 	inc	r0
      0000C8 E6               [12]  270 	mov	a,@r0
      0000C9 C0 E0            [24]  271 	push	acc
      0000CB 90 00 00         [24]  272 	mov	dptr,#0x0000
      0000CE 75 F0 20         [24]  273 	mov	b,#0x20
      0000D1 74 41            [12]  274 	mov	a,#0x41
      0000D3 12r00r00         [24]  275 	lcall	___fsmul
      0000D6 C8               [12]  276 	xch	a,r0
      0000D7 E5*00            [12]  277 	mov	a,_bp
      0000D9 24 04            [12]  278 	add	a,#0x04
      0000DB C8               [12]  279 	xch	a,r0
      0000DC A6 82            [24]  280 	mov	@r0,dpl
      0000DE 08               [12]  281 	inc	r0
      0000DF A6 83            [24]  282 	mov	@r0,dph
      0000E1 08               [12]  283 	inc	r0
      0000E2 A6 F0            [24]  284 	mov	@r0,b
      0000E4 08               [12]  285 	inc	r0
      0000E5 F6               [12]  286 	mov	@r0,a
      0000E6 E5 81            [12]  287 	mov	a,sp
      0000E8 24 FC            [12]  288 	add	a,#0xfc
      0000EA F5 81            [12]  289 	mov	sp,a
      0000EC D0*00            [24]  290 	pop	bits
      0000EE A8*00            [24]  291 	mov	r0,_bp
      0000F0 08               [12]  292 	inc	r0
      0000F1 86 82            [24]  293 	mov	dpl,@r0
      0000F3 08               [12]  294 	inc	r0
      0000F4 86 83            [24]  295 	mov	dph,@r0
      0000F6 08               [12]  296 	inc	r0
      0000F7 86 F0            [24]  297 	mov	b,@r0
      0000F9 12r00r00         [24]  298 	lcall	__gptrget
      0000FC FE               [12]  299 	mov	r6,a
      0000FD A3               [24]  300 	inc	dptr
      0000FE 18               [12]  301 	dec	r0
      0000FF 18               [12]  302 	dec	r0
      000100 A6 82            [24]  303 	mov	@r0,dpl
      000102 08               [12]  304 	inc	r0
      000103 A6 83            [24]  305 	mov	@r0,dph
      000105 EE               [12]  306 	mov	a,r6
      000106 33               [12]  307 	rlc	a
      000107 95 E0            [12]  308 	subb	a,acc
      000109 FD               [12]  309 	mov	r5,a
      00010A EE               [12]  310 	mov	a,r6
      00010B 24 D0            [12]  311 	add	a,#0xD0
      00010D F5 82            [12]  312 	mov	dpl,a
      00010F ED               [12]  313 	mov	a,r5
      000110 34 FF            [12]  314 	addc	a,#0xFF
      000112 F5 83            [12]  315 	mov	dph,a
      000114 C0*00            [24]  316 	push	bits
      000116 12r00r00         [24]  317 	lcall	___sint2fs
      000119 AC 82            [24]  318 	mov	r4,dpl
      00011B AD 83            [24]  319 	mov	r5,dph
      00011D AE F0            [24]  320 	mov	r6,b
      00011F FF               [12]  321 	mov	r7,a
      000120 D0*00            [24]  322 	pop	bits
      000122 C0*00            [24]  323 	push	bits
      000124 C0 04            [24]  324 	push	ar4
      000126 C0 05            [24]  325 	push	ar5
      000128 C0 06            [24]  326 	push	ar6
      00012A C0 07            [24]  327 	push	ar7
      00012C E5*00            [12]  328 	mov	a,_bp
      00012E 24 04            [12]  329 	add	a,#0x04
      000130 F8               [12]  330 	mov	r0,a
      000131 86 82            [24]  331 	mov	dpl,@r0
      000133 08               [12]  332 	inc	r0
      000134 86 83            [24]  333 	mov	dph,@r0
      000136 08               [12]  334 	inc	r0
      000137 86 F0            [24]  335 	mov	b,@r0
      000139 08               [12]  336 	inc	r0
      00013A E6               [12]  337 	mov	a,@r0
      00013B 12r00r00         [24]  338 	lcall	___fsadd
      00013E AC 82            [24]  339 	mov	r4,dpl
      000140 AD 83            [24]  340 	mov	r5,dph
      000142 AE F0            [24]  341 	mov	r6,b
      000144 FF               [12]  342 	mov	r7,a
      000145 E5 81            [12]  343 	mov	a,sp
      000147 24 FC            [12]  344 	add	a,#0xfc
      000149 F5 81            [12]  345 	mov	sp,a
      00014B D0*00            [24]  346 	pop	bits
      00014D E5*00            [12]  347 	mov	a,_bp
      00014F 24 08            [12]  348 	add	a,#0x08
      000151 F8               [12]  349 	mov	r0,a
      000152 A6 04            [24]  350 	mov	@r0,ar4
      000154 08               [12]  351 	inc	r0
      000155 A6 05            [24]  352 	mov	@r0,ar5
      000157 08               [12]  353 	inc	r0
      000158 A6 06            [24]  354 	mov	@r0,ar6
      00015A 08               [12]  355 	inc	r0
      00015B A6 07            [24]  356 	mov	@r0,ar7
                                    357 ;	_atof.c:55: for (value=0.0; isdigit(*s); s++)
      00015D 02r00r97         [24]  358 	ljmp	00124$
      000160                        359 00149$:
      000160 A8*00            [24]  360 	mov	r0,_bp
      000162 08               [12]  361 	inc	r0
      000163 86 06            [24]  362 	mov	ar6,@r0
      000165 08               [12]  363 	inc	r0
      000166 86 05            [24]  364 	mov	ar5,@r0
      000168 08               [12]  365 	inc	r0
      000169 86 03            [24]  366 	mov	ar3,@r0
                                    367 ;	_atof.c:61: if (*s == '.')
      00016B A8*00            [24]  368 	mov	r0,_bp
      00016D 08               [12]  369 	inc	r0
      00016E 86 82            [24]  370 	mov	dpl,@r0
      000170 08               [12]  371 	inc	r0
      000171 86 83            [24]  372 	mov	dph,@r0
      000173 08               [12]  373 	inc	r0
      000174 86 F0            [24]  374 	mov	b,@r0
      000176 12r00r00         [24]  375 	lcall	__gptrget
      000179 FF               [12]  376 	mov	r7,a
      00017A BF 2E 02         [24]  377 	cjne	r7,#0x2E,00188$
      00017D 80 03            [24]  378 	sjmp	00189$
      00017F                        379 00188$:
      00017F 02r02rBD         [24]  380 	ljmp	00112$
      000182                        381 00189$:
                                    382 ;	_atof.c:63: s++;
      000182 A8*00            [24]  383 	mov	r0,_bp
      000184 08               [12]  384 	inc	r0
      000185 74 01            [12]  385 	mov	a,#0x01
      000187 26               [12]  386 	add	a,@r0
      000188 FE               [12]  387 	mov	r6,a
      000189 E4               [12]  388 	clr	a
      00018A 08               [12]  389 	inc	r0
      00018B 36               [12]  390 	addc	a,@r0
      00018C FD               [12]  391 	mov	r5,a
      00018D 08               [12]  392 	inc	r0
      00018E 86 03            [24]  393 	mov	ar3,@r0
                                    394 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      000190 E5*00            [12]  395 	mov	a,_bp
      000192 24 0C            [12]  396 	add	a,#0x0c
      000194 F8               [12]  397 	mov	r0,a
      000195 76 CD            [12]  398 	mov	@r0,#0xCD
      000197 08               [12]  399 	inc	r0
      000198 76 CC            [12]  400 	mov	@r0,#0xCC
      00019A 08               [12]  401 	inc	r0
      00019B 76 CC            [12]  402 	mov	@r0,#0xCC
      00019D 08               [12]  403 	inc	r0
      00019E 76 3D            [12]  404 	mov	@r0,#0x3D
      0001A0 E5*00            [12]  405 	mov	a,_bp
      0001A2 24 04            [12]  406 	add	a,#0x04
      0001A4 F8               [12]  407 	mov	r0,a
      0001A5 A6 06            [24]  408 	mov	@r0,ar6
      0001A7 08               [12]  409 	inc	r0
      0001A8 A6 05            [24]  410 	mov	@r0,ar5
      0001AA 08               [12]  411 	inc	r0
      0001AB A6 03            [24]  412 	mov	@r0,ar3
      0001AD                        413 00127$:
      0001AD E5*00            [12]  414 	mov	a,_bp
      0001AF 24 04            [12]  415 	add	a,#0x04
      0001B1 F8               [12]  416 	mov	r0,a
      0001B2 86 82            [24]  417 	mov	dpl,@r0
      0001B4 08               [12]  418 	inc	r0
      0001B5 86 83            [24]  419 	mov	dph,@r0
      0001B7 08               [12]  420 	inc	r0
      0001B8 86 F0            [24]  421 	mov	b,@r0
      0001BA 12r00r00         [24]  422 	lcall	__gptrget
      0001BD F5 82            [12]  423 	mov	dpl,a
      0001BF C0*00            [24]  424 	push	bits
      0001C1 12r00r00         [24]  425 	lcall	_isdigit
      0001C4 E5 82            [12]  426 	mov	a,dpl
      0001C6 D0*00            [24]  427 	pop	bits
      0001C8 70 03            [24]  428 	jnz	00190$
      0001CA 02r02rB0         [24]  429 	ljmp	00150$
      0001CD                        430 00190$:
                                    431 ;	_atof.c:66: value+=(*s-'0')*fraction;
      0001CD E5*00            [12]  432 	mov	a,_bp
      0001CF 24 04            [12]  433 	add	a,#0x04
      0001D1 F8               [12]  434 	mov	r0,a
      0001D2 86 82            [24]  435 	mov	dpl,@r0
      0001D4 08               [12]  436 	inc	r0
      0001D5 86 83            [24]  437 	mov	dph,@r0
      0001D7 08               [12]  438 	inc	r0
      0001D8 86 F0            [24]  439 	mov	b,@r0
      0001DA 12r00r00         [24]  440 	lcall	__gptrget
      0001DD FE               [12]  441 	mov	r6,a
      0001DE A3               [24]  442 	inc	dptr
      0001DF 18               [12]  443 	dec	r0
      0001E0 18               [12]  444 	dec	r0
      0001E1 A6 82            [24]  445 	mov	@r0,dpl
      0001E3 08               [12]  446 	inc	r0
      0001E4 A6 83            [24]  447 	mov	@r0,dph
      0001E6 EE               [12]  448 	mov	a,r6
      0001E7 33               [12]  449 	rlc	a
      0001E8 95 E0            [12]  450 	subb	a,acc
      0001EA FD               [12]  451 	mov	r5,a
      0001EB EE               [12]  452 	mov	a,r6
      0001EC 24 D0            [12]  453 	add	a,#0xD0
      0001EE F5 82            [12]  454 	mov	dpl,a
      0001F0 ED               [12]  455 	mov	a,r5
      0001F1 34 FF            [12]  456 	addc	a,#0xFF
      0001F3 F5 83            [12]  457 	mov	dph,a
      0001F5 C0*00            [24]  458 	push	bits
      0001F7 12r00r00         [24]  459 	lcall	___sint2fs
      0001FA AC 82            [24]  460 	mov	r4,dpl
      0001FC AD 83            [24]  461 	mov	r5,dph
      0001FE AE F0            [24]  462 	mov	r6,b
      000200 FF               [12]  463 	mov	r7,a
      000201 D0*00            [24]  464 	pop	bits
      000203 C0*00            [24]  465 	push	bits
      000205 E5*00            [12]  466 	mov	a,_bp
      000207 24 0C            [12]  467 	add	a,#0x0c
      000209 F8               [12]  468 	mov	r0,a
      00020A E6               [12]  469 	mov	a,@r0
      00020B C0 E0            [24]  470 	push	acc
      00020D 08               [12]  471 	inc	r0
      00020E E6               [12]  472 	mov	a,@r0
      00020F C0 E0            [24]  473 	push	acc
      000211 08               [12]  474 	inc	r0
      000212 E6               [12]  475 	mov	a,@r0
      000213 C0 E0            [24]  476 	push	acc
      000215 08               [12]  477 	inc	r0
      000216 E6               [12]  478 	mov	a,@r0
      000217 C0 E0            [24]  479 	push	acc
      000219 8C 82            [24]  480 	mov	dpl,r4
      00021B 8D 83            [24]  481 	mov	dph,r5
      00021D 8E F0            [24]  482 	mov	b,r6
      00021F EF               [12]  483 	mov	a,r7
      000220 12r00r00         [24]  484 	lcall	___fsmul
      000223 AC 82            [24]  485 	mov	r4,dpl
      000225 AD 83            [24]  486 	mov	r5,dph
      000227 AE F0            [24]  487 	mov	r6,b
      000229 FF               [12]  488 	mov	r7,a
      00022A E5 81            [12]  489 	mov	a,sp
      00022C 24 FC            [12]  490 	add	a,#0xfc
      00022E F5 81            [12]  491 	mov	sp,a
      000230 D0*00            [24]  492 	pop	bits
      000232 C0*00            [24]  493 	push	bits
      000234 C0 04            [24]  494 	push	ar4
      000236 C0 05            [24]  495 	push	ar5
      000238 C0 06            [24]  496 	push	ar6
      00023A C0 07            [24]  497 	push	ar7
      00023C E5*00            [12]  498 	mov	a,_bp
      00023E 24 08            [12]  499 	add	a,#0x08
      000240 F8               [12]  500 	mov	r0,a
      000241 86 82            [24]  501 	mov	dpl,@r0
      000243 08               [12]  502 	inc	r0
      000244 86 83            [24]  503 	mov	dph,@r0
      000246 08               [12]  504 	inc	r0
      000247 86 F0            [24]  505 	mov	b,@r0
      000249 08               [12]  506 	inc	r0
      00024A E6               [12]  507 	mov	a,@r0
      00024B 12r00r00         [24]  508 	lcall	___fsadd
      00024E AC 82            [24]  509 	mov	r4,dpl
      000250 AD 83            [24]  510 	mov	r5,dph
      000252 AE F0            [24]  511 	mov	r6,b
      000254 FF               [12]  512 	mov	r7,a
      000255 E5 81            [12]  513 	mov	a,sp
      000257 24 FC            [12]  514 	add	a,#0xfc
      000259 F5 81            [12]  515 	mov	sp,a
      00025B D0*00            [24]  516 	pop	bits
      00025D E5*00            [12]  517 	mov	a,_bp
      00025F 24 08            [12]  518 	add	a,#0x08
      000261 F8               [12]  519 	mov	r0,a
      000262 A6 04            [24]  520 	mov	@r0,ar4
      000264 08               [12]  521 	inc	r0
      000265 A6 05            [24]  522 	mov	@r0,ar5
      000267 08               [12]  523 	inc	r0
      000268 A6 06            [24]  524 	mov	@r0,ar6
      00026A 08               [12]  525 	inc	r0
      00026B A6 07            [24]  526 	mov	@r0,ar7
                                    527 ;	_atof.c:67: fraction*=0.1;
      00026D C0*00            [24]  528 	push	bits
      00026F E5*00            [12]  529 	mov	a,_bp
      000271 24 0C            [12]  530 	add	a,#0x0c
      000273 F8               [12]  531 	mov	r0,a
      000274 E6               [12]  532 	mov	a,@r0
      000275 C0 E0            [24]  533 	push	acc
      000277 08               [12]  534 	inc	r0
      000278 E6               [12]  535 	mov	a,@r0
      000279 C0 E0            [24]  536 	push	acc
      00027B 08               [12]  537 	inc	r0
      00027C E6               [12]  538 	mov	a,@r0
      00027D C0 E0            [24]  539 	push	acc
      00027F 08               [12]  540 	inc	r0
      000280 E6               [12]  541 	mov	a,@r0
      000281 C0 E0            [24]  542 	push	acc
      000283 90 CC CD         [24]  543 	mov	dptr,#0xCCCD
      000286 75 F0 CC         [24]  544 	mov	b,#0xCC
      000289 74 3D            [12]  545 	mov	a,#0x3D
      00028B 12r00r00         [24]  546 	lcall	___fsmul
      00028E AC 82            [24]  547 	mov	r4,dpl
      000290 AD 83            [24]  548 	mov	r5,dph
      000292 AE F0            [24]  549 	mov	r6,b
      000294 FF               [12]  550 	mov	r7,a
      000295 E5 81            [12]  551 	mov	a,sp
      000297 24 FC            [12]  552 	add	a,#0xfc
      000299 F5 81            [12]  553 	mov	sp,a
      00029B D0*00            [24]  554 	pop	bits
      00029D E5*00            [12]  555 	mov	a,_bp
      00029F 24 0C            [12]  556 	add	a,#0x0c
      0002A1 F8               [12]  557 	mov	r0,a
      0002A2 A6 04            [24]  558 	mov	@r0,ar4
      0002A4 08               [12]  559 	inc	r0
      0002A5 A6 05            [24]  560 	mov	@r0,ar5
      0002A7 08               [12]  561 	inc	r0
      0002A8 A6 06            [24]  562 	mov	@r0,ar6
      0002AA 08               [12]  563 	inc	r0
      0002AB A6 07            [24]  564 	mov	@r0,ar7
                                    565 ;	_atof.c:64: for (fraction=0.1; isdigit(*s); s++)
      0002AD 02r01rAD         [24]  566 	ljmp	00127$
      0002B0                        567 00150$:
      0002B0 E5*00            [12]  568 	mov	a,_bp
      0002B2 24 04            [12]  569 	add	a,#0x04
      0002B4 F8               [12]  570 	mov	r0,a
      0002B5 86 06            [24]  571 	mov	ar6,@r0
      0002B7 08               [12]  572 	inc	r0
      0002B8 86 05            [24]  573 	mov	ar5,@r0
      0002BA 08               [12]  574 	inc	r0
      0002BB 86 03            [24]  575 	mov	ar3,@r0
      0002BD                        576 00112$:
                                    577 ;	_atof.c:72: if (toupper(*s)=='E')
      0002BD 8E 82            [24]  578 	mov	dpl,r6
      0002BF 8D 83            [24]  579 	mov	dph,r5
      0002C1 8B F0            [24]  580 	mov	b,r3
      0002C3 12r00r00         [24]  581 	lcall	__gptrget
      0002C6 F5 82            [12]  582 	mov	dpl,a
      0002C8 C0 06            [24]  583 	push	ar6
      0002CA C0 05            [24]  584 	push	ar5
      0002CC C0 03            [24]  585 	push	ar3
      0002CE C0*00            [24]  586 	push	bits
      0002D0 12r00r00         [24]  587 	lcall	_islower
      0002D3 E5 82            [12]  588 	mov	a,dpl
      0002D5 D0*00            [24]  589 	pop	bits
      0002D7 D0 03            [24]  590 	pop	ar3
      0002D9 D0 05            [24]  591 	pop	ar5
      0002DB D0 06            [24]  592 	pop	ar6
      0002DD 60 0F            [24]  593 	jz	00131$
      0002DF 8E 82            [24]  594 	mov	dpl,r6
      0002E1 8D 83            [24]  595 	mov	dph,r5
      0002E3 8B F0            [24]  596 	mov	b,r3
      0002E5 12r00r00         [24]  597 	lcall	__gptrget
      0002E8 FF               [12]  598 	mov	r7,a
      0002E9 53 07 DF         [24]  599 	anl	ar7,#0xDF
      0002EC 80 0A            [24]  600 	sjmp	00132$
      0002EE                        601 00131$:
      0002EE 8E 82            [24]  602 	mov	dpl,r6
      0002F0 8D 83            [24]  603 	mov	dph,r5
      0002F2 8B F0            [24]  604 	mov	b,r3
      0002F4 12r00r00         [24]  605 	lcall	__gptrget
      0002F7 FF               [12]  606 	mov	r7,a
      0002F8                        607 00132$:
      0002F8 BF 45 02         [24]  608 	cjne	r7,#0x45,00192$
      0002FB 80 03            [24]  609 	sjmp	00193$
      0002FD                        610 00192$:
      0002FD 02r03rAF         [24]  611 	ljmp	00120$
      000300                        612 00193$:
                                    613 ;	_atof.c:74: s++;
      000300 0E               [12]  614 	inc	r6
      000301 BE 00 01         [24]  615 	cjne	r6,#0x00,00194$
      000304 0D               [12]  616 	inc	r5
      000305                        617 00194$:
                                    618 ;	_atof.c:75: iexp=(signed char)atoi(s);
      000305 8E 82            [24]  619 	mov	dpl,r6
      000307 8D 83            [24]  620 	mov	dph,r5
      000309 8B F0            [24]  621 	mov	b,r3
      00030B C0*00            [24]  622 	push	bits
      00030D 12r00r00         [24]  623 	lcall	_atoi
      000310 AE 82            [24]  624 	mov	r6,dpl
      000312 AF 83            [24]  625 	mov	r7,dph
      000314 D0*00            [24]  626 	pop	bits
                                    627 ;	_atof.c:77: while(iexp!=0)
      000316                        628 00116$:
      000316 EE               [12]  629 	mov	a,r6
      000317 70 03            [24]  630 	jnz	00195$
      000319 02r03rAF         [24]  631 	ljmp	00120$
      00031C                        632 00195$:
                                    633 ;	_atof.c:79: if(iexp<0)
      00031C EE               [12]  634 	mov	a,r6
      00031D 30 E7 47         [24]  635 	jnb	acc.7,00114$
                                    636 ;	_atof.c:81: value*=0.1;
      000320 C0 06            [24]  637 	push	ar6
      000322 C0*00            [24]  638 	push	bits
      000324 E5*00            [12]  639 	mov	a,_bp
      000326 24 08            [12]  640 	add	a,#0x08
      000328 F8               [12]  641 	mov	r0,a
      000329 E6               [12]  642 	mov	a,@r0
      00032A C0 E0            [24]  643 	push	acc
      00032C 08               [12]  644 	inc	r0
      00032D E6               [12]  645 	mov	a,@r0
      00032E C0 E0            [24]  646 	push	acc
      000330 08               [12]  647 	inc	r0
      000331 E6               [12]  648 	mov	a,@r0
      000332 C0 E0            [24]  649 	push	acc
      000334 08               [12]  650 	inc	r0
      000335 E6               [12]  651 	mov	a,@r0
      000336 C0 E0            [24]  652 	push	acc
      000338 90 CC CD         [24]  653 	mov	dptr,#0xCCCD
      00033B 75 F0 CC         [24]  654 	mov	b,#0xCC
      00033E 74 3D            [12]  655 	mov	a,#0x3D
      000340 12r00r00         [24]  656 	lcall	___fsmul
      000343 AB 82            [24]  657 	mov	r3,dpl
      000345 AC 83            [24]  658 	mov	r4,dph
      000347 AD F0            [24]  659 	mov	r5,b
      000349 FF               [12]  660 	mov	r7,a
      00034A E5 81            [12]  661 	mov	a,sp
      00034C 24 FC            [12]  662 	add	a,#0xfc
      00034E F5 81            [12]  663 	mov	sp,a
      000350 D0*00            [24]  664 	pop	bits
      000352 D0 06            [24]  665 	pop	ar6
      000354 E5*00            [12]  666 	mov	a,_bp
      000356 24 08            [12]  667 	add	a,#0x08
      000358 F8               [12]  668 	mov	r0,a
      000359 A6 03            [24]  669 	mov	@r0,ar3
      00035B 08               [12]  670 	inc	r0
      00035C A6 04            [24]  671 	mov	@r0,ar4
      00035E 08               [12]  672 	inc	r0
      00035F A6 05            [24]  673 	mov	@r0,ar5
      000361 08               [12]  674 	inc	r0
      000362 A6 07            [24]  675 	mov	@r0,ar7
                                    676 ;	_atof.c:82: iexp++;
      000364 0E               [12]  677 	inc	r6
      000365 80 AF            [24]  678 	sjmp	00116$
      000367                        679 00114$:
                                    680 ;	_atof.c:86: value*=10.0;
      000367 C0 06            [24]  681 	push	ar6
      000369 C0*00            [24]  682 	push	bits
      00036B E5*00            [12]  683 	mov	a,_bp
      00036D 24 08            [12]  684 	add	a,#0x08
      00036F F8               [12]  685 	mov	r0,a
      000370 E6               [12]  686 	mov	a,@r0
      000371 C0 E0            [24]  687 	push	acc
      000373 08               [12]  688 	inc	r0
      000374 E6               [12]  689 	mov	a,@r0
      000375 C0 E0            [24]  690 	push	acc
      000377 08               [12]  691 	inc	r0
      000378 E6               [12]  692 	mov	a,@r0
      000379 C0 E0            [24]  693 	push	acc
      00037B 08               [12]  694 	inc	r0
      00037C E6               [12]  695 	mov	a,@r0
      00037D C0 E0            [24]  696 	push	acc
      00037F 90 00 00         [24]  697 	mov	dptr,#0x0000
      000382 75 F0 20         [24]  698 	mov	b,#0x20
      000385 74 41            [12]  699 	mov	a,#0x41
      000387 12r00r00         [24]  700 	lcall	___fsmul
      00038A AB 82            [24]  701 	mov	r3,dpl
      00038C AC 83            [24]  702 	mov	r4,dph
      00038E AD F0            [24]  703 	mov	r5,b
      000390 FF               [12]  704 	mov	r7,a
      000391 E5 81            [12]  705 	mov	a,sp
      000393 24 FC            [12]  706 	add	a,#0xfc
      000395 F5 81            [12]  707 	mov	sp,a
      000397 D0*00            [24]  708 	pop	bits
      000399 D0 06            [24]  709 	pop	ar6
      00039B E5*00            [12]  710 	mov	a,_bp
      00039D 24 08            [12]  711 	add	a,#0x08
      00039F F8               [12]  712 	mov	r0,a
      0003A0 A6 03            [24]  713 	mov	@r0,ar3
      0003A2 08               [12]  714 	inc	r0
      0003A3 A6 04            [24]  715 	mov	@r0,ar4
      0003A5 08               [12]  716 	inc	r0
      0003A6 A6 05            [24]  717 	mov	@r0,ar5
      0003A8 08               [12]  718 	inc	r0
      0003A9 A6 07            [24]  719 	mov	@r0,ar7
                                    720 ;	_atof.c:87: iexp--;
      0003AB 1E               [12]  721 	dec	r6
      0003AC 02r03r16         [24]  722 	ljmp	00116$
      0003AF                        723 00120$:
                                    724 ;	_atof.c:93: if(sign) value*=-1.0;
      0003AF 30*00 12         [24]  725 	jnb	b0,00122$
      0003B2 E5*00            [12]  726 	mov	a,_bp
      0003B4 24 08            [12]  727 	add	a,#0x08
      0003B6 F8               [12]  728 	mov	r0,a
      0003B7 E6               [12]  729 	mov	a,@r0
      0003B8 F6               [12]  730 	mov	@r0,a
      0003B9 08               [12]  731 	inc	r0
      0003BA E6               [12]  732 	mov	a,@r0
      0003BB F6               [12]  733 	mov	@r0,a
      0003BC 08               [12]  734 	inc	r0
      0003BD E6               [12]  735 	mov	a,@r0
      0003BE F6               [12]  736 	mov	@r0,a
      0003BF 08               [12]  737 	inc	r0
      0003C0 E6               [12]  738 	mov	a,@r0
      0003C1 B2 E7            [12]  739 	cpl	acc.7
      0003C3 F6               [12]  740 	mov	@r0,a
      0003C4                        741 00122$:
                                    742 ;	_atof.c:94: return (value);
      0003C4 E5*00            [12]  743 	mov	a,_bp
      0003C6 24 08            [12]  744 	add	a,#0x08
      0003C8 F8               [12]  745 	mov	r0,a
      0003C9 86 82            [24]  746 	mov	dpl,@r0
      0003CB 08               [12]  747 	inc	r0
      0003CC 86 83            [24]  748 	mov	dph,@r0
      0003CE 08               [12]  749 	inc	r0
      0003CF 86 F0            [24]  750 	mov	b,@r0
      0003D1 08               [12]  751 	inc	r0
      0003D2 E6               [12]  752 	mov	a,@r0
      0003D3 85*00 81         [24]  753 	mov	sp,_bp
      0003D6 D0*00            [24]  754 	pop	_bp
      0003D8 22               [24]  755 	ret
                                    756 	.area CSEG    (CODE)
                                    757 	.area CONST   (CODE)
                                    758 	.area XINIT   (CODE)
                                    759 	.area CABS    (ABS,CODE)
