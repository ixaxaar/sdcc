                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:59 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module asinf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _asincosf
                                     13 	.globl _asinf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external initialized ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'asinf'
                                     93 ;------------------------------------------------------------
                                     94 ;x                         Allocated to registers r4 r5 r6 r7 
                                     95 ;------------------------------------------------------------
                                     96 ;	asinf.c:36: float asinf(const float x) _FLOAT_FUNC_REENTRANT
                                     97 ;	-----------------------------------------
                                     98 ;	 function asinf
                                     99 ;	-----------------------------------------
      000000                        100 _asinf:
                           000007   101 	ar7 = 0x07
                           000006   102 	ar6 = 0x06
                           000005   103 	ar5 = 0x05
                           000004   104 	ar4 = 0x04
                           000003   105 	ar3 = 0x03
                           000002   106 	ar2 = 0x02
                           000001   107 	ar1 = 0x01
                           000000   108 	ar0 = 0x00
      000000 AC 82            [24]  109 	mov	r4,dpl
      000002 AD 83            [24]  110 	mov	r5,dph
      000004 AE F0            [24]  111 	mov	r6,b
      000006 FF               [12]  112 	mov	r7,a
                                    113 ;	asinf.c:38: if (x == 1.0) return  HALF_PI;
      000007 C0 07            [24]  114 	push	ar7
      000009 C0 06            [24]  115 	push	ar6
      00000B C0 05            [24]  116 	push	ar5
      00000D C0 04            [24]  117 	push	ar4
      00000F E4               [12]  118 	clr	a
      000010 C0 E0            [24]  119 	push	acc
      000012 C0 E0            [24]  120 	push	acc
      000014 74 80            [12]  121 	mov	a,#0x80
      000016 C0 E0            [24]  122 	push	acc
      000018 74 3F            [12]  123 	mov	a,#0x3F
      00001A C0 E0            [24]  124 	push	acc
      00001C 8C 82            [24]  125 	mov	dpl,r4
      00001E 8D 83            [24]  126 	mov	dph,r5
      000020 8E F0            [24]  127 	mov	b,r6
      000022 EF               [12]  128 	mov	a,r7
      000023 12r00r00         [24]  129 	lcall	___fseq
      000026 AB 82            [24]  130 	mov	r3,dpl
      000028 E5 81            [12]  131 	mov	a,sp
      00002A 24 FC            [12]  132 	add	a,#0xfc
      00002C F5 81            [12]  133 	mov	sp,a
      00002E D0 04            [24]  134 	pop	ar4
      000030 D0 05            [24]  135 	pop	ar5
      000032 D0 06            [24]  136 	pop	ar6
      000034 D0 07            [24]  137 	pop	ar7
      000036 EB               [12]  138 	mov	a,r3
      000037 60 0A            [24]  139 	jz	00108$
      000039 90 0F DB         [24]  140 	mov	dptr,#0x0FDB
      00003C 75 F0 C9         [24]  141 	mov	b,#0xC9
      00003F 74 3F            [12]  142 	mov	a,#0x3F
      000041 80 6C            [24]  143 	sjmp	00110$
      000043                        144 00108$:
                                    145 ;	asinf.c:39: else if (x ==-1.0) return -HALF_PI;
      000043 C0 07            [24]  146 	push	ar7
      000045 C0 06            [24]  147 	push	ar6
      000047 C0 05            [24]  148 	push	ar5
      000049 C0 04            [24]  149 	push	ar4
      00004B E4               [12]  150 	clr	a
      00004C C0 E0            [24]  151 	push	acc
      00004E C0 E0            [24]  152 	push	acc
      000050 74 80            [12]  153 	mov	a,#0x80
      000052 C0 E0            [24]  154 	push	acc
      000054 74 BF            [12]  155 	mov	a,#0xBF
      000056 C0 E0            [24]  156 	push	acc
      000058 8C 82            [24]  157 	mov	dpl,r4
      00005A 8D 83            [24]  158 	mov	dph,r5
      00005C 8E F0            [24]  159 	mov	b,r6
      00005E EF               [12]  160 	mov	a,r7
      00005F 12r00r00         [24]  161 	lcall	___fseq
      000062 AB 82            [24]  162 	mov	r3,dpl
      000064 E5 81            [12]  163 	mov	a,sp
      000066 24 FC            [12]  164 	add	a,#0xfc
      000068 F5 81            [12]  165 	mov	sp,a
      00006A D0 04            [24]  166 	pop	ar4
      00006C D0 05            [24]  167 	pop	ar5
      00006E D0 06            [24]  168 	pop	ar6
      000070 D0 07            [24]  169 	pop	ar7
      000072 EB               [12]  170 	mov	a,r3
      000073 60 0A            [24]  171 	jz	00105$
      000075 90 0F DB         [24]  172 	mov	dptr,#0x0FDB
      000078 75 F0 C9         [24]  173 	mov	b,#0xC9
      00007B 74 BF            [12]  174 	mov	a,#0xBF
      00007D 80 30            [24]  175 	sjmp	00110$
      00007F                        176 00105$:
                                    177 ;	asinf.c:40: else if (x == 0.0) return 0.0;
      00007F 8C F0            [24]  178 	mov	b,r4
      000081 ED               [12]  179 	mov	a,r5
      000082 42 F0            [12]  180 	orl	b,a
      000084 EE               [12]  181 	mov	a,r6
      000085 42 F0            [12]  182 	orl	b,a
      000087 EF               [12]  183 	mov	a,r7
      000088 54 7F            [12]  184 	anl	a,#0x7F
      00008A 45 F0            [12]  185 	orl	a,b
      00008C 70 08            [24]  186 	jnz	00102$
      00008E 90 00 00         [24]  187 	mov	dptr,#(0x00&0x00ff)
      000091 E4               [12]  188 	clr	a
      000092 F5 F0            [12]  189 	mov	b,a
      000094 80 19            [24]  190 	sjmp	00110$
      000096                        191 00102$:
                                    192 ;	asinf.c:41: else               return asincosf(x, false);
      000096 C2*00            [12]  193 	clr	_asincosf_PARM_2
      000098 8C 82            [24]  194 	mov	dpl,r4
      00009A 8D 83            [24]  195 	mov	dph,r5
      00009C 8E F0            [24]  196 	mov	b,r6
      00009E EF               [12]  197 	mov	a,r7
      00009F 78r00            [12]  198 	mov	r0,#_asincosf
      0000A1 79s00            [12]  199 	mov	r1,#(_asincosf >> 8)
      0000A3 7As00            [12]  200 	mov	r2,#(_asincosf >> 16)
      0000A5 12r00r00         [24]  201 	lcall	__sdcc_banked_call
      0000A8 AC 82            [24]  202 	mov	r4,dpl
      0000AA AD 83            [24]  203 	mov	r5,dph
      0000AC AE F0            [24]  204 	mov	r6,b
      0000AE FF               [12]  205 	mov	r7,a
      0000AF                        206 00110$:
      0000AF 02r00r00         [24]  207 	ljmp	__sdcc_banked_ret
                                    208 	.area CSEG    (CODE)
                                    209 	.area CONST   (CODE)
                                    210 	.area XINIT   (CODE)
                                    211 	.area CABS    (ABS,CODE)
