                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:27:59 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module cotf
                                      7 	.optsdcc -mmcs51 --model-huge
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tancotf
                                     13 	.globl _fabsf
                                     14 	.globl _cotf
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
                                     34 ;--------------------------------------------------------
                                     35 ; overlayable items in internal ram 
                                     36 ;--------------------------------------------------------
                                     37 ;--------------------------------------------------------
                                     38 ; indirectly addressable internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area ISEG    (DATA)
                                     41 ;--------------------------------------------------------
                                     42 ; absolute internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area IABS    (ABS,DATA)
                                     45 	.area IABS    (ABS,DATA)
                                     46 ;--------------------------------------------------------
                                     47 ; bit data
                                     48 ;--------------------------------------------------------
                                     49 	.area BSEG    (BIT)
                                     50 ;--------------------------------------------------------
                                     51 ; paged external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area PSEG    (PAG,XDATA)
                                     54 ;--------------------------------------------------------
                                     55 ; external ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area XSEG    (XDATA)
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area XABS    (ABS,XDATA)
                                     62 ;--------------------------------------------------------
                                     63 ; external initialized ram data
                                     64 ;--------------------------------------------------------
                                     65 	.area XISEG   (XDATA)
                                     66 	.area HOME    (CODE)
                                     67 	.area GSINIT0 (CODE)
                                     68 	.area GSINIT1 (CODE)
                                     69 	.area GSINIT2 (CODE)
                                     70 	.area GSINIT3 (CODE)
                                     71 	.area GSINIT4 (CODE)
                                     72 	.area GSINIT5 (CODE)
                                     73 	.area GSINIT  (CODE)
                                     74 	.area GSFINAL (CODE)
                                     75 	.area CSEG    (CODE)
                                     76 ;--------------------------------------------------------
                                     77 ; global & static initialisations
                                     78 ;--------------------------------------------------------
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; Home
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area HOME    (CODE)
                                     88 ;--------------------------------------------------------
                                     89 ; code
                                     90 ;--------------------------------------------------------
                                     91 	.area CSEG    (CODE)
                                     92 ;------------------------------------------------------------
                                     93 ;Allocation info for local variables in function 'cotf'
                                     94 ;------------------------------------------------------------
                                     95 ;x                         Allocated to registers r4 r5 r6 r7 
                                     96 ;y                         Allocated to stack - _bp +1
                                     97 ;------------------------------------------------------------
                                     98 ;	cotf.c:37: float cotf(const float x) _FLOAT_FUNC_REENTRANT
                                     99 ;	-----------------------------------------
                                    100 ;	 function cotf
                                    101 ;	-----------------------------------------
      000000                        102 _cotf:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 C0*00            [24]  111 	push	_bp
      000002 85 81*00         [24]  112 	mov	_bp,sp
      000005 AC 82            [24]  113 	mov	r4,dpl
      000007 AD 83            [24]  114 	mov	r5,dph
      000009 AE F0            [24]  115 	mov	r6,b
      00000B FF               [12]  116 	mov	r7,a
      00000C E5 81            [12]  117 	mov	a,sp
      00000E 24 04            [12]  118 	add	a,#0x04
      000010 F5 81            [12]  119 	mov	sp,a
                                    120 ;	cotf.c:41: y=fabsf(x);
      000012 8C 82            [24]  121 	mov	dpl,r4
      000014 8D 83            [24]  122 	mov	dph,r5
      000016 8E F0            [24]  123 	mov	b,r6
      000018 EF               [12]  124 	mov	a,r7
      000019 C0 07            [24]  125 	push	ar7
      00001B C0 06            [24]  126 	push	ar6
      00001D C0 05            [24]  127 	push	ar5
      00001F C0 04            [24]  128 	push	ar4
      000021 78r00            [12]  129 	mov	r0,#_fabsf
      000023 79s00            [12]  130 	mov	r1,#(_fabsf >> 8)
      000025 7As00            [12]  131 	mov	r2,#(_fabsf >> 16)
      000027 12r00r00         [24]  132 	lcall	__sdcc_banked_call
      00002A A8*00            [24]  133 	mov	r0,_bp
      00002C 08               [12]  134 	inc	r0
      00002D A6 82            [24]  135 	mov	@r0,dpl
      00002F 08               [12]  136 	inc	r0
      000030 A6 83            [24]  137 	mov	@r0,dph
      000032 08               [12]  138 	inc	r0
      000033 A6 F0            [24]  139 	mov	@r0,b
      000035 08               [12]  140 	inc	r0
      000036 F6               [12]  141 	mov	@r0,a
      000037 A8*00            [24]  142 	mov	r0,_bp
      000039 08               [12]  143 	inc	r0
                                    144 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
      00003A 74 60            [12]  145 	mov	a,#0x60
      00003C C0 E0            [24]  146 	push	acc
      00003E 74 42            [12]  147 	mov	a,#0x42
      000040 C0 E0            [24]  148 	push	acc
      000042 74 A2            [12]  149 	mov	a,#0xA2
      000044 C0 E0            [24]  150 	push	acc
      000046 74 0D            [12]  151 	mov	a,#0x0D
      000048 C0 E0            [24]  152 	push	acc
      00004A A8*00            [24]  153 	mov	r0,_bp
      00004C 08               [12]  154 	inc	r0
      00004D 86 82            [24]  155 	mov	dpl,@r0
      00004F 08               [12]  156 	inc	r0
      000050 86 83            [24]  157 	mov	dph,@r0
      000052 08               [12]  158 	inc	r0
      000053 86 F0            [24]  159 	mov	b,@r0
      000055 08               [12]  160 	inc	r0
      000056 E6               [12]  161 	mov	a,@r0
      000057 12r00r00         [24]  162 	lcall	___fslt
      00005A AB 82            [24]  163 	mov	r3,dpl
      00005C E5 81            [12]  164 	mov	a,sp
      00005E 24 FC            [12]  165 	add	a,#0xfc
      000060 F5 81            [12]  166 	mov	sp,a
      000062 D0 04            [24]  167 	pop	ar4
      000064 D0 05            [24]  168 	pop	ar5
      000066 D0 06            [24]  169 	pop	ar6
      000068 D0 07            [24]  170 	pop	ar7
      00006A EB               [12]  171 	mov	a,r3
      00006B 60 39            [24]  172 	jz	00105$
                                    173 ;	cotf.c:44: errno = ERANGE;
      00006D 90r00r00         [24]  174 	mov	dptr,#_errno
      000070 74 22            [12]  175 	mov	a,#0x22
      000072 F0               [24]  176 	movx	@dptr,a
      000073 E4               [12]  177 	clr	a
      000074 A3               [24]  178 	inc	dptr
      000075 F0               [24]  179 	movx	@dptr,a
                                    180 ;	cotf.c:45: if (x<0.0)
      000076 C0 E0            [24]  181 	push	acc
      000078 C0 E0            [24]  182 	push	acc
      00007A C0 E0            [24]  183 	push	acc
      00007C C0 E0            [24]  184 	push	acc
      00007E 8C 82            [24]  185 	mov	dpl,r4
      000080 8D 83            [24]  186 	mov	dph,r5
      000082 8E F0            [24]  187 	mov	b,r6
      000084 EF               [12]  188 	mov	a,r7
      000085 12r00r00         [24]  189 	lcall	___fslt
      000088 AB 82            [24]  190 	mov	r3,dpl
      00008A E5 81            [12]  191 	mov	a,sp
      00008C 24 FC            [12]  192 	add	a,#0xfc
      00008E F5 81            [12]  193 	mov	sp,a
      000090 EB               [12]  194 	mov	a,r3
      000091 60 0A            [24]  195 	jz	00102$
                                    196 ;	cotf.c:46: return -HUGE_VALF;
      000093 90 FF FF         [24]  197 	mov	dptr,#0xFFFF
      000096 75 F0 7F         [24]  198 	mov	b,#0x7F
      000099 74 FF            [12]  199 	mov	a,#0xFF
      00009B 80 22            [24]  200 	sjmp	00106$
      00009D                        201 00102$:
                                    202 ;	cotf.c:48: return +HUGE_VALF;
      00009D 90 FF FF         [24]  203 	mov	dptr,#0xFFFF
      0000A0 74 7F            [12]  204 	mov	a,#0x7F
      0000A2 F5 F0            [12]  205 	mov	b,a
      0000A4 80 19            [24]  206 	sjmp	00106$
      0000A6                        207 00105$:
                                    208 ;	cotf.c:50: return tancotf(x, 1);
      0000A6 D2*00            [12]  209 	setb	_tancotf_PARM_2
      0000A8 8C 82            [24]  210 	mov	dpl,r4
      0000AA 8D 83            [24]  211 	mov	dph,r5
      0000AC 8E F0            [24]  212 	mov	b,r6
      0000AE EF               [12]  213 	mov	a,r7
      0000AF 78r00            [12]  214 	mov	r0,#_tancotf
      0000B1 79s00            [12]  215 	mov	r1,#(_tancotf >> 8)
      0000B3 7As00            [12]  216 	mov	r2,#(_tancotf >> 16)
      0000B5 12r00r00         [24]  217 	lcall	__sdcc_banked_call
      0000B8 AC 82            [24]  218 	mov	r4,dpl
      0000BA AD 83            [24]  219 	mov	r5,dph
      0000BC AE F0            [24]  220 	mov	r6,b
      0000BE FF               [12]  221 	mov	r7,a
      0000BF                        222 00106$:
      0000BF 85*00 81         [24]  223 	mov	sp,_bp
      0000C2 D0*00            [24]  224 	pop	_bp
      0000C4 02r00r00         [24]  225 	ljmp	__sdcc_banked_ret
                                    226 	.area CSEG    (CODE)
                                    227 	.area CONST   (CODE)
                                    228 	.area XINIT   (CODE)
                                    229 	.area CABS    (ABS,CODE)
