                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:02 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module expf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _ldexpf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'expf'
                                    107 ;------------------------------------------------------------
                                    108 ;x                         Allocated to registers r7 r6 r5 r4 
                                    109 ;n                         Allocated to stack - _bp +5
                                    110 ;xn                        Allocated to stack - _bp +7
                                    111 ;g                         Allocated to stack - _bp +11
                                    112 ;r                         Allocated to stack - _bp +15
                                    113 ;z                         Allocated to stack - _bp +19
                                    114 ;y                         Allocated to stack - _bp +23
                                    115 ;sign                      Allocated to registers b0 
                                    116 ;sloc0                     Allocated to stack - _bp +1
                                    117 ;------------------------------------------------------------
                                    118 ;	expf.c:331: float expf(const float x)
                                    119 ;	-----------------------------------------
                                    120 ;	 function expf
                                    121 ;	-----------------------------------------
      000000                        122 _expf:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 85 81*00         [24]  132 	mov	_bp,sp
      000005 AF 82            [24]  133 	mov	r7,dpl
      000007 AE 83            [24]  134 	mov	r6,dph
      000009 AD F0            [24]  135 	mov	r5,b
      00000B FC               [12]  136 	mov	r4,a
      00000C E5 81            [12]  137 	mov	a,sp
      00000E 24 1A            [12]  138 	add	a,#0x1A
      000010 F5 81            [12]  139 	mov	sp,a
                                    140 ;	expf.c:337: if(x>=0.0)
      000012 C0 07            [24]  141 	push	ar7
      000014 C0 06            [24]  142 	push	ar6
      000016 C0 05            [24]  143 	push	ar5
      000018 C0 04            [24]  144 	push	ar4
      00001A E4               [12]  145 	clr	a
      00001B C0 E0            [24]  146 	push	acc
      00001D C0 E0            [24]  147 	push	acc
      00001F C0 E0            [24]  148 	push	acc
      000021 C0 E0            [24]  149 	push	acc
      000023 8F 82            [24]  150 	mov	dpl,r7
      000025 8E 83            [24]  151 	mov	dph,r6
      000027 8D F0            [24]  152 	mov	b,r5
      000029 EC               [12]  153 	mov	a,r4
      00002A 12r00r00         [24]  154 	lcall	___fslt
      00002D AB 82            [24]  155 	mov	r3,dpl
      00002F E5 81            [12]  156 	mov	a,sp
      000031 24 FC            [12]  157 	add	a,#0xfc
      000033 F5 81            [12]  158 	mov	sp,a
      000035 D0 04            [24]  159 	pop	ar4
      000037 D0 05            [24]  160 	pop	ar5
      000039 D0 06            [24]  161 	pop	ar6
      00003B D0 07            [24]  162 	pop	ar7
      00003D EB               [12]  163 	mov	a,r3
      00003E 70 14            [24]  164 	jnz	00102$
                                    165 ;	expf.c:338: { y=x;  sign=0; }
      000040 E5*00            [12]  166 	mov	a,_bp
      000042 24 17            [12]  167 	add	a,#0x17
      000044 F8               [12]  168 	mov	r0,a
      000045 A6 07            [24]  169 	mov	@r0,ar7
      000047 08               [12]  170 	inc	r0
      000048 A6 06            [24]  171 	mov	@r0,ar6
      00004A 08               [12]  172 	inc	r0
      00004B A6 05            [24]  173 	mov	@r0,ar5
      00004D 08               [12]  174 	inc	r0
      00004E A6 04            [24]  175 	mov	@r0,ar4
      000050 C2*00            [12]  176 	clr	b0
      000052 80 16            [24]  177 	sjmp	00103$
      000054                        178 00102$:
                                    179 ;	expf.c:340: { y=-x; sign=1; }
      000054 EC               [12]  180 	mov	a,r4
      000055 B2 E7            [12]  181 	cpl	acc.7
      000057 FC               [12]  182 	mov	r4,a
      000058 E5*00            [12]  183 	mov	a,_bp
      00005A 24 17            [12]  184 	add	a,#0x17
      00005C F8               [12]  185 	mov	r0,a
      00005D A6 07            [24]  186 	mov	@r0,ar7
      00005F 08               [12]  187 	inc	r0
      000060 A6 06            [24]  188 	mov	@r0,ar6
      000062 08               [12]  189 	inc	r0
      000063 A6 05            [24]  190 	mov	@r0,ar5
      000065 08               [12]  191 	inc	r0
      000066 A6 04            [24]  192 	mov	@r0,ar4
      000068 D2*00            [12]  193 	setb	b0
      00006A                        194 00103$:
                                    195 ;	expf.c:342: if(y<EXPEPS) return 1.0;
      00006A C0*00            [24]  196 	push	bits
      00006C 74 95            [12]  197 	mov	a,#0x95
      00006E C0 E0            [24]  198 	push	acc
      000070 74 BF            [12]  199 	mov	a,#0xBF
      000072 C0 E0            [24]  200 	push	acc
      000074 74 D6            [12]  201 	mov	a,#0xD6
      000076 C0 E0            [24]  202 	push	acc
      000078 74 33            [12]  203 	mov	a,#0x33
      00007A C0 E0            [24]  204 	push	acc
      00007C E5*00            [12]  205 	mov	a,_bp
      00007E 24 17            [12]  206 	add	a,#0x17
      000080 F8               [12]  207 	mov	r0,a
      000081 86 82            [24]  208 	mov	dpl,@r0
      000083 08               [12]  209 	inc	r0
      000084 86 83            [24]  210 	mov	dph,@r0
      000086 08               [12]  211 	inc	r0
      000087 86 F0            [24]  212 	mov	b,@r0
      000089 08               [12]  213 	inc	r0
      00008A E6               [12]  214 	mov	a,@r0
      00008B 12r00r00         [24]  215 	lcall	___fslt
      00008E AD 82            [24]  216 	mov	r5,dpl
      000090 E5 81            [12]  217 	mov	a,sp
      000092 24 FC            [12]  218 	add	a,#0xfc
      000094 F5 81            [12]  219 	mov	sp,a
      000096 D0*00            [24]  220 	pop	bits
      000098 ED               [12]  221 	mov	a,r5
      000099 60 0B            [24]  222 	jz	00105$
      00009B 90 00 00         [24]  223 	mov	dptr,#0x0000
      00009E 75 F0 80         [24]  224 	mov	b,#0x80
      0000A1 74 3F            [12]  225 	mov	a,#0x3F
      0000A3 02r05r23         [24]  226 	ljmp	00118$
      0000A6                        227 00105$:
                                    228 ;	expf.c:344: if(y>BIGX)
      0000A6 C0*00            [24]  229 	push	bits
      0000A8 74 18            [12]  230 	mov	a,#0x18
      0000AA C0 E0            [24]  231 	push	acc
      0000AC 74 72            [12]  232 	mov	a,#0x72
      0000AE C0 E0            [24]  233 	push	acc
      0000B0 74 B1            [12]  234 	mov	a,#0xB1
      0000B2 C0 E0            [24]  235 	push	acc
      0000B4 74 42            [12]  236 	mov	a,#0x42
      0000B6 C0 E0            [24]  237 	push	acc
      0000B8 E5*00            [12]  238 	mov	a,_bp
      0000BA 24 17            [12]  239 	add	a,#0x17
      0000BC F8               [12]  240 	mov	r0,a
      0000BD 86 82            [24]  241 	mov	dpl,@r0
      0000BF 08               [12]  242 	inc	r0
      0000C0 86 83            [24]  243 	mov	dph,@r0
      0000C2 08               [12]  244 	inc	r0
      0000C3 86 F0            [24]  245 	mov	b,@r0
      0000C5 08               [12]  246 	inc	r0
      0000C6 E6               [12]  247 	mov	a,@r0
      0000C7 12r00r00         [24]  248 	lcall	___fsgt
      0000CA AD 82            [24]  249 	mov	r5,dpl
      0000CC E5 81            [12]  250 	mov	a,sp
      0000CE 24 FC            [12]  251 	add	a,#0xfc
      0000D0 F5 81            [12]  252 	mov	sp,a
      0000D2 D0*00            [24]  253 	pop	bits
      0000D4 ED               [12]  254 	mov	a,r5
      0000D5 60 1C            [24]  255 	jz	00110$
                                    256 ;	expf.c:346: if(sign)
      0000D7 30*00 10         [24]  257 	jnb	b0,00107$
                                    258 ;	expf.c:348: errno=ERANGE;
      0000DA 75*00 22         [24]  259 	mov	_errno,#0x22
      0000DD 75*01 00         [24]  260 	mov	(_errno + 1),#0x00
                                    261 ;	expf.c:350: ;
      0000E0 90 FF FF         [24]  262 	mov	dptr,#0xFFFF
      0000E3 74 7F            [12]  263 	mov	a,#0x7F
      0000E5 F5 F0            [12]  264 	mov	b,a
      0000E7 02r05r23         [24]  265 	ljmp	00118$
      0000EA                        266 00107$:
                                    267 ;	expf.c:354: return 0.0;
      0000EA 90 00 00         [24]  268 	mov	dptr,#(0x00&0x00ff)
      0000ED E4               [12]  269 	clr	a
      0000EE F5 F0            [12]  270 	mov	b,a
      0000F0 02r05r23         [24]  271 	ljmp	00118$
      0000F3                        272 00110$:
                                    273 ;	expf.c:358: z=y*K1;
      0000F3 C0*00            [24]  274 	push	bits
      0000F5 E5*00            [12]  275 	mov	a,_bp
      0000F7 24 17            [12]  276 	add	a,#0x17
      0000F9 F8               [12]  277 	mov	r0,a
      0000FA E6               [12]  278 	mov	a,@r0
      0000FB C0 E0            [24]  279 	push	acc
      0000FD 08               [12]  280 	inc	r0
      0000FE E6               [12]  281 	mov	a,@r0
      0000FF C0 E0            [24]  282 	push	acc
      000101 08               [12]  283 	inc	r0
      000102 E6               [12]  284 	mov	a,@r0
      000103 C0 E0            [24]  285 	push	acc
      000105 08               [12]  286 	inc	r0
      000106 E6               [12]  287 	mov	a,@r0
      000107 C0 E0            [24]  288 	push	acc
      000109 90 AA 3B         [24]  289 	mov	dptr,#0xAA3B
      00010C 75 F0 B8         [24]  290 	mov	b,#0xB8
      00010F 74 3F            [12]  291 	mov	a,#0x3F
      000111 12r00r00         [24]  292 	lcall	___fsmul
      000114 AF 82            [24]  293 	mov	r7,dpl
      000116 AE 83            [24]  294 	mov	r6,dph
      000118 AD F0            [24]  295 	mov	r5,b
      00011A FC               [12]  296 	mov	r4,a
      00011B E5 81            [12]  297 	mov	a,sp
      00011D 24 FC            [12]  298 	add	a,#0xfc
      00011F F5 81            [12]  299 	mov	sp,a
      000121 D0*00            [24]  300 	pop	bits
      000123 E5*00            [12]  301 	mov	a,_bp
      000125 24 13            [12]  302 	add	a,#0x13
      000127 F8               [12]  303 	mov	r0,a
      000128 A6 07            [24]  304 	mov	@r0,ar7
      00012A 08               [12]  305 	inc	r0
      00012B A6 06            [24]  306 	mov	@r0,ar6
      00012D 08               [12]  307 	inc	r0
      00012E A6 05            [24]  308 	mov	@r0,ar5
      000130 08               [12]  309 	inc	r0
      000131 A6 04            [24]  310 	mov	@r0,ar4
                                    311 ;	expf.c:359: n=z;
      000133 E5*00            [12]  312 	mov	a,_bp
      000135 24 13            [12]  313 	add	a,#0x13
      000137 F8               [12]  314 	mov	r0,a
      000138 86 82            [24]  315 	mov	dpl,@r0
      00013A 08               [12]  316 	inc	r0
      00013B 86 83            [24]  317 	mov	dph,@r0
      00013D 08               [12]  318 	inc	r0
      00013E 86 F0            [24]  319 	mov	b,@r0
      000140 08               [12]  320 	inc	r0
      000141 E6               [12]  321 	mov	a,@r0
      000142 C0*00            [24]  322 	push	bits
      000144 12r00r00         [24]  323 	lcall	___fs2sint
      000147 AA 82            [24]  324 	mov	r2,dpl
      000149 AB 83            [24]  325 	mov	r3,dph
      00014B D0*00            [24]  326 	pop	bits
      00014D E5*00            [12]  327 	mov	a,_bp
      00014F 24 05            [12]  328 	add	a,#0x05
      000151 F8               [12]  329 	mov	r0,a
      000152 A6 02            [24]  330 	mov	@r0,ar2
      000154 08               [12]  331 	inc	r0
      000155 A6 03            [24]  332 	mov	@r0,ar3
                                    333 ;	expf.c:361: if(n<0) --n;
      000157 E5*00            [12]  334 	mov	a,_bp
      000159 24 05            [12]  335 	add	a,#0x05
      00015B F8               [12]  336 	mov	r0,a
      00015C 08               [12]  337 	inc	r0
      00015D E6               [12]  338 	mov	a,@r0
      00015E 30 E7 0B         [24]  339 	jnb	acc.7,00112$
      000161 E5*00            [12]  340 	mov	a,_bp
      000163 24 05            [12]  341 	add	a,#0x05
      000165 F8               [12]  342 	mov	r0,a
      000166 16               [12]  343 	dec	@r0
      000167 B6 FF 02         [24]  344 	cjne	@r0,#0xFF,00146$
      00016A 08               [12]  345 	inc	r0
      00016B 16               [12]  346 	dec	@r0
      00016C                        347 00146$:
      00016C                        348 00112$:
                                    349 ;	expf.c:362: if(z-n>=0.5) ++n;
      00016C E5*00            [12]  350 	mov	a,_bp
      00016E 24 05            [12]  351 	add	a,#0x05
      000170 F8               [12]  352 	mov	r0,a
      000171 86 82            [24]  353 	mov	dpl,@r0
      000173 08               [12]  354 	inc	r0
      000174 86 83            [24]  355 	mov	dph,@r0
      000176 C0*00            [24]  356 	push	bits
      000178 12r00r00         [24]  357 	lcall	___sint2fs
      00017B AC 82            [24]  358 	mov	r4,dpl
      00017D AD 83            [24]  359 	mov	r5,dph
      00017F AE F0            [24]  360 	mov	r6,b
      000181 FF               [12]  361 	mov	r7,a
      000182 D0*00            [24]  362 	pop	bits
      000184 C0*00            [24]  363 	push	bits
      000186 C0 04            [24]  364 	push	ar4
      000188 C0 05            [24]  365 	push	ar5
      00018A C0 06            [24]  366 	push	ar6
      00018C C0 07            [24]  367 	push	ar7
      00018E E5*00            [12]  368 	mov	a,_bp
      000190 24 13            [12]  369 	add	a,#0x13
      000192 F8               [12]  370 	mov	r0,a
      000193 86 82            [24]  371 	mov	dpl,@r0
      000195 08               [12]  372 	inc	r0
      000196 86 83            [24]  373 	mov	dph,@r0
      000198 08               [12]  374 	inc	r0
      000199 86 F0            [24]  375 	mov	b,@r0
      00019B 08               [12]  376 	inc	r0
      00019C E6               [12]  377 	mov	a,@r0
      00019D 12r00r00         [24]  378 	lcall	___fssub
      0001A0 AC 82            [24]  379 	mov	r4,dpl
      0001A2 AD 83            [24]  380 	mov	r5,dph
      0001A4 AE F0            [24]  381 	mov	r6,b
      0001A6 FF               [12]  382 	mov	r7,a
      0001A7 E5 81            [12]  383 	mov	a,sp
      0001A9 24 FC            [12]  384 	add	a,#0xfc
      0001AB F5 81            [12]  385 	mov	sp,a
      0001AD D0*00            [24]  386 	pop	bits
      0001AF C0*00            [24]  387 	push	bits
      0001B1 E4               [12]  388 	clr	a
      0001B2 C0 E0            [24]  389 	push	acc
      0001B4 C0 E0            [24]  390 	push	acc
      0001B6 C0 E0            [24]  391 	push	acc
      0001B8 74 3F            [12]  392 	mov	a,#0x3F
      0001BA C0 E0            [24]  393 	push	acc
      0001BC 8C 82            [24]  394 	mov	dpl,r4
      0001BE 8D 83            [24]  395 	mov	dph,r5
      0001C0 8E F0            [24]  396 	mov	b,r6
      0001C2 EF               [12]  397 	mov	a,r7
      0001C3 12r00r00         [24]  398 	lcall	___fslt
      0001C6 AF 82            [24]  399 	mov	r7,dpl
      0001C8 E5 81            [12]  400 	mov	a,sp
      0001CA 24 FC            [12]  401 	add	a,#0xfc
      0001CC F5 81            [12]  402 	mov	sp,a
      0001CE D0*00            [24]  403 	pop	bits
      0001D0 EF               [12]  404 	mov	a,r7
      0001D1 70 0B            [24]  405 	jnz	00114$
      0001D3 E5*00            [12]  406 	mov	a,_bp
      0001D5 24 05            [12]  407 	add	a,#0x05
      0001D7 F8               [12]  408 	mov	r0,a
      0001D8 06               [12]  409 	inc	@r0
      0001D9 B6 00 02         [24]  410 	cjne	@r0,#0x00,00148$
      0001DC 08               [12]  411 	inc	r0
      0001DD 06               [12]  412 	inc	@r0
      0001DE                        413 00148$:
      0001DE                        414 00114$:
                                    415 ;	expf.c:363: xn=n;
      0001DE E5*00            [12]  416 	mov	a,_bp
      0001E0 24 05            [12]  417 	add	a,#0x05
      0001E2 F8               [12]  418 	mov	r0,a
      0001E3 86 82            [24]  419 	mov	dpl,@r0
      0001E5 08               [12]  420 	inc	r0
      0001E6 86 83            [24]  421 	mov	dph,@r0
      0001E8 C0*00            [24]  422 	push	bits
      0001EA 12r00r00         [24]  423 	lcall	___sint2fs
      0001ED AC 82            [24]  424 	mov	r4,dpl
      0001EF AD 83            [24]  425 	mov	r5,dph
      0001F1 AE F0            [24]  426 	mov	r6,b
      0001F3 FF               [12]  427 	mov	r7,a
      0001F4 D0*00            [24]  428 	pop	bits
      0001F6 E5*00            [12]  429 	mov	a,_bp
      0001F8 24 07            [12]  430 	add	a,#0x07
      0001FA F8               [12]  431 	mov	r0,a
      0001FB A6 04            [24]  432 	mov	@r0,ar4
      0001FD 08               [12]  433 	inc	r0
      0001FE A6 05            [24]  434 	mov	@r0,ar5
      000200 08               [12]  435 	inc	r0
      000201 A6 06            [24]  436 	mov	@r0,ar6
      000203 08               [12]  437 	inc	r0
      000204 A6 07            [24]  438 	mov	@r0,ar7
                                    439 ;	expf.c:364: g=((y-xn*C1))-xn*C2;
      000206 C0*00            [24]  440 	push	bits
      000208 E5*00            [12]  441 	mov	a,_bp
      00020A 24 07            [12]  442 	add	a,#0x07
      00020C F8               [12]  443 	mov	r0,a
      00020D E6               [12]  444 	mov	a,@r0
      00020E C0 E0            [24]  445 	push	acc
      000210 08               [12]  446 	inc	r0
      000211 E6               [12]  447 	mov	a,@r0
      000212 C0 E0            [24]  448 	push	acc
      000214 08               [12]  449 	inc	r0
      000215 E6               [12]  450 	mov	a,@r0
      000216 C0 E0            [24]  451 	push	acc
      000218 08               [12]  452 	inc	r0
      000219 E6               [12]  453 	mov	a,@r0
      00021A C0 E0            [24]  454 	push	acc
      00021C 90 80 00         [24]  455 	mov	dptr,#0x8000
      00021F 75 F0 31         [24]  456 	mov	b,#0x31
      000222 74 3F            [12]  457 	mov	a,#0x3F
      000224 12r00r00         [24]  458 	lcall	___fsmul
      000227 AC 82            [24]  459 	mov	r4,dpl
      000229 AD 83            [24]  460 	mov	r5,dph
      00022B AE F0            [24]  461 	mov	r6,b
      00022D FF               [12]  462 	mov	r7,a
      00022E E5 81            [12]  463 	mov	a,sp
      000230 24 FC            [12]  464 	add	a,#0xfc
      000232 F5 81            [12]  465 	mov	sp,a
      000234 D0*00            [24]  466 	pop	bits
      000236 C0*00            [24]  467 	push	bits
      000238 C0 04            [24]  468 	push	ar4
      00023A C0 05            [24]  469 	push	ar5
      00023C C0 06            [24]  470 	push	ar6
      00023E C0 07            [24]  471 	push	ar7
      000240 E5*00            [12]  472 	mov	a,_bp
      000242 24 17            [12]  473 	add	a,#0x17
      000244 F8               [12]  474 	mov	r0,a
      000245 86 82            [24]  475 	mov	dpl,@r0
      000247 08               [12]  476 	inc	r0
      000248 86 83            [24]  477 	mov	dph,@r0
      00024A 08               [12]  478 	inc	r0
      00024B 86 F0            [24]  479 	mov	b,@r0
      00024D 08               [12]  480 	inc	r0
      00024E E6               [12]  481 	mov	a,@r0
      00024F 12r00r00         [24]  482 	lcall	___fssub
      000252 A8*00            [24]  483 	mov	r0,_bp
      000254 08               [12]  484 	inc	r0
      000255 A6 82            [24]  485 	mov	@r0,dpl
      000257 08               [12]  486 	inc	r0
      000258 A6 83            [24]  487 	mov	@r0,dph
      00025A 08               [12]  488 	inc	r0
      00025B A6 F0            [24]  489 	mov	@r0,b
      00025D 08               [12]  490 	inc	r0
      00025E F6               [12]  491 	mov	@r0,a
      00025F E5 81            [12]  492 	mov	a,sp
      000261 24 FC            [12]  493 	add	a,#0xfc
      000263 F5 81            [12]  494 	mov	sp,a
      000265 D0*00            [24]  495 	pop	bits
      000267 C0*00            [24]  496 	push	bits
      000269 E5*00            [12]  497 	mov	a,_bp
      00026B 24 07            [12]  498 	add	a,#0x07
      00026D F8               [12]  499 	mov	r0,a
      00026E E6               [12]  500 	mov	a,@r0
      00026F C0 E0            [24]  501 	push	acc
      000271 08               [12]  502 	inc	r0
      000272 E6               [12]  503 	mov	a,@r0
      000273 C0 E0            [24]  504 	push	acc
      000275 08               [12]  505 	inc	r0
      000276 E6               [12]  506 	mov	a,@r0
      000277 C0 E0            [24]  507 	push	acc
      000279 08               [12]  508 	inc	r0
      00027A E6               [12]  509 	mov	a,@r0
      00027B C0 E0            [24]  510 	push	acc
      00027D 90 80 83         [24]  511 	mov	dptr,#0x8083
      000280 75 F0 5E         [24]  512 	mov	b,#0x5E
      000283 74 B9            [12]  513 	mov	a,#0xB9
      000285 12r00r00         [24]  514 	lcall	___fsmul
      000288 AA 82            [24]  515 	mov	r2,dpl
      00028A AB 83            [24]  516 	mov	r3,dph
      00028C AE F0            [24]  517 	mov	r6,b
      00028E FF               [12]  518 	mov	r7,a
      00028F E5 81            [12]  519 	mov	a,sp
      000291 24 FC            [12]  520 	add	a,#0xfc
      000293 F5 81            [12]  521 	mov	sp,a
      000295 D0*00            [24]  522 	pop	bits
      000297 C0*00            [24]  523 	push	bits
      000299 C0 02            [24]  524 	push	ar2
      00029B C0 03            [24]  525 	push	ar3
      00029D C0 06            [24]  526 	push	ar6
      00029F C0 07            [24]  527 	push	ar7
      0002A1 A8*00            [24]  528 	mov	r0,_bp
      0002A3 08               [12]  529 	inc	r0
      0002A4 86 82            [24]  530 	mov	dpl,@r0
      0002A6 08               [12]  531 	inc	r0
      0002A7 86 83            [24]  532 	mov	dph,@r0
      0002A9 08               [12]  533 	inc	r0
      0002AA 86 F0            [24]  534 	mov	b,@r0
      0002AC 08               [12]  535 	inc	r0
      0002AD E6               [12]  536 	mov	a,@r0
      0002AE 12r00r00         [24]  537 	lcall	___fssub
      0002B1 AC 82            [24]  538 	mov	r4,dpl
      0002B3 AD 83            [24]  539 	mov	r5,dph
      0002B5 AE F0            [24]  540 	mov	r6,b
      0002B7 FF               [12]  541 	mov	r7,a
      0002B8 E5 81            [12]  542 	mov	a,sp
      0002BA 24 FC            [12]  543 	add	a,#0xfc
      0002BC F5 81            [12]  544 	mov	sp,a
      0002BE D0*00            [24]  545 	pop	bits
      0002C0 E5*00            [12]  546 	mov	a,_bp
      0002C2 24 0B            [12]  547 	add	a,#0x0b
      0002C4 F8               [12]  548 	mov	r0,a
      0002C5 A6 04            [24]  549 	mov	@r0,ar4
      0002C7 08               [12]  550 	inc	r0
      0002C8 A6 05            [24]  551 	mov	@r0,ar5
      0002CA 08               [12]  552 	inc	r0
      0002CB A6 06            [24]  553 	mov	@r0,ar6
      0002CD 08               [12]  554 	inc	r0
      0002CE A6 07            [24]  555 	mov	@r0,ar7
                                    556 ;	expf.c:365: z=g*g;
      0002D0 C0*00            [24]  557 	push	bits
      0002D2 E5*00            [12]  558 	mov	a,_bp
      0002D4 24 0B            [12]  559 	add	a,#0x0b
      0002D6 F8               [12]  560 	mov	r0,a
      0002D7 E6               [12]  561 	mov	a,@r0
      0002D8 C0 E0            [24]  562 	push	acc
      0002DA 08               [12]  563 	inc	r0
      0002DB E6               [12]  564 	mov	a,@r0
      0002DC C0 E0            [24]  565 	push	acc
      0002DE 08               [12]  566 	inc	r0
      0002DF E6               [12]  567 	mov	a,@r0
      0002E0 C0 E0            [24]  568 	push	acc
      0002E2 08               [12]  569 	inc	r0
      0002E3 E6               [12]  570 	mov	a,@r0
      0002E4 C0 E0            [24]  571 	push	acc
      0002E6 E5*00            [12]  572 	mov	a,_bp
      0002E8 24 0B            [12]  573 	add	a,#0x0b
      0002EA F8               [12]  574 	mov	r0,a
      0002EB 86 82            [24]  575 	mov	dpl,@r0
      0002ED 08               [12]  576 	inc	r0
      0002EE 86 83            [24]  577 	mov	dph,@r0
      0002F0 08               [12]  578 	inc	r0
      0002F1 86 F0            [24]  579 	mov	b,@r0
      0002F3 08               [12]  580 	inc	r0
      0002F4 E6               [12]  581 	mov	a,@r0
      0002F5 12r00r00         [24]  582 	lcall	___fsmul
      0002F8 AA 82            [24]  583 	mov	r2,dpl
      0002FA AB 83            [24]  584 	mov	r3,dph
      0002FC AE F0            [24]  585 	mov	r6,b
      0002FE FF               [12]  586 	mov	r7,a
      0002FF E5 81            [12]  587 	mov	a,sp
      000301 24 FC            [12]  588 	add	a,#0xfc
      000303 F5 81            [12]  589 	mov	sp,a
      000305 D0*00            [24]  590 	pop	bits
      000307 E5*00            [12]  591 	mov	a,_bp
      000309 24 13            [12]  592 	add	a,#0x13
      00030B F8               [12]  593 	mov	r0,a
      00030C A6 02            [24]  594 	mov	@r0,ar2
      00030E 08               [12]  595 	inc	r0
      00030F A6 03            [24]  596 	mov	@r0,ar3
      000311 08               [12]  597 	inc	r0
      000312 A6 06            [24]  598 	mov	@r0,ar6
      000314 08               [12]  599 	inc	r0
      000315 A6 07            [24]  600 	mov	@r0,ar7
                                    601 ;	expf.c:366: r=P(z)*g;
      000317 C0*00            [24]  602 	push	bits
      000319 E5*00            [12]  603 	mov	a,_bp
      00031B 24 13            [12]  604 	add	a,#0x13
      00031D F8               [12]  605 	mov	r0,a
      00031E E6               [12]  606 	mov	a,@r0
      00031F C0 E0            [24]  607 	push	acc
      000321 08               [12]  608 	inc	r0
      000322 E6               [12]  609 	mov	a,@r0
      000323 C0 E0            [24]  610 	push	acc
      000325 08               [12]  611 	inc	r0
      000326 E6               [12]  612 	mov	a,@r0
      000327 C0 E0            [24]  613 	push	acc
      000329 08               [12]  614 	inc	r0
      00032A E6               [12]  615 	mov	a,@r0
      00032B C0 E0            [24]  616 	push	acc
      00032D 90 53 08         [24]  617 	mov	dptr,#0x5308
      000330 75 F0 88         [24]  618 	mov	b,#0x88
      000333 74 3B            [12]  619 	mov	a,#0x3B
      000335 12r00r00         [24]  620 	lcall	___fsmul
      000338 AC 82            [24]  621 	mov	r4,dpl
      00033A AD 83            [24]  622 	mov	r5,dph
      00033C AE F0            [24]  623 	mov	r6,b
      00033E FF               [12]  624 	mov	r7,a
      00033F E5 81            [12]  625 	mov	a,sp
      000341 24 FC            [12]  626 	add	a,#0xfc
      000343 F5 81            [12]  627 	mov	sp,a
      000345 D0*00            [24]  628 	pop	bits
      000347 C0*00            [24]  629 	push	bits
      000349 E4               [12]  630 	clr	a
      00034A C0 E0            [24]  631 	push	acc
      00034C C0 E0            [24]  632 	push	acc
      00034E 74 80            [12]  633 	mov	a,#0x80
      000350 C0 E0            [24]  634 	push	acc
      000352 74 3E            [12]  635 	mov	a,#0x3E
      000354 C0 E0            [24]  636 	push	acc
      000356 8C 82            [24]  637 	mov	dpl,r4
      000358 8D 83            [24]  638 	mov	dph,r5
      00035A 8E F0            [24]  639 	mov	b,r6
      00035C EF               [12]  640 	mov	a,r7
      00035D 12r00r00         [24]  641 	lcall	___fsadd
      000360 AC 82            [24]  642 	mov	r4,dpl
      000362 AD 83            [24]  643 	mov	r5,dph
      000364 AE F0            [24]  644 	mov	r6,b
      000366 FF               [12]  645 	mov	r7,a
      000367 E5 81            [12]  646 	mov	a,sp
      000369 24 FC            [12]  647 	add	a,#0xfc
      00036B F5 81            [12]  648 	mov	sp,a
      00036D D0*00            [24]  649 	pop	bits
      00036F C0*00            [24]  650 	push	bits
      000371 E5*00            [12]  651 	mov	a,_bp
      000373 24 0B            [12]  652 	add	a,#0x0b
      000375 F8               [12]  653 	mov	r0,a
      000376 E6               [12]  654 	mov	a,@r0
      000377 C0 E0            [24]  655 	push	acc
      000379 08               [12]  656 	inc	r0
      00037A E6               [12]  657 	mov	a,@r0
      00037B C0 E0            [24]  658 	push	acc
      00037D 08               [12]  659 	inc	r0
      00037E E6               [12]  660 	mov	a,@r0
      00037F C0 E0            [24]  661 	push	acc
      000381 08               [12]  662 	inc	r0
      000382 E6               [12]  663 	mov	a,@r0
      000383 C0 E0            [24]  664 	push	acc
      000385 8C 82            [24]  665 	mov	dpl,r4
      000387 8D 83            [24]  666 	mov	dph,r5
      000389 8E F0            [24]  667 	mov	b,r6
      00038B EF               [12]  668 	mov	a,r7
      00038C 12r00r00         [24]  669 	lcall	___fsmul
      00038F AC 82            [24]  670 	mov	r4,dpl
      000391 AD 83            [24]  671 	mov	r5,dph
      000393 AE F0            [24]  672 	mov	r6,b
      000395 FF               [12]  673 	mov	r7,a
      000396 E5 81            [12]  674 	mov	a,sp
      000398 24 FC            [12]  675 	add	a,#0xfc
      00039A F5 81            [12]  676 	mov	sp,a
      00039C D0*00            [24]  677 	pop	bits
      00039E E5*00            [12]  678 	mov	a,_bp
      0003A0 24 0F            [12]  679 	add	a,#0x0f
      0003A2 F8               [12]  680 	mov	r0,a
      0003A3 A6 04            [24]  681 	mov	@r0,ar4
      0003A5 08               [12]  682 	inc	r0
      0003A6 A6 05            [24]  683 	mov	@r0,ar5
      0003A8 08               [12]  684 	inc	r0
      0003A9 A6 06            [24]  685 	mov	@r0,ar6
      0003AB 08               [12]  686 	inc	r0
      0003AC A6 07            [24]  687 	mov	@r0,ar7
                                    688 ;	expf.c:367: r=0.5+(r/(Q(z)-r));
      0003AE C0*00            [24]  689 	push	bits
      0003B0 E5*00            [12]  690 	mov	a,_bp
      0003B2 24 13            [12]  691 	add	a,#0x13
      0003B4 F8               [12]  692 	mov	r0,a
      0003B5 E6               [12]  693 	mov	a,@r0
      0003B6 C0 E0            [24]  694 	push	acc
      0003B8 08               [12]  695 	inc	r0
      0003B9 E6               [12]  696 	mov	a,@r0
      0003BA C0 E0            [24]  697 	push	acc
      0003BC 08               [12]  698 	inc	r0
      0003BD E6               [12]  699 	mov	a,@r0
      0003BE C0 E0            [24]  700 	push	acc
      0003C0 08               [12]  701 	inc	r0
      0003C1 E6               [12]  702 	mov	a,@r0
      0003C2 C0 E0            [24]  703 	push	acc
      0003C4 90 BF 5B         [24]  704 	mov	dptr,#0xBF5B
      0003C7 75 F0 4C         [24]  705 	mov	b,#0x4C
      0003CA 74 3D            [12]  706 	mov	a,#0x3D
      0003CC 12r00r00         [24]  707 	lcall	___fsmul
      0003CF AA 82            [24]  708 	mov	r2,dpl
      0003D1 AB 83            [24]  709 	mov	r3,dph
      0003D3 AE F0            [24]  710 	mov	r6,b
      0003D5 FF               [12]  711 	mov	r7,a
      0003D6 E5 81            [12]  712 	mov	a,sp
      0003D8 24 FC            [12]  713 	add	a,#0xfc
      0003DA F5 81            [12]  714 	mov	sp,a
      0003DC D0*00            [24]  715 	pop	bits
      0003DE C0*00            [24]  716 	push	bits
      0003E0 E4               [12]  717 	clr	a
      0003E1 C0 E0            [24]  718 	push	acc
      0003E3 C0 E0            [24]  719 	push	acc
      0003E5 C0 E0            [24]  720 	push	acc
      0003E7 74 3F            [12]  721 	mov	a,#0x3F
      0003E9 C0 E0            [24]  722 	push	acc
      0003EB 8A 82            [24]  723 	mov	dpl,r2
      0003ED 8B 83            [24]  724 	mov	dph,r3
      0003EF 8E F0            [24]  725 	mov	b,r6
      0003F1 EF               [12]  726 	mov	a,r7
      0003F2 12r00r00         [24]  727 	lcall	___fsadd
      0003F5 AC 82            [24]  728 	mov	r4,dpl
      0003F7 AD 83            [24]  729 	mov	r5,dph
      0003F9 AE F0            [24]  730 	mov	r6,b
      0003FB FF               [12]  731 	mov	r7,a
      0003FC E5 81            [12]  732 	mov	a,sp
      0003FE 24 FC            [12]  733 	add	a,#0xfc
      000400 F5 81            [12]  734 	mov	sp,a
      000402 D0*00            [24]  735 	pop	bits
      000404 C0*00            [24]  736 	push	bits
      000406 E5*00            [12]  737 	mov	a,_bp
      000408 24 0F            [12]  738 	add	a,#0x0f
      00040A F8               [12]  739 	mov	r0,a
      00040B E6               [12]  740 	mov	a,@r0
      00040C C0 E0            [24]  741 	push	acc
      00040E 08               [12]  742 	inc	r0
      00040F E6               [12]  743 	mov	a,@r0
      000410 C0 E0            [24]  744 	push	acc
      000412 08               [12]  745 	inc	r0
      000413 E6               [12]  746 	mov	a,@r0
      000414 C0 E0            [24]  747 	push	acc
      000416 08               [12]  748 	inc	r0
      000417 E6               [12]  749 	mov	a,@r0
      000418 C0 E0            [24]  750 	push	acc
      00041A 8C 82            [24]  751 	mov	dpl,r4
      00041C 8D 83            [24]  752 	mov	dph,r5
      00041E 8E F0            [24]  753 	mov	b,r6
      000420 EF               [12]  754 	mov	a,r7
      000421 12r00r00         [24]  755 	lcall	___fssub
      000424 AC 82            [24]  756 	mov	r4,dpl
      000426 AD 83            [24]  757 	mov	r5,dph
      000428 AE F0            [24]  758 	mov	r6,b
      00042A FF               [12]  759 	mov	r7,a
      00042B E5 81            [12]  760 	mov	a,sp
      00042D 24 FC            [12]  761 	add	a,#0xfc
      00042F F5 81            [12]  762 	mov	sp,a
      000431 D0*00            [24]  763 	pop	bits
      000433 C0*00            [24]  764 	push	bits
      000435 C0 04            [24]  765 	push	ar4
      000437 C0 05            [24]  766 	push	ar5
      000439 C0 06            [24]  767 	push	ar6
      00043B C0 07            [24]  768 	push	ar7
      00043D E5*00            [12]  769 	mov	a,_bp
      00043F 24 0F            [12]  770 	add	a,#0x0f
      000441 F8               [12]  771 	mov	r0,a
      000442 86 82            [24]  772 	mov	dpl,@r0
      000444 08               [12]  773 	inc	r0
      000445 86 83            [24]  774 	mov	dph,@r0
      000447 08               [12]  775 	inc	r0
      000448 86 F0            [24]  776 	mov	b,@r0
      00044A 08               [12]  777 	inc	r0
      00044B E6               [12]  778 	mov	a,@r0
      00044C 12r00r00         [24]  779 	lcall	___fsdiv
      00044F AC 82            [24]  780 	mov	r4,dpl
      000451 AD 83            [24]  781 	mov	r5,dph
      000453 AE F0            [24]  782 	mov	r6,b
      000455 FF               [12]  783 	mov	r7,a
      000456 E5 81            [12]  784 	mov	a,sp
      000458 24 FC            [12]  785 	add	a,#0xfc
      00045A F5 81            [12]  786 	mov	sp,a
      00045C D0*00            [24]  787 	pop	bits
      00045E C0*00            [24]  788 	push	bits
      000460 E4               [12]  789 	clr	a
      000461 C0 E0            [24]  790 	push	acc
      000463 C0 E0            [24]  791 	push	acc
      000465 C0 E0            [24]  792 	push	acc
      000467 74 3F            [12]  793 	mov	a,#0x3F
      000469 C0 E0            [24]  794 	push	acc
      00046B 8C 82            [24]  795 	mov	dpl,r4
      00046D 8D 83            [24]  796 	mov	dph,r5
      00046F 8E F0            [24]  797 	mov	b,r6
      000471 EF               [12]  798 	mov	a,r7
      000472 12r00r00         [24]  799 	lcall	___fsadd
      000475 AC 82            [24]  800 	mov	r4,dpl
      000477 AD 83            [24]  801 	mov	r5,dph
      000479 AE F0            [24]  802 	mov	r6,b
      00047B FF               [12]  803 	mov	r7,a
      00047C E5 81            [12]  804 	mov	a,sp
      00047E 24 FC            [12]  805 	add	a,#0xfc
      000480 F5 81            [12]  806 	mov	sp,a
      000482 D0*00            [24]  807 	pop	bits
      000484 E5*00            [12]  808 	mov	a,_bp
      000486 24 0F            [12]  809 	add	a,#0x0f
      000488 F8               [12]  810 	mov	r0,a
      000489 A6 04            [24]  811 	mov	@r0,ar4
      00048B 08               [12]  812 	inc	r0
      00048C A6 05            [24]  813 	mov	@r0,ar5
      00048E 08               [12]  814 	inc	r0
      00048F A6 06            [24]  815 	mov	@r0,ar6
      000491 08               [12]  816 	inc	r0
      000492 A6 07            [24]  817 	mov	@r0,ar7
                                    818 ;	expf.c:369: n++;
      000494 E5*00            [12]  819 	mov	a,_bp
      000496 24 05            [12]  820 	add	a,#0x05
      000498 F8               [12]  821 	mov	r0,a
      000499 06               [12]  822 	inc	@r0
      00049A B6 00 02         [24]  823 	cjne	@r0,#0x00,00149$
      00049D 08               [12]  824 	inc	r0
      00049E 06               [12]  825 	inc	@r0
      00049F                        826 00149$:
                                    827 ;	expf.c:370: z=ldexpf(r, n);
      00049F C0*00            [24]  828 	push	bits
      0004A1 E5*00            [12]  829 	mov	a,_bp
      0004A3 24 05            [12]  830 	add	a,#0x05
      0004A5 F8               [12]  831 	mov	r0,a
      0004A6 E6               [12]  832 	mov	a,@r0
      0004A7 C0 E0            [24]  833 	push	acc
      0004A9 08               [12]  834 	inc	r0
      0004AA E6               [12]  835 	mov	a,@r0
      0004AB C0 E0            [24]  836 	push	acc
      0004AD E5*00            [12]  837 	mov	a,_bp
      0004AF 24 0F            [12]  838 	add	a,#0x0f
      0004B1 F8               [12]  839 	mov	r0,a
      0004B2 86 82            [24]  840 	mov	dpl,@r0
      0004B4 08               [12]  841 	inc	r0
      0004B5 86 83            [24]  842 	mov	dph,@r0
      0004B7 08               [12]  843 	inc	r0
      0004B8 86 F0            [24]  844 	mov	b,@r0
      0004BA 08               [12]  845 	inc	r0
      0004BB E6               [12]  846 	mov	a,@r0
      0004BC 12r00r00         [24]  847 	lcall	_ldexpf
      0004BF AC 82            [24]  848 	mov	r4,dpl
      0004C1 AD 83            [24]  849 	mov	r5,dph
      0004C3 AE F0            [24]  850 	mov	r6,b
      0004C5 FF               [12]  851 	mov	r7,a
      0004C6 15 81            [12]  852 	dec	sp
      0004C8 15 81            [12]  853 	dec	sp
      0004CA D0*00            [24]  854 	pop	bits
      0004CC E5*00            [12]  855 	mov	a,_bp
      0004CE 24 13            [12]  856 	add	a,#0x13
      0004D0 F8               [12]  857 	mov	r0,a
      0004D1 A6 04            [24]  858 	mov	@r0,ar4
      0004D3 08               [12]  859 	inc	r0
      0004D4 A6 05            [24]  860 	mov	@r0,ar5
      0004D6 08               [12]  861 	inc	r0
      0004D7 A6 06            [24]  862 	mov	@r0,ar6
      0004D9 08               [12]  863 	inc	r0
      0004DA A6 07            [24]  864 	mov	@r0,ar7
                                    865 ;	expf.c:371: if(sign)
      0004DC 30*00 35         [24]  866 	jnb	b0,00116$
                                    867 ;	expf.c:372: return 1.0/z;
      0004DF E5*00            [12]  868 	mov	a,_bp
      0004E1 24 13            [12]  869 	add	a,#0x13
      0004E3 F8               [12]  870 	mov	r0,a
      0004E4 E6               [12]  871 	mov	a,@r0
      0004E5 C0 E0            [24]  872 	push	acc
      0004E7 08               [12]  873 	inc	r0
      0004E8 E6               [12]  874 	mov	a,@r0
      0004E9 C0 E0            [24]  875 	push	acc
      0004EB 08               [12]  876 	inc	r0
      0004EC E6               [12]  877 	mov	a,@r0
      0004ED C0 E0            [24]  878 	push	acc
      0004EF 08               [12]  879 	inc	r0
      0004F0 E6               [12]  880 	mov	a,@r0
      0004F1 C0 E0            [24]  881 	push	acc
      0004F3 90 00 00         [24]  882 	mov	dptr,#0x0000
      0004F6 75 F0 80         [24]  883 	mov	b,#0x80
      0004F9 74 3F            [12]  884 	mov	a,#0x3F
      0004FB 12r00r00         [24]  885 	lcall	___fsdiv
      0004FE AC 82            [24]  886 	mov	r4,dpl
      000500 AD 83            [24]  887 	mov	r5,dph
      000502 AE F0            [24]  888 	mov	r6,b
      000504 FF               [12]  889 	mov	r7,a
      000505 E5 81            [12]  890 	mov	a,sp
      000507 24 FC            [12]  891 	add	a,#0xfc
      000509 F5 81            [12]  892 	mov	sp,a
      00050B 8C 82            [24]  893 	mov	dpl,r4
      00050D 8D 83            [24]  894 	mov	dph,r5
      00050F 8E F0            [24]  895 	mov	b,r6
      000511 EF               [12]  896 	mov	a,r7
      000512 80 0F            [24]  897 	sjmp	00118$
      000514                        898 00116$:
                                    899 ;	expf.c:374: return z;
      000514 E5*00            [12]  900 	mov	a,_bp
      000516 24 13            [12]  901 	add	a,#0x13
      000518 F8               [12]  902 	mov	r0,a
      000519 86 82            [24]  903 	mov	dpl,@r0
      00051B 08               [12]  904 	inc	r0
      00051C 86 83            [24]  905 	mov	dph,@r0
      00051E 08               [12]  906 	inc	r0
      00051F 86 F0            [24]  907 	mov	b,@r0
      000521 08               [12]  908 	inc	r0
      000522 E6               [12]  909 	mov	a,@r0
      000523                        910 00118$:
      000523 85*00 81         [24]  911 	mov	sp,_bp
      000526 D0*00            [24]  912 	pop	_bp
      000528 22               [24]  913 	ret
                                    914 	.area CSEG    (CODE)
                                    915 	.area CONST   (CODE)
                                    916 	.area XINIT   (CODE)
                                    917 	.area CABS    (ABS,CODE)
