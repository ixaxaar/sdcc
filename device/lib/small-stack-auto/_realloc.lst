                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:04 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _realloc
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_find_memheader
                                     13 	.globl _memmove
                                     14 	.globl _memcpy
                                     15 	.globl _free
                                     16 	.globl _malloc
                                     17 	.globl _realloc
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; special function bits
                                     25 ;--------------------------------------------------------
                                     26 	.area RSEG    (ABS,DATA)
      000000                         27 	.org 0x0000
                                     28 ;--------------------------------------------------------
                                     29 ; overlayable register banks
                                     30 ;--------------------------------------------------------
                                     31 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         32 	.ds 8
                                     33 ;--------------------------------------------------------
                                     34 ; internal ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DSEG    (DATA)
                                     37 ;--------------------------------------------------------
                                     38 ; overlayable items in internal ram 
                                     39 ;--------------------------------------------------------
                                     40 ;--------------------------------------------------------
                                     41 ; indirectly addressable internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area ISEG    (DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; absolute internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area IABS    (ABS,DATA)
                                     48 	.area IABS    (ABS,DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; bit data
                                     51 ;--------------------------------------------------------
                                     52 	.area BSEG    (BIT)
                                     53 ;--------------------------------------------------------
                                     54 ; paged external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area PSEG    (PAG,XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XSEG    (XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XABS    (ABS,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; external initialized ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XISEG   (XDATA)
                                     69 	.area HOME    (CODE)
                                     70 	.area GSINIT0 (CODE)
                                     71 	.area GSINIT1 (CODE)
                                     72 	.area GSINIT2 (CODE)
                                     73 	.area GSINIT3 (CODE)
                                     74 	.area GSINIT4 (CODE)
                                     75 	.area GSINIT5 (CODE)
                                     76 	.area GSINIT  (CODE)
                                     77 	.area GSFINAL (CODE)
                                     78 	.area CSEG    (CODE)
                                     79 ;--------------------------------------------------------
                                     80 ; global & static initialisations
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME    (CODE)
                                     83 	.area GSINIT  (CODE)
                                     84 	.area GSFINAL (CODE)
                                     85 	.area GSINIT  (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; Home
                                     88 ;--------------------------------------------------------
                                     89 	.area HOME    (CODE)
                                     90 	.area HOME    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; code
                                     93 ;--------------------------------------------------------
                                     94 	.area CSEG    (CODE)
                                     95 ;------------------------------------------------------------
                                     96 ;Allocation info for local variables in function 'realloc'
                                     97 ;------------------------------------------------------------
                                     98 ;size                      Allocated to stack - _bp -4
                                     99 ;p                         Allocated to stack - _bp +1
                                    100 ;pthis                     Allocated to stack - _bp +6
                                    101 ;pnew                      Allocated to stack - _bp +8
                                    102 ;ret                       Allocated to stack - _bp +10
                                    103 ;sloc0                     Allocated to stack - _bp +4
                                    104 ;------------------------------------------------------------
                                    105 ;	_realloc.c:84: void __xdata * realloc (void * p, size_t size)
                                    106 ;	-----------------------------------------
                                    107 ;	 function realloc
                                    108 ;	-----------------------------------------
      000000                        109 _realloc:
                           000007   110 	ar7 = 0x07
                           000006   111 	ar6 = 0x06
                           000005   112 	ar5 = 0x05
                           000004   113 	ar4 = 0x04
                           000003   114 	ar3 = 0x03
                           000002   115 	ar2 = 0x02
                           000001   116 	ar1 = 0x01
                           000000   117 	ar0 = 0x00
      000000 C0*00            [24]  118 	push	_bp
      000002 85 81*00         [24]  119 	mov	_bp,sp
      000005 C0 82            [24]  120 	push	dpl
      000007 C0 83            [24]  121 	push	dph
      000009 C0 F0            [24]  122 	push	b
      00000B E5 81            [12]  123 	mov	a,sp
      00000D 24 08            [12]  124 	add	a,#0x08
      00000F F5 81            [12]  125 	mov	sp,a
                                    126 ;	_realloc.c:142: }
      000011 D3               [12]  127 	setb	c
      000012 10 AF 01         [24]  128 	jbc	ea,00136$
      000015 C3               [12]  129 	clr	c
      000016                        130 00136$:
      000016 C0 D0            [24]  131 	push	psw
                                    132 ;	_realloc.c:92: pthis = _sdcc_find_memheader(p);
      000018 A8*00            [24]  133 	mov	r0,_bp
      00001A 08               [12]  134 	inc	r0
      00001B 86 82            [24]  135 	mov	dpl,@r0
      00001D 08               [12]  136 	inc	r0
      00001E 86 83            [24]  137 	mov	dph,@r0
      000020 12r00r00         [24]  138 	lcall	__sdcc_find_memheader
      000023 AB 82            [24]  139 	mov	r3,dpl
      000025 AC 83            [24]  140 	mov	r4,dph
      000027 E5*00            [12]  141 	mov	a,_bp
      000029 24 06            [12]  142 	add	a,#0x06
      00002B F8               [12]  143 	mov	r0,a
      00002C A6 03            [24]  144 	mov	@r0,ar3
      00002E 08               [12]  145 	inc	r0
      00002F A6 04            [24]  146 	mov	@r0,ar4
                                    147 ;	_realloc.c:93: if (pthis)
      000031 E5*00            [12]  148 	mov	a,_bp
      000033 24 06            [12]  149 	add	a,#0x06
      000035 F8               [12]  150 	mov	r0,a
      000036 E6               [12]  151 	mov	a,@r0
      000037 08               [12]  152 	inc	r0
      000038 46               [12]  153 	orl	a,@r0
      000039 70 03            [24]  154 	jnz	00137$
      00003B 02r02r43         [24]  155 	ljmp	00114$
      00003E                        156 00137$:
                                    157 ;	_realloc.c:95: if (size > (0xFFFF-HEADER_SIZE))
      00003E E5*00            [12]  158 	mov	a,_bp
      000040 24 FC            [12]  159 	add	a,#0xfc
      000042 F8               [12]  160 	mov	r0,a
      000043 C3               [12]  161 	clr	c
      000044 74 FB            [12]  162 	mov	a,#0xFB
      000046 96               [12]  163 	subb	a,@r0
      000047 74 FF            [12]  164 	mov	a,#0xFF
      000049 08               [12]  165 	inc	r0
      00004A 96               [12]  166 	subb	a,@r0
      00004B 50 0C            [24]  167 	jnc	00111$
                                    168 ;	_realloc.c:97: ret = (void __xdata *) NULL; //To prevent overflow in next line
      00004D E5*00            [12]  169 	mov	a,_bp
      00004F 24 0A            [12]  170 	add	a,#0x0a
      000051 F8               [12]  171 	mov	r0,a
      000052 E4               [12]  172 	clr	a
      000053 F6               [12]  173 	mov	@r0,a
      000054 08               [12]  174 	inc	r0
      000055 F6               [12]  175 	mov	@r0,a
      000056 02r02r5E         [24]  176 	ljmp	00115$
      000059                        177 00111$:
                                    178 ;	_realloc.c:101: size += HEADER_SIZE; //We need a memory for header too
      000059 E5*00            [12]  179 	mov	a,_bp
      00005B 24 FC            [12]  180 	add	a,#0xfc
      00005D F8               [12]  181 	mov	r0,a
      00005E 74 04            [12]  182 	mov	a,#0x04
      000060 26               [12]  183 	add	a,@r0
      000061 F6               [12]  184 	mov	@r0,a
      000062 E4               [12]  185 	clr	a
      000063 08               [12]  186 	inc	r0
      000064 36               [12]  187 	addc	a,@r0
      000065 F6               [12]  188 	mov	@r0,a
                                    189 ;	_realloc.c:103: if ((((unsigned int)pthis->next) - ((unsigned int)pthis)) >= size)
      000066 E5*00            [12]  190 	mov	a,_bp
      000068 24 06            [12]  191 	add	a,#0x06
      00006A F8               [12]  192 	mov	r0,a
      00006B 86 82            [24]  193 	mov	dpl,@r0
      00006D 08               [12]  194 	inc	r0
      00006E 86 83            [24]  195 	mov	dph,@r0
      000070 E0               [24]  196 	movx	a,@dptr
      000071 FA               [12]  197 	mov	r2,a
      000072 A3               [24]  198 	inc	dptr
      000073 E0               [24]  199 	movx	a,@dptr
      000074 FF               [12]  200 	mov	r7,a
      000075 8A 05            [24]  201 	mov	ar5,r2
      000077 8F 06            [24]  202 	mov	ar6,r7
      000079 E5*00            [12]  203 	mov	a,_bp
      00007B 24 06            [12]  204 	add	a,#0x06
      00007D F8               [12]  205 	mov	r0,a
      00007E 86 03            [24]  206 	mov	ar3,@r0
      000080 08               [12]  207 	inc	r0
      000081 86 04            [24]  208 	mov	ar4,@r0
      000083 ED               [12]  209 	mov	a,r5
      000084 C3               [12]  210 	clr	c
      000085 9B               [12]  211 	subb	a,r3
      000086 FD               [12]  212 	mov	r5,a
      000087 EE               [12]  213 	mov	a,r6
      000088 9C               [12]  214 	subb	a,r4
      000089 FE               [12]  215 	mov	r6,a
      00008A E5*00            [12]  216 	mov	a,_bp
      00008C 24 FC            [12]  217 	add	a,#0xfc
      00008E F8               [12]  218 	mov	r0,a
      00008F C3               [12]  219 	clr	c
      000090 ED               [12]  220 	mov	a,r5
      000091 96               [12]  221 	subb	a,@r0
      000092 EE               [12]  222 	mov	a,r6
      000093 08               [12]  223 	inc	r0
      000094 96               [12]  224 	subb	a,@r0
      000095 40 28            [24]  225 	jc	00108$
                                    226 ;	_realloc.c:105: pthis->len = size;
      000097 E5*00            [12]  227 	mov	a,_bp
      000099 24 06            [12]  228 	add	a,#0x06
      00009B F8               [12]  229 	mov	r0,a
      00009C 86 82            [24]  230 	mov	dpl,@r0
      00009E 08               [12]  231 	inc	r0
      00009F 86 83            [24]  232 	mov	dph,@r0
      0000A1 A3               [24]  233 	inc	dptr
      0000A2 A3               [24]  234 	inc	dptr
      0000A3 E5*00            [12]  235 	mov	a,_bp
      0000A5 24 FC            [12]  236 	add	a,#0xfc
      0000A7 F8               [12]  237 	mov	r0,a
      0000A8 E6               [12]  238 	mov	a,@r0
      0000A9 F0               [24]  239 	movx	@dptr,a
      0000AA 08               [12]  240 	inc	r0
      0000AB E6               [12]  241 	mov	a,@r0
      0000AC A3               [24]  242 	inc	dptr
      0000AD F0               [24]  243 	movx	@dptr,a
                                    244 ;	_realloc.c:106: ret = p;
      0000AE A8*00            [24]  245 	mov	r0,_bp
      0000B0 08               [12]  246 	inc	r0
      0000B1 E5*00            [12]  247 	mov	a,_bp
      0000B3 24 0A            [12]  248 	add	a,#0x0a
      0000B5 F9               [12]  249 	mov	r1,a
      0000B6 E6               [12]  250 	mov	a,@r0
      0000B7 F7               [12]  251 	mov	@r1,a
      0000B8 08               [12]  252 	inc	r0
      0000B9 09               [12]  253 	inc	r1
      0000BA E6               [12]  254 	mov	a,@r0
      0000BB F7               [12]  255 	mov	@r1,a
      0000BC 02r02r5E         [24]  256 	ljmp	00115$
      0000BF                        257 00108$:
                                    258 ;	_realloc.c:110: if ((_sdcc_prev_memheader) &&
      0000BF E5*00            [12]  259 	mov	a,__sdcc_prev_memheader
      0000C1 45*01            [12]  260 	orl	a,(__sdcc_prev_memheader + 1)
      0000C3 70 03            [24]  261 	jnz	00140$
      0000C5 02r01rAA         [24]  262 	ljmp	00104$
      0000C8                        263 00140$:
                                    264 ;	_realloc.c:111: ((((unsigned int)pthis->next) -
                                    265 ;	_realloc.c:112: ((unsigned int)_sdcc_prev_memheader) -
      0000C8 AD*00            [24]  266 	mov	r5,__sdcc_prev_memheader
      0000CA AE*01            [24]  267 	mov	r6,(__sdcc_prev_memheader + 1)
      0000CC EA               [12]  268 	mov	a,r2
      0000CD C3               [12]  269 	clr	c
      0000CE 9D               [12]  270 	subb	a,r5
      0000CF FA               [12]  271 	mov	r2,a
      0000D0 EF               [12]  272 	mov	a,r7
      0000D1 9E               [12]  273 	subb	a,r6
      0000D2 FF               [12]  274 	mov	r7,a
                                    275 ;	_realloc.c:113: _sdcc_prev_memheader->len) >= size))
      0000D3 85*00 82         [24]  276 	mov	dpl,__sdcc_prev_memheader
      0000D6 85*01 83         [24]  277 	mov	dph,(__sdcc_prev_memheader + 1)
      0000D9 A3               [24]  278 	inc	dptr
      0000DA A3               [24]  279 	inc	dptr
      0000DB E0               [24]  280 	movx	a,@dptr
      0000DC FD               [12]  281 	mov	r5,a
      0000DD A3               [24]  282 	inc	dptr
      0000DE E0               [24]  283 	movx	a,@dptr
      0000DF FE               [12]  284 	mov	r6,a
      0000E0 EA               [12]  285 	mov	a,r2
      0000E1 C3               [12]  286 	clr	c
      0000E2 9D               [12]  287 	subb	a,r5
      0000E3 FA               [12]  288 	mov	r2,a
      0000E4 EF               [12]  289 	mov	a,r7
      0000E5 9E               [12]  290 	subb	a,r6
      0000E6 FF               [12]  291 	mov	r7,a
      0000E7 E5*00            [12]  292 	mov	a,_bp
      0000E9 24 FC            [12]  293 	add	a,#0xfc
      0000EB F8               [12]  294 	mov	r0,a
      0000EC C3               [12]  295 	clr	c
      0000ED EA               [12]  296 	mov	a,r2
      0000EE 96               [12]  297 	subb	a,@r0
      0000EF EF               [12]  298 	mov	a,r7
      0000F0 08               [12]  299 	inc	r0
      0000F1 96               [12]  300 	subb	a,@r0
      0000F2 50 03            [24]  301 	jnc	00141$
      0000F4 02r01rAA         [24]  302 	ljmp	00104$
      0000F7                        303 00141$:
                                    304 ;	_realloc.c:115: pnew = (MEMHEADER __xdata * )((char __xdata *)_sdcc_prev_memheader + _sdcc_prev_memheader->len);
      0000F7 AE*00            [24]  305 	mov	r6,__sdcc_prev_memheader
      0000F9 AF*01            [24]  306 	mov	r7,(__sdcc_prev_memheader + 1)
      0000FB 85*00 82         [24]  307 	mov	dpl,__sdcc_prev_memheader
      0000FE 85*01 83         [24]  308 	mov	dph,(__sdcc_prev_memheader + 1)
      000101 A3               [24]  309 	inc	dptr
      000102 A3               [24]  310 	inc	dptr
      000103 E0               [24]  311 	movx	a,@dptr
      000104 FC               [12]  312 	mov	r4,a
      000105 A3               [24]  313 	inc	dptr
      000106 E0               [24]  314 	movx	a,@dptr
      000107 FD               [12]  315 	mov	r5,a
      000108 EC               [12]  316 	mov	a,r4
      000109 2E               [12]  317 	add	a,r6
      00010A FE               [12]  318 	mov	r6,a
      00010B ED               [12]  319 	mov	a,r5
      00010C 3F               [12]  320 	addc	a,r7
      00010D FF               [12]  321 	mov	r7,a
      00010E E5*00            [12]  322 	mov	a,_bp
      000110 24 08            [12]  323 	add	a,#0x08
      000112 F8               [12]  324 	mov	r0,a
      000113 A6 06            [24]  325 	mov	@r0,ar6
      000115 08               [12]  326 	inc	r0
      000116 A6 07            [24]  327 	mov	@r0,ar7
                                    328 ;	_realloc.c:116: _sdcc_prev_memheader->next = pnew;
      000118 85*00 82         [24]  329 	mov	dpl,__sdcc_prev_memheader
      00011B 85*01 83         [24]  330 	mov	dph,(__sdcc_prev_memheader + 1)
      00011E E5*00            [12]  331 	mov	a,_bp
      000120 24 08            [12]  332 	add	a,#0x08
      000122 F8               [12]  333 	mov	r0,a
      000123 E6               [12]  334 	mov	a,@r0
      000124 F0               [24]  335 	movx	@dptr,a
      000125 08               [12]  336 	inc	r0
      000126 E6               [12]  337 	mov	a,@r0
      000127 A3               [24]  338 	inc	dptr
      000128 F0               [24]  339 	movx	@dptr,a
                                    340 ;	_realloc.c:122: memmove(pnew, pthis, pthis->len);
      000129 E5*00            [12]  341 	mov	a,_bp
      00012B 24 06            [12]  342 	add	a,#0x06
      00012D F8               [12]  343 	mov	r0,a
      00012E 86 82            [24]  344 	mov	dpl,@r0
      000130 08               [12]  345 	inc	r0
      000131 86 83            [24]  346 	mov	dph,@r0
      000133 A3               [24]  347 	inc	dptr
      000134 A3               [24]  348 	inc	dptr
      000135 E5*00            [12]  349 	mov	a,_bp
      000137 24 04            [12]  350 	add	a,#0x04
      000139 F8               [12]  351 	mov	r0,a
      00013A E0               [24]  352 	movx	a,@dptr
      00013B F6               [12]  353 	mov	@r0,a
      00013C A3               [24]  354 	inc	dptr
      00013D E0               [24]  355 	movx	a,@dptr
      00013E 08               [12]  356 	inc	r0
      00013F F6               [12]  357 	mov	@r0,a
      000140 E5*00            [12]  358 	mov	a,_bp
      000142 24 06            [12]  359 	add	a,#0x06
      000144 F8               [12]  360 	mov	r0,a
      000145 86 02            [24]  361 	mov	ar2,@r0
      000147 08               [12]  362 	inc	r0
      000148 86 03            [24]  363 	mov	ar3,@r0
      00014A 7F 00            [12]  364 	mov	r7,#0x00
      00014C E5*00            [12]  365 	mov	a,_bp
      00014E 24 08            [12]  366 	add	a,#0x08
      000150 F8               [12]  367 	mov	r0,a
      000151 86 04            [24]  368 	mov	ar4,@r0
      000153 08               [12]  369 	inc	r0
      000154 86 05            [24]  370 	mov	ar5,@r0
      000156 7E 00            [12]  371 	mov	r6,#0x00
      000158 E5*00            [12]  372 	mov	a,_bp
      00015A 24 04            [12]  373 	add	a,#0x04
      00015C F8               [12]  374 	mov	r0,a
      00015D E6               [12]  375 	mov	a,@r0
      00015E C0 E0            [24]  376 	push	acc
      000160 08               [12]  377 	inc	r0
      000161 E6               [12]  378 	mov	a,@r0
      000162 C0 E0            [24]  379 	push	acc
      000164 C0 02            [24]  380 	push	ar2
      000166 C0 03            [24]  381 	push	ar3
      000168 C0 07            [24]  382 	push	ar7
      00016A 8C 82            [24]  383 	mov	dpl,r4
      00016C 8D 83            [24]  384 	mov	dph,r5
      00016E 8E F0            [24]  385 	mov	b,r6
      000170 12r00r00         [24]  386 	lcall	_memmove
      000173 E5 81            [12]  387 	mov	a,sp
      000175 24 FB            [12]  388 	add	a,#0xfb
      000177 F5 81            [12]  389 	mov	sp,a
                                    390 ;	_realloc.c:123: pnew->len = size;
      000179 E5*00            [12]  391 	mov	a,_bp
      00017B 24 08            [12]  392 	add	a,#0x08
      00017D F8               [12]  393 	mov	r0,a
      00017E 86 82            [24]  394 	mov	dpl,@r0
      000180 08               [12]  395 	inc	r0
      000181 86 83            [24]  396 	mov	dph,@r0
      000183 A3               [24]  397 	inc	dptr
      000184 A3               [24]  398 	inc	dptr
      000185 E5*00            [12]  399 	mov	a,_bp
      000187 24 FC            [12]  400 	add	a,#0xfc
      000189 F8               [12]  401 	mov	r0,a
      00018A E6               [12]  402 	mov	a,@r0
      00018B F0               [24]  403 	movx	@dptr,a
      00018C 08               [12]  404 	inc	r0
      00018D E6               [12]  405 	mov	a,@r0
      00018E A3               [24]  406 	inc	dptr
      00018F F0               [24]  407 	movx	@dptr,a
                                    408 ;	_realloc.c:124: ret = MEM(pnew);
      000190 E5*00            [12]  409 	mov	a,_bp
      000192 24 08            [12]  410 	add	a,#0x08
      000194 F8               [12]  411 	mov	r0,a
      000195 74 04            [12]  412 	mov	a,#0x04
      000197 26               [12]  413 	add	a,@r0
      000198 FE               [12]  414 	mov	r6,a
      000199 E4               [12]  415 	clr	a
      00019A 08               [12]  416 	inc	r0
      00019B 36               [12]  417 	addc	a,@r0
      00019C FF               [12]  418 	mov	r7,a
      00019D E5*00            [12]  419 	mov	a,_bp
      00019F 24 0A            [12]  420 	add	a,#0x0a
      0001A1 F8               [12]  421 	mov	r0,a
      0001A2 A6 06            [24]  422 	mov	@r0,ar6
      0001A4 08               [12]  423 	inc	r0
      0001A5 A6 07            [24]  424 	mov	@r0,ar7
      0001A7 02r02r5E         [24]  425 	ljmp	00115$
      0001AA                        426 00104$:
                                    427 ;	_realloc.c:128: ret = malloc(size - HEADER_SIZE);
      0001AA E5*00            [12]  428 	mov	a,_bp
      0001AC 24 FC            [12]  429 	add	a,#0xfc
      0001AE F8               [12]  430 	mov	r0,a
      0001AF E6               [12]  431 	mov	a,@r0
      0001B0 24 FC            [12]  432 	add	a,#0xFC
      0001B2 F5 82            [12]  433 	mov	dpl,a
      0001B4 08               [12]  434 	inc	r0
      0001B5 E6               [12]  435 	mov	a,@r0
      0001B6 34 FF            [12]  436 	addc	a,#0xFF
      0001B8 F5 83            [12]  437 	mov	dph,a
      0001BA 12r00r00         [24]  438 	lcall	_malloc
      0001BD AE 82            [24]  439 	mov	r6,dpl
      0001BF AF 83            [24]  440 	mov	r7,dph
      0001C1 E5*00            [12]  441 	mov	a,_bp
      0001C3 24 0A            [12]  442 	add	a,#0x0a
      0001C5 F8               [12]  443 	mov	r0,a
      0001C6 A6 06            [24]  444 	mov	@r0,ar6
      0001C8 08               [12]  445 	inc	r0
      0001C9 A6 07            [24]  446 	mov	@r0,ar7
                                    447 ;	_realloc.c:129: if (ret)
      0001CB E5*00            [12]  448 	mov	a,_bp
      0001CD 24 0A            [12]  449 	add	a,#0x0a
      0001CF F8               [12]  450 	mov	r0,a
      0001D0 E6               [12]  451 	mov	a,@r0
      0001D1 08               [12]  452 	inc	r0
      0001D2 46               [12]  453 	orl	a,@r0
      0001D3 70 03            [24]  454 	jnz	00142$
      0001D5 02r02r5E         [24]  455 	ljmp	00115$
      0001D8                        456 00142$:
                                    457 ;	_realloc.c:131: memcpy(ret, MEM(pthis), pthis->len - HEADER_SIZE);
      0001D8 E5*00            [12]  458 	mov	a,_bp
      0001DA 24 06            [12]  459 	add	a,#0x06
      0001DC F8               [12]  460 	mov	r0,a
      0001DD 86 82            [24]  461 	mov	dpl,@r0
      0001DF 08               [12]  462 	inc	r0
      0001E0 86 83            [24]  463 	mov	dph,@r0
      0001E2 A3               [24]  464 	inc	dptr
      0001E3 A3               [24]  465 	inc	dptr
      0001E4 E0               [24]  466 	movx	a,@dptr
      0001E5 FE               [12]  467 	mov	r6,a
      0001E6 A3               [24]  468 	inc	dptr
      0001E7 E0               [24]  469 	movx	a,@dptr
      0001E8 FF               [12]  470 	mov	r7,a
      0001E9 E5*00            [12]  471 	mov	a,_bp
      0001EB 24 04            [12]  472 	add	a,#0x04
      0001ED F8               [12]  473 	mov	r0,a
      0001EE EE               [12]  474 	mov	a,r6
      0001EF 24 FC            [12]  475 	add	a,#0xFC
      0001F1 F6               [12]  476 	mov	@r0,a
      0001F2 EF               [12]  477 	mov	a,r7
      0001F3 34 FF            [12]  478 	addc	a,#0xFF
      0001F5 08               [12]  479 	inc	r0
      0001F6 F6               [12]  480 	mov	@r0,a
      0001F7 E5*00            [12]  481 	mov	a,_bp
      0001F9 24 06            [12]  482 	add	a,#0x06
      0001FB F8               [12]  483 	mov	r0,a
      0001FC 74 04            [12]  484 	mov	a,#0x04
      0001FE 26               [12]  485 	add	a,@r0
      0001FF FC               [12]  486 	mov	r4,a
      000200 E4               [12]  487 	clr	a
      000201 08               [12]  488 	inc	r0
      000202 36               [12]  489 	addc	a,@r0
      000203 FD               [12]  490 	mov	r5,a
      000204 7B 00            [12]  491 	mov	r3,#0x00
      000206 E5*00            [12]  492 	mov	a,_bp
      000208 24 0A            [12]  493 	add	a,#0x0a
      00020A F8               [12]  494 	mov	r0,a
      00020B 86 02            [24]  495 	mov	ar2,@r0
      00020D 08               [12]  496 	inc	r0
      00020E 86 06            [24]  497 	mov	ar6,@r0
      000210 7F 00            [12]  498 	mov	r7,#0x00
      000212 E5*00            [12]  499 	mov	a,_bp
      000214 24 04            [12]  500 	add	a,#0x04
      000216 F8               [12]  501 	mov	r0,a
      000217 E6               [12]  502 	mov	a,@r0
      000218 C0 E0            [24]  503 	push	acc
      00021A 08               [12]  504 	inc	r0
      00021B E6               [12]  505 	mov	a,@r0
      00021C C0 E0            [24]  506 	push	acc
      00021E C0 04            [24]  507 	push	ar4
      000220 C0 05            [24]  508 	push	ar5
      000222 C0 03            [24]  509 	push	ar3
      000224 8A 82            [24]  510 	mov	dpl,r2
      000226 8E 83            [24]  511 	mov	dph,r6
      000228 8F F0            [24]  512 	mov	b,r7
      00022A 12r00r00         [24]  513 	lcall	_memcpy
      00022D E5 81            [12]  514 	mov	a,sp
      00022F 24 FB            [12]  515 	add	a,#0xfb
      000231 F5 81            [12]  516 	mov	sp,a
                                    517 ;	_realloc.c:132: free(p);
      000233 A8*00            [24]  518 	mov	r0,_bp
      000235 08               [12]  519 	inc	r0
      000236 86 82            [24]  520 	mov	dpl,@r0
      000238 08               [12]  521 	inc	r0
      000239 86 83            [24]  522 	mov	dph,@r0
      00023B 08               [12]  523 	inc	r0
      00023C 86 F0            [24]  524 	mov	b,@r0
      00023E 12r00r00         [24]  525 	lcall	_free
      000241 80 1B            [24]  526 	sjmp	00115$
      000243                        527 00114$:
                                    528 ;	_realloc.c:140: ret = malloc(size);
      000243 E5*00            [12]  529 	mov	a,_bp
      000245 24 FC            [12]  530 	add	a,#0xfc
      000247 F8               [12]  531 	mov	r0,a
      000248 86 82            [24]  532 	mov	dpl,@r0
      00024A 08               [12]  533 	inc	r0
      00024B 86 83            [24]  534 	mov	dph,@r0
      00024D 12r00r00         [24]  535 	lcall	_malloc
      000250 AE 82            [24]  536 	mov	r6,dpl
      000252 AF 83            [24]  537 	mov	r7,dph
      000254 E5*00            [12]  538 	mov	a,_bp
      000256 24 0A            [12]  539 	add	a,#0x0a
      000258 F8               [12]  540 	mov	r0,a
      000259 A6 06            [24]  541 	mov	@r0,ar6
      00025B 08               [12]  542 	inc	r0
      00025C A6 07            [24]  543 	mov	@r0,ar7
      00025E                        544 00115$:
      00025E D0 D0            [24]  545 	pop	psw
      000260 92 AF            [24]  546 	mov	ea,c
                                    547 ;	_realloc.c:143: return ret;
      000262 E5*00            [12]  548 	mov	a,_bp
      000264 24 0A            [12]  549 	add	a,#0x0a
      000266 F8               [12]  550 	mov	r0,a
      000267 86 82            [24]  551 	mov	dpl,@r0
      000269 08               [12]  552 	inc	r0
      00026A 86 83            [24]  553 	mov	dph,@r0
      00026C 85*00 81         [24]  554 	mov	sp,_bp
      00026F D0*00            [24]  555 	pop	_bp
      000271 22               [24]  556 	ret
                                    557 	.area CSEG    (CODE)
                                    558 	.area CONST   (CODE)
                                    559 	.area XINIT   (CODE)
                                    560 	.area CABS    (ABS,CODE)
