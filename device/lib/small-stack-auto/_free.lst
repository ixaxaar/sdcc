                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:04 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _free
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __sdcc_find_memheader
                                     13 	.globl __sdcc_prev_memheader
                                     14 	.globl _free
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 	.area RSEG    (ABS,DATA)
      000000                         19 	.org 0x0000
                                     20 ;--------------------------------------------------------
                                     21 ; special function bits
                                     22 ;--------------------------------------------------------
                                     23 	.area RSEG    (ABS,DATA)
      000000                         24 	.org 0x0000
                                     25 ;--------------------------------------------------------
                                     26 ; overlayable register banks
                                     27 ;--------------------------------------------------------
                                     28 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         29 	.ds 8
                                     30 ;--------------------------------------------------------
                                     31 ; internal ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DSEG    (DATA)
      000000                         34 __sdcc_prev_memheader::
      000000                         35 	.ds 2
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable items in internal ram 
                                     38 ;--------------------------------------------------------
                                     39 ;--------------------------------------------------------
                                     40 ; indirectly addressable internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area ISEG    (DATA)
                                     43 ;--------------------------------------------------------
                                     44 ; absolute internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area IABS    (ABS,DATA)
                                     47 	.area IABS    (ABS,DATA)
                                     48 ;--------------------------------------------------------
                                     49 ; bit data
                                     50 ;--------------------------------------------------------
                                     51 	.area BSEG    (BIT)
                                     52 ;--------------------------------------------------------
                                     53 ; paged external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area PSEG    (PAG,XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XSEG    (XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; absolute external ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XABS    (ABS,XDATA)
                                     64 ;--------------------------------------------------------
                                     65 ; external initialized ram data
                                     66 ;--------------------------------------------------------
                                     67 	.area XISEG   (XDATA)
                                     68 	.area HOME    (CODE)
                                     69 	.area GSINIT0 (CODE)
                                     70 	.area GSINIT1 (CODE)
                                     71 	.area GSINIT2 (CODE)
                                     72 	.area GSINIT3 (CODE)
                                     73 	.area GSINIT4 (CODE)
                                     74 	.area GSINIT5 (CODE)
                                     75 	.area GSINIT  (CODE)
                                     76 	.area GSFINAL (CODE)
                                     77 	.area CSEG    (CODE)
                                     78 ;--------------------------------------------------------
                                     79 ; global & static initialisations
                                     80 ;--------------------------------------------------------
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT  (CODE)
                                     83 	.area GSFINAL (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME    (CODE)
                                     89 	.area HOME    (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; code
                                     92 ;--------------------------------------------------------
                                     93 	.area CSEG    (CODE)
                                     94 ;------------------------------------------------------------
                                     95 ;Allocation info for local variables in function '_sdcc_find_memheader'
                                     96 ;------------------------------------------------------------
                                     97 ;p                         Allocated to registers r6 r7 
                                     98 ;pthis                     Allocated to registers r6 r7 
                                     99 ;cur_header                Allocated to registers r4 r5 
                                    100 ;------------------------------------------------------------
                                    101 ;	_free.c:129: MEMHEADER __xdata * _sdcc_find_memheader(void __xdata * p)
                                    102 ;	-----------------------------------------
                                    103 ;	 function _sdcc_find_memheader
                                    104 ;	-----------------------------------------
      000000                        105 __sdcc_find_memheader:
                           000007   106 	ar7 = 0x07
                           000006   107 	ar6 = 0x06
                           000005   108 	ar5 = 0x05
                           000004   109 	ar4 = 0x04
                           000003   110 	ar3 = 0x03
                           000002   111 	ar2 = 0x02
                           000001   112 	ar1 = 0x01
                           000000   113 	ar0 = 0x00
      000000 AE 82            [24]  114 	mov	r6,dpl
      000002 AF 83            [24]  115 	mov	r7,dph
                                    116 ;	_free.c:134: if (!p)
      000004 EE               [12]  117 	mov	a,r6
      000005 4F               [12]  118 	orl	a,r7
      000006 70 04            [24]  119 	jnz	00102$
                                    120 ;	_free.c:135: return NULL;
      000008 90 00 00         [24]  121 	mov	dptr,#0x0000
      00000B 22               [24]  122 	ret
      00000C                        123 00102$:
                                    124 ;	_free.c:136: pthis = (MEMHEADER __xdata *) p;
                                    125 ;	_free.c:137: pthis -= 1; //to start of header
      00000C EE               [12]  126 	mov	a,r6
      00000D 24 FC            [12]  127 	add	a,#0xFC
      00000F FE               [12]  128 	mov	r6,a
      000010 EF               [12]  129 	mov	a,r7
      000011 34 FF            [12]  130 	addc	a,#0xFF
      000013 FF               [12]  131 	mov	r7,a
                                    132 ;	_free.c:138: cur_header = _sdcc_first_memheader;
      000014 AC*00            [24]  133 	mov	r4,__sdcc_first_memheader
      000016 AD*01            [24]  134 	mov	r5,(__sdcc_first_memheader + 1)
                                    135 ;	_free.c:139: _sdcc_prev_memheader = NULL;
      000018 E4               [12]  136 	clr	a
      000019 F5*00            [12]  137 	mov	__sdcc_prev_memheader,a
      00001B F5*01            [12]  138 	mov	(__sdcc_prev_memheader + 1),a
                                    139 ;	_free.c:140: while (cur_header && pthis != cur_header)
      00001D                        140 00104$:
      00001D EC               [12]  141 	mov	a,r4
      00001E 4D               [12]  142 	orl	a,r5
      00001F 60 19            [24]  143 	jz	00106$
      000021 EE               [12]  144 	mov	a,r6
      000022 B5 04 06         [24]  145 	cjne	a,ar4,00123$
      000025 EF               [12]  146 	mov	a,r7
      000026 B5 05 02         [24]  147 	cjne	a,ar5,00123$
      000029 80 0F            [24]  148 	sjmp	00106$
      00002B                        149 00123$:
                                    150 ;	_free.c:142: _sdcc_prev_memheader = cur_header;
      00002B 8C*00            [24]  151 	mov	__sdcc_prev_memheader,r4
      00002D 8D*01            [24]  152 	mov	(__sdcc_prev_memheader + 1),r5
                                    153 ;	_free.c:143: cur_header = cur_header->next;
      00002F 8C 82            [24]  154 	mov	dpl,r4
      000031 8D 83            [24]  155 	mov	dph,r5
      000033 E0               [24]  156 	movx	a,@dptr
      000034 FC               [12]  157 	mov	r4,a
      000035 A3               [24]  158 	inc	dptr
      000036 E0               [24]  159 	movx	a,@dptr
      000037 FD               [12]  160 	mov	r5,a
      000038 80 E3            [24]  161 	sjmp	00104$
      00003A                        162 00106$:
                                    163 ;	_free.c:145: return (cur_header);
      00003A 8C 82            [24]  164 	mov	dpl,r4
      00003C 8D 83            [24]  165 	mov	dph,r5
      00003E 22               [24]  166 	ret
                                    167 ;------------------------------------------------------------
                                    168 ;Allocation info for local variables in function 'free'
                                    169 ;------------------------------------------------------------
                                    170 ;p                         Allocated to registers r5 r6 r7 
                                    171 ;pthis                     Allocated to registers r6 r7 
                                    172 ;------------------------------------------------------------
                                    173 ;	_free.c:148: void free (void * p)
                                    174 ;	-----------------------------------------
                                    175 ;	 function free
                                    176 ;	-----------------------------------------
      00003F                        177 _free:
      00003F AD 82            [24]  178 	mov	r5,dpl
      000041 AE 83            [24]  179 	mov	r6,dph
      000043 AF F0            [24]  180 	mov	r7,b
                                    181 ;	_free.c:166: }
      000045 D3               [12]  182 	setb	c
      000046 10 AF 01         [24]  183 	jbc	ea,00114$
      000049 C3               [12]  184 	clr	c
      00004A                        185 00114$:
      00004A C0 D0            [24]  186 	push	psw
                                    187 ;	_free.c:154: pthis = _sdcc_find_memheader(p);
      00004C 8D 82            [24]  188 	mov	dpl,r5
      00004E 8E 83            [24]  189 	mov	dph,r6
      000050 12r00r00         [24]  190 	lcall	__sdcc_find_memheader
      000053 AE 82            [24]  191 	mov	r6,dpl
      000055 AF 83            [24]  192 	mov	r7,dph
                                    193 ;	_free.c:155: if (pthis) //For allocated pointers only!
      000057 EE               [12]  194 	mov	a,r6
      000058 4F               [12]  195 	orl	a,r7
      000059 60 28            [24]  196 	jz	00105$
                                    197 ;	_free.c:157: if (!_sdcc_prev_memheader)
      00005B E5*00            [12]  198 	mov	a,__sdcc_prev_memheader
      00005D 45*01            [12]  199 	orl	a,(__sdcc_prev_memheader + 1)
      00005F 70 0C            [24]  200 	jnz	00102$
                                    201 ;	_free.c:159: pthis->len = 0;
      000061 8E 82            [24]  202 	mov	dpl,r6
      000063 8F 83            [24]  203 	mov	dph,r7
      000065 A3               [24]  204 	inc	dptr
      000066 A3               [24]  205 	inc	dptr
      000067 E4               [12]  206 	clr	a
      000068 F0               [24]  207 	movx	@dptr,a
      000069 A3               [24]  208 	inc	dptr
      00006A F0               [24]  209 	movx	@dptr,a
      00006B 80 16            [24]  210 	sjmp	00105$
      00006D                        211 00102$:
                                    212 ;	_free.c:163: _sdcc_prev_memheader->next = pthis->next;
      00006D AC*00            [24]  213 	mov	r4,__sdcc_prev_memheader
      00006F AD*01            [24]  214 	mov	r5,(__sdcc_prev_memheader + 1)
      000071 8E 82            [24]  215 	mov	dpl,r6
      000073 8F 83            [24]  216 	mov	dph,r7
      000075 E0               [24]  217 	movx	a,@dptr
      000076 FE               [12]  218 	mov	r6,a
      000077 A3               [24]  219 	inc	dptr
      000078 E0               [24]  220 	movx	a,@dptr
      000079 FF               [12]  221 	mov	r7,a
      00007A 8C 82            [24]  222 	mov	dpl,r4
      00007C 8D 83            [24]  223 	mov	dph,r5
      00007E EE               [12]  224 	mov	a,r6
      00007F F0               [24]  225 	movx	@dptr,a
      000080 EF               [12]  226 	mov	a,r7
      000081 A3               [24]  227 	inc	dptr
      000082 F0               [24]  228 	movx	@dptr,a
      000083                        229 00105$:
      000083 D0 D0            [24]  230 	pop	psw
      000085 92 AF            [24]  231 	mov	ea,c
      000087 22               [24]  232 	ret
                                    233 	.area CSEG    (CODE)
                                    234 	.area CONST   (CODE)
                                    235 	.area XINIT   (CODE)
                                    236 	.area CABS    (ABS,CODE)
