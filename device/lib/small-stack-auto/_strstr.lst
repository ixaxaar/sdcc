                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:04 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _strstr
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strstr
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'strstr'
                                     92 ;------------------------------------------------------------
                                     93 ;str2                      Allocated to stack - _bp -5
                                     94 ;str1                      Allocated to registers r5 r6 r7 
                                     95 ;cp                        Allocated to stack - _bp +8
                                     96 ;s1                        Allocated to registers r5 r6 r7 
                                     97 ;s2                        Allocated to stack - _bp +11
                                     98 ;sloc0                     Allocated to stack - _bp +1
                                     99 ;sloc1                     Allocated to stack - _bp +4
                                    100 ;sloc2                     Allocated to stack - _bp +5
                                    101 ;sloc3                     Allocated to stack - _bp +6
                                    102 ;------------------------------------------------------------
                                    103 ;	_strstr.c:31: char * strstr (
                                    104 ;	-----------------------------------------
                                    105 ;	 function strstr
                                    106 ;	-----------------------------------------
      000000                        107 _strstr:
                           000007   108 	ar7 = 0x07
                           000006   109 	ar6 = 0x06
                           000005   110 	ar5 = 0x05
                           000004   111 	ar4 = 0x04
                           000003   112 	ar3 = 0x03
                           000002   113 	ar2 = 0x02
                           000001   114 	ar1 = 0x01
                           000000   115 	ar0 = 0x00
      000000 C0*00            [24]  116 	push	_bp
      000002 E5 81            [12]  117 	mov	a,sp
      000004 F5*00            [12]  118 	mov	_bp,a
      000006 24 0D            [12]  119 	add	a,#0x0D
      000008 F5 81            [12]  120 	mov	sp,a
      00000A AD 82            [24]  121 	mov	r5,dpl
      00000C AE 83            [24]  122 	mov	r6,dph
      00000E AF F0            [24]  123 	mov	r7,b
                                    124 ;	_strstr.c:36: const char * cp = str1;
      000010 E5*00            [12]  125 	mov	a,_bp
      000012 24 08            [12]  126 	add	a,#0x08
      000014 F8               [12]  127 	mov	r0,a
      000015 A6 05            [24]  128 	mov	@r0,ar5
      000017 08               [12]  129 	inc	r0
      000018 A6 06            [24]  130 	mov	@r0,ar6
      00001A 08               [12]  131 	inc	r0
      00001B A6 07            [24]  132 	mov	@r0,ar7
                                    133 ;	_strstr.c:40: if ( !*str2 )
      00001D E5*00            [12]  134 	mov	a,_bp
      00001F 24 FB            [12]  135 	add	a,#0xfb
      000021 F8               [12]  136 	mov	r0,a
      000022 E5*00            [12]  137 	mov	a,_bp
      000024 24 0B            [12]  138 	add	a,#0x0b
      000026 F9               [12]  139 	mov	r1,a
      000027 E6               [12]  140 	mov	a,@r0
      000028 F7               [12]  141 	mov	@r1,a
      000029 08               [12]  142 	inc	r0
      00002A 09               [12]  143 	inc	r1
      00002B E6               [12]  144 	mov	a,@r0
      00002C F7               [12]  145 	mov	@r1,a
      00002D 08               [12]  146 	inc	r0
      00002E 09               [12]  147 	inc	r1
      00002F E6               [12]  148 	mov	a,@r0
      000030 F7               [12]  149 	mov	@r1,a
      000031 E5*00            [12]  150 	mov	a,_bp
      000033 24 0B            [12]  151 	add	a,#0x0b
      000035 F8               [12]  152 	mov	r0,a
      000036 86 82            [24]  153 	mov	dpl,@r0
      000038 08               [12]  154 	inc	r0
      000039 86 83            [24]  155 	mov	dph,@r0
      00003B 08               [12]  156 	inc	r0
      00003C 86 F0            [24]  157 	mov	b,@r0
      00003E 12r00r00         [24]  158 	lcall	__gptrget
      000041 70 09            [24]  159 	jnz	00122$
                                    160 ;	_strstr.c:41: return str1;
      000043 8D 82            [24]  161 	mov	dpl,r5
      000045 8E 83            [24]  162 	mov	dph,r6
      000047 8F F0            [24]  163 	mov	b,r7
      000049 02r01r23         [24]  164 	ljmp	00113$
                                    165 ;	_strstr.c:43: while (*cp)
      00004C                        166 00122$:
      00004C                        167 00110$:
      00004C 8D 82            [24]  168 	mov	dpl,r5
      00004E 8E 83            [24]  169 	mov	dph,r6
      000050 8F F0            [24]  170 	mov	b,r7
      000052 12r00r00         [24]  171 	lcall	__gptrget
      000055 70 03            [24]  172 	jnz	00141$
      000057 02r01r1D         [24]  173 	ljmp	00112$
      00005A                        174 00141$:
                                    175 ;	_strstr.c:46: s2 = str2;
      00005A E5*00            [12]  176 	mov	a,_bp
      00005C 24 0B            [12]  177 	add	a,#0x0b
      00005E F8               [12]  178 	mov	r0,a
      00005F 86 02            [24]  179 	mov	ar2,@r0
      000061 08               [12]  180 	inc	r0
      000062 86 03            [24]  181 	mov	ar3,@r0
      000064 08               [12]  182 	inc	r0
      000065 86 04            [24]  183 	mov	ar4,@r0
                                    184 ;	_strstr.c:48: while ( *s1 && *s2 && !(*s1-*s2) )
      000067 A8*00            [24]  185 	mov	r0,_bp
      000069 08               [12]  186 	inc	r0
      00006A A6 05            [24]  187 	mov	@r0,ar5
      00006C 08               [12]  188 	inc	r0
      00006D A6 06            [24]  189 	mov	@r0,ar6
      00006F 08               [12]  190 	inc	r0
      000070 A6 07            [24]  191 	mov	@r0,ar7
      000072                        192 00105$:
      000072 A8*00            [24]  193 	mov	r0,_bp
      000074 08               [12]  194 	inc	r0
      000075 86 82            [24]  195 	mov	dpl,@r0
      000077 08               [12]  196 	inc	r0
      000078 86 83            [24]  197 	mov	dph,@r0
      00007A 08               [12]  198 	inc	r0
      00007B 86 F0            [24]  199 	mov	b,@r0
      00007D E5*00            [12]  200 	mov	a,_bp
      00007F 24 04            [12]  201 	add	a,#0x04
      000081 F9               [12]  202 	mov	r1,a
      000082 12r00r00         [24]  203 	lcall	__gptrget
      000085 F7               [12]  204 	mov	@r1,a
      000086 E5*00            [12]  205 	mov	a,_bp
      000088 24 04            [12]  206 	add	a,#0x04
      00008A F8               [12]  207 	mov	r0,a
      00008B E6               [12]  208 	mov	a,@r0
      00008C 60 60            [24]  209 	jz	00107$
      00008E 8A 82            [24]  210 	mov	dpl,r2
      000090 8B 83            [24]  211 	mov	dph,r3
      000092 8C F0            [24]  212 	mov	b,r4
      000094 E5*00            [12]  213 	mov	a,_bp
      000096 24 05            [12]  214 	add	a,#0x05
      000098 F8               [12]  215 	mov	r0,a
      000099 12r00r00         [24]  216 	lcall	__gptrget
      00009C F6               [12]  217 	mov	@r0,a
      00009D E5*00            [12]  218 	mov	a,_bp
      00009F 24 05            [12]  219 	add	a,#0x05
      0000A1 F8               [12]  220 	mov	r0,a
      0000A2 E6               [12]  221 	mov	a,@r0
      0000A3 60 49            [24]  222 	jz	00107$
      0000A5 C0 05            [24]  223 	push	ar5
      0000A7 C0 06            [24]  224 	push	ar6
      0000A9 C0 07            [24]  225 	push	ar7
      0000AB E5*00            [12]  226 	mov	a,_bp
      0000AD 24 04            [12]  227 	add	a,#0x04
      0000AF F8               [12]  228 	mov	r0,a
      0000B0 E5*00            [12]  229 	mov	a,_bp
      0000B2 24 06            [12]  230 	add	a,#0x06
      0000B4 F9               [12]  231 	mov	r1,a
      0000B5 E6               [12]  232 	mov	a,@r0
      0000B6 F7               [12]  233 	mov	@r1,a
      0000B7 E6               [12]  234 	mov	a,@r0
      0000B8 33               [12]  235 	rlc	a
      0000B9 95 E0            [12]  236 	subb	a,acc
      0000BB 09               [12]  237 	inc	r1
      0000BC F7               [12]  238 	mov	@r1,a
      0000BD E5*00            [12]  239 	mov	a,_bp
      0000BF 24 05            [12]  240 	add	a,#0x05
      0000C1 F8               [12]  241 	mov	r0,a
      0000C2 86 05            [24]  242 	mov	ar5,@r0
      0000C4 E6               [12]  243 	mov	a,@r0
      0000C5 33               [12]  244 	rlc	a
      0000C6 95 E0            [12]  245 	subb	a,acc
      0000C8 FF               [12]  246 	mov	r7,a
      0000C9 E5*00            [12]  247 	mov	a,_bp
      0000CB 24 06            [12]  248 	add	a,#0x06
      0000CD F8               [12]  249 	mov	r0,a
      0000CE E6               [12]  250 	mov	a,@r0
      0000CF C3               [12]  251 	clr	c
      0000D0 9D               [12]  252 	subb	a,r5
      0000D1 FD               [12]  253 	mov	r5,a
      0000D2 08               [12]  254 	inc	r0
      0000D3 E6               [12]  255 	mov	a,@r0
      0000D4 9F               [12]  256 	subb	a,r7
      0000D5 4D               [12]  257 	orl	a,r5
      0000D6 D0 07            [24]  258 	pop	ar7
      0000D8 D0 06            [24]  259 	pop	ar6
      0000DA D0 05            [24]  260 	pop	ar5
      0000DC 70 10            [24]  261 	jnz	00107$
                                    262 ;	_strstr.c:49: s1++, s2++;
      0000DE A8*00            [24]  263 	mov	r0,_bp
      0000E0 08               [12]  264 	inc	r0
      0000E1 06               [12]  265 	inc	@r0
      0000E2 B6 00 02         [24]  266 	cjne	@r0,#0x00,00145$
      0000E5 08               [12]  267 	inc	r0
      0000E6 06               [12]  268 	inc	@r0
      0000E7                        269 00145$:
      0000E7 0A               [12]  270 	inc	r2
      0000E8 BA 00 87         [24]  271 	cjne	r2,#0x00,00105$
      0000EB 0B               [12]  272 	inc	r3
      0000EC 80 84            [24]  273 	sjmp	00105$
      0000EE                        274 00107$:
                                    275 ;	_strstr.c:51: if (!*s2)
      0000EE 8A 82            [24]  276 	mov	dpl,r2
      0000F0 8B 83            [24]  277 	mov	dph,r3
      0000F2 8C F0            [24]  278 	mov	b,r4
      0000F4 12r00r00         [24]  279 	lcall	__gptrget
      0000F7 70 0F            [24]  280 	jnz	00109$
                                    281 ;	_strstr.c:52: return( (char*)cp );
      0000F9 E5*00            [12]  282 	mov	a,_bp
      0000FB 24 08            [12]  283 	add	a,#0x08
      0000FD F8               [12]  284 	mov	r0,a
      0000FE 86 82            [24]  285 	mov	dpl,@r0
      000100 08               [12]  286 	inc	r0
      000101 86 83            [24]  287 	mov	dph,@r0
      000103 08               [12]  288 	inc	r0
      000104 86 F0            [24]  289 	mov	b,@r0
      000106 80 1B            [24]  290 	sjmp	00113$
      000108                        291 00109$:
                                    292 ;	_strstr.c:54: cp++;
      000108 0D               [12]  293 	inc	r5
      000109 BD 00 01         [24]  294 	cjne	r5,#0x00,00148$
      00010C 0E               [12]  295 	inc	r6
      00010D                        296 00148$:
      00010D E5*00            [12]  297 	mov	a,_bp
      00010F 24 08            [12]  298 	add	a,#0x08
      000111 F8               [12]  299 	mov	r0,a
      000112 A6 05            [24]  300 	mov	@r0,ar5
      000114 08               [12]  301 	inc	r0
      000115 A6 06            [24]  302 	mov	@r0,ar6
      000117 08               [12]  303 	inc	r0
      000118 A6 07            [24]  304 	mov	@r0,ar7
      00011A 02r00r4C         [24]  305 	ljmp	00110$
      00011D                        306 00112$:
                                    307 ;	_strstr.c:57: return (NULL) ;
      00011D 90 00 00         [24]  308 	mov	dptr,#0x0000
      000120 75 F0 00         [24]  309 	mov	b,#0x00
      000123                        310 00113$:
      000123 85*00 81         [24]  311 	mov	sp,_bp
      000126 D0*00            [24]  312 	pop	_bp
      000128 22               [24]  313 	ret
                                    314 	.area CSEG    (CODE)
                                    315 	.area CONST   (CODE)
                                    316 	.area XINIT   (CODE)
                                    317 	.area CABS    (ABS,CODE)
