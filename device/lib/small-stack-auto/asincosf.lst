                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:03 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module asincosf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _asincosf
                                     13 	.globl _ldexpf
                                     14 	.globl _fabsf
                                     15 	.globl _sqrtf
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; overlayable bit register bank
                                     33 ;--------------------------------------------------------
                                     34 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         35 bits:
      000000                         36 	.ds 1
                           008000    37 	b0 = bits[0]
                           008100    38 	b1 = bits[1]
                           008200    39 	b2 = bits[2]
                           008300    40 	b3 = bits[3]
                           008400    41 	b4 = bits[4]
                           008500    42 	b5 = bits[5]
                           008600    43 	b6 = bits[6]
                           008700    44 	b7 = bits[7]
                                     45 ;--------------------------------------------------------
                                     46 ; internal ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DSEG    (DATA)
                                     49 ;--------------------------------------------------------
                                     50 ; overlayable items in internal ram 
                                     51 ;--------------------------------------------------------
                                     52 ;--------------------------------------------------------
                                     53 ; indirectly addressable internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area ISEG    (DATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute internal ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area IABS    (ABS,DATA)
                                     60 	.area IABS    (ABS,DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; bit data
                                     63 ;--------------------------------------------------------
                                     64 	.area BSEG    (BIT)
                                     65 ;--------------------------------------------------------
                                     66 ; paged external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area PSEG    (PAG,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XSEG    (XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; absolute external ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XABS    (ABS,XDATA)
                                     77 ;--------------------------------------------------------
                                     78 ; external initialized ram data
                                     79 ;--------------------------------------------------------
                                     80 	.area XISEG   (XDATA)
                                     81 	.area HOME    (CODE)
                                     82 	.area GSINIT0 (CODE)
                                     83 	.area GSINIT1 (CODE)
                                     84 	.area GSINIT2 (CODE)
                                     85 	.area GSINIT3 (CODE)
                                     86 	.area GSINIT4 (CODE)
                                     87 	.area GSINIT5 (CODE)
                                     88 	.area GSINIT  (CODE)
                                     89 	.area GSFINAL (CODE)
                                     90 	.area CSEG    (CODE)
                                     91 ;--------------------------------------------------------
                                     92 ; global & static initialisations
                                     93 ;--------------------------------------------------------
                                     94 	.area HOME    (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.area GSFINAL (CODE)
                                     97 	.area GSINIT  (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; Home
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME    (CODE)
                                    102 	.area HOME    (CODE)
                                    103 ;--------------------------------------------------------
                                    104 ; code
                                    105 ;--------------------------------------------------------
                                    106 	.area CSEG    (CODE)
                                    107 ;------------------------------------------------------------
                                    108 ;Allocation info for local variables in function 'asincosf'
                                    109 ;------------------------------------------------------------
                                    110 ;isacos                    Allocated to registers b0 
                                    111 ;x                         Allocated to stack - _bp +1
                                    112 ;y                         Allocated to registers r2 r4 r6 r7 
                                    113 ;g                         Allocated to stack - _bp +13
                                    114 ;r                         Allocated to stack - _bp +17
                                    115 ;i                         Allocated to registers r5 
                                    116 ;quartPI                   Allocated to registers b1 
                                    117 ;sloc0                     Allocated to stack - _bp +5
                                    118 ;sloc1                     Allocated to stack - _bp +9
                                    119 ;------------------------------------------------------------
                                    120 ;	asincosf.c:47: float asincosf(const float x, const bool isacos)
                                    121 ;	-----------------------------------------
                                    122 ;	 function asincosf
                                    123 ;	-----------------------------------------
      000000                        124 _asincosf:
                           000007   125 	ar7 = 0x07
                           000006   126 	ar6 = 0x06
                           000005   127 	ar5 = 0x05
                           000004   128 	ar4 = 0x04
                           000003   129 	ar3 = 0x03
                           000002   130 	ar2 = 0x02
                           000001   131 	ar1 = 0x01
                           000000   132 	ar0 = 0x00
      000000 C0*00            [24]  133 	push	_bp
      000002 85 81*00         [24]  134 	mov	_bp,sp
      000005 C0 82            [24]  135 	push	dpl
      000007 C0 83            [24]  136 	push	dph
      000009 C0 F0            [24]  137 	push	b
      00000B C0 E0            [24]  138 	push	acc
      00000D E5 81            [12]  139 	mov	a,sp
      00000F 24 10            [12]  140 	add	a,#0x10
      000011 F5 81            [12]  141 	mov	sp,a
                                    142 ;	asincosf.c:51: bool quartPI = isacos;
      000013 A2*00            [12]  143 	mov	c,b0
      000015 92*00            [24]  144 	mov	b1,c
                                    145 ;	asincosf.c:56: y = fabsf(x);
      000017 A8*00            [24]  146 	mov	r0,_bp
      000019 08               [12]  147 	inc	r0
      00001A 86 82            [24]  148 	mov	dpl,@r0
      00001C 08               [12]  149 	inc	r0
      00001D 86 83            [24]  150 	mov	dph,@r0
      00001F 08               [12]  151 	inc	r0
      000020 86 F0            [24]  152 	mov	b,@r0
      000022 08               [12]  153 	inc	r0
      000023 E6               [12]  154 	mov	a,@r0
      000024 C0*00            [24]  155 	push	bits
      000026 12r00r00         [24]  156 	lcall	_fabsf
      000029 AA 82            [24]  157 	mov	r2,dpl
      00002B AB 83            [24]  158 	mov	r3,dph
      00002D AE F0            [24]  159 	mov	r6,b
      00002F FF               [12]  160 	mov	r7,a
      000030 D0*00            [24]  161 	pop	bits
      000032 8B 04            [24]  162 	mov	ar4,r3
                                    163 ;	asincosf.c:57: if (y < EPS)
      000034 C0 07            [24]  164 	push	ar7
      000036 C0 06            [24]  165 	push	ar6
      000038 C0 04            [24]  166 	push	ar4
      00003A C0 02            [24]  167 	push	ar2
      00003C C0*00            [24]  168 	push	bits
      00003E E4               [12]  169 	clr	a
      00003F C0 E0            [24]  170 	push	acc
      000041 C0 E0            [24]  171 	push	acc
      000043 74 80            [12]  172 	mov	a,#0x80
      000045 C0 E0            [24]  173 	push	acc
      000047 74 39            [12]  174 	mov	a,#0x39
      000049 C0 E0            [24]  175 	push	acc
      00004B 8A 82            [24]  176 	mov	dpl,r2
      00004D 8C 83            [24]  177 	mov	dph,r4
      00004F 8E F0            [24]  178 	mov	b,r6
      000051 EF               [12]  179 	mov	a,r7
      000052 12r00r00         [24]  180 	lcall	___fslt
      000055 AB 82            [24]  181 	mov	r3,dpl
      000057 E5 81            [12]  182 	mov	a,sp
      000059 24 FC            [12]  183 	add	a,#0xfc
      00005B F5 81            [12]  184 	mov	sp,a
      00005D D0*00            [24]  185 	pop	bits
      00005F D0 02            [24]  186 	pop	ar2
      000061 D0 04            [24]  187 	pop	ar4
      000063 D0 06            [24]  188 	pop	ar6
      000065 D0 07            [24]  189 	pop	ar7
      000067 EB               [12]  190 	mov	a,r3
      000068 60 13            [24]  191 	jz	00107$
                                    192 ;	asincosf.c:59: r = y;
      00006A E5*00            [12]  193 	mov	a,_bp
      00006C 24 11            [12]  194 	add	a,#0x11
      00006E F8               [12]  195 	mov	r0,a
      00006F A6 02            [24]  196 	mov	@r0,ar2
      000071 08               [12]  197 	inc	r0
      000072 A6 04            [24]  198 	mov	@r0,ar4
      000074 08               [12]  199 	inc	r0
      000075 A6 06            [24]  200 	mov	@r0,ar6
      000077 08               [12]  201 	inc	r0
      000078 A6 07            [24]  202 	mov	@r0,ar7
      00007A 02r04r80         [24]  203 	ljmp	00108$
      00007D                        204 00107$:
                                    205 ;	asincosf.c:63: if (y > 0.5)
      00007D C0 07            [24]  206 	push	ar7
      00007F C0 06            [24]  207 	push	ar6
      000081 C0 04            [24]  208 	push	ar4
      000083 C0 02            [24]  209 	push	ar2
      000085 C0*00            [24]  210 	push	bits
      000087 E4               [12]  211 	clr	a
      000088 C0 E0            [24]  212 	push	acc
      00008A C0 E0            [24]  213 	push	acc
      00008C C0 E0            [24]  214 	push	acc
      00008E 74 3F            [12]  215 	mov	a,#0x3F
      000090 C0 E0            [24]  216 	push	acc
      000092 8A 82            [24]  217 	mov	dpl,r2
      000094 8C 83            [24]  218 	mov	dph,r4
      000096 8E F0            [24]  219 	mov	b,r6
      000098 EF               [12]  220 	mov	a,r7
      000099 12r00r00         [24]  221 	lcall	___fsgt
      00009C AD 82            [24]  222 	mov	r5,dpl
      00009E E5 81            [12]  223 	mov	a,sp
      0000A0 24 FC            [12]  224 	add	a,#0xfc
      0000A2 F5 81            [12]  225 	mov	sp,a
      0000A4 D0*00            [24]  226 	pop	bits
      0000A6 D0 02            [24]  227 	pop	ar2
      0000A8 D0 04            [24]  228 	pop	ar4
      0000AA D0 06            [24]  229 	pop	ar6
      0000AC D0 07            [24]  230 	pop	ar7
      0000AE ED               [12]  231 	mov	a,r5
      0000AF 70 03            [24]  232 	jnz	00138$
      0000B1 02r01rE8         [24]  233 	ljmp	00104$
      0000B4                        234 00138$:
                                    235 ;	asincosf.c:65: quartPI = !isacos;
      0000B4 A2*00            [12]  236 	mov	c,b0
      0000B6 B3               [12]  237 	cpl	c
      0000B7 92*00            [24]  238 	mov  b2,c
      0000B9 92*00            [24]  239 	mov	b1,c
                                    240 ;	asincosf.c:66: if (y > 1.0)
      0000BB C0 07            [24]  241 	push	ar7
      0000BD C0 06            [24]  242 	push	ar6
      0000BF C0 04            [24]  243 	push	ar4
      0000C1 C0 02            [24]  244 	push	ar2
      0000C3 C0*00            [24]  245 	push	bits
      0000C5 E4               [12]  246 	clr	a
      0000C6 C0 E0            [24]  247 	push	acc
      0000C8 C0 E0            [24]  248 	push	acc
      0000CA 74 80            [12]  249 	mov	a,#0x80
      0000CC C0 E0            [24]  250 	push	acc
      0000CE 74 3F            [12]  251 	mov	a,#0x3F
      0000D0 C0 E0            [24]  252 	push	acc
      0000D2 8A 82            [24]  253 	mov	dpl,r2
      0000D4 8C 83            [24]  254 	mov	dph,r4
      0000D6 8E F0            [24]  255 	mov	b,r6
      0000D8 EF               [12]  256 	mov	a,r7
      0000D9 12r00r00         [24]  257 	lcall	___fsgt
      0000DC AD 82            [24]  258 	mov	r5,dpl
      0000DE E5 81            [12]  259 	mov	a,sp
      0000E0 24 FC            [12]  260 	add	a,#0xfc
      0000E2 F5 81            [12]  261 	mov	sp,a
      0000E4 D0*00            [24]  262 	pop	bits
      0000E6 D0 02            [24]  263 	pop	ar2
      0000E8 D0 04            [24]  264 	pop	ar4
      0000EA D0 06            [24]  265 	pop	ar6
      0000EC D0 07            [24]  266 	pop	ar7
      0000EE ED               [12]  267 	mov	a,r5
      0000EF 60 0F            [24]  268 	jz	00102$
                                    269 ;	asincosf.c:68: errno = EDOM;
      0000F1 75*00 21         [24]  270 	mov	_errno,#0x21
      0000F4 75*01 00         [24]  271 	mov	(_errno + 1),#0x00
                                    272 ;	asincosf.c:69: return 0.0;
      0000F7 90 00 00         [24]  273 	mov	dptr,#(0x00&0x00ff)
      0000FA E4               [12]  274 	clr	a
      0000FB F5 F0            [12]  275 	mov	b,a
      0000FD 02r06rBD         [24]  276 	ljmp	00117$
      000100                        277 00102$:
                                    278 ;	asincosf.c:71: g = (0.5 - y) + 0.5;
      000100 C0*00            [24]  279 	push	bits
      000102 C0 02            [24]  280 	push	ar2
      000104 C0 04            [24]  281 	push	ar4
      000106 C0 06            [24]  282 	push	ar6
      000108 C0 07            [24]  283 	push	ar7
      00010A 90 00 00         [24]  284 	mov	dptr,#0x0000
      00010D 75 F0 80         [24]  285 	mov	b,#0x80
      000110 74 3F            [12]  286 	mov	a,#0x3F
      000112 12r00r00         [24]  287 	lcall	___fssub
      000115 AF 82            [24]  288 	mov	r7,dpl
      000117 AE 83            [24]  289 	mov	r6,dph
      000119 AD F0            [24]  290 	mov	r5,b
      00011B FC               [12]  291 	mov	r4,a
      00011C E5 81            [12]  292 	mov	a,sp
      00011E 24 FC            [12]  293 	add	a,#0xfc
      000120 F5 81            [12]  294 	mov	sp,a
      000122 D0*00            [24]  295 	pop	bits
      000124 E5*00            [12]  296 	mov	a,_bp
      000126 24 0D            [12]  297 	add	a,#0x0d
      000128 F8               [12]  298 	mov	r0,a
      000129 A6 07            [24]  299 	mov	@r0,ar7
      00012B 08               [12]  300 	inc	r0
      00012C A6 06            [24]  301 	mov	@r0,ar6
      00012E 08               [12]  302 	inc	r0
      00012F A6 05            [24]  303 	mov	@r0,ar5
      000131 08               [12]  304 	inc	r0
      000132 A6 04            [24]  305 	mov	@r0,ar4
                                    306 ;	asincosf.c:72: g = ldexpf(g, -1);
      000134 C0*00            [24]  307 	push	bits
      000136 74 FF            [12]  308 	mov	a,#0xFF
      000138 C0 E0            [24]  309 	push	acc
      00013A C0 E0            [24]  310 	push	acc
      00013C E5*00            [12]  311 	mov	a,_bp
      00013E 24 0D            [12]  312 	add	a,#0x0d
      000140 F8               [12]  313 	mov	r0,a
      000141 86 82            [24]  314 	mov	dpl,@r0
      000143 08               [12]  315 	inc	r0
      000144 86 83            [24]  316 	mov	dph,@r0
      000146 08               [12]  317 	inc	r0
      000147 86 F0            [24]  318 	mov	b,@r0
      000149 08               [12]  319 	inc	r0
      00014A E6               [12]  320 	mov	a,@r0
      00014B 12r00r00         [24]  321 	lcall	_ldexpf
      00014E AF 82            [24]  322 	mov	r7,dpl
      000150 AE 83            [24]  323 	mov	r6,dph
      000152 AD F0            [24]  324 	mov	r5,b
      000154 FC               [12]  325 	mov	r4,a
      000155 15 81            [12]  326 	dec	sp
      000157 15 81            [12]  327 	dec	sp
      000159 D0*00            [24]  328 	pop	bits
      00015B E5*00            [12]  329 	mov	a,_bp
      00015D 24 0D            [12]  330 	add	a,#0x0d
      00015F F8               [12]  331 	mov	r0,a
      000160 A6 07            [24]  332 	mov	@r0,ar7
      000162 08               [12]  333 	inc	r0
      000163 A6 06            [24]  334 	mov	@r0,ar6
      000165 08               [12]  335 	inc	r0
      000166 A6 05            [24]  336 	mov	@r0,ar5
      000168 08               [12]  337 	inc	r0
      000169 A6 04            [24]  338 	mov	@r0,ar4
                                    339 ;	asincosf.c:73: y = sqrtf(g);
      00016B E5*00            [12]  340 	mov	a,_bp
      00016D 24 0D            [12]  341 	add	a,#0x0d
      00016F F8               [12]  342 	mov	r0,a
      000170 86 82            [24]  343 	mov	dpl,@r0
      000172 08               [12]  344 	inc	r0
      000173 86 83            [24]  345 	mov	dph,@r0
      000175 08               [12]  346 	inc	r0
      000176 86 F0            [24]  347 	mov	b,@r0
      000178 08               [12]  348 	inc	r0
      000179 E6               [12]  349 	mov	a,@r0
      00017A C0*00            [24]  350 	push	bits
      00017C 12r00r00         [24]  351 	lcall	_sqrtf
      00017F C8               [12]  352 	xch	a,r0
      000180 E5*00            [12]  353 	mov	a,_bp
      000182 24 05            [12]  354 	add	a,#0x05
      000184 C8               [12]  355 	xch	a,r0
      000185 A6 82            [24]  356 	mov	@r0,dpl
      000187 08               [12]  357 	inc	r0
      000188 A6 83            [24]  358 	mov	@r0,dph
      00018A 08               [12]  359 	inc	r0
      00018B A6 F0            [24]  360 	mov	@r0,b
      00018D 08               [12]  361 	inc	r0
      00018E F6               [12]  362 	mov	@r0,a
      00018F D0*00            [24]  363 	pop	bits
      000191 E5*00            [12]  364 	mov	a,_bp
      000193 24 05            [12]  365 	add	a,#0x05
      000195 F8               [12]  366 	mov	r0,a
      000196 86 02            [24]  367 	mov	ar2,@r0
      000198 08               [12]  368 	inc	r0
      000199 86 04            [24]  369 	mov	ar4,@r0
      00019B 08               [12]  370 	inc	r0
      00019C 86 06            [24]  371 	mov	ar6,@r0
      00019E 08               [12]  372 	inc	r0
      00019F 86 07            [24]  373 	mov	ar7,@r0
                                    374 ;	asincosf.c:74: y = -(y + y);
      0001A1 C0*00            [24]  375 	push	bits
      0001A3 C0 02            [24]  376 	push	ar2
      0001A5 C0 04            [24]  377 	push	ar4
      0001A7 C0 06            [24]  378 	push	ar6
      0001A9 C0 07            [24]  379 	push	ar7
      0001AB 8A 82            [24]  380 	mov	dpl,r2
      0001AD 8C 83            [24]  381 	mov	dph,r4
      0001AF 8E F0            [24]  382 	mov	b,r6
      0001B1 EF               [12]  383 	mov	a,r7
      0001B2 12r00r00         [24]  384 	lcall	___fsadd
      0001B5 AF 82            [24]  385 	mov	r7,dpl
      0001B7 AE 83            [24]  386 	mov	r6,dph
      0001B9 AD F0            [24]  387 	mov	r5,b
      0001BB FC               [12]  388 	mov	r4,a
      0001BC E5 81            [12]  389 	mov	a,sp
      0001BE 24 FC            [12]  390 	add	a,#0xfc
      0001C0 F5 81            [12]  391 	mov	sp,a
      0001C2 D0*00            [24]  392 	pop	bits
      0001C4 E5*00            [12]  393 	mov	a,_bp
      0001C6 24 05            [12]  394 	add	a,#0x05
      0001C8 F8               [12]  395 	mov	r0,a
      0001C9 A6 07            [24]  396 	mov	@r0,ar7
      0001CB 08               [12]  397 	inc	r0
      0001CC A6 06            [24]  398 	mov	@r0,ar6
      0001CE 08               [12]  399 	inc	r0
      0001CF A6 05            [24]  400 	mov	@r0,ar5
      0001D1 EC               [12]  401 	mov	a,r4
      0001D2 B2 E7            [12]  402 	cpl	acc.7
      0001D4 08               [12]  403 	inc	r0
      0001D5 F6               [12]  404 	mov	@r0,a
      0001D6 E5*00            [12]  405 	mov	a,_bp
      0001D8 24 05            [12]  406 	add	a,#0x05
      0001DA F8               [12]  407 	mov	r0,a
      0001DB 86 02            [24]  408 	mov	ar2,@r0
      0001DD 08               [12]  409 	inc	r0
      0001DE 86 04            [24]  410 	mov	ar4,@r0
      0001E0 08               [12]  411 	inc	r0
      0001E1 86 06            [24]  412 	mov	ar6,@r0
      0001E3 08               [12]  413 	inc	r0
      0001E4 86 07            [24]  414 	mov	ar7,@r0
      0001E6 80 54            [24]  415 	sjmp	00105$
      0001E8                        416 00104$:
                                    417 ;	asincosf.c:78: g = y * y;
      0001E8 C0 07            [24]  418 	push	ar7
      0001EA C0 06            [24]  419 	push	ar6
      0001EC C0 04            [24]  420 	push	ar4
      0001EE C0 02            [24]  421 	push	ar2
      0001F0 C0*00            [24]  422 	push	bits
      0001F2 C0 02            [24]  423 	push	ar2
      0001F4 C0 04            [24]  424 	push	ar4
      0001F6 C0 06            [24]  425 	push	ar6
      0001F8 C0 07            [24]  426 	push	ar7
      0001FA 8A 82            [24]  427 	mov	dpl,r2
      0001FC 8C 83            [24]  428 	mov	dph,r4
      0001FE 8E F0            [24]  429 	mov	b,r6
      000200 EF               [12]  430 	mov	a,r7
      000201 12r00r00         [24]  431 	lcall	___fsmul
      000204 C8               [12]  432 	xch	a,r0
      000205 E5*00            [12]  433 	mov	a,_bp
      000207 24 05            [12]  434 	add	a,#0x05
      000209 C8               [12]  435 	xch	a,r0
      00020A A6 82            [24]  436 	mov	@r0,dpl
      00020C 08               [12]  437 	inc	r0
      00020D A6 83            [24]  438 	mov	@r0,dph
      00020F 08               [12]  439 	inc	r0
      000210 A6 F0            [24]  440 	mov	@r0,b
      000212 08               [12]  441 	inc	r0
      000213 F6               [12]  442 	mov	@r0,a
      000214 E5 81            [12]  443 	mov	a,sp
      000216 24 FC            [12]  444 	add	a,#0xfc
      000218 F5 81            [12]  445 	mov	sp,a
      00021A D0*00            [24]  446 	pop	bits
      00021C D0 02            [24]  447 	pop	ar2
      00021E D0 04            [24]  448 	pop	ar4
      000220 D0 06            [24]  449 	pop	ar6
      000222 D0 07            [24]  450 	pop	ar7
      000224 E5*00            [12]  451 	mov	a,_bp
      000226 24 05            [12]  452 	add	a,#0x05
      000228 F8               [12]  453 	mov	r0,a
      000229 E5*00            [12]  454 	mov	a,_bp
      00022B 24 0D            [12]  455 	add	a,#0x0d
      00022D F9               [12]  456 	mov	r1,a
      00022E E6               [12]  457 	mov	a,@r0
      00022F F7               [12]  458 	mov	@r1,a
      000230 08               [12]  459 	inc	r0
      000231 09               [12]  460 	inc	r1
      000232 E6               [12]  461 	mov	a,@r0
      000233 F7               [12]  462 	mov	@r1,a
      000234 08               [12]  463 	inc	r0
      000235 09               [12]  464 	inc	r1
      000236 E6               [12]  465 	mov	a,@r0
      000237 F7               [12]  466 	mov	@r1,a
      000238 08               [12]  467 	inc	r0
      000239 09               [12]  468 	inc	r1
      00023A E6               [12]  469 	mov	a,@r0
      00023B F7               [12]  470 	mov	@r1,a
      00023C                        471 00105$:
                                    472 ;	asincosf.c:80: r = y + y * ((P(g) * g) / Q(g));
      00023C C0 07            [24]  473 	push	ar7
      00023E C0 06            [24]  474 	push	ar6
      000240 C0 04            [24]  475 	push	ar4
      000242 C0 02            [24]  476 	push	ar2
      000244 C0*00            [24]  477 	push	bits
      000246 E5*00            [12]  478 	mov	a,_bp
      000248 24 0D            [12]  479 	add	a,#0x0d
      00024A F8               [12]  480 	mov	r0,a
      00024B E6               [12]  481 	mov	a,@r0
      00024C C0 E0            [24]  482 	push	acc
      00024E 08               [12]  483 	inc	r0
      00024F E6               [12]  484 	mov	a,@r0
      000250 C0 E0            [24]  485 	push	acc
      000252 08               [12]  486 	inc	r0
      000253 E6               [12]  487 	mov	a,@r0
      000254 C0 E0            [24]  488 	push	acc
      000256 08               [12]  489 	inc	r0
      000257 E6               [12]  490 	mov	a,@r0
      000258 C0 E0            [24]  491 	push	acc
      00025A 90 20 65         [24]  492 	mov	dptr,#0x2065
      00025D 75 F0 01         [24]  493 	mov	b,#0x01
      000260 74 BF            [12]  494 	mov	a,#0xBF
      000262 12r00r00         [24]  495 	lcall	___fsmul
      000265 C8               [12]  496 	xch	a,r0
      000266 E5*00            [12]  497 	mov	a,_bp
      000268 24 05            [12]  498 	add	a,#0x05
      00026A C8               [12]  499 	xch	a,r0
      00026B A6 82            [24]  500 	mov	@r0,dpl
      00026D 08               [12]  501 	inc	r0
      00026E A6 83            [24]  502 	mov	@r0,dph
      000270 08               [12]  503 	inc	r0
      000271 A6 F0            [24]  504 	mov	@r0,b
      000273 08               [12]  505 	inc	r0
      000274 F6               [12]  506 	mov	@r0,a
      000275 E5 81            [12]  507 	mov	a,sp
      000277 24 FC            [12]  508 	add	a,#0xfc
      000279 F5 81            [12]  509 	mov	sp,a
      00027B D0*00            [24]  510 	pop	bits
      00027D C0*00            [24]  511 	push	bits
      00027F 74 6B            [12]  512 	mov	a,#0x6B
      000281 C0 E0            [24]  513 	push	acc
      000283 74 16            [12]  514 	mov	a,#0x16
      000285 C0 E0            [24]  515 	push	acc
      000287 74 6F            [12]  516 	mov	a,#0x6F
      000289 C0 E0            [24]  517 	push	acc
      00028B 74 3F            [12]  518 	mov	a,#0x3F
      00028D C0 E0            [24]  519 	push	acc
      00028F E5*00            [12]  520 	mov	a,_bp
      000291 24 05            [12]  521 	add	a,#0x05
      000293 F8               [12]  522 	mov	r0,a
      000294 86 82            [24]  523 	mov	dpl,@r0
      000296 08               [12]  524 	inc	r0
      000297 86 83            [24]  525 	mov	dph,@r0
      000299 08               [12]  526 	inc	r0
      00029A 86 F0            [24]  527 	mov	b,@r0
      00029C 08               [12]  528 	inc	r0
      00029D E6               [12]  529 	mov	a,@r0
      00029E 12r00r00         [24]  530 	lcall	___fsadd
      0002A1 C8               [12]  531 	xch	a,r0
      0002A2 E5*00            [12]  532 	mov	a,_bp
      0002A4 24 05            [12]  533 	add	a,#0x05
      0002A6 C8               [12]  534 	xch	a,r0
      0002A7 A6 82            [24]  535 	mov	@r0,dpl
      0002A9 08               [12]  536 	inc	r0
      0002AA A6 83            [24]  537 	mov	@r0,dph
      0002AC 08               [12]  538 	inc	r0
      0002AD A6 F0            [24]  539 	mov	@r0,b
      0002AF 08               [12]  540 	inc	r0
      0002B0 F6               [12]  541 	mov	@r0,a
      0002B1 E5 81            [12]  542 	mov	a,sp
      0002B3 24 FC            [12]  543 	add	a,#0xfc
      0002B5 F5 81            [12]  544 	mov	sp,a
      0002B7 D0*00            [24]  545 	pop	bits
      0002B9 C0*00            [24]  546 	push	bits
      0002BB E5*00            [12]  547 	mov	a,_bp
      0002BD 24 0D            [12]  548 	add	a,#0x0d
      0002BF F8               [12]  549 	mov	r0,a
      0002C0 E6               [12]  550 	mov	a,@r0
      0002C1 C0 E0            [24]  551 	push	acc
      0002C3 08               [12]  552 	inc	r0
      0002C4 E6               [12]  553 	mov	a,@r0
      0002C5 C0 E0            [24]  554 	push	acc
      0002C7 08               [12]  555 	inc	r0
      0002C8 E6               [12]  556 	mov	a,@r0
      0002C9 C0 E0            [24]  557 	push	acc
      0002CB 08               [12]  558 	inc	r0
      0002CC E6               [12]  559 	mov	a,@r0
      0002CD C0 E0            [24]  560 	push	acc
      0002CF E5*00            [12]  561 	mov	a,_bp
      0002D1 24 05            [12]  562 	add	a,#0x05
      0002D3 F8               [12]  563 	mov	r0,a
      0002D4 86 82            [24]  564 	mov	dpl,@r0
      0002D6 08               [12]  565 	inc	r0
      0002D7 86 83            [24]  566 	mov	dph,@r0
      0002D9 08               [12]  567 	inc	r0
      0002DA 86 F0            [24]  568 	mov	b,@r0
      0002DC 08               [12]  569 	inc	r0
      0002DD E6               [12]  570 	mov	a,@r0
      0002DE 12r00r00         [24]  571 	lcall	___fsmul
      0002E1 C8               [12]  572 	xch	a,r0
      0002E2 E5*00            [12]  573 	mov	a,_bp
      0002E4 24 05            [12]  574 	add	a,#0x05
      0002E6 C8               [12]  575 	xch	a,r0
      0002E7 A6 82            [24]  576 	mov	@r0,dpl
      0002E9 08               [12]  577 	inc	r0
      0002EA A6 83            [24]  578 	mov	@r0,dph
      0002EC 08               [12]  579 	inc	r0
      0002ED A6 F0            [24]  580 	mov	@r0,b
      0002EF 08               [12]  581 	inc	r0
      0002F0 F6               [12]  582 	mov	@r0,a
      0002F1 E5 81            [12]  583 	mov	a,sp
      0002F3 24 FC            [12]  584 	add	a,#0xfc
      0002F5 F5 81            [12]  585 	mov	sp,a
      0002F7 D0*00            [24]  586 	pop	bits
      0002F9 C0*00            [24]  587 	push	bits
      0002FB 74 0B            [12]  588 	mov	a,#0x0B
      0002FD C0 E0            [24]  589 	push	acc
      0002FF 74 8D            [12]  590 	mov	a,#0x8D
      000301 C0 E0            [24]  591 	push	acc
      000303 74 B1            [12]  592 	mov	a,#0xB1
      000305 C0 E0            [24]  593 	push	acc
      000307 74 C0            [12]  594 	mov	a,#0xC0
      000309 C0 E0            [24]  595 	push	acc
      00030B E5*00            [12]  596 	mov	a,_bp
      00030D 24 0D            [12]  597 	add	a,#0x0d
      00030F F8               [12]  598 	mov	r0,a
      000310 86 82            [24]  599 	mov	dpl,@r0
      000312 08               [12]  600 	inc	r0
      000313 86 83            [24]  601 	mov	dph,@r0
      000315 08               [12]  602 	inc	r0
      000316 86 F0            [24]  603 	mov	b,@r0
      000318 08               [12]  604 	inc	r0
      000319 E6               [12]  605 	mov	a,@r0
      00031A 12r00r00         [24]  606 	lcall	___fsadd
      00031D C8               [12]  607 	xch	a,r0
      00031E E5*00            [12]  608 	mov	a,_bp
      000320 24 09            [12]  609 	add	a,#0x09
      000322 C8               [12]  610 	xch	a,r0
      000323 A6 82            [24]  611 	mov	@r0,dpl
      000325 08               [12]  612 	inc	r0
      000326 A6 83            [24]  613 	mov	@r0,dph
      000328 08               [12]  614 	inc	r0
      000329 A6 F0            [24]  615 	mov	@r0,b
      00032B 08               [12]  616 	inc	r0
      00032C F6               [12]  617 	mov	@r0,a
      00032D E5 81            [12]  618 	mov	a,sp
      00032F 24 FC            [12]  619 	add	a,#0xfc
      000331 F5 81            [12]  620 	mov	sp,a
      000333 D0*00            [24]  621 	pop	bits
      000335 C0*00            [24]  622 	push	bits
      000337 E5*00            [12]  623 	mov	a,_bp
      000339 24 0D            [12]  624 	add	a,#0x0d
      00033B F8               [12]  625 	mov	r0,a
      00033C E6               [12]  626 	mov	a,@r0
      00033D C0 E0            [24]  627 	push	acc
      00033F 08               [12]  628 	inc	r0
      000340 E6               [12]  629 	mov	a,@r0
      000341 C0 E0            [24]  630 	push	acc
      000343 08               [12]  631 	inc	r0
      000344 E6               [12]  632 	mov	a,@r0
      000345 C0 E0            [24]  633 	push	acc
      000347 08               [12]  634 	inc	r0
      000348 E6               [12]  635 	mov	a,@r0
      000349 C0 E0            [24]  636 	push	acc
      00034B E5*00            [12]  637 	mov	a,_bp
      00034D 24 09            [12]  638 	add	a,#0x09
      00034F F8               [12]  639 	mov	r0,a
      000350 86 82            [24]  640 	mov	dpl,@r0
      000352 08               [12]  641 	inc	r0
      000353 86 83            [24]  642 	mov	dph,@r0
      000355 08               [12]  643 	inc	r0
      000356 86 F0            [24]  644 	mov	b,@r0
      000358 08               [12]  645 	inc	r0
      000359 E6               [12]  646 	mov	a,@r0
      00035A 12r00r00         [24]  647 	lcall	___fsmul
      00035D C8               [12]  648 	xch	a,r0
      00035E E5*00            [12]  649 	mov	a,_bp
      000360 24 09            [12]  650 	add	a,#0x09
      000362 C8               [12]  651 	xch	a,r0
      000363 A6 82            [24]  652 	mov	@r0,dpl
      000365 08               [12]  653 	inc	r0
      000366 A6 83            [24]  654 	mov	@r0,dph
      000368 08               [12]  655 	inc	r0
      000369 A6 F0            [24]  656 	mov	@r0,b
      00036B 08               [12]  657 	inc	r0
      00036C F6               [12]  658 	mov	@r0,a
      00036D E5 81            [12]  659 	mov	a,sp
      00036F 24 FC            [12]  660 	add	a,#0xfc
      000371 F5 81            [12]  661 	mov	sp,a
      000373 D0*00            [24]  662 	pop	bits
      000375 C0*00            [24]  663 	push	bits
      000377 74 F0            [12]  664 	mov	a,#0xF0
      000379 C0 E0            [24]  665 	push	acc
      00037B 74 50            [12]  666 	mov	a,#0x50
      00037D C0 E0            [24]  667 	push	acc
      00037F 74 B3            [12]  668 	mov	a,#0xB3
      000381 C0 E0            [24]  669 	push	acc
      000383 74 40            [12]  670 	mov	a,#0x40
      000385 C0 E0            [24]  671 	push	acc
      000387 E5*00            [12]  672 	mov	a,_bp
      000389 24 09            [12]  673 	add	a,#0x09
      00038B F8               [12]  674 	mov	r0,a
      00038C 86 82            [24]  675 	mov	dpl,@r0
      00038E 08               [12]  676 	inc	r0
      00038F 86 83            [24]  677 	mov	dph,@r0
      000391 08               [12]  678 	inc	r0
      000392 86 F0            [24]  679 	mov	b,@r0
      000394 08               [12]  680 	inc	r0
      000395 E6               [12]  681 	mov	a,@r0
      000396 12r00r00         [24]  682 	lcall	___fsadd
      000399 C8               [12]  683 	xch	a,r0
      00039A E5*00            [12]  684 	mov	a,_bp
      00039C 24 09            [12]  685 	add	a,#0x09
      00039E C8               [12]  686 	xch	a,r0
      00039F A6 82            [24]  687 	mov	@r0,dpl
      0003A1 08               [12]  688 	inc	r0
      0003A2 A6 83            [24]  689 	mov	@r0,dph
      0003A4 08               [12]  690 	inc	r0
      0003A5 A6 F0            [24]  691 	mov	@r0,b
      0003A7 08               [12]  692 	inc	r0
      0003A8 F6               [12]  693 	mov	@r0,a
      0003A9 E5 81            [12]  694 	mov	a,sp
      0003AB 24 FC            [12]  695 	add	a,#0xfc
      0003AD F5 81            [12]  696 	mov	sp,a
      0003AF D0*00            [24]  697 	pop	bits
      0003B1 C0*00            [24]  698 	push	bits
      0003B3 E5*00            [12]  699 	mov	a,_bp
      0003B5 24 09            [12]  700 	add	a,#0x09
      0003B7 F8               [12]  701 	mov	r0,a
      0003B8 E6               [12]  702 	mov	a,@r0
      0003B9 C0 E0            [24]  703 	push	acc
      0003BB 08               [12]  704 	inc	r0
      0003BC E6               [12]  705 	mov	a,@r0
      0003BD C0 E0            [24]  706 	push	acc
      0003BF 08               [12]  707 	inc	r0
      0003C0 E6               [12]  708 	mov	a,@r0
      0003C1 C0 E0            [24]  709 	push	acc
      0003C3 08               [12]  710 	inc	r0
      0003C4 E6               [12]  711 	mov	a,@r0
      0003C5 C0 E0            [24]  712 	push	acc
      0003C7 E5*00            [12]  713 	mov	a,_bp
      0003C9 24 05            [12]  714 	add	a,#0x05
      0003CB F8               [12]  715 	mov	r0,a
      0003CC 86 82            [24]  716 	mov	dpl,@r0
      0003CE 08               [12]  717 	inc	r0
      0003CF 86 83            [24]  718 	mov	dph,@r0
      0003D1 08               [12]  719 	inc	r0
      0003D2 86 F0            [24]  720 	mov	b,@r0
      0003D4 08               [12]  721 	inc	r0
      0003D5 E6               [12]  722 	mov	a,@r0
      0003D6 12r00r00         [24]  723 	lcall	___fsdiv
      0003D9 C8               [12]  724 	xch	a,r0
      0003DA E5*00            [12]  725 	mov	a,_bp
      0003DC 24 09            [12]  726 	add	a,#0x09
      0003DE C8               [12]  727 	xch	a,r0
      0003DF A6 82            [24]  728 	mov	@r0,dpl
      0003E1 08               [12]  729 	inc	r0
      0003E2 A6 83            [24]  730 	mov	@r0,dph
      0003E4 08               [12]  731 	inc	r0
      0003E5 A6 F0            [24]  732 	mov	@r0,b
      0003E7 08               [12]  733 	inc	r0
      0003E8 F6               [12]  734 	mov	@r0,a
      0003E9 E5 81            [12]  735 	mov	a,sp
      0003EB 24 FC            [12]  736 	add	a,#0xfc
      0003ED F5 81            [12]  737 	mov	sp,a
      0003EF D0*00            [24]  738 	pop	bits
      0003F1 D0 02            [24]  739 	pop	ar2
      0003F3 D0 04            [24]  740 	pop	ar4
      0003F5 D0 06            [24]  741 	pop	ar6
      0003F7 D0 07            [24]  742 	pop	ar7
      0003F9 C0 07            [24]  743 	push	ar7
      0003FB C0 06            [24]  744 	push	ar6
      0003FD C0 04            [24]  745 	push	ar4
      0003FF C0 02            [24]  746 	push	ar2
      000401 C0*00            [24]  747 	push	bits
      000403 E5*00            [12]  748 	mov	a,_bp
      000405 24 09            [12]  749 	add	a,#0x09
      000407 F8               [12]  750 	mov	r0,a
      000408 E6               [12]  751 	mov	a,@r0
      000409 C0 E0            [24]  752 	push	acc
      00040B 08               [12]  753 	inc	r0
      00040C E6               [12]  754 	mov	a,@r0
      00040D C0 E0            [24]  755 	push	acc
      00040F 08               [12]  756 	inc	r0
      000410 E6               [12]  757 	mov	a,@r0
      000411 C0 E0            [24]  758 	push	acc
      000413 08               [12]  759 	inc	r0
      000414 E6               [12]  760 	mov	a,@r0
      000415 C0 E0            [24]  761 	push	acc
      000417 8A 82            [24]  762 	mov	dpl,r2
      000419 8C 83            [24]  763 	mov	dph,r4
      00041B 8E F0            [24]  764 	mov	b,r6
      00041D EF               [12]  765 	mov	a,r7
      00041E 12r00r00         [24]  766 	lcall	___fsmul
      000421 C8               [12]  767 	xch	a,r0
      000422 E5*00            [12]  768 	mov	a,_bp
      000424 24 09            [12]  769 	add	a,#0x09
      000426 C8               [12]  770 	xch	a,r0
      000427 A6 82            [24]  771 	mov	@r0,dpl
      000429 08               [12]  772 	inc	r0
      00042A A6 83            [24]  773 	mov	@r0,dph
      00042C 08               [12]  774 	inc	r0
      00042D A6 F0            [24]  775 	mov	@r0,b
      00042F 08               [12]  776 	inc	r0
      000430 F6               [12]  777 	mov	@r0,a
      000431 E5 81            [12]  778 	mov	a,sp
      000433 24 FC            [12]  779 	add	a,#0xfc
      000435 F5 81            [12]  780 	mov	sp,a
      000437 D0*00            [24]  781 	pop	bits
      000439 D0 02            [24]  782 	pop	ar2
      00043B D0 04            [24]  783 	pop	ar4
      00043D D0 06            [24]  784 	pop	ar6
      00043F D0 07            [24]  785 	pop	ar7
      000441 C0*00            [24]  786 	push	bits
      000443 E5*00            [12]  787 	mov	a,_bp
      000445 24 09            [12]  788 	add	a,#0x09
      000447 F8               [12]  789 	mov	r0,a
      000448 E6               [12]  790 	mov	a,@r0
      000449 C0 E0            [24]  791 	push	acc
      00044B 08               [12]  792 	inc	r0
      00044C E6               [12]  793 	mov	a,@r0
      00044D C0 E0            [24]  794 	push	acc
      00044F 08               [12]  795 	inc	r0
      000450 E6               [12]  796 	mov	a,@r0
      000451 C0 E0            [24]  797 	push	acc
      000453 08               [12]  798 	inc	r0
      000454 E6               [12]  799 	mov	a,@r0
      000455 C0 E0            [24]  800 	push	acc
      000457 8A 82            [24]  801 	mov	dpl,r2
      000459 8C 83            [24]  802 	mov	dph,r4
      00045B 8E F0            [24]  803 	mov	b,r6
      00045D EF               [12]  804 	mov	a,r7
      00045E 12r00r00         [24]  805 	lcall	___fsadd
      000461 AF 82            [24]  806 	mov	r7,dpl
      000463 AE 83            [24]  807 	mov	r6,dph
      000465 AD F0            [24]  808 	mov	r5,b
      000467 FC               [12]  809 	mov	r4,a
      000468 E5 81            [12]  810 	mov	a,sp
      00046A 24 FC            [12]  811 	add	a,#0xfc
      00046C F5 81            [12]  812 	mov	sp,a
      00046E D0*00            [24]  813 	pop	bits
      000470 E5*00            [12]  814 	mov	a,_bp
      000472 24 11            [12]  815 	add	a,#0x11
      000474 F8               [12]  816 	mov	r0,a
      000475 A6 07            [24]  817 	mov	@r0,ar7
      000477 08               [12]  818 	inc	r0
      000478 A6 06            [24]  819 	mov	@r0,ar6
      00047A 08               [12]  820 	inc	r0
      00047B A6 05            [24]  821 	mov	@r0,ar5
      00047D 08               [12]  822 	inc	r0
      00047E A6 04            [24]  823 	mov	@r0,ar4
      000480                        824 00108$:
                                    825 ;	asincosf.c:82: i = quartPI;
      000480 A2*00            [12]  826 	mov	c,b1
      000482 E4               [12]  827 	clr	a
      000483 33               [12]  828 	rlc	a
      000484 FD               [12]  829 	mov	r5,a
                                    830 ;	asincosf.c:83: if (isacos)
      000485 20*00 03         [24]  831 	jb	b0,00140$
      000488 02r05rE4         [24]  832 	ljmp	00115$
      00048B                        833 00140$:
                                    834 ;	asincosf.c:85: if (x < 0.0)
      00048B C0 05            [24]  835 	push	ar5
      00048D E4               [12]  836 	clr	a
      00048E C0 E0            [24]  837 	push	acc
      000490 C0 E0            [24]  838 	push	acc
      000492 C0 E0            [24]  839 	push	acc
      000494 C0 E0            [24]  840 	push	acc
      000496 A8*00            [24]  841 	mov	r0,_bp
      000498 08               [12]  842 	inc	r0
      000499 86 82            [24]  843 	mov	dpl,@r0
      00049B 08               [12]  844 	inc	r0
      00049C 86 83            [24]  845 	mov	dph,@r0
      00049E 08               [12]  846 	inc	r0
      00049F 86 F0            [24]  847 	mov	b,@r0
      0004A1 08               [12]  848 	inc	r0
      0004A2 E6               [12]  849 	mov	a,@r0
      0004A3 12r00r00         [24]  850 	lcall	___fslt
      0004A6 AC 82            [24]  851 	mov	r4,dpl
      0004A8 E5 81            [12]  852 	mov	a,sp
      0004AA 24 FC            [12]  853 	add	a,#0xfc
      0004AC F5 81            [12]  854 	mov	sp,a
      0004AE D0 05            [24]  855 	pop	ar5
      0004B0 EC               [12]  856 	mov	a,r4
      0004B1 70 03            [24]  857 	jnz	00141$
      0004B3 02r05r4D         [24]  858 	ljmp	00110$
      0004B6                        859 00141$:
                                    860 ;	asincosf.c:86: r = (b[i] + r) + b[i];
      0004B6 ED               [12]  861 	mov	a,r5
      0004B7 75 F0 04         [24]  862 	mov	b,#0x04
      0004BA A4               [48]  863 	mul	ab
      0004BB 24r08            [12]  864 	add	a,#_asincosf_b_1_24
      0004BD F5 82            [12]  865 	mov	dpl,a
      0004BF 74s00            [12]  866 	mov	a,#(_asincosf_b_1_24 >> 8)
      0004C1 35 F0            [12]  867 	addc	a,b
      0004C3 F5 83            [12]  868 	mov	dph,a
      0004C5 E5*00            [12]  869 	mov	a,_bp
      0004C7 24 09            [12]  870 	add	a,#0x09
      0004C9 F8               [12]  871 	mov	r0,a
      0004CA E4               [12]  872 	clr	a
      0004CB 93               [24]  873 	movc	a,@a+dptr
      0004CC F6               [12]  874 	mov	@r0,a
      0004CD A3               [24]  875 	inc	dptr
      0004CE E4               [12]  876 	clr	a
      0004CF 93               [24]  877 	movc	a,@a+dptr
      0004D0 08               [12]  878 	inc	r0
      0004D1 F6               [12]  879 	mov	@r0,a
      0004D2 A3               [24]  880 	inc	dptr
      0004D3 E4               [12]  881 	clr	a
      0004D4 93               [24]  882 	movc	a,@a+dptr
      0004D5 08               [12]  883 	inc	r0
      0004D6 F6               [12]  884 	mov	@r0,a
      0004D7 A3               [24]  885 	inc	dptr
      0004D8 E4               [12]  886 	clr	a
      0004D9 93               [24]  887 	movc	a,@a+dptr
      0004DA 08               [12]  888 	inc	r0
      0004DB F6               [12]  889 	mov	@r0,a
      0004DC E5*00            [12]  890 	mov	a,_bp
      0004DE 24 11            [12]  891 	add	a,#0x11
      0004E0 F8               [12]  892 	mov	r0,a
      0004E1 E6               [12]  893 	mov	a,@r0
      0004E2 C0 E0            [24]  894 	push	acc
      0004E4 08               [12]  895 	inc	r0
      0004E5 E6               [12]  896 	mov	a,@r0
      0004E6 C0 E0            [24]  897 	push	acc
      0004E8 08               [12]  898 	inc	r0
      0004E9 E6               [12]  899 	mov	a,@r0
      0004EA C0 E0            [24]  900 	push	acc
      0004EC 08               [12]  901 	inc	r0
      0004ED E6               [12]  902 	mov	a,@r0
      0004EE C0 E0            [24]  903 	push	acc
      0004F0 E5*00            [12]  904 	mov	a,_bp
      0004F2 24 09            [12]  905 	add	a,#0x09
      0004F4 F8               [12]  906 	mov	r0,a
      0004F5 86 82            [24]  907 	mov	dpl,@r0
      0004F7 08               [12]  908 	inc	r0
      0004F8 86 83            [24]  909 	mov	dph,@r0
      0004FA 08               [12]  910 	inc	r0
      0004FB 86 F0            [24]  911 	mov	b,@r0
      0004FD 08               [12]  912 	inc	r0
      0004FE E6               [12]  913 	mov	a,@r0
      0004FF 12r00r00         [24]  914 	lcall	___fsadd
      000502 AA 82            [24]  915 	mov	r2,dpl
      000504 AC 83            [24]  916 	mov	r4,dph
      000506 AE F0            [24]  917 	mov	r6,b
      000508 FF               [12]  918 	mov	r7,a
      000509 E5 81            [12]  919 	mov	a,sp
      00050B 24 FC            [12]  920 	add	a,#0xfc
      00050D F5 81            [12]  921 	mov	sp,a
      00050F E5*00            [12]  922 	mov	a,_bp
      000511 24 09            [12]  923 	add	a,#0x09
      000513 F8               [12]  924 	mov	r0,a
      000514 E6               [12]  925 	mov	a,@r0
      000515 C0 E0            [24]  926 	push	acc
      000517 08               [12]  927 	inc	r0
      000518 E6               [12]  928 	mov	a,@r0
      000519 C0 E0            [24]  929 	push	acc
      00051B 08               [12]  930 	inc	r0
      00051C E6               [12]  931 	mov	a,@r0
      00051D C0 E0            [24]  932 	push	acc
      00051F 08               [12]  933 	inc	r0
      000520 E6               [12]  934 	mov	a,@r0
      000521 C0 E0            [24]  935 	push	acc
      000523 8A 82            [24]  936 	mov	dpl,r2
      000525 8C 83            [24]  937 	mov	dph,r4
      000527 8E F0            [24]  938 	mov	b,r6
      000529 EF               [12]  939 	mov	a,r7
      00052A 12r00r00         [24]  940 	lcall	___fsadd
      00052D AB 82            [24]  941 	mov	r3,dpl
      00052F AC 83            [24]  942 	mov	r4,dph
      000531 AE F0            [24]  943 	mov	r6,b
      000533 FF               [12]  944 	mov	r7,a
      000534 E5 81            [12]  945 	mov	a,sp
      000536 24 FC            [12]  946 	add	a,#0xfc
      000538 F5 81            [12]  947 	mov	sp,a
      00053A E5*00            [12]  948 	mov	a,_bp
      00053C 24 11            [12]  949 	add	a,#0x11
      00053E F8               [12]  950 	mov	r0,a
      00053F A6 03            [24]  951 	mov	@r0,ar3
      000541 08               [12]  952 	inc	r0
      000542 A6 04            [24]  953 	mov	@r0,ar4
      000544 08               [12]  954 	inc	r0
      000545 A6 06            [24]  955 	mov	@r0,ar6
      000547 08               [12]  956 	inc	r0
      000548 A6 07            [24]  957 	mov	@r0,ar7
      00054A 02r06rAE         [24]  958 	ljmp	00116$
      00054D                        959 00110$:
                                    960 ;	asincosf.c:88: r = (a[i] - r) + a[i];
      00054D ED               [12]  961 	mov	a,r5
      00054E 75 F0 04         [24]  962 	mov	b,#0x04
      000551 A4               [48]  963 	mul	ab
      000552 24r00            [12]  964 	add	a,#_asincosf_a_1_24
      000554 F5 82            [12]  965 	mov	dpl,a
      000556 74s00            [12]  966 	mov	a,#(_asincosf_a_1_24 >> 8)
      000558 35 F0            [12]  967 	addc	a,b
      00055A F5 83            [12]  968 	mov	dph,a
      00055C E5*00            [12]  969 	mov	a,_bp
      00055E 24 09            [12]  970 	add	a,#0x09
      000560 F8               [12]  971 	mov	r0,a
      000561 E4               [12]  972 	clr	a
      000562 93               [24]  973 	movc	a,@a+dptr
      000563 F6               [12]  974 	mov	@r0,a
      000564 A3               [24]  975 	inc	dptr
      000565 E4               [12]  976 	clr	a
      000566 93               [24]  977 	movc	a,@a+dptr
      000567 08               [12]  978 	inc	r0
      000568 F6               [12]  979 	mov	@r0,a
      000569 A3               [24]  980 	inc	dptr
      00056A E4               [12]  981 	clr	a
      00056B 93               [24]  982 	movc	a,@a+dptr
      00056C 08               [12]  983 	inc	r0
      00056D F6               [12]  984 	mov	@r0,a
      00056E A3               [24]  985 	inc	dptr
      00056F E4               [12]  986 	clr	a
      000570 93               [24]  987 	movc	a,@a+dptr
      000571 08               [12]  988 	inc	r0
      000572 F6               [12]  989 	mov	@r0,a
      000573 E5*00            [12]  990 	mov	a,_bp
      000575 24 11            [12]  991 	add	a,#0x11
      000577 F8               [12]  992 	mov	r0,a
      000578 E6               [12]  993 	mov	a,@r0
      000579 C0 E0            [24]  994 	push	acc
      00057B 08               [12]  995 	inc	r0
      00057C E6               [12]  996 	mov	a,@r0
      00057D C0 E0            [24]  997 	push	acc
      00057F 08               [12]  998 	inc	r0
      000580 E6               [12]  999 	mov	a,@r0
      000581 C0 E0            [24] 1000 	push	acc
      000583 08               [12] 1001 	inc	r0
      000584 E6               [12] 1002 	mov	a,@r0
      000585 C0 E0            [24] 1003 	push	acc
      000587 E5*00            [12] 1004 	mov	a,_bp
      000589 24 09            [12] 1005 	add	a,#0x09
      00058B F8               [12] 1006 	mov	r0,a
      00058C 86 82            [24] 1007 	mov	dpl,@r0
      00058E 08               [12] 1008 	inc	r0
      00058F 86 83            [24] 1009 	mov	dph,@r0
      000591 08               [12] 1010 	inc	r0
      000592 86 F0            [24] 1011 	mov	b,@r0
      000594 08               [12] 1012 	inc	r0
      000595 E6               [12] 1013 	mov	a,@r0
      000596 12r00r00         [24] 1014 	lcall	___fssub
      000599 AA 82            [24] 1015 	mov	r2,dpl
      00059B AC 83            [24] 1016 	mov	r4,dph
      00059D AE F0            [24] 1017 	mov	r6,b
      00059F FF               [12] 1018 	mov	r7,a
      0005A0 E5 81            [12] 1019 	mov	a,sp
      0005A2 24 FC            [12] 1020 	add	a,#0xfc
      0005A4 F5 81            [12] 1021 	mov	sp,a
      0005A6 E5*00            [12] 1022 	mov	a,_bp
      0005A8 24 09            [12] 1023 	add	a,#0x09
      0005AA F8               [12] 1024 	mov	r0,a
      0005AB E6               [12] 1025 	mov	a,@r0
      0005AC C0 E0            [24] 1026 	push	acc
      0005AE 08               [12] 1027 	inc	r0
      0005AF E6               [12] 1028 	mov	a,@r0
      0005B0 C0 E0            [24] 1029 	push	acc
      0005B2 08               [12] 1030 	inc	r0
      0005B3 E6               [12] 1031 	mov	a,@r0
      0005B4 C0 E0            [24] 1032 	push	acc
      0005B6 08               [12] 1033 	inc	r0
      0005B7 E6               [12] 1034 	mov	a,@r0
      0005B8 C0 E0            [24] 1035 	push	acc
      0005BA 8A 82            [24] 1036 	mov	dpl,r2
      0005BC 8C 83            [24] 1037 	mov	dph,r4
      0005BE 8E F0            [24] 1038 	mov	b,r6
      0005C0 EF               [12] 1039 	mov	a,r7
      0005C1 12r00r00         [24] 1040 	lcall	___fsadd
      0005C4 AB 82            [24] 1041 	mov	r3,dpl
      0005C6 AC 83            [24] 1042 	mov	r4,dph
      0005C8 AE F0            [24] 1043 	mov	r6,b
      0005CA FF               [12] 1044 	mov	r7,a
      0005CB E5 81            [12] 1045 	mov	a,sp
      0005CD 24 FC            [12] 1046 	add	a,#0xfc
      0005CF F5 81            [12] 1047 	mov	sp,a
      0005D1 E5*00            [12] 1048 	mov	a,_bp
      0005D3 24 11            [12] 1049 	add	a,#0x11
      0005D5 F8               [12] 1050 	mov	r0,a
      0005D6 A6 03            [24] 1051 	mov	@r0,ar3
      0005D8 08               [12] 1052 	inc	r0
      0005D9 A6 04            [24] 1053 	mov	@r0,ar4
      0005DB 08               [12] 1054 	inc	r0
      0005DC A6 06            [24] 1055 	mov	@r0,ar6
      0005DE 08               [12] 1056 	inc	r0
      0005DF A6 07            [24] 1057 	mov	@r0,ar7
      0005E1 02r06rAE         [24] 1058 	ljmp	00116$
      0005E4                       1059 00115$:
                                   1060 ;	asincosf.c:92: r = (a[i] + r) + a[i];
      0005E4 ED               [12] 1061 	mov	a,r5
      0005E5 75 F0 04         [24] 1062 	mov	b,#0x04
      0005E8 A4               [48] 1063 	mul	ab
      0005E9 24r00            [12] 1064 	add	a,#_asincosf_a_1_24
      0005EB F5 82            [12] 1065 	mov	dpl,a
      0005ED 74s00            [12] 1066 	mov	a,#(_asincosf_a_1_24 >> 8)
      0005EF 35 F0            [12] 1067 	addc	a,b
      0005F1 F5 83            [12] 1068 	mov	dph,a
      0005F3 E5*00            [12] 1069 	mov	a,_bp
      0005F5 24 09            [12] 1070 	add	a,#0x09
      0005F7 F8               [12] 1071 	mov	r0,a
      0005F8 E4               [12] 1072 	clr	a
      0005F9 93               [24] 1073 	movc	a,@a+dptr
      0005FA F6               [12] 1074 	mov	@r0,a
      0005FB A3               [24] 1075 	inc	dptr
      0005FC E4               [12] 1076 	clr	a
      0005FD 93               [24] 1077 	movc	a,@a+dptr
      0005FE 08               [12] 1078 	inc	r0
      0005FF F6               [12] 1079 	mov	@r0,a
      000600 A3               [24] 1080 	inc	dptr
      000601 E4               [12] 1081 	clr	a
      000602 93               [24] 1082 	movc	a,@a+dptr
      000603 08               [12] 1083 	inc	r0
      000604 F6               [12] 1084 	mov	@r0,a
      000605 A3               [24] 1085 	inc	dptr
      000606 E4               [12] 1086 	clr	a
      000607 93               [24] 1087 	movc	a,@a+dptr
      000608 08               [12] 1088 	inc	r0
      000609 F6               [12] 1089 	mov	@r0,a
      00060A E5*00            [12] 1090 	mov	a,_bp
      00060C 24 11            [12] 1091 	add	a,#0x11
      00060E F8               [12] 1092 	mov	r0,a
      00060F E6               [12] 1093 	mov	a,@r0
      000610 C0 E0            [24] 1094 	push	acc
      000612 08               [12] 1095 	inc	r0
      000613 E6               [12] 1096 	mov	a,@r0
      000614 C0 E0            [24] 1097 	push	acc
      000616 08               [12] 1098 	inc	r0
      000617 E6               [12] 1099 	mov	a,@r0
      000618 C0 E0            [24] 1100 	push	acc
      00061A 08               [12] 1101 	inc	r0
      00061B E6               [12] 1102 	mov	a,@r0
      00061C C0 E0            [24] 1103 	push	acc
      00061E E5*00            [12] 1104 	mov	a,_bp
      000620 24 09            [12] 1105 	add	a,#0x09
      000622 F8               [12] 1106 	mov	r0,a
      000623 86 82            [24] 1107 	mov	dpl,@r0
      000625 08               [12] 1108 	inc	r0
      000626 86 83            [24] 1109 	mov	dph,@r0
      000628 08               [12] 1110 	inc	r0
      000629 86 F0            [24] 1111 	mov	b,@r0
      00062B 08               [12] 1112 	inc	r0
      00062C E6               [12] 1113 	mov	a,@r0
      00062D 12r00r00         [24] 1114 	lcall	___fsadd
      000630 AA 82            [24] 1115 	mov	r2,dpl
      000632 AB 83            [24] 1116 	mov	r3,dph
      000634 AE F0            [24] 1117 	mov	r6,b
      000636 FF               [12] 1118 	mov	r7,a
      000637 E5 81            [12] 1119 	mov	a,sp
      000639 24 FC            [12] 1120 	add	a,#0xfc
      00063B F5 81            [12] 1121 	mov	sp,a
      00063D E5*00            [12] 1122 	mov	a,_bp
      00063F 24 09            [12] 1123 	add	a,#0x09
      000641 F8               [12] 1124 	mov	r0,a
      000642 E6               [12] 1125 	mov	a,@r0
      000643 C0 E0            [24] 1126 	push	acc
      000645 08               [12] 1127 	inc	r0
      000646 E6               [12] 1128 	mov	a,@r0
      000647 C0 E0            [24] 1129 	push	acc
      000649 08               [12] 1130 	inc	r0
      00064A E6               [12] 1131 	mov	a,@r0
      00064B C0 E0            [24] 1132 	push	acc
      00064D 08               [12] 1133 	inc	r0
      00064E E6               [12] 1134 	mov	a,@r0
      00064F C0 E0            [24] 1135 	push	acc
      000651 8A 82            [24] 1136 	mov	dpl,r2
      000653 8B 83            [24] 1137 	mov	dph,r3
      000655 8E F0            [24] 1138 	mov	b,r6
      000657 EF               [12] 1139 	mov	a,r7
      000658 12r00r00         [24] 1140 	lcall	___fsadd
      00065B AC 82            [24] 1141 	mov	r4,dpl
      00065D AD 83            [24] 1142 	mov	r5,dph
      00065F AE F0            [24] 1143 	mov	r6,b
      000661 FF               [12] 1144 	mov	r7,a
      000662 E5 81            [12] 1145 	mov	a,sp
      000664 24 FC            [12] 1146 	add	a,#0xfc
      000666 F5 81            [12] 1147 	mov	sp,a
      000668 E5*00            [12] 1148 	mov	a,_bp
      00066A 24 11            [12] 1149 	add	a,#0x11
      00066C F8               [12] 1150 	mov	r0,a
      00066D A6 04            [24] 1151 	mov	@r0,ar4
      00066F 08               [12] 1152 	inc	r0
      000670 A6 05            [24] 1153 	mov	@r0,ar5
      000672 08               [12] 1154 	inc	r0
      000673 A6 06            [24] 1155 	mov	@r0,ar6
      000675 08               [12] 1156 	inc	r0
      000676 A6 07            [24] 1157 	mov	@r0,ar7
                                   1158 ;	asincosf.c:93: if (x < 0.0)
      000678 E4               [12] 1159 	clr	a
      000679 C0 E0            [24] 1160 	push	acc
      00067B C0 E0            [24] 1161 	push	acc
      00067D C0 E0            [24] 1162 	push	acc
      00067F C0 E0            [24] 1163 	push	acc
      000681 A8*00            [24] 1164 	mov	r0,_bp
      000683 08               [12] 1165 	inc	r0
      000684 86 82            [24] 1166 	mov	dpl,@r0
      000686 08               [12] 1167 	inc	r0
      000687 86 83            [24] 1168 	mov	dph,@r0
      000689 08               [12] 1169 	inc	r0
      00068A 86 F0            [24] 1170 	mov	b,@r0
      00068C 08               [12] 1171 	inc	r0
      00068D E6               [12] 1172 	mov	a,@r0
      00068E 12r00r00         [24] 1173 	lcall	___fslt
      000691 AF 82            [24] 1174 	mov	r7,dpl
      000693 E5 81            [12] 1175 	mov	a,sp
      000695 24 FC            [12] 1176 	add	a,#0xfc
      000697 F5 81            [12] 1177 	mov	sp,a
      000699 EF               [12] 1178 	mov	a,r7
      00069A 60 12            [24] 1179 	jz	00116$
                                   1180 ;	asincosf.c:94: r = -r;
      00069C E5*00            [12] 1181 	mov	a,_bp
      00069E 24 11            [12] 1182 	add	a,#0x11
      0006A0 F8               [12] 1183 	mov	r0,a
      0006A1 E6               [12] 1184 	mov	a,@r0
      0006A2 F6               [12] 1185 	mov	@r0,a
      0006A3 08               [12] 1186 	inc	r0
      0006A4 E6               [12] 1187 	mov	a,@r0
      0006A5 F6               [12] 1188 	mov	@r0,a
      0006A6 08               [12] 1189 	inc	r0
      0006A7 E6               [12] 1190 	mov	a,@r0
      0006A8 F6               [12] 1191 	mov	@r0,a
      0006A9 08               [12] 1192 	inc	r0
      0006AA E6               [12] 1193 	mov	a,@r0
      0006AB B2 E7            [12] 1194 	cpl	acc.7
      0006AD F6               [12] 1195 	mov	@r0,a
      0006AE                       1196 00116$:
                                   1197 ;	asincosf.c:96: return r;
      0006AE E5*00            [12] 1198 	mov	a,_bp
      0006B0 24 11            [12] 1199 	add	a,#0x11
      0006B2 F8               [12] 1200 	mov	r0,a
      0006B3 86 82            [24] 1201 	mov	dpl,@r0
      0006B5 08               [12] 1202 	inc	r0
      0006B6 86 83            [24] 1203 	mov	dph,@r0
      0006B8 08               [12] 1204 	inc	r0
      0006B9 86 F0            [24] 1205 	mov	b,@r0
      0006BB 08               [12] 1206 	inc	r0
      0006BC E6               [12] 1207 	mov	a,@r0
      0006BD                       1208 00117$:
      0006BD 85*00 81         [24] 1209 	mov	sp,_bp
      0006C0 D0*00            [24] 1210 	pop	_bp
      0006C2 22               [24] 1211 	ret
                                   1212 	.area CSEG    (CODE)
                                   1213 	.area CONST   (CODE)
      000000                       1214 _asincosf_a_1_24:
      000000 00 00 00 00           1215 	.byte #0x00,#0x00,#0x00,#0x00	;  0.000000e+00
      000004 DB 0F 49 3F           1216 	.byte #0xDB,#0x0F,#0x49,#0x3F	;  7.853982e-01
      000008                       1217 _asincosf_b_1_24:
      000008 DB 0F C9 3F           1218 	.byte #0xDB,#0x0F,#0xC9,#0x3F	;  1.570796e+00
      00000C DB 0F 49 3F           1219 	.byte #0xDB,#0x0F,#0x49,#0x3F	;  7.853982e-01
                                   1220 	.area XINIT   (CODE)
                                   1221 	.area CABS    (ABS,CODE)
