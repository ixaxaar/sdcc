                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:05 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _memmove
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _memmove
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'memmove'
                                     92 ;------------------------------------------------------------
                                     93 ;src                       Allocated to stack - _bp -5
                                     94 ;acount                    Allocated to stack - _bp -7
                                     95 ;dst                       Allocated to stack - _bp +1
                                     96 ;ret                       Allocated to stack - _bp +11
                                     97 ;d                         Allocated to registers r5 r6 r7 
                                     98 ;s                         Allocated to registers r2 r3 r4 
                                     99 ;sloc0                     Allocated to stack - _bp +4
                                    100 ;sloc1                     Allocated to stack - _bp +8
                                    101 ;------------------------------------------------------------
                                    102 ;	_memmove.c:40: void * memmove (
                                    103 ;	-----------------------------------------
                                    104 ;	 function memmove
                                    105 ;	-----------------------------------------
      000000                        106 _memmove:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 85 81*00         [24]  116 	mov	_bp,sp
      000005 C0 82            [24]  117 	push	dpl
      000007 C0 83            [24]  118 	push	dph
      000009 C0 F0            [24]  119 	push	b
      00000B E5 81            [12]  120 	mov	a,sp
      00000D 24 0A            [12]  121 	add	a,#0x0A
      00000F F5 81            [12]  122 	mov	sp,a
                                    123 ;	_memmove.c:46: void * ret = dst;
      000011 A8*00            [24]  124 	mov	r0,_bp
      000013 08               [12]  125 	inc	r0
      000014 E5*00            [12]  126 	mov	a,_bp
      000016 24 0B            [12]  127 	add	a,#0x0b
      000018 F9               [12]  128 	mov	r1,a
      000019 E6               [12]  129 	mov	a,@r0
      00001A F7               [12]  130 	mov	@r1,a
      00001B 08               [12]  131 	inc	r0
      00001C 09               [12]  132 	inc	r1
      00001D E6               [12]  133 	mov	a,@r0
      00001E F7               [12]  134 	mov	@r1,a
      00001F 08               [12]  135 	inc	r0
      000020 09               [12]  136 	inc	r1
      000021 E6               [12]  137 	mov	a,@r0
      000022 F7               [12]  138 	mov	@r1,a
                                    139 ;	_memmove.c:50: if ((uintptr_t)src < (uintptr_t)dst) {
      000023 E5*00            [12]  140 	mov	a,_bp
      000025 24 FB            [12]  141 	add	a,#0xfb
      000027 F8               [12]  142 	mov	r0,a
      000028 E5*00            [12]  143 	mov	a,_bp
      00002A 24 04            [12]  144 	add	a,#0x04
      00002C F9               [12]  145 	mov	r1,a
      00002D E6               [12]  146 	mov	a,@r0
      00002E F7               [12]  147 	mov	@r1,a
      00002F 08               [12]  148 	inc	r0
      000030 09               [12]  149 	inc	r1
      000031 E6               [12]  150 	mov	a,@r0
      000032 F7               [12]  151 	mov	@r1,a
      000033 08               [12]  152 	inc	r0
      000034 09               [12]  153 	inc	r1
      000035 E6               [12]  154 	mov	a,@r0
      000036 F7               [12]  155 	mov	@r1,a
      000037 09               [12]  156 	inc	r1
      000038 77 00            [12]  157 	mov	@r1,#0x00
      00003A A8*00            [24]  158 	mov	r0,_bp
      00003C 08               [12]  159 	inc	r0
      00003D 86 04            [24]  160 	mov	ar4,@r0
      00003F 08               [12]  161 	inc	r0
      000040 86 05            [24]  162 	mov	ar5,@r0
      000042 08               [12]  163 	inc	r0
      000043 86 06            [24]  164 	mov	ar6,@r0
      000045 7F 00            [12]  165 	mov	r7,#0x00
      000047 E5*00            [12]  166 	mov	a,_bp
      000049 24 04            [12]  167 	add	a,#0x04
      00004B F8               [12]  168 	mov	r0,a
      00004C C3               [12]  169 	clr	c
      00004D E6               [12]  170 	mov	a,@r0
      00004E 9C               [12]  171 	subb	a,r4
      00004F 08               [12]  172 	inc	r0
      000050 E6               [12]  173 	mov	a,@r0
      000051 9D               [12]  174 	subb	a,r5
      000052 08               [12]  175 	inc	r0
      000053 E6               [12]  176 	mov	a,@r0
      000054 9E               [12]  177 	subb	a,r6
      000055 08               [12]  178 	inc	r0
      000056 E6               [12]  179 	mov	a,@r0
      000057 9F               [12]  180 	subb	a,r7
      000058 40 03            [24]  181 	jc	00129$
      00005A 02r00rFD         [24]  182 	ljmp	00108$
      00005D                        183 00129$:
                                    184 ;	_memmove.c:54: d = ((char *)dst)+acount-1;
      00005D A8*00            [24]  185 	mov	r0,_bp
      00005F 08               [12]  186 	inc	r0
      000060 86 05            [24]  187 	mov	ar5,@r0
      000062 08               [12]  188 	inc	r0
      000063 86 06            [24]  189 	mov	ar6,@r0
      000065 08               [12]  190 	inc	r0
      000066 86 07            [24]  191 	mov	ar7,@r0
      000068 E5*00            [12]  192 	mov	a,_bp
      00006A 24 F9            [12]  193 	add	a,#0xf9
      00006C F8               [12]  194 	mov	r0,a
      00006D E6               [12]  195 	mov	a,@r0
      00006E 2D               [12]  196 	add	a,r5
      00006F FD               [12]  197 	mov	r5,a
      000070 08               [12]  198 	inc	r0
      000071 E6               [12]  199 	mov	a,@r0
      000072 3E               [12]  200 	addc	a,r6
      000073 FE               [12]  201 	mov	r6,a
      000074 1D               [12]  202 	dec	r5
      000075 BD FF 01         [24]  203 	cjne	r5,#0xFF,00130$
      000078 1E               [12]  204 	dec	r6
      000079                        205 00130$:
                                    206 ;	_memmove.c:55: s = ((char *)src)+acount-1;
      000079 E5*00            [12]  207 	mov	a,_bp
      00007B 24 FB            [12]  208 	add	a,#0xfb
      00007D F8               [12]  209 	mov	r0,a
      00007E 86 02            [24]  210 	mov	ar2,@r0
      000080 08               [12]  211 	inc	r0
      000081 86 03            [24]  212 	mov	ar3,@r0
      000083 08               [12]  213 	inc	r0
      000084 86 04            [24]  214 	mov	ar4,@r0
      000086 E5*00            [12]  215 	mov	a,_bp
      000088 24 F9            [12]  216 	add	a,#0xf9
      00008A F8               [12]  217 	mov	r0,a
      00008B E6               [12]  218 	mov	a,@r0
      00008C 2A               [12]  219 	add	a,r2
      00008D FA               [12]  220 	mov	r2,a
      00008E 08               [12]  221 	inc	r0
      00008F E6               [12]  222 	mov	a,@r0
      000090 3B               [12]  223 	addc	a,r3
      000091 FB               [12]  224 	mov	r3,a
      000092 1A               [12]  225 	dec	r2
      000093 BA FF 01         [24]  226 	cjne	r2,#0xFF,00131$
      000096 1B               [12]  227 	dec	r3
      000097                        228 00131$:
                                    229 ;	_memmove.c:56: while (acount--) {
      000097 E5*00            [12]  230 	mov	a,_bp
      000099 24 08            [12]  231 	add	a,#0x08
      00009B F8               [12]  232 	mov	r0,a
      00009C A6 02            [24]  233 	mov	@r0,ar2
      00009E 08               [12]  234 	inc	r0
      00009F A6 03            [24]  235 	mov	@r0,ar3
      0000A1 08               [12]  236 	inc	r0
      0000A2 A6 04            [24]  237 	mov	@r0,ar4
      0000A4 E5*00            [12]  238 	mov	a,_bp
      0000A6 24 F9            [12]  239 	add	a,#0xf9
      0000A8 F8               [12]  240 	mov	r0,a
      0000A9 E5*00            [12]  241 	mov	a,_bp
      0000AB 24 04            [12]  242 	add	a,#0x04
      0000AD F9               [12]  243 	mov	r1,a
      0000AE E6               [12]  244 	mov	a,@r0
      0000AF F7               [12]  245 	mov	@r1,a
      0000B0 08               [12]  246 	inc	r0
      0000B1 09               [12]  247 	inc	r1
      0000B2 E6               [12]  248 	mov	a,@r0
      0000B3 F7               [12]  249 	mov	@r1,a
      0000B4                        250 00101$:
      0000B4 E5*00            [12]  251 	mov	a,_bp
      0000B6 24 04            [12]  252 	add	a,#0x04
      0000B8 F8               [12]  253 	mov	r0,a
      0000B9 86 03            [24]  254 	mov	ar3,@r0
      0000BB 08               [12]  255 	inc	r0
      0000BC 86 04            [24]  256 	mov	ar4,@r0
      0000BE E5*00            [12]  257 	mov	a,_bp
      0000C0 24 04            [12]  258 	add	a,#0x04
      0000C2 F8               [12]  259 	mov	r0,a
      0000C3 16               [12]  260 	dec	@r0
      0000C4 B6 FF 02         [24]  261 	cjne	@r0,#0xFF,00132$
      0000C7 08               [12]  262 	inc	r0
      0000C8 16               [12]  263 	dec	@r0
      0000C9                        264 00132$:
      0000C9 EB               [12]  265 	mov	a,r3
      0000CA 4C               [12]  266 	orl	a,r4
      0000CB 70 03            [24]  267 	jnz	00133$
      0000CD 02r01r6F         [24]  268 	ljmp	00109$
      0000D0                        269 00133$:
                                    270 ;	_memmove.c:57: *d-- = *s--;
      0000D0 E5*00            [12]  271 	mov	a,_bp
      0000D2 24 08            [12]  272 	add	a,#0x08
      0000D4 F8               [12]  273 	mov	r0,a
      0000D5 86 82            [24]  274 	mov	dpl,@r0
      0000D7 08               [12]  275 	inc	r0
      0000D8 86 83            [24]  276 	mov	dph,@r0
      0000DA 08               [12]  277 	inc	r0
      0000DB 86 F0            [24]  278 	mov	b,@r0
      0000DD 12r00r00         [24]  279 	lcall	__gptrget
      0000E0 FC               [12]  280 	mov	r4,a
      0000E1 E5*00            [12]  281 	mov	a,_bp
      0000E3 24 08            [12]  282 	add	a,#0x08
      0000E5 F8               [12]  283 	mov	r0,a
      0000E6 16               [12]  284 	dec	@r0
      0000E7 B6 FF 02         [24]  285 	cjne	@r0,#0xFF,00134$
      0000EA 08               [12]  286 	inc	r0
      0000EB 16               [12]  287 	dec	@r0
      0000EC                        288 00134$:
      0000EC 8D 82            [24]  289 	mov	dpl,r5
      0000EE 8E 83            [24]  290 	mov	dph,r6
      0000F0 8F F0            [24]  291 	mov	b,r7
      0000F2 EC               [12]  292 	mov	a,r4
      0000F3 12r00r00         [24]  293 	lcall	__gptrput
      0000F6 1D               [12]  294 	dec	r5
      0000F7 BD FF 01         [24]  295 	cjne	r5,#0xFF,00135$
      0000FA 1E               [12]  296 	dec	r6
      0000FB                        297 00135$:
      0000FB 80 B7            [24]  298 	sjmp	00101$
      0000FD                        299 00108$:
                                    300 ;	_memmove.c:64: d = dst;
      0000FD A8*00            [24]  301 	mov	r0,_bp
      0000FF 08               [12]  302 	inc	r0
      000100 86 05            [24]  303 	mov	ar5,@r0
      000102 08               [12]  304 	inc	r0
      000103 86 06            [24]  305 	mov	ar6,@r0
      000105 08               [12]  306 	inc	r0
      000106 86 07            [24]  307 	mov	ar7,@r0
                                    308 ;	_memmove.c:65: s = src;
      000108 E5*00            [12]  309 	mov	a,_bp
      00010A 24 FB            [12]  310 	add	a,#0xfb
      00010C F8               [12]  311 	mov	r0,a
      00010D E5*00            [12]  312 	mov	a,_bp
      00010F 24 04            [12]  313 	add	a,#0x04
      000111 F9               [12]  314 	mov	r1,a
      000112 E6               [12]  315 	mov	a,@r0
      000113 F7               [12]  316 	mov	@r1,a
      000114 08               [12]  317 	inc	r0
      000115 09               [12]  318 	inc	r1
      000116 E6               [12]  319 	mov	a,@r0
      000117 F7               [12]  320 	mov	@r1,a
      000118 08               [12]  321 	inc	r0
      000119 09               [12]  322 	inc	r1
      00011A E6               [12]  323 	mov	a,@r0
      00011B F7               [12]  324 	mov	@r1,a
                                    325 ;	_memmove.c:66: while (acount--) {
      00011C E5*00            [12]  326 	mov	a,_bp
      00011E 24 F9            [12]  327 	add	a,#0xf9
      000120 F8               [12]  328 	mov	r0,a
      000121 E5*00            [12]  329 	mov	a,_bp
      000123 24 08            [12]  330 	add	a,#0x08
      000125 F9               [12]  331 	mov	r1,a
      000126 E6               [12]  332 	mov	a,@r0
      000127 F7               [12]  333 	mov	@r1,a
      000128 08               [12]  334 	inc	r0
      000129 09               [12]  335 	inc	r1
      00012A E6               [12]  336 	mov	a,@r0
      00012B F7               [12]  337 	mov	@r1,a
      00012C                        338 00104$:
      00012C E5*00            [12]  339 	mov	a,_bp
      00012E 24 08            [12]  340 	add	a,#0x08
      000130 F8               [12]  341 	mov	r0,a
      000131 86 03            [24]  342 	mov	ar3,@r0
      000133 08               [12]  343 	inc	r0
      000134 86 04            [24]  344 	mov	ar4,@r0
      000136 E5*00            [12]  345 	mov	a,_bp
      000138 24 08            [12]  346 	add	a,#0x08
      00013A F8               [12]  347 	mov	r0,a
      00013B 16               [12]  348 	dec	@r0
      00013C B6 FF 02         [24]  349 	cjne	@r0,#0xFF,00136$
      00013F 08               [12]  350 	inc	r0
      000140 16               [12]  351 	dec	@r0
      000141                        352 00136$:
      000141 EB               [12]  353 	mov	a,r3
      000142 4C               [12]  354 	orl	a,r4
      000143 60 2A            [24]  355 	jz	00109$
                                    356 ;	_memmove.c:67: *d++ = *s++;
      000145 E5*00            [12]  357 	mov	a,_bp
      000147 24 04            [12]  358 	add	a,#0x04
      000149 F8               [12]  359 	mov	r0,a
      00014A 86 82            [24]  360 	mov	dpl,@r0
      00014C 08               [12]  361 	inc	r0
      00014D 86 83            [24]  362 	mov	dph,@r0
      00014F 08               [12]  363 	inc	r0
      000150 86 F0            [24]  364 	mov	b,@r0
      000152 12r00r00         [24]  365 	lcall	__gptrget
      000155 FC               [12]  366 	mov	r4,a
      000156 A3               [24]  367 	inc	dptr
      000157 18               [12]  368 	dec	r0
      000158 18               [12]  369 	dec	r0
      000159 A6 82            [24]  370 	mov	@r0,dpl
      00015B 08               [12]  371 	inc	r0
      00015C A6 83            [24]  372 	mov	@r0,dph
      00015E 8D 82            [24]  373 	mov	dpl,r5
      000160 8E 83            [24]  374 	mov	dph,r6
      000162 8F F0            [24]  375 	mov	b,r7
      000164 EC               [12]  376 	mov	a,r4
      000165 12r00r00         [24]  377 	lcall	__gptrput
      000168 A3               [24]  378 	inc	dptr
      000169 AD 82            [24]  379 	mov	r5,dpl
      00016B AE 83            [24]  380 	mov	r6,dph
      00016D 80 BD            [24]  381 	sjmp	00104$
      00016F                        382 00109$:
                                    383 ;	_memmove.c:71: return(ret);
      00016F E5*00            [12]  384 	mov	a,_bp
      000171 24 0B            [12]  385 	add	a,#0x0b
      000173 F8               [12]  386 	mov	r0,a
      000174 86 82            [24]  387 	mov	dpl,@r0
      000176 08               [12]  388 	inc	r0
      000177 86 83            [24]  389 	mov	dph,@r0
      000179 08               [12]  390 	inc	r0
      00017A 86 F0            [24]  391 	mov	b,@r0
      00017C 85*00 81         [24]  392 	mov	sp,_bp
      00017F D0*00            [24]  393 	pop	_bp
      000181 22               [24]  394 	ret
                                    395 	.area CSEG    (CODE)
                                    396 	.area CONST   (CODE)
                                    397 	.area XINIT   (CODE)
                                    398 	.area CABS    (ABS,CODE)
