                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:05 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _ltoa
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl __ltoa
                                     13 	.globl __ultoa
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external initialized ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function '_ultoa'
                                     93 ;------------------------------------------------------------
                                     94 ;string                    Allocated to stack - _bp -5
                                     95 ;radix                     Allocated to stack - _bp -6
                                     96 ;value                     Allocated to stack - _bp +1
                                     97 ;buffer                    Allocated to stack - _bp +9
                                     98 ;index                     Allocated to registers r4 
                                     99 ;c                         Allocated to registers r6 
                                    100 ;sloc0                     Allocated to stack - _bp +5
                                    101 ;------------------------------------------------------------
                                    102 ;	_ltoa.c:56: void _ultoa(unsigned long value, char* string, unsigned char radix)
                                    103 ;	-----------------------------------------
                                    104 ;	 function _ultoa
                                    105 ;	-----------------------------------------
      000000                        106 __ultoa:
                           000007   107 	ar7 = 0x07
                           000006   108 	ar6 = 0x06
                           000005   109 	ar5 = 0x05
                           000004   110 	ar4 = 0x04
                           000003   111 	ar3 = 0x03
                           000002   112 	ar2 = 0x02
                           000001   113 	ar1 = 0x01
                           000000   114 	ar0 = 0x00
      000000 C0*00            [24]  115 	push	_bp
      000002 85 81*00         [24]  116 	mov	_bp,sp
      000005 C0 82            [24]  117 	push	dpl
      000007 C0 83            [24]  118 	push	dph
      000009 C0 F0            [24]  119 	push	b
      00000B C0 E0            [24]  120 	push	acc
      00000D E5 81            [12]  121 	mov	a,sp
      00000F 24 24            [12]  122 	add	a,#0x24
      000011 F5 81            [12]  123 	mov	sp,a
                                    124 ;	_ltoa.c:61: do {
      000013 E5*00            [12]  125 	mov	a,_bp
      000015 24 09            [12]  126 	add	a,#0x09
      000017 FB               [12]  127 	mov	r3,a
      000018 7C 20            [12]  128 	mov	r4,#0x20
      00001A                        129 00103$:
                                    130 ;	_ltoa.c:62: unsigned char c = '0' + (value % radix);
      00001A C0 03            [24]  131 	push	ar3
      00001C E5*00            [12]  132 	mov	a,_bp
      00001E 24 FA            [12]  133 	add	a,#0xfa
      000020 F8               [12]  134 	mov	r0,a
      000021 E5*00            [12]  135 	mov	a,_bp
      000023 24 05            [12]  136 	add	a,#0x05
      000025 F9               [12]  137 	mov	r1,a
      000026 E6               [12]  138 	mov	a,@r0
      000027 F7               [12]  139 	mov	@r1,a
      000028 09               [12]  140 	inc	r1
      000029 77 00            [12]  141 	mov	@r1,#0x00
      00002B 09               [12]  142 	inc	r1
      00002C 77 00            [12]  143 	mov	@r1,#0x00
      00002E 09               [12]  144 	inc	r1
      00002F 77 00            [12]  145 	mov	@r1,#0x00
      000031 C0 04            [24]  146 	push	ar4
      000033 E5*00            [12]  147 	mov	a,_bp
      000035 24 05            [12]  148 	add	a,#0x05
      000037 F8               [12]  149 	mov	r0,a
      000038 E6               [12]  150 	mov	a,@r0
      000039 C0 E0            [24]  151 	push	acc
      00003B 08               [12]  152 	inc	r0
      00003C E6               [12]  153 	mov	a,@r0
      00003D C0 E0            [24]  154 	push	acc
      00003F 08               [12]  155 	inc	r0
      000040 E6               [12]  156 	mov	a,@r0
      000041 C0 E0            [24]  157 	push	acc
      000043 08               [12]  158 	inc	r0
      000044 E6               [12]  159 	mov	a,@r0
      000045 C0 E0            [24]  160 	push	acc
      000047 A8*00            [24]  161 	mov	r0,_bp
      000049 08               [12]  162 	inc	r0
      00004A 86 82            [24]  163 	mov	dpl,@r0
      00004C 08               [12]  164 	inc	r0
      00004D 86 83            [24]  165 	mov	dph,@r0
      00004F 08               [12]  166 	inc	r0
      000050 86 F0            [24]  167 	mov	b,@r0
      000052 08               [12]  168 	inc	r0
      000053 E6               [12]  169 	mov	a,@r0
      000054 12r00r00         [24]  170 	lcall	__modulong
      000057 AA 82            [24]  171 	mov	r2,dpl
      000059 FF               [12]  172 	mov	r7,a
      00005A E5 81            [12]  173 	mov	a,sp
      00005C 24 FC            [12]  174 	add	a,#0xfc
      00005E F5 81            [12]  175 	mov	sp,a
      000060 D0 04            [24]  176 	pop	ar4
      000062 74 30            [12]  177 	mov	a,#0x30
      000064 2A               [12]  178 	add	a,r2
      000065 FE               [12]  179 	mov	r6,a
                                    180 ;	_ltoa.c:63: if (c > (unsigned char)'9')
      000066 C3               [12]  181 	clr	c
      000067 74 39            [12]  182 	mov	a,#0x39
      000069 9E               [12]  183 	subb	a,r6
      00006A D0 03            [24]  184 	pop	ar3
      00006C 50 06            [24]  185 	jnc	00102$
                                    186 ;	_ltoa.c:64: c += 'A' - '9' - 1;
      00006E 8E 07            [24]  187 	mov	ar7,r6
      000070 74 07            [12]  188 	mov	a,#0x07
      000072 2F               [12]  189 	add	a,r7
      000073 FE               [12]  190 	mov	r6,a
      000074                        191 00102$:
                                    192 ;	_ltoa.c:65: buffer[--index] = c;
      000074 1C               [12]  193 	dec	r4
      000075 EC               [12]  194 	mov	a,r4
      000076 2B               [12]  195 	add	a,r3
      000077 F8               [12]  196 	mov	r0,a
      000078 A6 06            [24]  197 	mov	@r0,ar6
                                    198 ;	_ltoa.c:66: value /= radix;
      00007A C0 04            [24]  199 	push	ar4
      00007C C0 03            [24]  200 	push	ar3
      00007E E5*00            [12]  201 	mov	a,_bp
      000080 24 05            [12]  202 	add	a,#0x05
      000082 F8               [12]  203 	mov	r0,a
      000083 E6               [12]  204 	mov	a,@r0
      000084 C0 E0            [24]  205 	push	acc
      000086 08               [12]  206 	inc	r0
      000087 E6               [12]  207 	mov	a,@r0
      000088 C0 E0            [24]  208 	push	acc
      00008A 08               [12]  209 	inc	r0
      00008B E6               [12]  210 	mov	a,@r0
      00008C C0 E0            [24]  211 	push	acc
      00008E 08               [12]  212 	inc	r0
      00008F E6               [12]  213 	mov	a,@r0
      000090 C0 E0            [24]  214 	push	acc
      000092 A8*00            [24]  215 	mov	r0,_bp
      000094 08               [12]  216 	inc	r0
      000095 86 82            [24]  217 	mov	dpl,@r0
      000097 08               [12]  218 	inc	r0
      000098 86 83            [24]  219 	mov	dph,@r0
      00009A 08               [12]  220 	inc	r0
      00009B 86 F0            [24]  221 	mov	b,@r0
      00009D 08               [12]  222 	inc	r0
      00009E E6               [12]  223 	mov	a,@r0
      00009F 12r00r00         [24]  224 	lcall	__divulong
      0000A2 A8*00            [24]  225 	mov	r0,_bp
      0000A4 08               [12]  226 	inc	r0
      0000A5 A6 82            [24]  227 	mov	@r0,dpl
      0000A7 08               [12]  228 	inc	r0
      0000A8 A6 83            [24]  229 	mov	@r0,dph
      0000AA 08               [12]  230 	inc	r0
      0000AB A6 F0            [24]  231 	mov	@r0,b
      0000AD 08               [12]  232 	inc	r0
      0000AE F6               [12]  233 	mov	@r0,a
      0000AF E5 81            [12]  234 	mov	a,sp
      0000B1 24 FC            [12]  235 	add	a,#0xfc
      0000B3 F5 81            [12]  236 	mov	sp,a
      0000B5 D0 03            [24]  237 	pop	ar3
      0000B7 D0 04            [24]  238 	pop	ar4
                                    239 ;	_ltoa.c:67: } while (value);
      0000B9 A8*00            [24]  240 	mov	r0,_bp
      0000BB 08               [12]  241 	inc	r0
      0000BC E6               [12]  242 	mov	a,@r0
      0000BD 08               [12]  243 	inc	r0
      0000BE 46               [12]  244 	orl	a,@r0
      0000BF 08               [12]  245 	inc	r0
      0000C0 46               [12]  246 	orl	a,@r0
      0000C1 08               [12]  247 	inc	r0
      0000C2 46               [12]  248 	orl	a,@r0
      0000C3 60 03            [24]  249 	jz	00128$
      0000C5 02r00r1A         [24]  250 	ljmp	00103$
      0000C8                        251 00128$:
                                    252 ;	_ltoa.c:69: do {
      0000C8 E5*00            [12]  253 	mov	a,_bp
      0000CA 24 FB            [12]  254 	add	a,#0xfb
      0000CC F8               [12]  255 	mov	r0,a
      0000CD 86 05            [24]  256 	mov	ar5,@r0
      0000CF 08               [12]  257 	inc	r0
      0000D0 86 06            [24]  258 	mov	ar6,@r0
      0000D2 08               [12]  259 	inc	r0
      0000D3 86 07            [24]  260 	mov	ar7,@r0
      0000D5                        261 00106$:
                                    262 ;	_ltoa.c:70: *string++ = buffer[index];
      0000D5 EC               [12]  263 	mov	a,r4
      0000D6 2B               [12]  264 	add	a,r3
      0000D7 F9               [12]  265 	mov	r1,a
      0000D8 87 02            [24]  266 	mov	ar2,@r1
      0000DA 8D 82            [24]  267 	mov	dpl,r5
      0000DC 8E 83            [24]  268 	mov	dph,r6
      0000DE 8F F0            [24]  269 	mov	b,r7
      0000E0 EA               [12]  270 	mov	a,r2
      0000E1 12r00r00         [24]  271 	lcall	__gptrput
      0000E4 A3               [24]  272 	inc	dptr
      0000E5 AD 82            [24]  273 	mov	r5,dpl
      0000E7 AE 83            [24]  274 	mov	r6,dph
                                    275 ;	_ltoa.c:71: } while ( ++index != NUMBER_OF_DIGITS );
      0000E9 0C               [12]  276 	inc	r4
      0000EA BC 20 E8         [24]  277 	cjne	r4,#0x20,00106$
                                    278 ;	_ltoa.c:73: *string = 0;  /* string terminator */
      0000ED 8D 82            [24]  279 	mov	dpl,r5
      0000EF 8E 83            [24]  280 	mov	dph,r6
      0000F1 8F F0            [24]  281 	mov	b,r7
      0000F3 E4               [12]  282 	clr	a
      0000F4 12r00r00         [24]  283 	lcall	__gptrput
      0000F7 85*00 81         [24]  284 	mov	sp,_bp
      0000FA D0*00            [24]  285 	pop	_bp
      0000FC 22               [24]  286 	ret
                                    287 ;------------------------------------------------------------
                                    288 ;Allocation info for local variables in function '_ltoa'
                                    289 ;------------------------------------------------------------
                                    290 ;string                    Allocated to stack - _bp -5
                                    291 ;radix                     Allocated to stack - _bp -6
                                    292 ;value                     Allocated to stack - _bp +1
                                    293 ;------------------------------------------------------------
                                    294 ;	_ltoa.c:76: void _ltoa(long value, char* string, unsigned char radix)
                                    295 ;	-----------------------------------------
                                    296 ;	 function _ltoa
                                    297 ;	-----------------------------------------
      0000FD                        298 __ltoa:
      0000FD C0*00            [24]  299 	push	_bp
      0000FF 85 81*00         [24]  300 	mov	_bp,sp
      000102 C0 82            [24]  301 	push	dpl
      000104 C0 83            [24]  302 	push	dph
      000106 C0 F0            [24]  303 	push	b
      000108 C0 E0            [24]  304 	push	acc
                                    305 ;	_ltoa.c:78: if (value < 0 && radix == 10) {
      00010A A8*00            [24]  306 	mov	r0,_bp
      00010C 08               [12]  307 	inc	r0
      00010D 08               [12]  308 	inc	r0
      00010E 08               [12]  309 	inc	r0
      00010F 08               [12]  310 	inc	r0
      000110 E6               [12]  311 	mov	a,@r0
      000111 30 E7 43         [24]  312 	jnb	acc.7,00102$
      000114 E5*00            [12]  313 	mov	a,_bp
      000116 24 FA            [12]  314 	add	a,#0xfa
      000118 F8               [12]  315 	mov	r0,a
      000119 B6 0A 3B         [24]  316 	cjne	@r0,#0x0A,00102$
                                    317 ;	_ltoa.c:79: *string++ = '-';
      00011C E5*00            [12]  318 	mov	a,_bp
      00011E 24 FB            [12]  319 	add	a,#0xfb
      000120 F8               [12]  320 	mov	r0,a
      000121 86 02            [24]  321 	mov	ar2,@r0
      000123 08               [12]  322 	inc	r0
      000124 86 03            [24]  323 	mov	ar3,@r0
      000126 08               [12]  324 	inc	r0
      000127 86 07            [24]  325 	mov	ar7,@r0
      000129 8A 82            [24]  326 	mov	dpl,r2
      00012B 8B 83            [24]  327 	mov	dph,r3
      00012D 8F F0            [24]  328 	mov	b,r7
      00012F 74 2D            [12]  329 	mov	a,#0x2D
      000131 12r00r00         [24]  330 	lcall	__gptrput
      000134 E5*00            [12]  331 	mov	a,_bp
      000136 24 FB            [12]  332 	add	a,#0xfb
      000138 F8               [12]  333 	mov	r0,a
      000139 74 01            [12]  334 	mov	a,#0x01
      00013B 2A               [12]  335 	add	a,r2
      00013C F6               [12]  336 	mov	@r0,a
      00013D E4               [12]  337 	clr	a
      00013E 3B               [12]  338 	addc	a,r3
      00013F 08               [12]  339 	inc	r0
      000140 F6               [12]  340 	mov	@r0,a
      000141 08               [12]  341 	inc	r0
      000142 A6 07            [24]  342 	mov	@r0,ar7
                                    343 ;	_ltoa.c:80: value = -value;
      000144 A8*00            [24]  344 	mov	r0,_bp
      000146 08               [12]  345 	inc	r0
      000147 C3               [12]  346 	clr	c
      000148 E4               [12]  347 	clr	a
      000149 96               [12]  348 	subb	a,@r0
      00014A F6               [12]  349 	mov	@r0,a
      00014B 08               [12]  350 	inc	r0
      00014C E4               [12]  351 	clr	a
      00014D 96               [12]  352 	subb	a,@r0
      00014E F6               [12]  353 	mov	@r0,a
      00014F 08               [12]  354 	inc	r0
      000150 E4               [12]  355 	clr	a
      000151 96               [12]  356 	subb	a,@r0
      000152 F6               [12]  357 	mov	@r0,a
      000153 08               [12]  358 	inc	r0
      000154 E4               [12]  359 	clr	a
      000155 96               [12]  360 	subb	a,@r0
      000156 F6               [12]  361 	mov	@r0,a
      000157                        362 00102$:
                                    363 ;	_ltoa.c:82: _ultoa(value, string, radix);
      000157 E5*00            [12]  364 	mov	a,_bp
      000159 24 FA            [12]  365 	add	a,#0xfa
      00015B F8               [12]  366 	mov	r0,a
      00015C E6               [12]  367 	mov	a,@r0
      00015D C0 E0            [24]  368 	push	acc
      00015F E5*00            [12]  369 	mov	a,_bp
      000161 24 FB            [12]  370 	add	a,#0xfb
      000163 F8               [12]  371 	mov	r0,a
      000164 E6               [12]  372 	mov	a,@r0
      000165 C0 E0            [24]  373 	push	acc
      000167 08               [12]  374 	inc	r0
      000168 E6               [12]  375 	mov	a,@r0
      000169 C0 E0            [24]  376 	push	acc
      00016B 08               [12]  377 	inc	r0
      00016C E6               [12]  378 	mov	a,@r0
      00016D C0 E0            [24]  379 	push	acc
      00016F A8*00            [24]  380 	mov	r0,_bp
      000171 08               [12]  381 	inc	r0
      000172 86 82            [24]  382 	mov	dpl,@r0
      000174 08               [12]  383 	inc	r0
      000175 86 83            [24]  384 	mov	dph,@r0
      000177 08               [12]  385 	inc	r0
      000178 86 F0            [24]  386 	mov	b,@r0
      00017A 08               [12]  387 	inc	r0
      00017B E6               [12]  388 	mov	a,@r0
      00017C 12r00r00         [24]  389 	lcall	__ultoa
      00017F E5 81            [12]  390 	mov	a,sp
      000181 24 FC            [12]  391 	add	a,#0xfc
      000183 F5 81            [12]  392 	mov	sp,a
      000185 85*00 81         [24]  393 	mov	sp,_bp
      000188 D0*00            [24]  394 	pop	_bp
      00018A 22               [24]  395 	ret
                                    396 	.area CSEG    (CODE)
                                    397 	.area CONST   (CODE)
                                    398 	.area XINIT   (CODE)
                                    399 	.area CABS    (ABS,CODE)
