                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:04 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _strrchr
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strrchr
                                     13 ;--------------------------------------------------------
                                     14 ; special function registers
                                     15 ;--------------------------------------------------------
                                     16 	.area RSEG    (ABS,DATA)
      000000                         17 	.org 0x0000
                                     18 ;--------------------------------------------------------
                                     19 ; special function bits
                                     20 ;--------------------------------------------------------
                                     21 	.area RSEG    (ABS,DATA)
      000000                         22 	.org 0x0000
                                     23 ;--------------------------------------------------------
                                     24 ; overlayable register banks
                                     25 ;--------------------------------------------------------
                                     26 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         27 	.ds 8
                                     28 ;--------------------------------------------------------
                                     29 ; internal ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DSEG    (DATA)
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable items in internal ram 
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; indirectly addressable internal ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area ISEG    (DATA)
                                     39 ;--------------------------------------------------------
                                     40 ; absolute internal ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area IABS    (ABS,DATA)
                                     43 	.area IABS    (ABS,DATA)
                                     44 ;--------------------------------------------------------
                                     45 ; bit data
                                     46 ;--------------------------------------------------------
                                     47 	.area BSEG    (BIT)
                                     48 ;--------------------------------------------------------
                                     49 ; paged external ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area PSEG    (PAG,XDATA)
                                     52 ;--------------------------------------------------------
                                     53 ; external ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area XSEG    (XDATA)
                                     56 ;--------------------------------------------------------
                                     57 ; absolute external ram data
                                     58 ;--------------------------------------------------------
                                     59 	.area XABS    (ABS,XDATA)
                                     60 ;--------------------------------------------------------
                                     61 ; external initialized ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area XISEG   (XDATA)
                                     64 	.area HOME    (CODE)
                                     65 	.area GSINIT0 (CODE)
                                     66 	.area GSINIT1 (CODE)
                                     67 	.area GSINIT2 (CODE)
                                     68 	.area GSINIT3 (CODE)
                                     69 	.area GSINIT4 (CODE)
                                     70 	.area GSINIT5 (CODE)
                                     71 	.area GSINIT  (CODE)
                                     72 	.area GSFINAL (CODE)
                                     73 	.area CSEG    (CODE)
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT  (CODE)
                                     79 	.area GSFINAL (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME    (CODE)
                                     85 	.area HOME    (CODE)
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CSEG    (CODE)
                                     90 ;------------------------------------------------------------
                                     91 ;Allocation info for local variables in function 'strrchr'
                                     92 ;------------------------------------------------------------
                                     93 ;ch                        Allocated to stack - _bp -3
                                     94 ;string                    Allocated to registers r5 r6 r7 
                                     95 ;start                     Allocated to stack - _bp +1
                                     96 ;------------------------------------------------------------
                                     97 ;	_strrchr.c:32: char * strrchr (
                                     98 ;	-----------------------------------------
                                     99 ;	 function strrchr
                                    100 ;	-----------------------------------------
      000000                        101 _strrchr:
                           000007   102 	ar7 = 0x07
                           000006   103 	ar6 = 0x06
                           000005   104 	ar5 = 0x05
                           000004   105 	ar4 = 0x04
                           000003   106 	ar3 = 0x03
                           000002   107 	ar2 = 0x02
                           000001   108 	ar1 = 0x01
                           000000   109 	ar0 = 0x00
      000000 C0*00            [24]  110 	push	_bp
      000002 85 81*00         [24]  111 	mov	_bp,sp
      000005 05 81            [12]  112 	inc	sp
      000007 05 81            [12]  113 	inc	sp
      000009 05 81            [12]  114 	inc	sp
      00000B AD 82            [24]  115 	mov	r5,dpl
      00000D AE 83            [24]  116 	mov	r6,dph
      00000F AF F0            [24]  117 	mov	r7,b
                                    118 ;	_strrchr.c:43: const char * start = string;
      000011 A8*00            [24]  119 	mov	r0,_bp
      000013 08               [12]  120 	inc	r0
      000014 A6 05            [24]  121 	mov	@r0,ar5
      000016 08               [12]  122 	inc	r0
      000017 A6 06            [24]  123 	mov	@r0,ar6
      000019 08               [12]  124 	inc	r0
      00001A A6 07            [24]  125 	mov	@r0,ar7
                                    126 ;	_strrchr.c:45: while (*string++)                       /* find end of string */
      00001C                        127 00101$:
      00001C 8D 82            [24]  128 	mov	dpl,r5
      00001E 8E 83            [24]  129 	mov	dph,r6
      000020 8F F0            [24]  130 	mov	b,r7
      000022 12r00r00         [24]  131 	lcall	__gptrget
      000025 FC               [12]  132 	mov	r4,a
      000026 A3               [24]  133 	inc	dptr
      000027 AD 82            [24]  134 	mov	r5,dpl
      000029 AE 83            [24]  135 	mov	r6,dph
      00002B EC               [12]  136 	mov	a,r4
      00002C 70 EE            [24]  137 	jnz	00101$
                                    138 ;	_strrchr.c:48: while (--string != start && *string != ch)
      00002E                        139 00105$:
      00002E 1D               [12]  140 	dec	r5
      00002F BD FF 01         [24]  141 	cjne	r5,#0xFF,00129$
      000032 1E               [12]  142 	dec	r6
      000033                        143 00129$:
      000033 A8*00            [24]  144 	mov	r0,_bp
      000035 08               [12]  145 	inc	r0
      000036 C0 05            [24]  146 	push	ar5
      000038 C0 06            [24]  147 	push	ar6
      00003A C0 07            [24]  148 	push	ar7
      00003C 86 82            [24]  149 	mov	dpl,@r0
      00003E 08               [12]  150 	inc	r0
      00003F 86 83            [24]  151 	mov	dph,@r0
      000041 08               [12]  152 	inc	r0
      000042 86 F0            [24]  153 	mov	b,@r0
      000044 12r00r00         [24]  154 	lcall	___gptr_cmp
      000047 15 81            [12]  155 	dec	sp
      000049 15 81            [12]  156 	dec	sp
      00004B 15 81            [12]  157 	dec	sp
      00004D 60 13            [24]  158 	jz	00107$
      00004F 8D 82            [24]  159 	mov	dpl,r5
      000051 8E 83            [24]  160 	mov	dph,r6
      000053 8F F0            [24]  161 	mov	b,r7
      000055 12r00r00         [24]  162 	lcall	__gptrget
      000058 FC               [12]  163 	mov	r4,a
      000059 E5*00            [12]  164 	mov	a,_bp
      00005B 24 FD            [12]  165 	add	a,#0xfd
      00005D F8               [12]  166 	mov	r0,a
      00005E E6               [12]  167 	mov	a,@r0
      00005F B5 04 CC         [24]  168 	cjne	a,ar4,00105$
      000062                        169 00107$:
                                    170 ;	_strrchr.c:51: if (*string == ch)                /* char found ? */
      000062 8D 82            [24]  171 	mov	dpl,r5
      000064 8E 83            [24]  172 	mov	dph,r6
      000066 8F F0            [24]  173 	mov	b,r7
      000068 12r00r00         [24]  174 	lcall	__gptrget
      00006B FC               [12]  175 	mov	r4,a
      00006C E5*00            [12]  176 	mov	a,_bp
      00006E 24 FD            [12]  177 	add	a,#0xfd
      000070 F8               [12]  178 	mov	r0,a
      000071 E6               [12]  179 	mov	a,@r0
      000072 B5 04 08         [24]  180 	cjne	a,ar4,00109$
                                    181 ;	_strrchr.c:52: return( (char *)string );
      000075 8D 82            [24]  182 	mov	dpl,r5
      000077 8E 83            [24]  183 	mov	dph,r6
      000079 8F F0            [24]  184 	mov	b,r7
      00007B 80 06            [24]  185 	sjmp	00110$
      00007D                        186 00109$:
                                    187 ;	_strrchr.c:54: return (NULL) ;
      00007D 90 00 00         [24]  188 	mov	dptr,#0x0000
      000080 75 F0 00         [24]  189 	mov	b,#0x00
      000083                        190 00110$:
      000083 85*00 81         [24]  191 	mov	sp,_bp
      000086 D0*00            [24]  192 	pop	_bp
      000088 22               [24]  193 	ret
                                    194 	.area CSEG    (CODE)
                                    195 	.area CONST   (CODE)
                                    196 	.area XINIT   (CODE)
                                    197 	.area CABS    (ABS,CODE)
