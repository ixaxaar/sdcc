                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:03 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module tancotf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _tancotf
                                     13 	.globl _fabsf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'tancotf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscotan                   Allocated to registers b0 
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;f                         Allocated to stack - _bp +9
                                    111 ;g                         Allocated to stack - _bp +13
                                    112 ;xn                        Allocated to stack - _bp +17
                                    113 ;xnum                      Allocated to stack - _bp +21
                                    114 ;xden                      Allocated to stack - _bp +25
                                    115 ;n                         Allocated to stack - _bp +29
                                    116 ;sloc0                     Allocated to stack - _bp +5
                                    117 ;------------------------------------------------------------
                                    118 ;	tancotf.c:53: float tancotf(const float x, const bool iscotan)
                                    119 ;	-----------------------------------------
                                    120 ;	 function tancotf
                                    121 ;	-----------------------------------------
      000000                        122 _tancotf:
                           000007   123 	ar7 = 0x07
                           000006   124 	ar6 = 0x06
                           000005   125 	ar5 = 0x05
                           000004   126 	ar4 = 0x04
                           000003   127 	ar3 = 0x03
                           000002   128 	ar2 = 0x02
                           000001   129 	ar1 = 0x01
                           000000   130 	ar0 = 0x00
      000000 C0*00            [24]  131 	push	_bp
      000002 85 81*00         [24]  132 	mov	_bp,sp
      000005 C0 82            [24]  133 	push	dpl
      000007 C0 83            [24]  134 	push	dph
      000009 C0 F0            [24]  135 	push	b
      00000B C0 E0            [24]  136 	push	acc
      00000D E5 81            [12]  137 	mov	a,sp
      00000F 24 1A            [12]  138 	add	a,#0x1A
      000011 F5 81            [12]  139 	mov	sp,a
                                    140 ;	tancotf.c:58: if (fabsf(x) > YMAX)
      000013 A8*00            [24]  141 	mov	r0,_bp
      000015 08               [12]  142 	inc	r0
      000016 86 82            [24]  143 	mov	dpl,@r0
      000018 08               [12]  144 	inc	r0
      000019 86 83            [24]  145 	mov	dph,@r0
      00001B 08               [12]  146 	inc	r0
      00001C 86 F0            [24]  147 	mov	b,@r0
      00001E 08               [12]  148 	inc	r0
      00001F E6               [12]  149 	mov	a,@r0
      000020 C0*00            [24]  150 	push	bits
      000022 12r00r00         [24]  151 	lcall	_fabsf
      000025 AA 82            [24]  152 	mov	r2,dpl
      000027 AB 83            [24]  153 	mov	r3,dph
      000029 AE F0            [24]  154 	mov	r6,b
      00002B FF               [12]  155 	mov	r7,a
      00002C D0*00            [24]  156 	pop	bits
      00002E C0*00            [24]  157 	push	bits
      000030 E4               [12]  158 	clr	a
      000031 C0 E0            [24]  159 	push	acc
      000033 74 08            [12]  160 	mov	a,#0x08
      000035 C0 E0            [24]  161 	push	acc
      000037 74 C9            [12]  162 	mov	a,#0xC9
      000039 C0 E0            [24]  163 	push	acc
      00003B 74 45            [12]  164 	mov	a,#0x45
      00003D C0 E0            [24]  165 	push	acc
      00003F 8A 82            [24]  166 	mov	dpl,r2
      000041 8B 83            [24]  167 	mov	dph,r3
      000043 8E F0            [24]  168 	mov	b,r6
      000045 EF               [12]  169 	mov	a,r7
      000046 12r00r00         [24]  170 	lcall	___fsgt
      000049 AF 82            [24]  171 	mov	r7,dpl
      00004B E5 81            [12]  172 	mov	a,sp
      00004D 24 FC            [12]  173 	add	a,#0xfc
      00004F F5 81            [12]  174 	mov	sp,a
      000051 D0*00            [24]  175 	pop	bits
      000053 EF               [12]  176 	mov	a,r7
      000054 60 0F            [24]  177 	jz	00102$
                                    178 ;	tancotf.c:60: errno = ERANGE;
      000056 75*00 22         [24]  179 	mov	_errno,#0x22
      000059 75*01 00         [24]  180 	mov	(_errno + 1),#0x00
                                    181 ;	tancotf.c:61: return 0.0;
      00005C 90 00 00         [24]  182 	mov	dptr,#(0x00&0x00ff)
      00005F E4               [12]  183 	clr	a
      000060 F5 F0            [12]  184 	mov	b,a
      000062 02r05rF9         [24]  185 	ljmp	00115$
      000065                        186 00102$:
                                    187 ;	tancotf.c:65: n=(x*TWO_O_PI+(x>0.0?0.5:-0.5)); /*works for +-x*/
      000065 C0*00            [24]  188 	push	bits
      000067 A8*00            [24]  189 	mov	r0,_bp
      000069 08               [12]  190 	inc	r0
      00006A E6               [12]  191 	mov	a,@r0
      00006B C0 E0            [24]  192 	push	acc
      00006D 08               [12]  193 	inc	r0
      00006E E6               [12]  194 	mov	a,@r0
      00006F C0 E0            [24]  195 	push	acc
      000071 08               [12]  196 	inc	r0
      000072 E6               [12]  197 	mov	a,@r0
      000073 C0 E0            [24]  198 	push	acc
      000075 08               [12]  199 	inc	r0
      000076 E6               [12]  200 	mov	a,@r0
      000077 C0 E0            [24]  201 	push	acc
      000079 90 F9 83         [24]  202 	mov	dptr,#0xF983
      00007C 75 F0 22         [24]  203 	mov	b,#0x22
      00007F 74 3F            [12]  204 	mov	a,#0x3F
      000081 12r00r00         [24]  205 	lcall	___fsmul
      000084 AC 82            [24]  206 	mov	r4,dpl
      000086 AD 83            [24]  207 	mov	r5,dph
      000088 AE F0            [24]  208 	mov	r6,b
      00008A FF               [12]  209 	mov	r7,a
      00008B E5 81            [12]  210 	mov	a,sp
      00008D 24 FC            [12]  211 	add	a,#0xfc
      00008F F5 81            [12]  212 	mov	sp,a
      000091 D0*00            [24]  213 	pop	bits
      000093 C0 07            [24]  214 	push	ar7
      000095 C0 06            [24]  215 	push	ar6
      000097 C0 05            [24]  216 	push	ar5
      000099 C0 04            [24]  217 	push	ar4
      00009B C0*00            [24]  218 	push	bits
      00009D E4               [12]  219 	clr	a
      00009E C0 E0            [24]  220 	push	acc
      0000A0 C0 E0            [24]  221 	push	acc
      0000A2 C0 E0            [24]  222 	push	acc
      0000A4 C0 E0            [24]  223 	push	acc
      0000A6 A8*00            [24]  224 	mov	r0,_bp
      0000A8 08               [12]  225 	inc	r0
      0000A9 86 82            [24]  226 	mov	dpl,@r0
      0000AB 08               [12]  227 	inc	r0
      0000AC 86 83            [24]  228 	mov	dph,@r0
      0000AE 08               [12]  229 	inc	r0
      0000AF 86 F0            [24]  230 	mov	b,@r0
      0000B1 08               [12]  231 	inc	r0
      0000B2 E6               [12]  232 	mov	a,@r0
      0000B3 12r00r00         [24]  233 	lcall	___fsgt
      0000B6 AB 82            [24]  234 	mov	r3,dpl
      0000B8 E5 81            [12]  235 	mov	a,sp
      0000BA 24 FC            [12]  236 	add	a,#0xfc
      0000BC F5 81            [12]  237 	mov	sp,a
      0000BE D0*00            [24]  238 	pop	bits
      0000C0 D0 04            [24]  239 	pop	ar4
      0000C2 D0 05            [24]  240 	pop	ar5
      0000C4 D0 06            [24]  241 	pop	ar6
      0000C6 D0 07            [24]  242 	pop	ar7
      0000C8 EB               [12]  243 	mov	a,r3
      0000C9 60 10            [24]  244 	jz	00117$
      0000CB E5*00            [12]  245 	mov	a,_bp
      0000CD 24 05            [12]  246 	add	a,#0x05
      0000CF F8               [12]  247 	mov	r0,a
      0000D0 E4               [12]  248 	clr	a
      0000D1 F6               [12]  249 	mov	@r0,a
      0000D2 08               [12]  250 	inc	r0
      0000D3 F6               [12]  251 	mov	@r0,a
      0000D4 08               [12]  252 	inc	r0
      0000D5 F6               [12]  253 	mov	@r0,a
      0000D6 08               [12]  254 	inc	r0
      0000D7 76 3F            [12]  255 	mov	@r0,#0x3F
      0000D9 80 0E            [24]  256 	sjmp	00118$
      0000DB                        257 00117$:
      0000DB E5*00            [12]  258 	mov	a,_bp
      0000DD 24 05            [12]  259 	add	a,#0x05
      0000DF F8               [12]  260 	mov	r0,a
      0000E0 E4               [12]  261 	clr	a
      0000E1 F6               [12]  262 	mov	@r0,a
      0000E2 08               [12]  263 	inc	r0
      0000E3 F6               [12]  264 	mov	@r0,a
      0000E4 08               [12]  265 	inc	r0
      0000E5 F6               [12]  266 	mov	@r0,a
      0000E6 08               [12]  267 	inc	r0
      0000E7 76 BF            [12]  268 	mov	@r0,#0xBF
      0000E9                        269 00118$:
      0000E9 C0*00            [24]  270 	push	bits
      0000EB E5*00            [12]  271 	mov	a,_bp
      0000ED 24 05            [12]  272 	add	a,#0x05
      0000EF F8               [12]  273 	mov	r0,a
      0000F0 E6               [12]  274 	mov	a,@r0
      0000F1 C0 E0            [24]  275 	push	acc
      0000F3 08               [12]  276 	inc	r0
      0000F4 E6               [12]  277 	mov	a,@r0
      0000F5 C0 E0            [24]  278 	push	acc
      0000F7 08               [12]  279 	inc	r0
      0000F8 E6               [12]  280 	mov	a,@r0
      0000F9 C0 E0            [24]  281 	push	acc
      0000FB 08               [12]  282 	inc	r0
      0000FC E6               [12]  283 	mov	a,@r0
      0000FD C0 E0            [24]  284 	push	acc
      0000FF 8C 82            [24]  285 	mov	dpl,r4
      000101 8D 83            [24]  286 	mov	dph,r5
      000103 8E F0            [24]  287 	mov	b,r6
      000105 EF               [12]  288 	mov	a,r7
      000106 12r00r00         [24]  289 	lcall	___fsadd
      000109 AC 82            [24]  290 	mov	r4,dpl
      00010B AD 83            [24]  291 	mov	r5,dph
      00010D AE F0            [24]  292 	mov	r6,b
      00010F FF               [12]  293 	mov	r7,a
      000110 E5 81            [12]  294 	mov	a,sp
      000112 24 FC            [12]  295 	add	a,#0xfc
      000114 F5 81            [12]  296 	mov	sp,a
      000116 D0*00            [24]  297 	pop	bits
      000118 8C 82            [24]  298 	mov	dpl,r4
      00011A 8D 83            [24]  299 	mov	dph,r5
      00011C 8E F0            [24]  300 	mov	b,r6
      00011E EF               [12]  301 	mov	a,r7
      00011F C0*00            [24]  302 	push	bits
      000121 12r00r00         [24]  303 	lcall	___fs2sint
      000124 AE 82            [24]  304 	mov	r6,dpl
      000126 AF 83            [24]  305 	mov	r7,dph
      000128 D0*00            [24]  306 	pop	bits
      00012A E5*00            [12]  307 	mov	a,_bp
      00012C 24 1D            [12]  308 	add	a,#0x1d
      00012E F8               [12]  309 	mov	r0,a
      00012F A6 06            [24]  310 	mov	@r0,ar6
      000131 08               [12]  311 	inc	r0
      000132 A6 07            [24]  312 	mov	@r0,ar7
                                    313 ;	tancotf.c:66: xn=n;
      000134 E5*00            [12]  314 	mov	a,_bp
      000136 24 1D            [12]  315 	add	a,#0x1d
      000138 F8               [12]  316 	mov	r0,a
      000139 86 82            [24]  317 	mov	dpl,@r0
      00013B 08               [12]  318 	inc	r0
      00013C 86 83            [24]  319 	mov	dph,@r0
      00013E C0*00            [24]  320 	push	bits
      000140 12r00r00         [24]  321 	lcall	___sint2fs
      000143 AA 82            [24]  322 	mov	r2,dpl
      000145 AB 83            [24]  323 	mov	r3,dph
      000147 AC F0            [24]  324 	mov	r4,b
      000149 FD               [12]  325 	mov	r5,a
      00014A D0*00            [24]  326 	pop	bits
      00014C E5*00            [12]  327 	mov	a,_bp
      00014E 24 11            [12]  328 	add	a,#0x11
      000150 F8               [12]  329 	mov	r0,a
      000151 A6 02            [24]  330 	mov	@r0,ar2
      000153 08               [12]  331 	inc	r0
      000154 A6 03            [24]  332 	mov	@r0,ar3
      000156 08               [12]  333 	inc	r0
      000157 A6 04            [24]  334 	mov	@r0,ar4
      000159 08               [12]  335 	inc	r0
      00015A A6 05            [24]  336 	mov	@r0,ar5
                                    337 ;	tancotf.c:68: xnum=(int)x;
      00015C A8*00            [24]  338 	mov	r0,_bp
      00015E 08               [12]  339 	inc	r0
      00015F 86 82            [24]  340 	mov	dpl,@r0
      000161 08               [12]  341 	inc	r0
      000162 86 83            [24]  342 	mov	dph,@r0
      000164 08               [12]  343 	inc	r0
      000165 86 F0            [24]  344 	mov	b,@r0
      000167 08               [12]  345 	inc	r0
      000168 E6               [12]  346 	mov	a,@r0
      000169 C0*00            [24]  347 	push	bits
      00016B 12r00r00         [24]  348 	lcall	___fs2sint
      00016E D0*00            [24]  349 	pop	bits
      000170 C0*00            [24]  350 	push	bits
      000172 12r00r00         [24]  351 	lcall	___sint2fs
      000175 AF 82            [24]  352 	mov	r7,dpl
      000177 AE 83            [24]  353 	mov	r6,dph
      000179 AD F0            [24]  354 	mov	r5,b
      00017B FC               [12]  355 	mov	r4,a
      00017C D0*00            [24]  356 	pop	bits
      00017E E5*00            [12]  357 	mov	a,_bp
      000180 24 15            [12]  358 	add	a,#0x15
      000182 F8               [12]  359 	mov	r0,a
      000183 A6 07            [24]  360 	mov	@r0,ar7
      000185 08               [12]  361 	inc	r0
      000186 A6 06            [24]  362 	mov	@r0,ar6
      000188 08               [12]  363 	inc	r0
      000189 A6 05            [24]  364 	mov	@r0,ar5
      00018B 08               [12]  365 	inc	r0
      00018C A6 04            [24]  366 	mov	@r0,ar4
                                    367 ;	tancotf.c:69: xden=x-xnum;
      00018E C0*00            [24]  368 	push	bits
      000190 E5*00            [12]  369 	mov	a,_bp
      000192 24 15            [12]  370 	add	a,#0x15
      000194 F8               [12]  371 	mov	r0,a
      000195 E6               [12]  372 	mov	a,@r0
      000196 C0 E0            [24]  373 	push	acc
      000198 08               [12]  374 	inc	r0
      000199 E6               [12]  375 	mov	a,@r0
      00019A C0 E0            [24]  376 	push	acc
      00019C 08               [12]  377 	inc	r0
      00019D E6               [12]  378 	mov	a,@r0
      00019E C0 E0            [24]  379 	push	acc
      0001A0 08               [12]  380 	inc	r0
      0001A1 E6               [12]  381 	mov	a,@r0
      0001A2 C0 E0            [24]  382 	push	acc
      0001A4 A8*00            [24]  383 	mov	r0,_bp
      0001A6 08               [12]  384 	inc	r0
      0001A7 86 82            [24]  385 	mov	dpl,@r0
      0001A9 08               [12]  386 	inc	r0
      0001AA 86 83            [24]  387 	mov	dph,@r0
      0001AC 08               [12]  388 	inc	r0
      0001AD 86 F0            [24]  389 	mov	b,@r0
      0001AF 08               [12]  390 	inc	r0
      0001B0 E6               [12]  391 	mov	a,@r0
      0001B1 12r00r00         [24]  392 	lcall	___fssub
      0001B4 AF 82            [24]  393 	mov	r7,dpl
      0001B6 AE 83            [24]  394 	mov	r6,dph
      0001B8 AD F0            [24]  395 	mov	r5,b
      0001BA FC               [12]  396 	mov	r4,a
      0001BB E5 81            [12]  397 	mov	a,sp
      0001BD 24 FC            [12]  398 	add	a,#0xfc
      0001BF F5 81            [12]  399 	mov	sp,a
      0001C1 D0*00            [24]  400 	pop	bits
      0001C3 E5*00            [12]  401 	mov	a,_bp
      0001C5 24 19            [12]  402 	add	a,#0x19
      0001C7 F8               [12]  403 	mov	r0,a
      0001C8 A6 07            [24]  404 	mov	@r0,ar7
      0001CA 08               [12]  405 	inc	r0
      0001CB A6 06            [24]  406 	mov	@r0,ar6
      0001CD 08               [12]  407 	inc	r0
      0001CE A6 05            [24]  408 	mov	@r0,ar5
      0001D0 08               [12]  409 	inc	r0
      0001D1 A6 04            [24]  410 	mov	@r0,ar4
                                    411 ;	tancotf.c:70: f=((xnum-xn*C1)+xden)-xn*C2;
      0001D3 C0*00            [24]  412 	push	bits
      0001D5 E5*00            [12]  413 	mov	a,_bp
      0001D7 24 11            [12]  414 	add	a,#0x11
      0001D9 F8               [12]  415 	mov	r0,a
      0001DA E6               [12]  416 	mov	a,@r0
      0001DB C0 E0            [24]  417 	push	acc
      0001DD 08               [12]  418 	inc	r0
      0001DE E6               [12]  419 	mov	a,@r0
      0001DF C0 E0            [24]  420 	push	acc
      0001E1 08               [12]  421 	inc	r0
      0001E2 E6               [12]  422 	mov	a,@r0
      0001E3 C0 E0            [24]  423 	push	acc
      0001E5 08               [12]  424 	inc	r0
      0001E6 E6               [12]  425 	mov	a,@r0
      0001E7 C0 E0            [24]  426 	push	acc
      0001E9 90 00 00         [24]  427 	mov	dptr,#0x0000
      0001EC 75 F0 C9         [24]  428 	mov	b,#0xC9
      0001EF 74 3F            [12]  429 	mov	a,#0x3F
      0001F1 12r00r00         [24]  430 	lcall	___fsmul
      0001F4 AC 82            [24]  431 	mov	r4,dpl
      0001F6 AD 83            [24]  432 	mov	r5,dph
      0001F8 AE F0            [24]  433 	mov	r6,b
      0001FA FF               [12]  434 	mov	r7,a
      0001FB E5 81            [12]  435 	mov	a,sp
      0001FD 24 FC            [12]  436 	add	a,#0xfc
      0001FF F5 81            [12]  437 	mov	sp,a
      000201 D0*00            [24]  438 	pop	bits
      000203 C0*00            [24]  439 	push	bits
      000205 C0 04            [24]  440 	push	ar4
      000207 C0 05            [24]  441 	push	ar5
      000209 C0 06            [24]  442 	push	ar6
      00020B C0 07            [24]  443 	push	ar7
      00020D E5*00            [12]  444 	mov	a,_bp
      00020F 24 15            [12]  445 	add	a,#0x15
      000211 F8               [12]  446 	mov	r0,a
      000212 86 82            [24]  447 	mov	dpl,@r0
      000214 08               [12]  448 	inc	r0
      000215 86 83            [24]  449 	mov	dph,@r0
      000217 08               [12]  450 	inc	r0
      000218 86 F0            [24]  451 	mov	b,@r0
      00021A 08               [12]  452 	inc	r0
      00021B E6               [12]  453 	mov	a,@r0
      00021C 12r00r00         [24]  454 	lcall	___fssub
      00021F AC 82            [24]  455 	mov	r4,dpl
      000221 AD 83            [24]  456 	mov	r5,dph
      000223 AE F0            [24]  457 	mov	r6,b
      000225 FF               [12]  458 	mov	r7,a
      000226 E5 81            [12]  459 	mov	a,sp
      000228 24 FC            [12]  460 	add	a,#0xfc
      00022A F5 81            [12]  461 	mov	sp,a
      00022C D0*00            [24]  462 	pop	bits
      00022E C0*00            [24]  463 	push	bits
      000230 E5*00            [12]  464 	mov	a,_bp
      000232 24 19            [12]  465 	add	a,#0x19
      000234 F8               [12]  466 	mov	r0,a
      000235 E6               [12]  467 	mov	a,@r0
      000236 C0 E0            [24]  468 	push	acc
      000238 08               [12]  469 	inc	r0
      000239 E6               [12]  470 	mov	a,@r0
      00023A C0 E0            [24]  471 	push	acc
      00023C 08               [12]  472 	inc	r0
      00023D E6               [12]  473 	mov	a,@r0
      00023E C0 E0            [24]  474 	push	acc
      000240 08               [12]  475 	inc	r0
      000241 E6               [12]  476 	mov	a,@r0
      000242 C0 E0            [24]  477 	push	acc
      000244 8C 82            [24]  478 	mov	dpl,r4
      000246 8D 83            [24]  479 	mov	dph,r5
      000248 8E F0            [24]  480 	mov	b,r6
      00024A EF               [12]  481 	mov	a,r7
      00024B 12r00r00         [24]  482 	lcall	___fsadd
      00024E C8               [12]  483 	xch	a,r0
      00024F E5*00            [12]  484 	mov	a,_bp
      000251 24 05            [12]  485 	add	a,#0x05
      000253 C8               [12]  486 	xch	a,r0
      000254 A6 82            [24]  487 	mov	@r0,dpl
      000256 08               [12]  488 	inc	r0
      000257 A6 83            [24]  489 	mov	@r0,dph
      000259 08               [12]  490 	inc	r0
      00025A A6 F0            [24]  491 	mov	@r0,b
      00025C 08               [12]  492 	inc	r0
      00025D F6               [12]  493 	mov	@r0,a
      00025E E5 81            [12]  494 	mov	a,sp
      000260 24 FC            [12]  495 	add	a,#0xfc
      000262 F5 81            [12]  496 	mov	sp,a
      000264 D0*00            [24]  497 	pop	bits
      000266 C0*00            [24]  498 	push	bits
      000268 E5*00            [12]  499 	mov	a,_bp
      00026A 24 11            [12]  500 	add	a,#0x11
      00026C F8               [12]  501 	mov	r0,a
      00026D E6               [12]  502 	mov	a,@r0
      00026E C0 E0            [24]  503 	push	acc
      000270 08               [12]  504 	inc	r0
      000271 E6               [12]  505 	mov	a,@r0
      000272 C0 E0            [24]  506 	push	acc
      000274 08               [12]  507 	inc	r0
      000275 E6               [12]  508 	mov	a,@r0
      000276 C0 E0            [24]  509 	push	acc
      000278 08               [12]  510 	inc	r0
      000279 E6               [12]  511 	mov	a,@r0
      00027A C0 E0            [24]  512 	push	acc
      00027C 90 AA 22         [24]  513 	mov	dptr,#0xAA22
      00027F 75 F0 FD         [24]  514 	mov	b,#0xFD
      000282 74 39            [12]  515 	mov	a,#0x39
      000284 12r00r00         [24]  516 	lcall	___fsmul
      000287 AA 82            [24]  517 	mov	r2,dpl
      000289 AB 83            [24]  518 	mov	r3,dph
      00028B AE F0            [24]  519 	mov	r6,b
      00028D FF               [12]  520 	mov	r7,a
      00028E E5 81            [12]  521 	mov	a,sp
      000290 24 FC            [12]  522 	add	a,#0xfc
      000292 F5 81            [12]  523 	mov	sp,a
      000294 D0*00            [24]  524 	pop	bits
      000296 C0*00            [24]  525 	push	bits
      000298 C0 02            [24]  526 	push	ar2
      00029A C0 03            [24]  527 	push	ar3
      00029C C0 06            [24]  528 	push	ar6
      00029E C0 07            [24]  529 	push	ar7
      0002A0 E5*00            [12]  530 	mov	a,_bp
      0002A2 24 05            [12]  531 	add	a,#0x05
      0002A4 F8               [12]  532 	mov	r0,a
      0002A5 86 82            [24]  533 	mov	dpl,@r0
      0002A7 08               [12]  534 	inc	r0
      0002A8 86 83            [24]  535 	mov	dph,@r0
      0002AA 08               [12]  536 	inc	r0
      0002AB 86 F0            [24]  537 	mov	b,@r0
      0002AD 08               [12]  538 	inc	r0
      0002AE E6               [12]  539 	mov	a,@r0
      0002AF 12r00r00         [24]  540 	lcall	___fssub
      0002B2 AC 82            [24]  541 	mov	r4,dpl
      0002B4 AD 83            [24]  542 	mov	r5,dph
      0002B6 AE F0            [24]  543 	mov	r6,b
      0002B8 FF               [12]  544 	mov	r7,a
      0002B9 E5 81            [12]  545 	mov	a,sp
      0002BB 24 FC            [12]  546 	add	a,#0xfc
      0002BD F5 81            [12]  547 	mov	sp,a
      0002BF D0*00            [24]  548 	pop	bits
      0002C1 E5*00            [12]  549 	mov	a,_bp
      0002C3 24 09            [12]  550 	add	a,#0x09
      0002C5 F8               [12]  551 	mov	r0,a
      0002C6 A6 04            [24]  552 	mov	@r0,ar4
      0002C8 08               [12]  553 	inc	r0
      0002C9 A6 05            [24]  554 	mov	@r0,ar5
      0002CB 08               [12]  555 	inc	r0
      0002CC A6 06            [24]  556 	mov	@r0,ar6
      0002CE 08               [12]  557 	inc	r0
      0002CF A6 07            [24]  558 	mov	@r0,ar7
                                    559 ;	tancotf.c:72: if (fabsf(f) < EPS)
      0002D1 E5*00            [12]  560 	mov	a,_bp
      0002D3 24 09            [12]  561 	add	a,#0x09
      0002D5 F8               [12]  562 	mov	r0,a
      0002D6 86 82            [24]  563 	mov	dpl,@r0
      0002D8 08               [12]  564 	inc	r0
      0002D9 86 83            [24]  565 	mov	dph,@r0
      0002DB 08               [12]  566 	inc	r0
      0002DC 86 F0            [24]  567 	mov	b,@r0
      0002DE 08               [12]  568 	inc	r0
      0002DF E6               [12]  569 	mov	a,@r0
      0002E0 C0*00            [24]  570 	push	bits
      0002E2 12r00r00         [24]  571 	lcall	_fabsf
      0002E5 AA 82            [24]  572 	mov	r2,dpl
      0002E7 AB 83            [24]  573 	mov	r3,dph
      0002E9 AE F0            [24]  574 	mov	r6,b
      0002EB FF               [12]  575 	mov	r7,a
      0002EC D0*00            [24]  576 	pop	bits
      0002EE C0*00            [24]  577 	push	bits
      0002F0 E4               [12]  578 	clr	a
      0002F1 C0 E0            [24]  579 	push	acc
      0002F3 C0 E0            [24]  580 	push	acc
      0002F5 74 80            [12]  581 	mov	a,#0x80
      0002F7 C0 E0            [24]  582 	push	acc
      0002F9 74 39            [12]  583 	mov	a,#0x39
      0002FB C0 E0            [24]  584 	push	acc
      0002FD 8A 82            [24]  585 	mov	dpl,r2
      0002FF 8B 83            [24]  586 	mov	dph,r3
      000301 8E F0            [24]  587 	mov	b,r6
      000303 EF               [12]  588 	mov	a,r7
      000304 12r00r00         [24]  589 	lcall	___fslt
      000307 AF 82            [24]  590 	mov	r7,dpl
      000309 E5 81            [12]  591 	mov	a,sp
      00030B 24 FC            [12]  592 	add	a,#0xfc
      00030D F5 81            [12]  593 	mov	sp,a
      00030F D0*00            [24]  594 	pop	bits
      000311 EF               [12]  595 	mov	a,r7
      000312 60 2A            [24]  596 	jz	00104$
                                    597 ;	tancotf.c:74: xnum = f;
      000314 E5*00            [12]  598 	mov	a,_bp
      000316 24 09            [12]  599 	add	a,#0x09
      000318 F8               [12]  600 	mov	r0,a
      000319 E5*00            [12]  601 	mov	a,_bp
      00031B 24 15            [12]  602 	add	a,#0x15
      00031D F9               [12]  603 	mov	r1,a
      00031E E6               [12]  604 	mov	a,@r0
      00031F F7               [12]  605 	mov	@r1,a
      000320 08               [12]  606 	inc	r0
      000321 09               [12]  607 	inc	r1
      000322 E6               [12]  608 	mov	a,@r0
      000323 F7               [12]  609 	mov	@r1,a
      000324 08               [12]  610 	inc	r0
      000325 09               [12]  611 	inc	r1
      000326 E6               [12]  612 	mov	a,@r0
      000327 F7               [12]  613 	mov	@r1,a
      000328 08               [12]  614 	inc	r0
      000329 09               [12]  615 	inc	r1
      00032A E6               [12]  616 	mov	a,@r0
      00032B F7               [12]  617 	mov	@r1,a
                                    618 ;	tancotf.c:75: xden = 1.0;
      00032C E5*00            [12]  619 	mov	a,_bp
      00032E 24 19            [12]  620 	add	a,#0x19
      000330 F8               [12]  621 	mov	r0,a
      000331 E4               [12]  622 	clr	a
      000332 F6               [12]  623 	mov	@r0,a
      000333 08               [12]  624 	inc	r0
      000334 F6               [12]  625 	mov	@r0,a
      000335 08               [12]  626 	inc	r0
      000336 76 80            [12]  627 	mov	@r0,#0x80
      000338 08               [12]  628 	inc	r0
      000339 76 3F            [12]  629 	mov	@r0,#0x3F
      00033B 02r04rE4         [24]  630 	ljmp	00105$
      00033E                        631 00104$:
                                    632 ;	tancotf.c:79: g = f*f;
      00033E C0*00            [24]  633 	push	bits
      000340 E5*00            [12]  634 	mov	a,_bp
      000342 24 09            [12]  635 	add	a,#0x09
      000344 F8               [12]  636 	mov	r0,a
      000345 E6               [12]  637 	mov	a,@r0
      000346 C0 E0            [24]  638 	push	acc
      000348 08               [12]  639 	inc	r0
      000349 E6               [12]  640 	mov	a,@r0
      00034A C0 E0            [24]  641 	push	acc
      00034C 08               [12]  642 	inc	r0
      00034D E6               [12]  643 	mov	a,@r0
      00034E C0 E0            [24]  644 	push	acc
      000350 08               [12]  645 	inc	r0
      000351 E6               [12]  646 	mov	a,@r0
      000352 C0 E0            [24]  647 	push	acc
      000354 E5*00            [12]  648 	mov	a,_bp
      000356 24 09            [12]  649 	add	a,#0x09
      000358 F8               [12]  650 	mov	r0,a
      000359 86 82            [24]  651 	mov	dpl,@r0
      00035B 08               [12]  652 	inc	r0
      00035C 86 83            [24]  653 	mov	dph,@r0
      00035E 08               [12]  654 	inc	r0
      00035F 86 F0            [24]  655 	mov	b,@r0
      000361 08               [12]  656 	inc	r0
      000362 E6               [12]  657 	mov	a,@r0
      000363 12r00r00         [24]  658 	lcall	___fsmul
      000366 AC 82            [24]  659 	mov	r4,dpl
      000368 AD 83            [24]  660 	mov	r5,dph
      00036A AE F0            [24]  661 	mov	r6,b
      00036C FF               [12]  662 	mov	r7,a
      00036D E5 81            [12]  663 	mov	a,sp
      00036F 24 FC            [12]  664 	add	a,#0xfc
      000371 F5 81            [12]  665 	mov	sp,a
      000373 D0*00            [24]  666 	pop	bits
      000375 E5*00            [12]  667 	mov	a,_bp
      000377 24 0D            [12]  668 	add	a,#0x0d
      000379 F8               [12]  669 	mov	r0,a
      00037A A6 04            [24]  670 	mov	@r0,ar4
      00037C 08               [12]  671 	inc	r0
      00037D A6 05            [24]  672 	mov	@r0,ar5
      00037F 08               [12]  673 	inc	r0
      000380 A6 06            [24]  674 	mov	@r0,ar6
      000382 08               [12]  675 	inc	r0
      000383 A6 07            [24]  676 	mov	@r0,ar7
                                    677 ;	tancotf.c:80: xnum = P(f,g);
      000385 C0*00            [24]  678 	push	bits
      000387 E5*00            [12]  679 	mov	a,_bp
      000389 24 0D            [12]  680 	add	a,#0x0d
      00038B F8               [12]  681 	mov	r0,a
      00038C E6               [12]  682 	mov	a,@r0
      00038D C0 E0            [24]  683 	push	acc
      00038F 08               [12]  684 	inc	r0
      000390 E6               [12]  685 	mov	a,@r0
      000391 C0 E0            [24]  686 	push	acc
      000393 08               [12]  687 	inc	r0
      000394 E6               [12]  688 	mov	a,@r0
      000395 C0 E0            [24]  689 	push	acc
      000397 08               [12]  690 	inc	r0
      000398 E6               [12]  691 	mov	a,@r0
      000399 C0 E0            [24]  692 	push	acc
      00039B 90 33 B8         [24]  693 	mov	dptr,#0x33B8
      00039E 75 F0 C4         [24]  694 	mov	b,#0xC4
      0003A1 74 BD            [12]  695 	mov	a,#0xBD
      0003A3 12r00r00         [24]  696 	lcall	___fsmul
      0003A6 AA 82            [24]  697 	mov	r2,dpl
      0003A8 AB 83            [24]  698 	mov	r3,dph
      0003AA AE F0            [24]  699 	mov	r6,b
      0003AC FF               [12]  700 	mov	r7,a
      0003AD E5 81            [12]  701 	mov	a,sp
      0003AF 24 FC            [12]  702 	add	a,#0xfc
      0003B1 F5 81            [12]  703 	mov	sp,a
      0003B3 D0*00            [24]  704 	pop	bits
      0003B5 C0*00            [24]  705 	push	bits
      0003B7 E5*00            [12]  706 	mov	a,_bp
      0003B9 24 09            [12]  707 	add	a,#0x09
      0003BB F8               [12]  708 	mov	r0,a
      0003BC E6               [12]  709 	mov	a,@r0
      0003BD C0 E0            [24]  710 	push	acc
      0003BF 08               [12]  711 	inc	r0
      0003C0 E6               [12]  712 	mov	a,@r0
      0003C1 C0 E0            [24]  713 	push	acc
      0003C3 08               [12]  714 	inc	r0
      0003C4 E6               [12]  715 	mov	a,@r0
      0003C5 C0 E0            [24]  716 	push	acc
      0003C7 08               [12]  717 	inc	r0
      0003C8 E6               [12]  718 	mov	a,@r0
      0003C9 C0 E0            [24]  719 	push	acc
      0003CB 8A 82            [24]  720 	mov	dpl,r2
      0003CD 8B 83            [24]  721 	mov	dph,r3
      0003CF 8E F0            [24]  722 	mov	b,r6
      0003D1 EF               [12]  723 	mov	a,r7
      0003D2 12r00r00         [24]  724 	lcall	___fsmul
      0003D5 AC 82            [24]  725 	mov	r4,dpl
      0003D7 AD 83            [24]  726 	mov	r5,dph
      0003D9 AE F0            [24]  727 	mov	r6,b
      0003DB FF               [12]  728 	mov	r7,a
      0003DC E5 81            [12]  729 	mov	a,sp
      0003DE 24 FC            [12]  730 	add	a,#0xfc
      0003E0 F5 81            [12]  731 	mov	sp,a
      0003E2 D0*00            [24]  732 	pop	bits
      0003E4 C0*00            [24]  733 	push	bits
      0003E6 E5*00            [12]  734 	mov	a,_bp
      0003E8 24 09            [12]  735 	add	a,#0x09
      0003EA F8               [12]  736 	mov	r0,a
      0003EB E6               [12]  737 	mov	a,@r0
      0003EC C0 E0            [24]  738 	push	acc
      0003EE 08               [12]  739 	inc	r0
      0003EF E6               [12]  740 	mov	a,@r0
      0003F0 C0 E0            [24]  741 	push	acc
      0003F2 08               [12]  742 	inc	r0
      0003F3 E6               [12]  743 	mov	a,@r0
      0003F4 C0 E0            [24]  744 	push	acc
      0003F6 08               [12]  745 	inc	r0
      0003F7 E6               [12]  746 	mov	a,@r0
      0003F8 C0 E0            [24]  747 	push	acc
      0003FA 8C 82            [24]  748 	mov	dpl,r4
      0003FC 8D 83            [24]  749 	mov	dph,r5
      0003FE 8E F0            [24]  750 	mov	b,r6
      000400 EF               [12]  751 	mov	a,r7
      000401 12r00r00         [24]  752 	lcall	___fsadd
      000404 AC 82            [24]  753 	mov	r4,dpl
      000406 AD 83            [24]  754 	mov	r5,dph
      000408 AE F0            [24]  755 	mov	r6,b
      00040A FF               [12]  756 	mov	r7,a
      00040B E5 81            [12]  757 	mov	a,sp
      00040D 24 FC            [12]  758 	add	a,#0xfc
      00040F F5 81            [12]  759 	mov	sp,a
      000411 D0*00            [24]  760 	pop	bits
      000413 E5*00            [12]  761 	mov	a,_bp
      000415 24 15            [12]  762 	add	a,#0x15
      000417 F8               [12]  763 	mov	r0,a
      000418 A6 04            [24]  764 	mov	@r0,ar4
      00041A 08               [12]  765 	inc	r0
      00041B A6 05            [24]  766 	mov	@r0,ar5
      00041D 08               [12]  767 	inc	r0
      00041E A6 06            [24]  768 	mov	@r0,ar6
      000420 08               [12]  769 	inc	r0
      000421 A6 07            [24]  770 	mov	@r0,ar7
                                    771 ;	tancotf.c:81: xden = Q(g);
      000423 C0*00            [24]  772 	push	bits
      000425 E5*00            [12]  773 	mov	a,_bp
      000427 24 0D            [12]  774 	add	a,#0x0d
      000429 F8               [12]  775 	mov	r0,a
      00042A E6               [12]  776 	mov	a,@r0
      00042B C0 E0            [24]  777 	push	acc
      00042D 08               [12]  778 	inc	r0
      00042E E6               [12]  779 	mov	a,@r0
      00042F C0 E0            [24]  780 	push	acc
      000431 08               [12]  781 	inc	r0
      000432 E6               [12]  782 	mov	a,@r0
      000433 C0 E0            [24]  783 	push	acc
      000435 08               [12]  784 	inc	r0
      000436 E6               [12]  785 	mov	a,@r0
      000437 C0 E0            [24]  786 	push	acc
      000439 90 33 75         [24]  787 	mov	dptr,#0x3375
      00043C 75 F0 1F         [24]  788 	mov	b,#0x1F
      00043F 74 3C            [12]  789 	mov	a,#0x3C
      000441 12r00r00         [24]  790 	lcall	___fsmul
      000444 AC 82            [24]  791 	mov	r4,dpl
      000446 AD 83            [24]  792 	mov	r5,dph
      000448 AE F0            [24]  793 	mov	r6,b
      00044A FF               [12]  794 	mov	r7,a
      00044B E5 81            [12]  795 	mov	a,sp
      00044D 24 FC            [12]  796 	add	a,#0xfc
      00044F F5 81            [12]  797 	mov	sp,a
      000451 D0*00            [24]  798 	pop	bits
      000453 C0*00            [24]  799 	push	bits
      000455 74 AF            [12]  800 	mov	a,#0xAF
      000457 C0 E0            [24]  801 	push	acc
      000459 74 B7            [12]  802 	mov	a,#0xB7
      00045B C0 E0            [24]  803 	push	acc
      00045D 03               [12]  804 	rr	a
      00045E C0 E0            [24]  805 	push	acc
      000460 74 BE            [12]  806 	mov	a,#0xBE
      000462 C0 E0            [24]  807 	push	acc
      000464 8C 82            [24]  808 	mov	dpl,r4
      000466 8D 83            [24]  809 	mov	dph,r5
      000468 8E F0            [24]  810 	mov	b,r6
      00046A EF               [12]  811 	mov	a,r7
      00046B 12r00r00         [24]  812 	lcall	___fsadd
      00046E AC 82            [24]  813 	mov	r4,dpl
      000470 AD 83            [24]  814 	mov	r5,dph
      000472 AE F0            [24]  815 	mov	r6,b
      000474 FF               [12]  816 	mov	r7,a
      000475 E5 81            [12]  817 	mov	a,sp
      000477 24 FC            [12]  818 	add	a,#0xfc
      000479 F5 81            [12]  819 	mov	sp,a
      00047B D0*00            [24]  820 	pop	bits
      00047D C0*00            [24]  821 	push	bits
      00047F E5*00            [12]  822 	mov	a,_bp
      000481 24 0D            [12]  823 	add	a,#0x0d
      000483 F8               [12]  824 	mov	r0,a
      000484 E6               [12]  825 	mov	a,@r0
      000485 C0 E0            [24]  826 	push	acc
      000487 08               [12]  827 	inc	r0
      000488 E6               [12]  828 	mov	a,@r0
      000489 C0 E0            [24]  829 	push	acc
      00048B 08               [12]  830 	inc	r0
      00048C E6               [12]  831 	mov	a,@r0
      00048D C0 E0            [24]  832 	push	acc
      00048F 08               [12]  833 	inc	r0
      000490 E6               [12]  834 	mov	a,@r0
      000491 C0 E0            [24]  835 	push	acc
      000493 8C 82            [24]  836 	mov	dpl,r4
      000495 8D 83            [24]  837 	mov	dph,r5
      000497 8E F0            [24]  838 	mov	b,r6
      000499 EF               [12]  839 	mov	a,r7
      00049A 12r00r00         [24]  840 	lcall	___fsmul
      00049D AC 82            [24]  841 	mov	r4,dpl
      00049F AD 83            [24]  842 	mov	r5,dph
      0004A1 AE F0            [24]  843 	mov	r6,b
      0004A3 FF               [12]  844 	mov	r7,a
      0004A4 E5 81            [12]  845 	mov	a,sp
      0004A6 24 FC            [12]  846 	add	a,#0xfc
      0004A8 F5 81            [12]  847 	mov	sp,a
      0004AA D0*00            [24]  848 	pop	bits
      0004AC C0*00            [24]  849 	push	bits
      0004AE E4               [12]  850 	clr	a
      0004AF C0 E0            [24]  851 	push	acc
      0004B1 C0 E0            [24]  852 	push	acc
      0004B3 74 80            [12]  853 	mov	a,#0x80
      0004B5 C0 E0            [24]  854 	push	acc
      0004B7 74 3F            [12]  855 	mov	a,#0x3F
      0004B9 C0 E0            [24]  856 	push	acc
      0004BB 8C 82            [24]  857 	mov	dpl,r4
      0004BD 8D 83            [24]  858 	mov	dph,r5
      0004BF 8E F0            [24]  859 	mov	b,r6
      0004C1 EF               [12]  860 	mov	a,r7
      0004C2 12r00r00         [24]  861 	lcall	___fsadd
      0004C5 AC 82            [24]  862 	mov	r4,dpl
      0004C7 AD 83            [24]  863 	mov	r5,dph
      0004C9 AE F0            [24]  864 	mov	r6,b
      0004CB FF               [12]  865 	mov	r7,a
      0004CC E5 81            [12]  866 	mov	a,sp
      0004CE 24 FC            [12]  867 	add	a,#0xfc
      0004D0 F5 81            [12]  868 	mov	sp,a
      0004D2 D0*00            [24]  869 	pop	bits
      0004D4 E5*00            [12]  870 	mov	a,_bp
      0004D6 24 19            [12]  871 	add	a,#0x19
      0004D8 F8               [12]  872 	mov	r0,a
      0004D9 A6 04            [24]  873 	mov	@r0,ar4
      0004DB 08               [12]  874 	inc	r0
      0004DC A6 05            [24]  875 	mov	@r0,ar5
      0004DE 08               [12]  876 	inc	r0
      0004DF A6 06            [24]  877 	mov	@r0,ar6
      0004E1 08               [12]  878 	inc	r0
      0004E2 A6 07            [24]  879 	mov	@r0,ar7
      0004E4                        880 00105$:
                                    881 ;	tancotf.c:84: if(n&1)
      0004E4 E5*00            [12]  882 	mov	a,_bp
      0004E6 24 1D            [12]  883 	add	a,#0x1d
      0004E8 F8               [12]  884 	mov	r0,a
      0004E9 E6               [12]  885 	mov	a,@r0
      0004EA 20 E0 03         [24]  886 	jb	acc.0,00140$
      0004ED 02r05r80         [24]  887 	ljmp	00113$
      0004F0                        888 00140$:
                                    889 ;	tancotf.c:87: if(iscotan) return (-xnum/xden);
      0004F0 30*00 47         [24]  890 	jnb	b0,00107$
      0004F3 E5*00            [12]  891 	mov	a,_bp
      0004F5 24 15            [12]  892 	add	a,#0x15
      0004F7 F8               [12]  893 	mov	r0,a
      0004F8 86 04            [24]  894 	mov	ar4,@r0
      0004FA 08               [12]  895 	inc	r0
      0004FB 86 05            [24]  896 	mov	ar5,@r0
      0004FD 08               [12]  897 	inc	r0
      0004FE 86 06            [24]  898 	mov	ar6,@r0
      000500 08               [12]  899 	inc	r0
      000501 E6               [12]  900 	mov	a,@r0
      000502 B2 E7            [12]  901 	cpl	acc.7
      000504 FF               [12]  902 	mov	r7,a
      000505 E5*00            [12]  903 	mov	a,_bp
      000507 24 19            [12]  904 	add	a,#0x19
      000509 F8               [12]  905 	mov	r0,a
      00050A E6               [12]  906 	mov	a,@r0
      00050B C0 E0            [24]  907 	push	acc
      00050D 08               [12]  908 	inc	r0
      00050E E6               [12]  909 	mov	a,@r0
      00050F C0 E0            [24]  910 	push	acc
      000511 08               [12]  911 	inc	r0
      000512 E6               [12]  912 	mov	a,@r0
      000513 C0 E0            [24]  913 	push	acc
      000515 08               [12]  914 	inc	r0
      000516 E6               [12]  915 	mov	a,@r0
      000517 C0 E0            [24]  916 	push	acc
      000519 8C 82            [24]  917 	mov	dpl,r4
      00051B 8D 83            [24]  918 	mov	dph,r5
      00051D 8E F0            [24]  919 	mov	b,r6
      00051F EF               [12]  920 	mov	a,r7
      000520 12r00r00         [24]  921 	lcall	___fsdiv
      000523 AC 82            [24]  922 	mov	r4,dpl
      000525 AD 83            [24]  923 	mov	r5,dph
      000527 AE F0            [24]  924 	mov	r6,b
      000529 FF               [12]  925 	mov	r7,a
      00052A E5 81            [12]  926 	mov	a,sp
      00052C 24 FC            [12]  927 	add	a,#0xfc
      00052E F5 81            [12]  928 	mov	sp,a
      000530 8C 82            [24]  929 	mov	dpl,r4
      000532 8D 83            [24]  930 	mov	dph,r5
      000534 8E F0            [24]  931 	mov	b,r6
      000536 EF               [12]  932 	mov	a,r7
      000537 02r05rF9         [24]  933 	ljmp	00115$
      00053A                        934 00107$:
                                    935 ;	tancotf.c:88: else return (-xden/xnum);
      00053A E5*00            [12]  936 	mov	a,_bp
      00053C 24 19            [12]  937 	add	a,#0x19
      00053E F8               [12]  938 	mov	r0,a
      00053F 86 04            [24]  939 	mov	ar4,@r0
      000541 08               [12]  940 	inc	r0
      000542 86 05            [24]  941 	mov	ar5,@r0
      000544 08               [12]  942 	inc	r0
      000545 86 06            [24]  943 	mov	ar6,@r0
      000547 08               [12]  944 	inc	r0
      000548 E6               [12]  945 	mov	a,@r0
      000549 B2 E7            [12]  946 	cpl	acc.7
      00054B FF               [12]  947 	mov	r7,a
      00054C E5*00            [12]  948 	mov	a,_bp
      00054E 24 15            [12]  949 	add	a,#0x15
      000550 F8               [12]  950 	mov	r0,a
      000551 E6               [12]  951 	mov	a,@r0
      000552 C0 E0            [24]  952 	push	acc
      000554 08               [12]  953 	inc	r0
      000555 E6               [12]  954 	mov	a,@r0
      000556 C0 E0            [24]  955 	push	acc
      000558 08               [12]  956 	inc	r0
      000559 E6               [12]  957 	mov	a,@r0
      00055A C0 E0            [24]  958 	push	acc
      00055C 08               [12]  959 	inc	r0
      00055D E6               [12]  960 	mov	a,@r0
      00055E C0 E0            [24]  961 	push	acc
      000560 8C 82            [24]  962 	mov	dpl,r4
      000562 8D 83            [24]  963 	mov	dph,r5
      000564 8E F0            [24]  964 	mov	b,r6
      000566 EF               [12]  965 	mov	a,r7
      000567 12r00r00         [24]  966 	lcall	___fsdiv
      00056A AC 82            [24]  967 	mov	r4,dpl
      00056C AD 83            [24]  968 	mov	r5,dph
      00056E AE F0            [24]  969 	mov	r6,b
      000570 FF               [12]  970 	mov	r7,a
      000571 E5 81            [12]  971 	mov	a,sp
      000573 24 FC            [12]  972 	add	a,#0xfc
      000575 F5 81            [12]  973 	mov	sp,a
      000577 8C 82            [24]  974 	mov	dpl,r4
      000579 8D 83            [24]  975 	mov	dph,r5
      00057B 8E F0            [24]  976 	mov	b,r6
      00057D EF               [12]  977 	mov	a,r7
      00057E 80 79            [24]  978 	sjmp	00115$
      000580                        979 00113$:
                                    980 ;	tancotf.c:92: if(iscotan) return (xden/xnum);
      000580 30*00 3C         [24]  981 	jnb	b0,00110$
      000583 E5*00            [12]  982 	mov	a,_bp
      000585 24 15            [12]  983 	add	a,#0x15
      000587 F8               [12]  984 	mov	r0,a
      000588 E6               [12]  985 	mov	a,@r0
      000589 C0 E0            [24]  986 	push	acc
      00058B 08               [12]  987 	inc	r0
      00058C E6               [12]  988 	mov	a,@r0
      00058D C0 E0            [24]  989 	push	acc
      00058F 08               [12]  990 	inc	r0
      000590 E6               [12]  991 	mov	a,@r0
      000591 C0 E0            [24]  992 	push	acc
      000593 08               [12]  993 	inc	r0
      000594 E6               [12]  994 	mov	a,@r0
      000595 C0 E0            [24]  995 	push	acc
      000597 E5*00            [12]  996 	mov	a,_bp
      000599 24 19            [12]  997 	add	a,#0x19
      00059B F8               [12]  998 	mov	r0,a
      00059C 86 82            [24]  999 	mov	dpl,@r0
      00059E 08               [12] 1000 	inc	r0
      00059F 86 83            [24] 1001 	mov	dph,@r0
      0005A1 08               [12] 1002 	inc	r0
      0005A2 86 F0            [24] 1003 	mov	b,@r0
      0005A4 08               [12] 1004 	inc	r0
      0005A5 E6               [12] 1005 	mov	a,@r0
      0005A6 12r00r00         [24] 1006 	lcall	___fsdiv
      0005A9 AC 82            [24] 1007 	mov	r4,dpl
      0005AB AD 83            [24] 1008 	mov	r5,dph
      0005AD AE F0            [24] 1009 	mov	r6,b
      0005AF FF               [12] 1010 	mov	r7,a
      0005B0 E5 81            [12] 1011 	mov	a,sp
      0005B2 24 FC            [12] 1012 	add	a,#0xfc
      0005B4 F5 81            [12] 1013 	mov	sp,a
      0005B6 8C 82            [24] 1014 	mov	dpl,r4
      0005B8 8D 83            [24] 1015 	mov	dph,r5
      0005BA 8E F0            [24] 1016 	mov	b,r6
      0005BC EF               [12] 1017 	mov	a,r7
      0005BD 80 3A            [24] 1018 	sjmp	00115$
      0005BF                       1019 00110$:
                                   1020 ;	tancotf.c:93: else return (xnum/xden);
      0005BF E5*00            [12] 1021 	mov	a,_bp
      0005C1 24 19            [12] 1022 	add	a,#0x19
      0005C3 F8               [12] 1023 	mov	r0,a
      0005C4 E6               [12] 1024 	mov	a,@r0
      0005C5 C0 E0            [24] 1025 	push	acc
      0005C7 08               [12] 1026 	inc	r0
      0005C8 E6               [12] 1027 	mov	a,@r0
      0005C9 C0 E0            [24] 1028 	push	acc
      0005CB 08               [12] 1029 	inc	r0
      0005CC E6               [12] 1030 	mov	a,@r0
      0005CD C0 E0            [24] 1031 	push	acc
      0005CF 08               [12] 1032 	inc	r0
      0005D0 E6               [12] 1033 	mov	a,@r0
      0005D1 C0 E0            [24] 1034 	push	acc
      0005D3 E5*00            [12] 1035 	mov	a,_bp
      0005D5 24 15            [12] 1036 	add	a,#0x15
      0005D7 F8               [12] 1037 	mov	r0,a
      0005D8 86 82            [24] 1038 	mov	dpl,@r0
      0005DA 08               [12] 1039 	inc	r0
      0005DB 86 83            [24] 1040 	mov	dph,@r0
      0005DD 08               [12] 1041 	inc	r0
      0005DE 86 F0            [24] 1042 	mov	b,@r0
      0005E0 08               [12] 1043 	inc	r0
      0005E1 E6               [12] 1044 	mov	a,@r0
      0005E2 12r00r00         [24] 1045 	lcall	___fsdiv
      0005E5 AC 82            [24] 1046 	mov	r4,dpl
      0005E7 AD 83            [24] 1047 	mov	r5,dph
      0005E9 AE F0            [24] 1048 	mov	r6,b
      0005EB FF               [12] 1049 	mov	r7,a
      0005EC E5 81            [12] 1050 	mov	a,sp
      0005EE 24 FC            [12] 1051 	add	a,#0xfc
      0005F0 F5 81            [12] 1052 	mov	sp,a
      0005F2 8C 82            [24] 1053 	mov	dpl,r4
      0005F4 8D 83            [24] 1054 	mov	dph,r5
      0005F6 8E F0            [24] 1055 	mov	b,r6
      0005F8 EF               [12] 1056 	mov	a,r7
      0005F9                       1057 00115$:
      0005F9 85*00 81         [24] 1058 	mov	sp,_bp
      0005FC D0*00            [24] 1059 	pop	_bp
      0005FE 22               [24] 1060 	ret
                                   1061 	.area CSEG    (CODE)
                                   1062 	.area CONST   (CODE)
                                   1063 	.area XINIT   (CODE)
                                   1064 	.area CABS    (ABS,CODE)
