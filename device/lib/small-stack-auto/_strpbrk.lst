                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:04 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module _strpbrk
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _strchr
                                     13 	.globl _strpbrk
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external initialized ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'strpbrk'
                                     93 ;------------------------------------------------------------
                                     94 ;control                   Allocated to stack - _bp -5
                                     95 ;string                    Allocated to stack - _bp +1
                                     96 ;ret                       Allocated to stack - _bp +4
                                     97 ;ch                        Allocated to registers 
                                     98 ;p                         Allocated to registers r2 r3 r4 
                                     99 ;------------------------------------------------------------
                                    100 ;	_strpbrk.c:31: char * strpbrk (
                                    101 ;	-----------------------------------------
                                    102 ;	 function strpbrk
                                    103 ;	-----------------------------------------
      000000                        104 _strpbrk:
                           000007   105 	ar7 = 0x07
                           000006   106 	ar6 = 0x06
                           000005   107 	ar5 = 0x05
                           000004   108 	ar4 = 0x04
                           000003   109 	ar3 = 0x03
                           000002   110 	ar2 = 0x02
                           000001   111 	ar1 = 0x01
                           000000   112 	ar0 = 0x00
      000000 C0*00            [24]  113 	push	_bp
      000002 85 81*00         [24]  114 	mov	_bp,sp
      000005 C0 82            [24]  115 	push	dpl
      000007 C0 83            [24]  116 	push	dph
      000009 C0 F0            [24]  117 	push	b
      00000B 05 81            [12]  118 	inc	sp
      00000D 05 81            [12]  119 	inc	sp
      00000F 05 81            [12]  120 	inc	sp
                                    121 ;	_strpbrk.c:36: char *ret = NULL;
      000011 E5*00            [12]  122 	mov	a,_bp
      000013 24 04            [12]  123 	add	a,#0x04
      000015 F8               [12]  124 	mov	r0,a
      000016 E4               [12]  125 	clr	a
      000017 F6               [12]  126 	mov	@r0,a
      000018 08               [12]  127 	inc	r0
      000019 F6               [12]  128 	mov	@r0,a
      00001A 08               [12]  129 	inc	r0
      00001B 76 00            [12]  130 	mov	@r0,#0x00
                                    131 ;	_strpbrk.c:39: while (ch = *control) {
      00001D E5*00            [12]  132 	mov	a,_bp
      00001F 24 FB            [12]  133 	add	a,#0xfb
      000021 F8               [12]  134 	mov	r0,a
      000022 86 05            [24]  135 	mov	ar5,@r0
      000024 08               [12]  136 	inc	r0
      000025 86 06            [24]  137 	mov	ar6,@r0
      000027 08               [12]  138 	inc	r0
      000028 86 07            [24]  139 	mov	ar7,@r0
      00002A                        140 00105$:
      00002A 8D 82            [24]  141 	mov	dpl,r5
      00002C 8E 83            [24]  142 	mov	dph,r6
      00002E 8F F0            [24]  143 	mov	b,r7
      000030 12r00r00         [24]  144 	lcall	__gptrget
      000033 FC               [12]  145 	mov	r4,a
      000034 60 67            [24]  146 	jz	00107$
                                    147 ;	_strpbrk.c:40: char * p = strchr(string, ch);
      000036 C0 07            [24]  148 	push	ar7
      000038 C0 06            [24]  149 	push	ar6
      00003A C0 05            [24]  150 	push	ar5
      00003C C0 04            [24]  151 	push	ar4
      00003E A8*00            [24]  152 	mov	r0,_bp
      000040 08               [12]  153 	inc	r0
      000041 86 82            [24]  154 	mov	dpl,@r0
      000043 08               [12]  155 	inc	r0
      000044 86 83            [24]  156 	mov	dph,@r0
      000046 08               [12]  157 	inc	r0
      000047 86 F0            [24]  158 	mov	b,@r0
      000049 12r00r00         [24]  159 	lcall	_strchr
      00004C AA 82            [24]  160 	mov	r2,dpl
      00004E AB 83            [24]  161 	mov	r3,dph
      000050 AC F0            [24]  162 	mov	r4,b
      000052 15 81            [12]  163 	dec	sp
      000054 D0 05            [24]  164 	pop	ar5
      000056 D0 06            [24]  165 	pop	ar6
      000058 D0 07            [24]  166 	pop	ar7
                                    167 ;	_strpbrk.c:41: if (p != NULL && (ret == NULL || p < ret)) {
      00005A EA               [12]  168 	mov	a,r2
      00005B 4B               [12]  169 	orl	a,r3
      00005C 60 38            [24]  170 	jz	00102$
      00005E E5*00            [12]  171 	mov	a,_bp
      000060 24 04            [12]  172 	add	a,#0x04
      000062 F8               [12]  173 	mov	r0,a
      000063 E6               [12]  174 	mov	a,@r0
      000064 08               [12]  175 	inc	r0
      000065 46               [12]  176 	orl	a,@r0
      000066 60 21            [24]  177 	jz	00101$
      000068 E5*00            [12]  178 	mov	a,_bp
      00006A 24 04            [12]  179 	add	a,#0x04
      00006C F8               [12]  180 	mov	r0,a
      00006D E6               [12]  181 	mov	a,@r0
      00006E C0 E0            [24]  182 	push	acc
      000070 08               [12]  183 	inc	r0
      000071 E6               [12]  184 	mov	a,@r0
      000072 C0 E0            [24]  185 	push	acc
      000074 08               [12]  186 	inc	r0
      000075 E6               [12]  187 	mov	a,@r0
      000076 C0 E0            [24]  188 	push	acc
      000078 8A 82            [24]  189 	mov	dpl,r2
      00007A 8B 83            [24]  190 	mov	dph,r3
      00007C 8C F0            [24]  191 	mov	b,r4
      00007E 12r00r00         [24]  192 	lcall	___gptr_cmp
      000081 15 81            [12]  193 	dec	sp
      000083 15 81            [12]  194 	dec	sp
      000085 15 81            [12]  195 	dec	sp
      000087 50 0D            [24]  196 	jnc	00102$
      000089                        197 00101$:
                                    198 ;	_strpbrk.c:42: ret = p;
      000089 E5*00            [12]  199 	mov	a,_bp
      00008B 24 04            [12]  200 	add	a,#0x04
      00008D F8               [12]  201 	mov	r0,a
      00008E A6 02            [24]  202 	mov	@r0,ar2
      000090 08               [12]  203 	inc	r0
      000091 A6 03            [24]  204 	mov	@r0,ar3
      000093 08               [12]  205 	inc	r0
      000094 A6 04            [24]  206 	mov	@r0,ar4
      000096                        207 00102$:
                                    208 ;	_strpbrk.c:44: control++;
      000096 0D               [12]  209 	inc	r5
      000097 BD 00 90         [24]  210 	cjne	r5,#0x00,00105$
      00009A 0E               [12]  211 	inc	r6
      00009B 80 8D            [24]  212 	sjmp	00105$
      00009D                        213 00107$:
                                    214 ;	_strpbrk.c:47: return (ret);
      00009D E5*00            [12]  215 	mov	a,_bp
      00009F 24 04            [12]  216 	add	a,#0x04
      0000A1 F8               [12]  217 	mov	r0,a
      0000A2 86 82            [24]  218 	mov	dpl,@r0
      0000A4 08               [12]  219 	inc	r0
      0000A5 86 83            [24]  220 	mov	dph,@r0
      0000A7 08               [12]  221 	inc	r0
      0000A8 86 F0            [24]  222 	mov	b,@r0
      0000AA 85*00 81         [24]  223 	mov	sp,_bp
      0000AD D0*00            [24]  224 	pop	_bp
      0000AF 22               [24]  225 	ret
                                    226 	.area CSEG    (CODE)
                                    227 	.area CONST   (CODE)
                                    228 	.area XINIT   (CODE)
                                    229 	.area CABS    (ABS,CODE)
