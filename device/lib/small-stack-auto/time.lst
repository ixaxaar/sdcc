                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:05 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module time
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl ___day
                                     13 	.globl ___month
                                     14 	.globl _RtcRead
                                     15 	.globl _sprintf
                                     16 	.globl _time
                                     17 	.globl _asctime
                                     18 	.globl _ctime
                                     19 	.globl _localtime
                                     20 	.globl _gmtime
                                     21 	.globl _mktime
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 	.area RSEG    (ABS,DATA)
      000000                         26 	.org 0x0000
                                     27 ;--------------------------------------------------------
                                     28 ; special function bits
                                     29 ;--------------------------------------------------------
                                     30 	.area RSEG    (ABS,DATA)
      000000                         31 	.org 0x0000
                                     32 ;--------------------------------------------------------
                                     33 ; overlayable register banks
                                     34 ;--------------------------------------------------------
                                     35 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         36 	.ds 8
                                     37 ;--------------------------------------------------------
                                     38 ; internal ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DSEG    (DATA)
      000000                         41 _ascTimeBuffer:
      000000                         42 	.ds 32
      000020                         43 _lastTime:
      000020                         44 	.ds 12
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable items in internal ram 
                                     47 ;--------------------------------------------------------
                                     48 ;--------------------------------------------------------
                                     49 ; indirectly addressable internal ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area ISEG    (DATA)
                                     52 ;--------------------------------------------------------
                                     53 ; absolute internal ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area IABS    (ABS,DATA)
                                     56 	.area IABS    (ABS,DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; bit data
                                     59 ;--------------------------------------------------------
                                     60 	.area BSEG    (BIT)
                                     61 ;--------------------------------------------------------
                                     62 ; paged external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area PSEG    (PAG,XDATA)
                                     65 ;--------------------------------------------------------
                                     66 ; external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XSEG    (XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; absolute external ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XABS    (ABS,XDATA)
                                     73 ;--------------------------------------------------------
                                     74 ; external initialized ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area XISEG   (XDATA)
                                     77 	.area HOME    (CODE)
                                     78 	.area GSINIT0 (CODE)
                                     79 	.area GSINIT1 (CODE)
                                     80 	.area GSINIT2 (CODE)
                                     81 	.area GSINIT3 (CODE)
                                     82 	.area GSINIT4 (CODE)
                                     83 	.area GSINIT5 (CODE)
                                     84 	.area GSINIT  (CODE)
                                     85 	.area GSFINAL (CODE)
                                     86 	.area CSEG    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area HOME    (CODE)
                                     91 	.area GSINIT  (CODE)
                                     92 	.area GSFINAL (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area HOME    (CODE)
                                     98 	.area HOME    (CODE)
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area CSEG    (CODE)
                                    103 ;------------------------------------------------------------
                                    104 ;Allocation info for local variables in function 'RtcRead'
                                    105 ;------------------------------------------------------------
                                    106 ;timeptr                   Allocated to registers 
                                    107 ;------------------------------------------------------------
                                    108 ;	time.c:42: unsigned char RtcRead(struct tm *timeptr) {
                                    109 ;	-----------------------------------------
                                    110 ;	 function RtcRead
                                    111 ;	-----------------------------------------
      000000                        112 _RtcRead:
                           000007   113 	ar7 = 0x07
                           000006   114 	ar6 = 0x06
                           000005   115 	ar5 = 0x05
                           000004   116 	ar4 = 0x04
                           000003   117 	ar3 = 0x03
                           000002   118 	ar2 = 0x02
                           000001   119 	ar1 = 0x01
                           000000   120 	ar0 = 0x00
                                    121 ;	time.c:45: return 0;
      000000 75 82 00         [24]  122 	mov	dpl,#0x00
      000003 22               [24]  123 	ret
                                    124 ;------------------------------------------------------------
                                    125 ;Allocation info for local variables in function 'time'
                                    126 ;------------------------------------------------------------
                                    127 ;timeptr                   Allocated to stack - _bp +1
                                    128 ;now                       Allocated to stack - _bp +8
                                    129 ;t                         Allocated to stack - _bp +4
                                    130 ;------------------------------------------------------------
                                    131 ;	time.c:50: time_t time(time_t *timeptr) {
                                    132 ;	-----------------------------------------
                                    133 ;	 function time
                                    134 ;	-----------------------------------------
      000004                        135 _time:
      000004 C0*00            [24]  136 	push	_bp
      000006 85 81*00         [24]  137 	mov	_bp,sp
      000009 C0 82            [24]  138 	push	dpl
      00000B C0 83            [24]  139 	push	dph
      00000D C0 F0            [24]  140 	push	b
      00000F E5 81            [12]  141 	mov	a,sp
      000011 24 10            [12]  142 	add	a,#0x10
      000013 F5 81            [12]  143 	mov	sp,a
                                    144 ;	time.c:52: time_t t=-1;
      000015 E5*00            [12]  145 	mov	a,_bp
      000017 24 04            [12]  146 	add	a,#0x04
      000019 F8               [12]  147 	mov	r0,a
      00001A 74 FF            [12]  148 	mov	a,#0xFF
      00001C F6               [12]  149 	mov	@r0,a
      00001D 08               [12]  150 	inc	r0
      00001E F6               [12]  151 	mov	@r0,a
      00001F 08               [12]  152 	inc	r0
      000020 F6               [12]  153 	mov	@r0,a
      000021 08               [12]  154 	inc	r0
      000022 F6               [12]  155 	mov	@r0,a
                                    156 ;	time.c:54: if (RtcRead(&now)) {
      000023 E5*00            [12]  157 	mov	a,_bp
      000025 24 08            [12]  158 	add	a,#0x08
      000027 FE               [12]  159 	mov	r6,a
      000028 FC               [12]  160 	mov	r4,a
      000029 7D 00            [12]  161 	mov	r5,#0x00
      00002B 7F 40            [12]  162 	mov	r7,#0x40
      00002D 8C 82            [24]  163 	mov	dpl,r4
      00002F 8D 83            [24]  164 	mov	dph,r5
      000031 8F F0            [24]  165 	mov	b,r7
      000033 C0 06            [24]  166 	push	ar6
      000035 12r00r00         [24]  167 	lcall	_RtcRead
      000038 E5 82            [12]  168 	mov	a,dpl
      00003A D0 06            [24]  169 	pop	ar6
      00003C 60 24            [24]  170 	jz	00102$
                                    171 ;	time.c:55: t=mktime(&now);
      00003E 7F 00            [12]  172 	mov	r7,#0x00
      000040 7D 40            [12]  173 	mov	r5,#0x40
      000042 8E 82            [24]  174 	mov	dpl,r6
      000044 8F 83            [24]  175 	mov	dph,r7
      000046 8D F0            [24]  176 	mov	b,r5
      000048 12r06r1F         [24]  177 	lcall	_mktime
      00004B AC 82            [24]  178 	mov	r4,dpl
      00004D AD 83            [24]  179 	mov	r5,dph
      00004F AE F0            [24]  180 	mov	r6,b
      000051 FF               [12]  181 	mov	r7,a
      000052 E5*00            [12]  182 	mov	a,_bp
      000054 24 04            [12]  183 	add	a,#0x04
      000056 F8               [12]  184 	mov	r0,a
      000057 A6 04            [24]  185 	mov	@r0,ar4
      000059 08               [12]  186 	inc	r0
      00005A A6 05            [24]  187 	mov	@r0,ar5
      00005C 08               [12]  188 	inc	r0
      00005D A6 06            [24]  189 	mov	@r0,ar6
      00005F 08               [12]  190 	inc	r0
      000060 A6 07            [24]  191 	mov	@r0,ar7
      000062                        192 00102$:
                                    193 ;	time.c:57: if (timeptr) {
      000062 A8*00            [24]  194 	mov	r0,_bp
      000064 08               [12]  195 	inc	r0
      000065 E6               [12]  196 	mov	a,@r0
      000066 08               [12]  197 	inc	r0
      000067 46               [12]  198 	orl	a,@r0
      000068 60 26            [24]  199 	jz	00104$
                                    200 ;	time.c:58: *timeptr=t;
      00006A A8*00            [24]  201 	mov	r0,_bp
      00006C 08               [12]  202 	inc	r0
      00006D 86 82            [24]  203 	mov	dpl,@r0
      00006F 08               [12]  204 	inc	r0
      000070 86 83            [24]  205 	mov	dph,@r0
      000072 08               [12]  206 	inc	r0
      000073 86 F0            [24]  207 	mov	b,@r0
      000075 E5*00            [12]  208 	mov	a,_bp
      000077 24 04            [12]  209 	add	a,#0x04
      000079 F9               [12]  210 	mov	r1,a
      00007A E7               [12]  211 	mov	a,@r1
      00007B 12r00r00         [24]  212 	lcall	__gptrput
      00007E A3               [24]  213 	inc	dptr
      00007F 09               [12]  214 	inc	r1
      000080 E7               [12]  215 	mov	a,@r1
      000081 12r00r00         [24]  216 	lcall	__gptrput
      000084 A3               [24]  217 	inc	dptr
      000085 09               [12]  218 	inc	r1
      000086 E7               [12]  219 	mov	a,@r1
      000087 12r00r00         [24]  220 	lcall	__gptrput
      00008A A3               [24]  221 	inc	dptr
      00008B 09               [12]  222 	inc	r1
      00008C E7               [12]  223 	mov	a,@r1
      00008D 12r00r00         [24]  224 	lcall	__gptrput
      000090                        225 00104$:
                                    226 ;	time.c:60: return t;
      000090 E5*00            [12]  227 	mov	a,_bp
      000092 24 04            [12]  228 	add	a,#0x04
      000094 F8               [12]  229 	mov	r0,a
      000095 86 82            [24]  230 	mov	dpl,@r0
      000097 08               [12]  231 	inc	r0
      000098 86 83            [24]  232 	mov	dph,@r0
      00009A 08               [12]  233 	inc	r0
      00009B 86 F0            [24]  234 	mov	b,@r0
      00009D 08               [12]  235 	inc	r0
      00009E E6               [12]  236 	mov	a,@r0
      00009F 85*00 81         [24]  237 	mov	sp,_bp
      0000A2 D0*00            [24]  238 	pop	_bp
      0000A4 22               [24]  239 	ret
                                    240 ;------------------------------------------------------------
                                    241 ;Allocation info for local variables in function 'CheckTime'
                                    242 ;------------------------------------------------------------
                                    243 ;timeptr                   Allocated to registers r5 r6 r7 
                                    244 ;------------------------------------------------------------
                                    245 ;	time.c:73: static void CheckTime(struct tm *timeptr) {
                                    246 ;	-----------------------------------------
                                    247 ;	 function CheckTime
                                    248 ;	-----------------------------------------
      0000A5                        249 _CheckTime:
                                    250 ;	time.c:84: if (timeptr->tm_sec>59) timeptr->tm_sec=59;
      0000A5 AD 82            [24]  251 	mov	r5,dpl
      0000A7 AE 83            [24]  252 	mov	r6,dph
      0000A9 AF F0            [24]  253 	mov	r7,b
      0000AB 12r00r00         [24]  254 	lcall	__gptrget
      0000AE FC               [12]  255 	mov  r4,a
      0000AF 24 C4            [12]  256 	add	a,#0xff - 0x3B
      0000B1 50 0B            [24]  257 	jnc	00102$
      0000B3 8D 82            [24]  258 	mov	dpl,r5
      0000B5 8E 83            [24]  259 	mov	dph,r6
      0000B7 8F F0            [24]  260 	mov	b,r7
      0000B9 74 3B            [12]  261 	mov	a,#0x3B
      0000BB 12r00r00         [24]  262 	lcall	__gptrput
      0000BE                        263 00102$:
                                    264 ;	time.c:85: if (timeptr->tm_min>59) timeptr->tm_min=59;
      0000BE 74 01            [12]  265 	mov	a,#0x01
      0000C0 2D               [12]  266 	add	a,r5
      0000C1 FA               [12]  267 	mov	r2,a
      0000C2 E4               [12]  268 	clr	a
      0000C3 3E               [12]  269 	addc	a,r6
      0000C4 FB               [12]  270 	mov	r3,a
      0000C5 8F 04            [24]  271 	mov	ar4,r7
      0000C7 8A 82            [24]  272 	mov	dpl,r2
      0000C9 8B 83            [24]  273 	mov	dph,r3
      0000CB 8C F0            [24]  274 	mov	b,r4
      0000CD 12r00r00         [24]  275 	lcall	__gptrget
      0000D0 F9               [12]  276 	mov  r1,a
      0000D1 24 C4            [12]  277 	add	a,#0xff - 0x3B
      0000D3 50 0B            [24]  278 	jnc	00104$
      0000D5 8A 82            [24]  279 	mov	dpl,r2
      0000D7 8B 83            [24]  280 	mov	dph,r3
      0000D9 8C F0            [24]  281 	mov	b,r4
      0000DB 74 3B            [12]  282 	mov	a,#0x3B
      0000DD 12r00r00         [24]  283 	lcall	__gptrput
      0000E0                        284 00104$:
                                    285 ;	time.c:86: if (timeptr->tm_hour>23) timeptr->tm_hour=23;
      0000E0 74 02            [12]  286 	mov	a,#0x02
      0000E2 2D               [12]  287 	add	a,r5
      0000E3 FA               [12]  288 	mov	r2,a
      0000E4 E4               [12]  289 	clr	a
      0000E5 3E               [12]  290 	addc	a,r6
      0000E6 FB               [12]  291 	mov	r3,a
      0000E7 8F 04            [24]  292 	mov	ar4,r7
      0000E9 8A 82            [24]  293 	mov	dpl,r2
      0000EB 8B 83            [24]  294 	mov	dph,r3
      0000ED 8C F0            [24]  295 	mov	b,r4
      0000EF 12r00r00         [24]  296 	lcall	__gptrget
      0000F2 F9               [12]  297 	mov  r1,a
      0000F3 24 E8            [12]  298 	add	a,#0xff - 0x17
      0000F5 50 0B            [24]  299 	jnc	00106$
      0000F7 8A 82            [24]  300 	mov	dpl,r2
      0000F9 8B 83            [24]  301 	mov	dph,r3
      0000FB 8C F0            [24]  302 	mov	b,r4
      0000FD 74 17            [12]  303 	mov	a,#0x17
      0000FF 12r00r00         [24]  304 	lcall	__gptrput
      000102                        305 00106$:
                                    306 ;	time.c:87: if (timeptr->tm_wday>6) timeptr->tm_wday=6;
      000102 74 07            [12]  307 	mov	a,#0x07
      000104 2D               [12]  308 	add	a,r5
      000105 FA               [12]  309 	mov	r2,a
      000106 E4               [12]  310 	clr	a
      000107 3E               [12]  311 	addc	a,r6
      000108 FB               [12]  312 	mov	r3,a
      000109 8F 04            [24]  313 	mov	ar4,r7
      00010B 8A 82            [24]  314 	mov	dpl,r2
      00010D 8B 83            [24]  315 	mov	dph,r3
      00010F 8C F0            [24]  316 	mov	b,r4
      000111 12r00r00         [24]  317 	lcall	__gptrget
      000114 F9               [12]  318 	mov  r1,a
      000115 24 F9            [12]  319 	add	a,#0xff - 0x06
      000117 50 0B            [24]  320 	jnc	00108$
      000119 8A 82            [24]  321 	mov	dpl,r2
      00011B 8B 83            [24]  322 	mov	dph,r3
      00011D 8C F0            [24]  323 	mov	b,r4
      00011F 74 06            [12]  324 	mov	a,#0x06
      000121 12r00r00         [24]  325 	lcall	__gptrput
      000124                        326 00108$:
                                    327 ;	time.c:88: if (timeptr->tm_mday<1) timeptr->tm_mday=1;
      000124 74 03            [12]  328 	mov	a,#0x03
      000126 2D               [12]  329 	add	a,r5
      000127 FA               [12]  330 	mov	r2,a
      000128 E4               [12]  331 	clr	a
      000129 3E               [12]  332 	addc	a,r6
      00012A FB               [12]  333 	mov	r3,a
      00012B 8F 04            [24]  334 	mov	ar4,r7
      00012D 8A 82            [24]  335 	mov	dpl,r2
      00012F 8B 83            [24]  336 	mov	dph,r3
      000131 8C F0            [24]  337 	mov	b,r4
      000133 12r00r00         [24]  338 	lcall	__gptrget
      000136 F9               [12]  339 	mov	r1,a
      000137 B9 01 00         [24]  340 	cjne	r1,#0x01,00148$
      00013A                        341 00148$:
      00013A 50 0D            [24]  342 	jnc	00112$
      00013C 8A 82            [24]  343 	mov	dpl,r2
      00013E 8B 83            [24]  344 	mov	dph,r3
      000140 8C F0            [24]  345 	mov	b,r4
      000142 74 01            [12]  346 	mov	a,#0x01
      000144 12r00r00         [24]  347 	lcall	__gptrput
      000147 80 10            [24]  348 	sjmp	00113$
      000149                        349 00112$:
                                    350 ;	time.c:89: else if (timeptr->tm_mday>31) timeptr->tm_mday=31;
      000149 E9               [12]  351 	mov	a,r1
      00014A 24 E0            [12]  352 	add	a,#0xff - 0x1F
      00014C 50 0B            [24]  353 	jnc	00113$
      00014E 8A 82            [24]  354 	mov	dpl,r2
      000150 8B 83            [24]  355 	mov	dph,r3
      000152 8C F0            [24]  356 	mov	b,r4
      000154 74 1F            [12]  357 	mov	a,#0x1F
      000156 12r00r00         [24]  358 	lcall	__gptrput
      000159                        359 00113$:
                                    360 ;	time.c:90: if (timeptr->tm_mon>11) timeptr->tm_mon=11;
      000159 74 04            [12]  361 	mov	a,#0x04
      00015B 2D               [12]  362 	add	a,r5
      00015C FA               [12]  363 	mov	r2,a
      00015D E4               [12]  364 	clr	a
      00015E 3E               [12]  365 	addc	a,r6
      00015F FB               [12]  366 	mov	r3,a
      000160 8F 04            [24]  367 	mov	ar4,r7
      000162 8A 82            [24]  368 	mov	dpl,r2
      000164 8B 83            [24]  369 	mov	dph,r3
      000166 8C F0            [24]  370 	mov	b,r4
      000168 12r00r00         [24]  371 	lcall	__gptrget
      00016B F9               [12]  372 	mov  r1,a
      00016C 24 F4            [12]  373 	add	a,#0xff - 0x0B
      00016E 50 0B            [24]  374 	jnc	00115$
      000170 8A 82            [24]  375 	mov	dpl,r2
      000172 8B 83            [24]  376 	mov	dph,r3
      000174 8C F0            [24]  377 	mov	b,r4
      000176 74 0B            [12]  378 	mov	a,#0x0B
      000178 12r00r00         [24]  379 	lcall	__gptrput
      00017B                        380 00115$:
                                    381 ;	time.c:91: if (timeptr->tm_year<0) timeptr->tm_year=0;
      00017B 74 05            [12]  382 	mov	a,#0x05
      00017D 2D               [12]  383 	add	a,r5
      00017E FD               [12]  384 	mov	r5,a
      00017F E4               [12]  385 	clr	a
      000180 3E               [12]  386 	addc	a,r6
      000181 FE               [12]  387 	mov	r6,a
      000182 8D 82            [24]  388 	mov	dpl,r5
      000184 8E 83            [24]  389 	mov	dph,r6
      000186 8F F0            [24]  390 	mov	b,r7
      000188 12r00r00         [24]  391 	lcall	__gptrget
      00018B FB               [12]  392 	mov	r3,a
      00018C A3               [24]  393 	inc	dptr
      00018D 12r00r00         [24]  394 	lcall	__gptrget
      000190 FC               [12]  395 	mov	r4,a
      000191 30 E7 0E         [24]  396 	jnb	acc.7,00118$
      000194 8D 82            [24]  397 	mov	dpl,r5
      000196 8E 83            [24]  398 	mov	dph,r6
      000198 8F F0            [24]  399 	mov	b,r7
      00019A E4               [12]  400 	clr	a
      00019B 12r00r00         [24]  401 	lcall	__gptrput
      00019E A3               [24]  402 	inc	dptr
      00019F 02r00r00         [24]  403 	ljmp	__gptrput
      0001A2                        404 00118$:
      0001A2 22               [24]  405 	ret
                                    406 ;------------------------------------------------------------
                                    407 ;Allocation info for local variables in function 'asctime'
                                    408 ;------------------------------------------------------------
                                    409 ;timeptr                   Allocated to stack - _bp +1
                                    410 ;sloc0                     Allocated to stack - _bp +4
                                    411 ;sloc1                     Allocated to stack - _bp +6
                                    412 ;sloc2                     Allocated to stack - _bp +9
                                    413 ;sloc3                     Allocated to stack - _bp +9
                                    414 ;sloc4                     Allocated to stack - _bp +11
                                    415 ;sloc5                     Allocated to stack - _bp +13
                                    416 ;------------------------------------------------------------
                                    417 ;	time.c:95: char *asctime(struct tm *timeptr) {
                                    418 ;	-----------------------------------------
                                    419 ;	 function asctime
                                    420 ;	-----------------------------------------
      0001A3                        421 _asctime:
      0001A3 C0*00            [24]  422 	push	_bp
      0001A5 85 81*00         [24]  423 	mov	_bp,sp
      0001A8 C0 82            [24]  424 	push	dpl
      0001AA C0 83            [24]  425 	push	dph
      0001AC C0 F0            [24]  426 	push	b
      0001AE E5 81            [12]  427 	mov	a,sp
      0001B0 24 0C            [12]  428 	add	a,#0x0C
      0001B2 F5 81            [12]  429 	mov	sp,a
                                    430 ;	time.c:96: CheckTime(timeptr);
      0001B4 A8*00            [24]  431 	mov	r0,_bp
      0001B6 08               [12]  432 	inc	r0
      0001B7 86 82            [24]  433 	mov	dpl,@r0
      0001B9 08               [12]  434 	inc	r0
      0001BA 86 83            [24]  435 	mov	dph,@r0
      0001BC 08               [12]  436 	inc	r0
      0001BD 86 F0            [24]  437 	mov	b,@r0
      0001BF 12r00rA5         [24]  438 	lcall	_CheckTime
                                    439 ;	time.c:100: timeptr->tm_year+1900);
      0001C2 A8*00            [24]  440 	mov	r0,_bp
      0001C4 08               [12]  441 	inc	r0
      0001C5 74 05            [12]  442 	mov	a,#0x05
      0001C7 26               [12]  443 	add	a,@r0
      0001C8 FA               [12]  444 	mov	r2,a
      0001C9 E4               [12]  445 	clr	a
      0001CA 08               [12]  446 	inc	r0
      0001CB 36               [12]  447 	addc	a,@r0
      0001CC FB               [12]  448 	mov	r3,a
      0001CD 08               [12]  449 	inc	r0
      0001CE 86 04            [24]  450 	mov	ar4,@r0
      0001D0 8A 82            [24]  451 	mov	dpl,r2
      0001D2 8B 83            [24]  452 	mov	dph,r3
      0001D4 8C F0            [24]  453 	mov	b,r4
      0001D6 12r00r00         [24]  454 	lcall	__gptrget
      0001D9 FA               [12]  455 	mov	r2,a
      0001DA A3               [24]  456 	inc	dptr
      0001DB 12r00r00         [24]  457 	lcall	__gptrget
      0001DE FB               [12]  458 	mov	r3,a
      0001DF 74 6C            [12]  459 	mov	a,#0x6C
      0001E1 2A               [12]  460 	add	a,r2
      0001E2 FF               [12]  461 	mov	r7,a
      0001E3 74 07            [12]  462 	mov	a,#0x07
      0001E5 3B               [12]  463 	addc	a,r3
      0001E6 FE               [12]  464 	mov	r6,a
                                    465 ;	time.c:99: timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 
      0001E7 A8*00            [24]  466 	mov	r0,_bp
      0001E9 08               [12]  467 	inc	r0
      0001EA 86 82            [24]  468 	mov	dpl,@r0
      0001EC 08               [12]  469 	inc	r0
      0001ED 86 83            [24]  470 	mov	dph,@r0
      0001EF 08               [12]  471 	inc	r0
      0001F0 86 F0            [24]  472 	mov	b,@r0
      0001F2 12r00r00         [24]  473 	lcall	__gptrget
      0001F5 FC               [12]  474 	mov	r4,a
      0001F6 E5*00            [12]  475 	mov	a,_bp
      0001F8 24 04            [12]  476 	add	a,#0x04
      0001FA F8               [12]  477 	mov	r0,a
      0001FB A6 04            [24]  478 	mov	@r0,ar4
      0001FD 08               [12]  479 	inc	r0
      0001FE 76 00            [12]  480 	mov	@r0,#0x00
      000200 A8*00            [24]  481 	mov	r0,_bp
      000202 08               [12]  482 	inc	r0
      000203 74 01            [12]  483 	mov	a,#0x01
      000205 26               [12]  484 	add	a,@r0
      000206 FD               [12]  485 	mov	r5,a
      000207 E4               [12]  486 	clr	a
      000208 08               [12]  487 	inc	r0
      000209 36               [12]  488 	addc	a,@r0
      00020A FC               [12]  489 	mov	r4,a
      00020B 08               [12]  490 	inc	r0
      00020C 86 03            [24]  491 	mov	ar3,@r0
      00020E 8D 82            [24]  492 	mov	dpl,r5
      000210 8C 83            [24]  493 	mov	dph,r4
      000212 8B F0            [24]  494 	mov	b,r3
      000214 12r00r00         [24]  495 	lcall	__gptrget
      000217 FD               [12]  496 	mov	r5,a
      000218 E5*00            [12]  497 	mov	a,_bp
      00021A 24 06            [12]  498 	add	a,#0x06
      00021C F8               [12]  499 	mov	r0,a
      00021D A6 05            [24]  500 	mov	@r0,ar5
      00021F 08               [12]  501 	inc	r0
      000220 76 00            [12]  502 	mov	@r0,#0x00
      000222 A8*00            [24]  503 	mov	r0,_bp
      000224 08               [12]  504 	inc	r0
      000225 74 02            [12]  505 	mov	a,#0x02
      000227 26               [12]  506 	add	a,@r0
      000228 FB               [12]  507 	mov	r3,a
      000229 E4               [12]  508 	clr	a
      00022A 08               [12]  509 	inc	r0
      00022B 36               [12]  510 	addc	a,@r0
      00022C FC               [12]  511 	mov	r4,a
      00022D 08               [12]  512 	inc	r0
      00022E 86 05            [24]  513 	mov	ar5,@r0
      000230 8B 82            [24]  514 	mov	dpl,r3
      000232 8C 83            [24]  515 	mov	dph,r4
      000234 8D F0            [24]  516 	mov	b,r5
      000236 12r00r00         [24]  517 	lcall	__gptrget
      000239 FB               [12]  518 	mov	r3,a
      00023A E5*00            [12]  519 	mov	a,_bp
      00023C 24 09            [12]  520 	add	a,#0x09
      00023E F8               [12]  521 	mov	r0,a
      00023F A6 03            [24]  522 	mov	@r0,ar3
      000241 08               [12]  523 	inc	r0
      000242 76 00            [12]  524 	mov	@r0,#0x00
                                    525 ;	time.c:98: __day[timeptr->tm_wday], __month[timeptr->tm_mon], timeptr->tm_mday,
      000244 A8*00            [24]  526 	mov	r0,_bp
      000246 08               [12]  527 	inc	r0
      000247 74 03            [12]  528 	mov	a,#0x03
      000249 26               [12]  529 	add	a,@r0
      00024A FA               [12]  530 	mov	r2,a
      00024B E4               [12]  531 	clr	a
      00024C 08               [12]  532 	inc	r0
      00024D 36               [12]  533 	addc	a,@r0
      00024E FC               [12]  534 	mov	r4,a
      00024F 08               [12]  535 	inc	r0
      000250 86 05            [24]  536 	mov	ar5,@r0
      000252 8A 82            [24]  537 	mov	dpl,r2
      000254 8C 83            [24]  538 	mov	dph,r4
      000256 8D F0            [24]  539 	mov	b,r5
      000258 12r00r00         [24]  540 	lcall	__gptrget
      00025B FA               [12]  541 	mov	r2,a
      00025C E5*00            [12]  542 	mov	a,_bp
      00025E 24 0B            [12]  543 	add	a,#0x0b
      000260 F8               [12]  544 	mov	r0,a
      000261 A6 02            [24]  545 	mov	@r0,ar2
      000263 08               [12]  546 	inc	r0
      000264 76 00            [12]  547 	mov	@r0,#0x00
      000266 A8*00            [24]  548 	mov	r0,_bp
      000268 08               [12]  549 	inc	r0
      000269 74 04            [12]  550 	mov	a,#0x04
      00026B 26               [12]  551 	add	a,@r0
      00026C FB               [12]  552 	mov	r3,a
      00026D E4               [12]  553 	clr	a
      00026E 08               [12]  554 	inc	r0
      00026F 36               [12]  555 	addc	a,@r0
      000270 FC               [12]  556 	mov	r4,a
      000271 08               [12]  557 	inc	r0
      000272 86 05            [24]  558 	mov	ar5,@r0
      000274 8B 82            [24]  559 	mov	dpl,r3
      000276 8C 83            [24]  560 	mov	dph,r4
      000278 8D F0            [24]  561 	mov	b,r5
      00027A 12r00r00         [24]  562 	lcall	__gptrget
      00027D 75 F0 02         [24]  563 	mov	b,#0x02
      000280 A4               [48]  564 	mul	ab
      000281 24r0C            [12]  565 	add	a,#___month
      000283 F5 82            [12]  566 	mov	dpl,a
      000285 74s00            [12]  567 	mov	a,#(___month >> 8)
      000287 35 F0            [12]  568 	addc	a,b
      000289 F5 83            [12]  569 	mov	dph,a
      00028B E4               [12]  570 	clr	a
      00028C 93               [24]  571 	movc	a,@a+dptr
      00028D FC               [12]  572 	mov	r4,a
      00028E A3               [24]  573 	inc	dptr
      00028F E4               [12]  574 	clr	a
      000290 93               [24]  575 	movc	a,@a+dptr
      000291 FD               [12]  576 	mov	r5,a
      000292 E5*00            [12]  577 	mov	a,_bp
      000294 24 0D            [12]  578 	add	a,#0x0d
      000296 F8               [12]  579 	mov	r0,a
      000297 A6 04            [24]  580 	mov	@r0,ar4
      000299 08               [12]  581 	inc	r0
      00029A A6 05            [24]  582 	mov	@r0,ar5
      00029C 08               [12]  583 	inc	r0
      00029D 76 80            [12]  584 	mov	@r0,#0x80
      00029F A8*00            [24]  585 	mov	r0,_bp
      0002A1 08               [12]  586 	inc	r0
      0002A2 74 07            [12]  587 	mov	a,#0x07
      0002A4 26               [12]  588 	add	a,@r0
      0002A5 FA               [12]  589 	mov	r2,a
      0002A6 E4               [12]  590 	clr	a
      0002A7 08               [12]  591 	inc	r0
      0002A8 36               [12]  592 	addc	a,@r0
      0002A9 FC               [12]  593 	mov	r4,a
      0002AA 08               [12]  594 	inc	r0
      0002AB 86 05            [24]  595 	mov	ar5,@r0
      0002AD 8A 82            [24]  596 	mov	dpl,r2
      0002AF 8C 83            [24]  597 	mov	dph,r4
      0002B1 8D F0            [24]  598 	mov	b,r5
      0002B3 12r00r00         [24]  599 	lcall	__gptrget
      0002B6 75 F0 02         [24]  600 	mov	b,#0x02
      0002B9 A4               [48]  601 	mul	ab
      0002BA 24r24            [12]  602 	add	a,#___day
      0002BC F5 82            [12]  603 	mov	dpl,a
      0002BE 74s00            [12]  604 	mov	a,#(___day >> 8)
      0002C0 35 F0            [12]  605 	addc	a,b
      0002C2 F5 83            [12]  606 	mov	dph,a
      0002C4 E4               [12]  607 	clr	a
      0002C5 93               [24]  608 	movc	a,@a+dptr
      0002C6 FC               [12]  609 	mov	r4,a
      0002C7 A3               [24]  610 	inc	dptr
      0002C8 E4               [12]  611 	clr	a
      0002C9 93               [24]  612 	movc	a,@a+dptr
      0002CA FD               [12]  613 	mov	r5,a
      0002CB 7B 80            [12]  614 	mov	r3,#0x80
                                    615 ;	time.c:97: sprintf (ascTimeBuffer, "%s %s %2d %02d:%02d:%02d %04d\n",
      0002CD C0 07            [24]  616 	push	ar7
      0002CF C0 06            [24]  617 	push	ar6
      0002D1 E5*00            [12]  618 	mov	a,_bp
      0002D3 24 04            [12]  619 	add	a,#0x04
      0002D5 F8               [12]  620 	mov	r0,a
      0002D6 E6               [12]  621 	mov	a,@r0
      0002D7 C0 E0            [24]  622 	push	acc
      0002D9 08               [12]  623 	inc	r0
      0002DA E6               [12]  624 	mov	a,@r0
      0002DB C0 E0            [24]  625 	push	acc
      0002DD E5*00            [12]  626 	mov	a,_bp
      0002DF 24 06            [12]  627 	add	a,#0x06
      0002E1 F8               [12]  628 	mov	r0,a
      0002E2 E6               [12]  629 	mov	a,@r0
      0002E3 C0 E0            [24]  630 	push	acc
      0002E5 08               [12]  631 	inc	r0
      0002E6 E6               [12]  632 	mov	a,@r0
      0002E7 C0 E0            [24]  633 	push	acc
      0002E9 E5*00            [12]  634 	mov	a,_bp
      0002EB 24 09            [12]  635 	add	a,#0x09
      0002ED F8               [12]  636 	mov	r0,a
      0002EE E6               [12]  637 	mov	a,@r0
      0002EF C0 E0            [24]  638 	push	acc
      0002F1 08               [12]  639 	inc	r0
      0002F2 E6               [12]  640 	mov	a,@r0
      0002F3 C0 E0            [24]  641 	push	acc
      0002F5 E5*00            [12]  642 	mov	a,_bp
      0002F7 24 0B            [12]  643 	add	a,#0x0b
      0002F9 F8               [12]  644 	mov	r0,a
      0002FA E6               [12]  645 	mov	a,@r0
      0002FB C0 E0            [24]  646 	push	acc
      0002FD 08               [12]  647 	inc	r0
      0002FE E6               [12]  648 	mov	a,@r0
      0002FF C0 E0            [24]  649 	push	acc
      000301 E5*00            [12]  650 	mov	a,_bp
      000303 24 0D            [12]  651 	add	a,#0x0d
      000305 F8               [12]  652 	mov	r0,a
      000306 E6               [12]  653 	mov	a,@r0
      000307 C0 E0            [24]  654 	push	acc
      000309 08               [12]  655 	inc	r0
      00030A E6               [12]  656 	mov	a,@r0
      00030B C0 E0            [24]  657 	push	acc
      00030D 08               [12]  658 	inc	r0
      00030E E6               [12]  659 	mov	a,@r0
      00030F C0 E0            [24]  660 	push	acc
      000311 C0 04            [24]  661 	push	ar4
      000313 C0 05            [24]  662 	push	ar5
      000315 C0 03            [24]  663 	push	ar3
      000317 74r32            [12]  664 	mov	a,#__str_0
      000319 C0 E0            [24]  665 	push	acc
      00031B 74s00            [12]  666 	mov	a,#(__str_0 >> 8)
      00031D C0 E0            [24]  667 	push	acc
      00031F EB               [12]  668 	mov	a,r3
      000320 C0 E0            [24]  669 	push	acc
      000322 74r00            [12]  670 	mov	a,#_ascTimeBuffer
      000324 C0 E0            [24]  671 	push	acc
      000326 74s00            [12]  672 	mov	a,#(_ascTimeBuffer >> 8)
      000328 C0 E0            [24]  673 	push	acc
      00032A 74 40            [12]  674 	mov	a,#0x40
      00032C C0 E0            [24]  675 	push	acc
      00032E 12r00r00         [24]  676 	lcall	_sprintf
      000331 E5 81            [12]  677 	mov	a,sp
      000333 24 EA            [12]  678 	add	a,#0xea
      000335 F5 81            [12]  679 	mov	sp,a
                                    680 ;	time.c:101: return ascTimeBuffer;
      000337 90r00r00         [24]  681 	mov	dptr,#_ascTimeBuffer
      00033A 75 F0 40         [24]  682 	mov	b,#0x40
      00033D 85*00 81         [24]  683 	mov	sp,_bp
      000340 D0*00            [24]  684 	pop	_bp
      000342 22               [24]  685 	ret
                                    686 ;------------------------------------------------------------
                                    687 ;Allocation info for local variables in function 'ctime'
                                    688 ;------------------------------------------------------------
                                    689 ;timep                     Allocated to registers r5 r6 r7 
                                    690 ;------------------------------------------------------------
                                    691 ;	time.c:104: char *ctime(time_t *timep) {
                                    692 ;	-----------------------------------------
                                    693 ;	 function ctime
                                    694 ;	-----------------------------------------
      000343                        695 _ctime:
                                    696 ;	time.c:105: return asctime(localtime(timep));
      000343 12r03r49         [24]  697 	lcall	_localtime
      000346 02r01rA3         [24]  698 	ljmp	_asctime
                                    699 ;------------------------------------------------------------
                                    700 ;Allocation info for local variables in function 'localtime'
                                    701 ;------------------------------------------------------------
                                    702 ;timep                     Allocated to registers r5 r6 r7 
                                    703 ;------------------------------------------------------------
                                    704 ;	time.c:121: struct tm *localtime(time_t *timep) {
                                    705 ;	-----------------------------------------
                                    706 ;	 function localtime
                                    707 ;	-----------------------------------------
      000349                        708 _localtime:
                                    709 ;	time.c:122: return gmtime(timep);
      000349 02r03r4C         [24]  710 	ljmp	_gmtime
                                    711 ;------------------------------------------------------------
                                    712 ;Allocation info for local variables in function 'gmtime'
                                    713 ;------------------------------------------------------------
                                    714 ;timep                     Allocated to registers r5 r6 r7 
                                    715 ;epoch                     Allocated to stack - _bp +5
                                    716 ;year                      Allocated to registers r2 r3 
                                    717 ;month                     Allocated to registers r5 
                                    718 ;monthLength               Allocated to registers r4 
                                    719 ;days                      Allocated to stack - _bp +9
                                    720 ;sloc0                     Allocated to stack - _bp +1
                                    721 ;------------------------------------------------------------
                                    722 ;	time.c:125: struct tm *gmtime(time_t *timep) {
                                    723 ;	-----------------------------------------
                                    724 ;	 function gmtime
                                    725 ;	-----------------------------------------
      00034C                        726 _gmtime:
      00034C C0*00            [24]  727 	push	_bp
      00034E E5 81            [12]  728 	mov	a,sp
      000350 F5*00            [12]  729 	mov	_bp,a
      000352 24 0C            [12]  730 	add	a,#0x0C
      000354 F5 81            [12]  731 	mov	sp,a
                                    732 ;	time.c:126: unsigned long epoch=*timep;
      000356 E5*00            [12]  733 	mov	a,_bp
      000358 24 05            [12]  734 	add	a,#0x05
      00035A F8               [12]  735 	mov	r0,a
      00035B 12r00r00         [24]  736 	lcall	__gptrget
      00035E F6               [12]  737 	mov	@r0,a
      00035F A3               [24]  738 	inc	dptr
      000360 12r00r00         [24]  739 	lcall	__gptrget
      000363 08               [12]  740 	inc	r0
      000364 F6               [12]  741 	mov	@r0,a
      000365 A3               [24]  742 	inc	dptr
      000366 12r00r00         [24]  743 	lcall	__gptrget
      000369 08               [12]  744 	inc	r0
      00036A F6               [12]  745 	mov	@r0,a
      00036B A3               [24]  746 	inc	dptr
      00036C 12r00r00         [24]  747 	lcall	__gptrget
      00036F 08               [12]  748 	inc	r0
      000370 F6               [12]  749 	mov	@r0,a
                                    750 ;	time.c:131: lastTime.tm_sec=epoch%60;
      000371 74 3C            [12]  751 	mov	a,#0x3C
      000373 C0 E0            [24]  752 	push	acc
      000375 E4               [12]  753 	clr	a
      000376 C0 E0            [24]  754 	push	acc
      000378 C0 E0            [24]  755 	push	acc
      00037A C0 E0            [24]  756 	push	acc
      00037C E5*00            [12]  757 	mov	a,_bp
      00037E 24 05            [12]  758 	add	a,#0x05
      000380 F8               [12]  759 	mov	r0,a
      000381 86 82            [24]  760 	mov	dpl,@r0
      000383 08               [12]  761 	inc	r0
      000384 86 83            [24]  762 	mov	dph,@r0
      000386 08               [12]  763 	inc	r0
      000387 86 F0            [24]  764 	mov	b,@r0
      000389 08               [12]  765 	inc	r0
      00038A E6               [12]  766 	mov	a,@r0
      00038B 12r00r00         [24]  767 	lcall	__modulong
      00038E AA 82            [24]  768 	mov	r2,dpl
      000390 E5 81            [12]  769 	mov	a,sp
      000392 24 FC            [12]  770 	add	a,#0xfc
      000394 F5 81            [12]  771 	mov	sp,a
      000396 8A*20            [24]  772 	mov	_lastTime,r2
                                    773 ;	time.c:132: epoch/=60; // now it is minutes
      000398 74 3C            [12]  774 	mov	a,#0x3C
      00039A C0 E0            [24]  775 	push	acc
      00039C E4               [12]  776 	clr	a
      00039D C0 E0            [24]  777 	push	acc
      00039F C0 E0            [24]  778 	push	acc
      0003A1 C0 E0            [24]  779 	push	acc
      0003A3 E5*00            [12]  780 	mov	a,_bp
      0003A5 24 05            [12]  781 	add	a,#0x05
      0003A7 F8               [12]  782 	mov	r0,a
      0003A8 86 82            [24]  783 	mov	dpl,@r0
      0003AA 08               [12]  784 	inc	r0
      0003AB 86 83            [24]  785 	mov	dph,@r0
      0003AD 08               [12]  786 	inc	r0
      0003AE 86 F0            [24]  787 	mov	b,@r0
      0003B0 08               [12]  788 	inc	r0
      0003B1 E6               [12]  789 	mov	a,@r0
      0003B2 12r00r00         [24]  790 	lcall	__divulong
      0003B5 AC 82            [24]  791 	mov	r4,dpl
      0003B7 AD 83            [24]  792 	mov	r5,dph
      0003B9 AE F0            [24]  793 	mov	r6,b
      0003BB FF               [12]  794 	mov	r7,a
      0003BC E5 81            [12]  795 	mov	a,sp
      0003BE 24 FC            [12]  796 	add	a,#0xfc
      0003C0 F5 81            [12]  797 	mov	sp,a
      0003C2 E5*00            [12]  798 	mov	a,_bp
      0003C4 24 05            [12]  799 	add	a,#0x05
      0003C6 F8               [12]  800 	mov	r0,a
      0003C7 A6 04            [24]  801 	mov	@r0,ar4
      0003C9 08               [12]  802 	inc	r0
      0003CA A6 05            [24]  803 	mov	@r0,ar5
      0003CC 08               [12]  804 	inc	r0
      0003CD A6 06            [24]  805 	mov	@r0,ar6
      0003CF 08               [12]  806 	inc	r0
      0003D0 A6 07            [24]  807 	mov	@r0,ar7
                                    808 ;	time.c:133: lastTime.tm_min=epoch%60;
      0003D2 74 3C            [12]  809 	mov	a,#0x3C
      0003D4 C0 E0            [24]  810 	push	acc
      0003D6 E4               [12]  811 	clr	a
      0003D7 C0 E0            [24]  812 	push	acc
      0003D9 C0 E0            [24]  813 	push	acc
      0003DB C0 E0            [24]  814 	push	acc
      0003DD E5*00            [12]  815 	mov	a,_bp
      0003DF 24 05            [12]  816 	add	a,#0x05
      0003E1 F8               [12]  817 	mov	r0,a
      0003E2 86 82            [24]  818 	mov	dpl,@r0
      0003E4 08               [12]  819 	inc	r0
      0003E5 86 83            [24]  820 	mov	dph,@r0
      0003E7 08               [12]  821 	inc	r0
      0003E8 86 F0            [24]  822 	mov	b,@r0
      0003EA 08               [12]  823 	inc	r0
      0003EB E6               [12]  824 	mov	a,@r0
      0003EC 12r00r00         [24]  825 	lcall	__modulong
      0003EF AC 82            [24]  826 	mov	r4,dpl
      0003F1 E5 81            [12]  827 	mov	a,sp
      0003F3 24 FC            [12]  828 	add	a,#0xfc
      0003F5 F5 81            [12]  829 	mov	sp,a
      0003F7 8C*21            [24]  830 	mov	(_lastTime + 0x0001),r4
                                    831 ;	time.c:134: epoch/=60; // now it is hours
      0003F9 74 3C            [12]  832 	mov	a,#0x3C
      0003FB C0 E0            [24]  833 	push	acc
      0003FD E4               [12]  834 	clr	a
      0003FE C0 E0            [24]  835 	push	acc
      000400 C0 E0            [24]  836 	push	acc
      000402 C0 E0            [24]  837 	push	acc
      000404 E5*00            [12]  838 	mov	a,_bp
      000406 24 05            [12]  839 	add	a,#0x05
      000408 F8               [12]  840 	mov	r0,a
      000409 86 82            [24]  841 	mov	dpl,@r0
      00040B 08               [12]  842 	inc	r0
      00040C 86 83            [24]  843 	mov	dph,@r0
      00040E 08               [12]  844 	inc	r0
      00040F 86 F0            [24]  845 	mov	b,@r0
      000411 08               [12]  846 	inc	r0
      000412 E6               [12]  847 	mov	a,@r0
      000413 12r00r00         [24]  848 	lcall	__divulong
      000416 AC 82            [24]  849 	mov	r4,dpl
      000418 AD 83            [24]  850 	mov	r5,dph
      00041A AE F0            [24]  851 	mov	r6,b
      00041C FF               [12]  852 	mov	r7,a
      00041D E5 81            [12]  853 	mov	a,sp
      00041F 24 FC            [12]  854 	add	a,#0xfc
      000421 F5 81            [12]  855 	mov	sp,a
      000423 E5*00            [12]  856 	mov	a,_bp
      000425 24 05            [12]  857 	add	a,#0x05
      000427 F8               [12]  858 	mov	r0,a
      000428 A6 04            [24]  859 	mov	@r0,ar4
      00042A 08               [12]  860 	inc	r0
      00042B A6 05            [24]  861 	mov	@r0,ar5
      00042D 08               [12]  862 	inc	r0
      00042E A6 06            [24]  863 	mov	@r0,ar6
      000430 08               [12]  864 	inc	r0
      000431 A6 07            [24]  865 	mov	@r0,ar7
                                    866 ;	time.c:135: lastTime.tm_hour=epoch%24;
      000433 74 18            [12]  867 	mov	a,#0x18
      000435 C0 E0            [24]  868 	push	acc
      000437 E4               [12]  869 	clr	a
      000438 C0 E0            [24]  870 	push	acc
      00043A C0 E0            [24]  871 	push	acc
      00043C C0 E0            [24]  872 	push	acc
      00043E E5*00            [12]  873 	mov	a,_bp
      000440 24 05            [12]  874 	add	a,#0x05
      000442 F8               [12]  875 	mov	r0,a
      000443 86 82            [24]  876 	mov	dpl,@r0
      000445 08               [12]  877 	inc	r0
      000446 86 83            [24]  878 	mov	dph,@r0
      000448 08               [12]  879 	inc	r0
      000449 86 F0            [24]  880 	mov	b,@r0
      00044B 08               [12]  881 	inc	r0
      00044C E6               [12]  882 	mov	a,@r0
      00044D 12r00r00         [24]  883 	lcall	__modulong
      000450 AC 82            [24]  884 	mov	r4,dpl
      000452 E5 81            [12]  885 	mov	a,sp
      000454 24 FC            [12]  886 	add	a,#0xfc
      000456 F5 81            [12]  887 	mov	sp,a
      000458 8C*22            [24]  888 	mov	(_lastTime + 0x0002),r4
                                    889 ;	time.c:136: epoch/=24; // now it is days
      00045A 74 18            [12]  890 	mov	a,#0x18
      00045C C0 E0            [24]  891 	push	acc
      00045E E4               [12]  892 	clr	a
      00045F C0 E0            [24]  893 	push	acc
      000461 C0 E0            [24]  894 	push	acc
      000463 C0 E0            [24]  895 	push	acc
      000465 E5*00            [12]  896 	mov	a,_bp
      000467 24 05            [12]  897 	add	a,#0x05
      000469 F8               [12]  898 	mov	r0,a
      00046A 86 82            [24]  899 	mov	dpl,@r0
      00046C 08               [12]  900 	inc	r0
      00046D 86 83            [24]  901 	mov	dph,@r0
      00046F 08               [12]  902 	inc	r0
      000470 86 F0            [24]  903 	mov	b,@r0
      000472 08               [12]  904 	inc	r0
      000473 E6               [12]  905 	mov	a,@r0
      000474 12r00r00         [24]  906 	lcall	__divulong
      000477 AC 82            [24]  907 	mov	r4,dpl
      000479 AD 83            [24]  908 	mov	r5,dph
      00047B AE F0            [24]  909 	mov	r6,b
      00047D FF               [12]  910 	mov	r7,a
      00047E E5 81            [12]  911 	mov	a,sp
      000480 24 FC            [12]  912 	add	a,#0xfc
      000482 F5 81            [12]  913 	mov	sp,a
      000484 E5*00            [12]  914 	mov	a,_bp
      000486 24 05            [12]  915 	add	a,#0x05
      000488 F8               [12]  916 	mov	r0,a
      000489 A6 04            [24]  917 	mov	@r0,ar4
      00048B 08               [12]  918 	inc	r0
      00048C A6 05            [24]  919 	mov	@r0,ar5
      00048E 08               [12]  920 	inc	r0
      00048F A6 06            [24]  921 	mov	@r0,ar6
      000491 08               [12]  922 	inc	r0
      000492 A6 07            [24]  923 	mov	@r0,ar7
                                    924 ;	time.c:137: lastTime.tm_wday=(epoch+4)%7;
      000494 E5*00            [12]  925 	mov	a,_bp
      000496 24 05            [12]  926 	add	a,#0x05
      000498 F8               [12]  927 	mov	r0,a
      000499 74 04            [12]  928 	mov	a,#0x04
      00049B 26               [12]  929 	add	a,@r0
      00049C FC               [12]  930 	mov	r4,a
      00049D E4               [12]  931 	clr	a
      00049E 08               [12]  932 	inc	r0
      00049F 36               [12]  933 	addc	a,@r0
      0004A0 FD               [12]  934 	mov	r5,a
      0004A1 E4               [12]  935 	clr	a
      0004A2 08               [12]  936 	inc	r0
      0004A3 36               [12]  937 	addc	a,@r0
      0004A4 FE               [12]  938 	mov	r6,a
      0004A5 E4               [12]  939 	clr	a
      0004A6 08               [12]  940 	inc	r0
      0004A7 36               [12]  941 	addc	a,@r0
      0004A8 FF               [12]  942 	mov	r7,a
      0004A9 74 07            [12]  943 	mov	a,#0x07
      0004AB C0 E0            [24]  944 	push	acc
      0004AD E4               [12]  945 	clr	a
      0004AE C0 E0            [24]  946 	push	acc
      0004B0 C0 E0            [24]  947 	push	acc
      0004B2 C0 E0            [24]  948 	push	acc
      0004B4 8C 82            [24]  949 	mov	dpl,r4
      0004B6 8D 83            [24]  950 	mov	dph,r5
      0004B8 8E F0            [24]  951 	mov	b,r6
      0004BA EF               [12]  952 	mov	a,r7
      0004BB 12r00r00         [24]  953 	lcall	__modulong
      0004BE AC 82            [24]  954 	mov	r4,dpl
      0004C0 AD 83            [24]  955 	mov	r5,dph
      0004C2 AE F0            [24]  956 	mov	r6,b
      0004C4 FF               [12]  957 	mov	r7,a
      0004C5 E5 81            [12]  958 	mov	a,sp
      0004C7 24 FC            [12]  959 	add	a,#0xfc
      0004C9 F5 81            [12]  960 	mov	sp,a
      0004CB 8C*27            [24]  961 	mov	(_lastTime + 0x0007),r4
                                    962 ;	time.c:140: days=0;
      0004CD E5*00            [12]  963 	mov	a,_bp
      0004CF 24 09            [12]  964 	add	a,#0x09
      0004D1 F8               [12]  965 	mov	r0,a
      0004D2 E4               [12]  966 	clr	a
      0004D3 F6               [12]  967 	mov	@r0,a
      0004D4 08               [12]  968 	inc	r0
      0004D5 F6               [12]  969 	mov	@r0,a
      0004D6 08               [12]  970 	inc	r0
      0004D7 F6               [12]  971 	mov	@r0,a
      0004D8 08               [12]  972 	inc	r0
      0004D9 F6               [12]  973 	mov	@r0,a
                                    974 ;	time.c:141: while((days += (LEAP_YEAR(year) ? 366 : 365)) <= epoch) {
      0004DA 7A B2            [12]  975 	mov	r2,#0xB2
      0004DC 7B 07            [12]  976 	mov	r3,#0x07
      0004DE                        977 00101$:
      0004DE 74 03            [12]  978 	mov	a,#0x03
      0004E0 5A               [12]  979 	anl	a,r2
      0004E1 FE               [12]  980 	mov	r6,a
      0004E2 7F 00            [12]  981 	mov	r7,#0x00
      0004E4 4F               [12]  982 	orl	a,r7
      0004E5 B4 01 00         [24]  983 	cjne	a,#0x01,00148$
      0004E8                        984 00148$:
      0004E8 E4               [12]  985 	clr	a
      0004E9 33               [12]  986 	rlc	a
      0004EA FE               [12]  987 	mov	r6,a
      0004EB 60 06            [24]  988 	jz	00118$
      0004ED 7E 6E            [12]  989 	mov	r6,#0x6E
      0004EF 7F 01            [12]  990 	mov	r7,#0x01
      0004F1 80 04            [24]  991 	sjmp	00119$
      0004F3                        992 00118$:
      0004F3 7E 6D            [12]  993 	mov	r6,#0x6D
      0004F5 7F 01            [12]  994 	mov	r7,#0x01
      0004F7                        995 00119$:
      0004F7 EF               [12]  996 	mov	a,r7
      0004F8 33               [12]  997 	rlc	a
      0004F9 95 E0            [12]  998 	subb	a,acc
      0004FB FD               [12]  999 	mov	r5,a
      0004FC FC               [12] 1000 	mov	r4,a
      0004FD E5*00            [12] 1001 	mov	a,_bp
      0004FF 24 09            [12] 1002 	add	a,#0x09
      000501 F8               [12] 1003 	mov	r0,a
      000502 EE               [12] 1004 	mov	a,r6
      000503 26               [12] 1005 	add	a,@r0
      000504 FE               [12] 1006 	mov	r6,a
      000505 EF               [12] 1007 	mov	a,r7
      000506 08               [12] 1008 	inc	r0
      000507 36               [12] 1009 	addc	a,@r0
      000508 FF               [12] 1010 	mov	r7,a
      000509 ED               [12] 1011 	mov	a,r5
      00050A 08               [12] 1012 	inc	r0
      00050B 36               [12] 1013 	addc	a,@r0
      00050C FD               [12] 1014 	mov	r5,a
      00050D EC               [12] 1015 	mov	a,r4
      00050E 08               [12] 1016 	inc	r0
      00050F 36               [12] 1017 	addc	a,@r0
      000510 FC               [12] 1018 	mov	r4,a
      000511 E5*00            [12] 1019 	mov	a,_bp
      000513 24 09            [12] 1020 	add	a,#0x09
      000515 F8               [12] 1021 	mov	r0,a
      000516 A6 06            [24] 1022 	mov	@r0,ar6
      000518 08               [12] 1023 	inc	r0
      000519 A6 07            [24] 1024 	mov	@r0,ar7
      00051B 08               [12] 1025 	inc	r0
      00051C A6 05            [24] 1026 	mov	@r0,ar5
      00051E 08               [12] 1027 	inc	r0
      00051F A6 04            [24] 1028 	mov	@r0,ar4
      000521 E5*00            [12] 1029 	mov	a,_bp
      000523 24 05            [12] 1030 	add	a,#0x05
      000525 F8               [12] 1031 	mov	r0,a
      000526 C3               [12] 1032 	clr	c
      000527 E6               [12] 1033 	mov	a,@r0
      000528 9E               [12] 1034 	subb	a,r6
      000529 08               [12] 1035 	inc	r0
      00052A E6               [12] 1036 	mov	a,@r0
      00052B 9F               [12] 1037 	subb	a,r7
      00052C 08               [12] 1038 	inc	r0
      00052D E6               [12] 1039 	mov	a,@r0
      00052E 9D               [12] 1040 	subb	a,r5
      00052F 08               [12] 1041 	inc	r0
      000530 E6               [12] 1042 	mov	a,@r0
      000531 9C               [12] 1043 	subb	a,r4
      000532 40 07            [24] 1044 	jc	00103$
                                   1045 ;	time.c:142: year++;
      000534 0A               [12] 1046 	inc	r2
      000535 BA 00 A6         [24] 1047 	cjne	r2,#0x00,00101$
      000538 0B               [12] 1048 	inc	r3
      000539 80 A3            [24] 1049 	sjmp	00101$
      00053B                       1050 00103$:
                                   1051 ;	time.c:144: lastTime.tm_year=year-1900;
      00053B EA               [12] 1052 	mov	a,r2
      00053C 24 94            [12] 1053 	add	a,#0x94
      00053E FE               [12] 1054 	mov	r6,a
      00053F EB               [12] 1055 	mov	a,r3
      000540 34 F8            [12] 1056 	addc	a,#0xF8
      000542 FF               [12] 1057 	mov	r7,a
      000543 8E*25            [24] 1058 	mov	((_lastTime + 0x0005) + 0),r6
      000545 8F*26            [24] 1059 	mov	((_lastTime + 0x0005) + 1),r7
                                   1060 ;	time.c:146: days -= LEAP_YEAR(year) ? 366 : 365;
      000547 74 03            [12] 1061 	mov	a,#0x03
      000549 5A               [12] 1062 	anl	a,r2
      00054A FE               [12] 1063 	mov	r6,a
      00054B 7F 00            [12] 1064 	mov	r7,#0x00
      00054D 4F               [12] 1065 	orl	a,r7
      00054E B4 01 00         [24] 1066 	cjne	a,#0x01,00152$
      000551                       1067 00152$:
      000551 E4               [12] 1068 	clr	a
      000552 33               [12] 1069 	rlc	a
      000553 FD               [12] 1070 	mov	r5,a
      000554 60 06            [24] 1071 	jz	00120$
      000556 7C 6E            [12] 1072 	mov	r4,#0x6E
      000558 7D 01            [12] 1073 	mov	r5,#0x01
      00055A 80 04            [24] 1074 	sjmp	00121$
      00055C                       1075 00120$:
      00055C 7C 6D            [12] 1076 	mov	r4,#0x6D
      00055E 7D 01            [12] 1077 	mov	r5,#0x01
      000560                       1078 00121$:
      000560 ED               [12] 1079 	mov	a,r5
      000561 33               [12] 1080 	rlc	a
      000562 95 E0            [12] 1081 	subb	a,acc
      000564 FB               [12] 1082 	mov	r3,a
      000565 FA               [12] 1083 	mov	r2,a
      000566 E5*00            [12] 1084 	mov	a,_bp
      000568 24 09            [12] 1085 	add	a,#0x09
      00056A F8               [12] 1086 	mov	r0,a
      00056B E6               [12] 1087 	mov	a,@r0
      00056C C3               [12] 1088 	clr	c
      00056D 9C               [12] 1089 	subb	a,r4
      00056E F6               [12] 1090 	mov	@r0,a
      00056F 08               [12] 1091 	inc	r0
      000570 E6               [12] 1092 	mov	a,@r0
      000571 9D               [12] 1093 	subb	a,r5
      000572 F6               [12] 1094 	mov	@r0,a
      000573 08               [12] 1095 	inc	r0
      000574 E6               [12] 1096 	mov	a,@r0
      000575 9B               [12] 1097 	subb	a,r3
      000576 F6               [12] 1098 	mov	@r0,a
      000577 08               [12] 1099 	inc	r0
      000578 E6               [12] 1100 	mov	a,@r0
      000579 9A               [12] 1101 	subb	a,r2
      00057A F6               [12] 1102 	mov	@r0,a
                                   1103 ;	time.c:147: epoch -= days; // now it is days in this year, starting at 0
      00057B E5*00            [12] 1104 	mov	a,_bp
      00057D 24 05            [12] 1105 	add	a,#0x05
      00057F F8               [12] 1106 	mov	r0,a
      000580 E5*00            [12] 1107 	mov	a,_bp
      000582 24 09            [12] 1108 	add	a,#0x09
      000584 F9               [12] 1109 	mov	r1,a
      000585 E6               [12] 1110 	mov	a,@r0
      000586 C3               [12] 1111 	clr	c
      000587 97               [12] 1112 	subb	a,@r1
      000588 F6               [12] 1113 	mov	@r0,a
      000589 08               [12] 1114 	inc	r0
      00058A E6               [12] 1115 	mov	a,@r0
      00058B 09               [12] 1116 	inc	r1
      00058C 97               [12] 1117 	subb	a,@r1
      00058D F6               [12] 1118 	mov	@r0,a
      00058E 08               [12] 1119 	inc	r0
      00058F E6               [12] 1120 	mov	a,@r0
      000590 09               [12] 1121 	inc	r1
      000591 97               [12] 1122 	subb	a,@r1
      000592 F6               [12] 1123 	mov	@r0,a
      000593 08               [12] 1124 	inc	r0
      000594 E6               [12] 1125 	mov	a,@r0
      000595 09               [12] 1126 	inc	r1
      000596 97               [12] 1127 	subb	a,@r1
      000597 F6               [12] 1128 	mov	@r0,a
                                   1129 ;	time.c:148: lastTime.tm_yday=epoch;
      000598 E5*00            [12] 1130 	mov	a,_bp
      00059A 24 05            [12] 1131 	add	a,#0x05
      00059C F8               [12] 1132 	mov	r0,a
      00059D 86 04            [24] 1133 	mov	ar4,@r0
      00059F 08               [12] 1134 	inc	r0
      0005A0 86 05            [24] 1135 	mov	ar5,@r0
      0005A2 8C*28            [24] 1136 	mov	((_lastTime + 0x0008) + 0),r4
      0005A4 8D*29            [24] 1137 	mov	((_lastTime + 0x0008) + 1),r5
                                   1138 ;	time.c:153: for (month=0; month<12; month++) {
      0005A6 7D 00            [12] 1139 	mov	r5,#0x00
      0005A8                       1140 00114$:
                                   1141 ;	time.c:154: if (month==1) { // februari
      0005A8 BD 01 0C         [24] 1142 	cjne	r5,#0x01,00108$
                                   1143 ;	time.c:155: if (LEAP_YEAR(year)) {
      0005AB EE               [12] 1144 	mov	a,r6
      0005AC 4F               [12] 1145 	orl	a,r7
      0005AD 70 04            [24] 1146 	jnz	00105$
                                   1147 ;	time.c:156: monthLength=29;
      0005AF 7C 1D            [12] 1148 	mov	r4,#0x1D
      0005B1 80 0A            [24] 1149 	sjmp	00109$
      0005B3                       1150 00105$:
                                   1151 ;	time.c:158: monthLength=28;
      0005B3 7C 1C            [12] 1152 	mov	r4,#0x1C
      0005B5 80 06            [24] 1153 	sjmp	00109$
      0005B7                       1154 00108$:
                                   1155 ;	time.c:161: monthLength = monthDays[month];
      0005B7 ED               [12] 1156 	mov	a,r5
      0005B8 90r00r00         [24] 1157 	mov	dptr,#_monthDays
      0005BB 93               [24] 1158 	movc	a,@a+dptr
      0005BC FC               [12] 1159 	mov	r4,a
      0005BD                       1160 00109$:
                                   1161 ;	time.c:164: if (epoch>=monthLength) {
      0005BD A8*00            [24] 1162 	mov	r0,_bp
      0005BF 08               [12] 1163 	inc	r0
      0005C0 A6 04            [24] 1164 	mov	@r0,ar4
      0005C2 08               [12] 1165 	inc	r0
      0005C3 76 00            [12] 1166 	mov	@r0,#0x00
      0005C5 08               [12] 1167 	inc	r0
      0005C6 76 00            [12] 1168 	mov	@r0,#0x00
      0005C8 08               [12] 1169 	inc	r0
      0005C9 76 00            [12] 1170 	mov	@r0,#0x00
      0005CB E5*00            [12] 1171 	mov	a,_bp
      0005CD 24 05            [12] 1172 	add	a,#0x05
      0005CF F8               [12] 1173 	mov	r0,a
      0005D0 A9*00            [24] 1174 	mov	r1,_bp
      0005D2 09               [12] 1175 	inc	r1
      0005D3 C3               [12] 1176 	clr	c
      0005D4 E6               [12] 1177 	mov	a,@r0
      0005D5 97               [12] 1178 	subb	a,@r1
      0005D6 08               [12] 1179 	inc	r0
      0005D7 E6               [12] 1180 	mov	a,@r0
      0005D8 09               [12] 1181 	inc	r1
      0005D9 97               [12] 1182 	subb	a,@r1
      0005DA 08               [12] 1183 	inc	r0
      0005DB E6               [12] 1184 	mov	a,@r0
      0005DC 09               [12] 1185 	inc	r1
      0005DD 97               [12] 1186 	subb	a,@r1
      0005DE 08               [12] 1187 	inc	r0
      0005DF E6               [12] 1188 	mov	a,@r0
      0005E0 09               [12] 1189 	inc	r1
      0005E1 97               [12] 1190 	subb	a,@r1
      0005E2 40 21            [24] 1191 	jc	00113$
                                   1192 ;	time.c:165: epoch-=monthLength;
      0005E4 E5*00            [12] 1193 	mov	a,_bp
      0005E6 24 05            [12] 1194 	add	a,#0x05
      0005E8 F8               [12] 1195 	mov	r0,a
      0005E9 A9*00            [24] 1196 	mov	r1,_bp
      0005EB 09               [12] 1197 	inc	r1
      0005EC E6               [12] 1198 	mov	a,@r0
      0005ED C3               [12] 1199 	clr	c
      0005EE 97               [12] 1200 	subb	a,@r1
      0005EF F6               [12] 1201 	mov	@r0,a
      0005F0 08               [12] 1202 	inc	r0
      0005F1 E6               [12] 1203 	mov	a,@r0
      0005F2 09               [12] 1204 	inc	r1
      0005F3 97               [12] 1205 	subb	a,@r1
      0005F4 F6               [12] 1206 	mov	@r0,a
      0005F5 08               [12] 1207 	inc	r0
      0005F6 E6               [12] 1208 	mov	a,@r0
      0005F7 09               [12] 1209 	inc	r1
      0005F8 97               [12] 1210 	subb	a,@r1
      0005F9 F6               [12] 1211 	mov	@r0,a
      0005FA 08               [12] 1212 	inc	r0
      0005FB E6               [12] 1213 	mov	a,@r0
      0005FC 09               [12] 1214 	inc	r1
      0005FD 97               [12] 1215 	subb	a,@r1
      0005FE F6               [12] 1216 	mov	@r0,a
                                   1217 ;	time.c:153: for (month=0; month<12; month++) {
      0005FF 0D               [12] 1218 	inc	r5
      000600 BD 0C 00         [24] 1219 	cjne	r5,#0x0C,00158$
      000603                       1220 00158$:
      000603 40 A3            [24] 1221 	jc	00114$
      000605                       1222 00113$:
                                   1223 ;	time.c:170: lastTime.tm_mon=month;
      000605 8D*24            [24] 1224 	mov	(_lastTime + 0x0004),r5
                                   1225 ;	time.c:171: lastTime.tm_mday=epoch+1;
      000607 E5*00            [12] 1226 	mov	a,_bp
      000609 24 05            [12] 1227 	add	a,#0x05
      00060B F8               [12] 1228 	mov	r0,a
      00060C E6               [12] 1229 	mov	a,@r0
      00060D 04               [12] 1230 	inc	a
      00060E F5*23            [12] 1231 	mov	(_lastTime + 0x0003),a
                                   1232 ;	time.c:173: lastTime.tm_isdst=0;
      000610 75*2A 00         [24] 1233 	mov	(_lastTime + 0x000a),#0x00
                                   1234 ;	time.c:175: return &lastTime;
      000613 90r00r20         [24] 1235 	mov	dptr,#_lastTime
      000616 75 F0 40         [24] 1236 	mov	b,#0x40
      000619 85*00 81         [24] 1237 	mov	sp,_bp
      00061C D0*00            [24] 1238 	pop	_bp
      00061E 22               [24] 1239 	ret
                                   1240 ;------------------------------------------------------------
                                   1241 ;Allocation info for local variables in function 'mktime'
                                   1242 ;------------------------------------------------------------
                                   1243 ;timeptr                   Allocated to stack - _bp +1
                                   1244 ;year                      Allocated to stack - _bp +12
                                   1245 ;month                     Allocated to stack - _bp +4
                                   1246 ;i                         Allocated to stack - _bp +6
                                   1247 ;seconds                   Allocated to stack - _bp +8
                                   1248 ;------------------------------------------------------------
                                   1249 ;	time.c:179: time_t mktime(struct tm *timeptr) {
                                   1250 ;	-----------------------------------------
                                   1251 ;	 function mktime
                                   1252 ;	-----------------------------------------
      00061F                       1253 _mktime:
      00061F C0*00            [24] 1254 	push	_bp
      000621 85 81*00         [24] 1255 	mov	_bp,sp
      000624 C0 82            [24] 1256 	push	dpl
      000626 C0 83            [24] 1257 	push	dph
      000628 C0 F0            [24] 1258 	push	b
      00062A E5 81            [12] 1259 	mov	a,sp
      00062C 24 0A            [12] 1260 	add	a,#0x0A
      00062E F5 81            [12] 1261 	mov	sp,a
                                   1262 ;	time.c:180: int year=timeptr->tm_year+1900, month=timeptr->tm_mon, i;
      000630 A8*00            [24] 1263 	mov	r0,_bp
      000632 08               [12] 1264 	inc	r0
      000633 74 05            [12] 1265 	mov	a,#0x05
      000635 26               [12] 1266 	add	a,@r0
      000636 FA               [12] 1267 	mov	r2,a
      000637 E4               [12] 1268 	clr	a
      000638 08               [12] 1269 	inc	r0
      000639 36               [12] 1270 	addc	a,@r0
      00063A FB               [12] 1271 	mov	r3,a
      00063B 08               [12] 1272 	inc	r0
      00063C 86 04            [24] 1273 	mov	ar4,@r0
      00063E 8A 82            [24] 1274 	mov	dpl,r2
      000640 8B 83            [24] 1275 	mov	dph,r3
      000642 8C F0            [24] 1276 	mov	b,r4
      000644 12r00r00         [24] 1277 	lcall	__gptrget
      000647 FA               [12] 1278 	mov	r2,a
      000648 A3               [24] 1279 	inc	dptr
      000649 12r00r00         [24] 1280 	lcall	__gptrget
      00064C FB               [12] 1281 	mov	r3,a
      00064D E5*00            [12] 1282 	mov	a,_bp
      00064F 24 0C            [12] 1283 	add	a,#0x0c
      000651 F8               [12] 1284 	mov	r0,a
      000652 74 6C            [12] 1285 	mov	a,#0x6C
      000654 2A               [12] 1286 	add	a,r2
      000655 F6               [12] 1287 	mov	@r0,a
      000656 74 07            [12] 1288 	mov	a,#0x07
      000658 3B               [12] 1289 	addc	a,r3
      000659 08               [12] 1290 	inc	r0
      00065A F6               [12] 1291 	mov	@r0,a
      00065B A8*00            [24] 1292 	mov	r0,_bp
      00065D 08               [12] 1293 	inc	r0
      00065E 74 04            [12] 1294 	mov	a,#0x04
      000660 26               [12] 1295 	add	a,@r0
      000661 FA               [12] 1296 	mov	r2,a
      000662 E4               [12] 1297 	clr	a
      000663 08               [12] 1298 	inc	r0
      000664 36               [12] 1299 	addc	a,@r0
      000665 FB               [12] 1300 	mov	r3,a
      000666 08               [12] 1301 	inc	r0
      000667 86 04            [24] 1302 	mov	ar4,@r0
      000669 8A 82            [24] 1303 	mov	dpl,r2
      00066B 8B 83            [24] 1304 	mov	dph,r3
      00066D 8C F0            [24] 1305 	mov	b,r4
      00066F 12r00r00         [24] 1306 	lcall	__gptrget
      000672 FA               [12] 1307 	mov	r2,a
      000673 E5*00            [12] 1308 	mov	a,_bp
      000675 24 04            [12] 1309 	add	a,#0x04
      000677 F8               [12] 1310 	mov	r0,a
      000678 A6 02            [24] 1311 	mov	@r0,ar2
      00067A 08               [12] 1312 	inc	r0
      00067B 76 00            [12] 1313 	mov	@r0,#0x00
                                   1314 ;	time.c:183: CheckTime(timeptr);
      00067D A8*00            [24] 1315 	mov	r0,_bp
      00067F 08               [12] 1316 	inc	r0
      000680 86 82            [24] 1317 	mov	dpl,@r0
      000682 08               [12] 1318 	inc	r0
      000683 86 83            [24] 1319 	mov	dph,@r0
      000685 08               [12] 1320 	inc	r0
      000686 86 F0            [24] 1321 	mov	b,@r0
      000688 12r00rA5         [24] 1322 	lcall	_CheckTime
                                   1323 ;	time.c:186: seconds= (year-1970)*(60*60*24L*365);
      00068B E5*00            [12] 1324 	mov	a,_bp
      00068D 24 0C            [12] 1325 	add	a,#0x0c
      00068F F8               [12] 1326 	mov	r0,a
      000690 E6               [12] 1327 	mov	a,@r0
      000691 24 4E            [12] 1328 	add	a,#0x4E
      000693 FB               [12] 1329 	mov	r3,a
      000694 08               [12] 1330 	inc	r0
      000695 E6               [12] 1331 	mov	a,@r0
      000696 34 F8            [12] 1332 	addc	a,#0xF8
      000698 FA               [12] 1333 	mov	r2,a
      000699 33               [12] 1334 	rlc	a
      00069A 95 E0            [12] 1335 	subb	a,acc
      00069C FC               [12] 1336 	mov	r4,a
      00069D FF               [12] 1337 	mov	r7,a
      00069E C0 03            [24] 1338 	push	ar3
      0006A0 C0 02            [24] 1339 	push	ar2
      0006A2 C0 04            [24] 1340 	push	ar4
      0006A4 C0 07            [24] 1341 	push	ar7
      0006A6 90 33 80         [24] 1342 	mov	dptr,#0x3380
      0006A9 75 F0 E1         [24] 1343 	mov	b,#0xE1
      0006AC 74 01            [12] 1344 	mov	a,#0x01
      0006AE 12r00r00         [24] 1345 	lcall	__mullong
      0006B1 AC 82            [24] 1346 	mov	r4,dpl
      0006B3 AD 83            [24] 1347 	mov	r5,dph
      0006B5 AE F0            [24] 1348 	mov	r6,b
      0006B7 FF               [12] 1349 	mov	r7,a
      0006B8 E5 81            [12] 1350 	mov	a,sp
      0006BA 24 FC            [12] 1351 	add	a,#0xfc
      0006BC F5 81            [12] 1352 	mov	sp,a
      0006BE E5*00            [12] 1353 	mov	a,_bp
      0006C0 24 08            [12] 1354 	add	a,#0x08
      0006C2 F8               [12] 1355 	mov	r0,a
      0006C3 A6 04            [24] 1356 	mov	@r0,ar4
      0006C5 08               [12] 1357 	inc	r0
      0006C6 A6 05            [24] 1358 	mov	@r0,ar5
      0006C8 08               [12] 1359 	inc	r0
      0006C9 A6 06            [24] 1360 	mov	@r0,ar6
      0006CB 08               [12] 1361 	inc	r0
      0006CC A6 07            [24] 1362 	mov	@r0,ar7
                                   1363 ;	time.c:189: for (i=1970; i<year; i++) {
      0006CE E5*00            [12] 1364 	mov	a,_bp
      0006D0 24 08            [12] 1365 	add	a,#0x08
      0006D2 F8               [12] 1366 	mov	r0,a
      0006D3 86 02            [24] 1367 	mov	ar2,@r0
      0006D5 08               [12] 1368 	inc	r0
      0006D6 86 03            [24] 1369 	mov	ar3,@r0
      0006D8 08               [12] 1370 	inc	r0
      0006D9 86 06            [24] 1371 	mov	ar6,@r0
      0006DB 08               [12] 1372 	inc	r0
      0006DC 86 07            [24] 1373 	mov	ar7,@r0
      0006DE E5*00            [12] 1374 	mov	a,_bp
      0006E0 24 06            [12] 1375 	add	a,#0x06
      0006E2 F8               [12] 1376 	mov	r0,a
      0006E3 76 B2            [12] 1377 	mov	@r0,#0xB2
      0006E5 08               [12] 1378 	inc	r0
      0006E6 76 07            [12] 1379 	mov	@r0,#0x07
      0006E8                       1380 00110$:
      0006E8 E5*00            [12] 1381 	mov	a,_bp
      0006EA 24 06            [12] 1382 	add	a,#0x06
      0006EC F8               [12] 1383 	mov	r0,a
      0006ED E5*00            [12] 1384 	mov	a,_bp
      0006EF 24 0C            [12] 1385 	add	a,#0x0c
      0006F1 F9               [12] 1386 	mov	r1,a
      0006F2 C3               [12] 1387 	clr	c
      0006F3 E6               [12] 1388 	mov	a,@r0
      0006F4 97               [12] 1389 	subb	a,@r1
      0006F5 08               [12] 1390 	inc	r0
      0006F6 E6               [12] 1391 	mov	a,@r0
      0006F7 64 80            [12] 1392 	xrl	a,#0x80
      0006F9 09               [12] 1393 	inc	r1
      0006FA 87 F0            [24] 1394 	mov	b,@r1
      0006FC 63 F0 80         [24] 1395 	xrl	b,#0x80
      0006FF 95 F0            [12] 1396 	subb	a,b
      000701 50 4C            [24] 1397 	jnc	00124$
                                   1398 ;	time.c:190: if (LEAP_YEAR(i)) {
      000703 C0 07            [24] 1399 	push	ar7
      000705 C0 06            [24] 1400 	push	ar6
      000707 C0 03            [24] 1401 	push	ar3
      000709 C0 02            [24] 1402 	push	ar2
      00070B 74 04            [12] 1403 	mov	a,#0x04
      00070D C0 E0            [24] 1404 	push	acc
      00070F E4               [12] 1405 	clr	a
      000710 C0 E0            [24] 1406 	push	acc
      000712 E5*00            [12] 1407 	mov	a,_bp
      000714 24 06            [12] 1408 	add	a,#0x06
      000716 F8               [12] 1409 	mov	r0,a
      000717 86 82            [24] 1410 	mov	dpl,@r0
      000719 08               [12] 1411 	inc	r0
      00071A 86 83            [24] 1412 	mov	dph,@r0
      00071C 12r00r00         [24] 1413 	lcall	__modsint
      00071F AC 82            [24] 1414 	mov	r4,dpl
      000721 AD 83            [24] 1415 	mov	r5,dph
      000723 15 81            [12] 1416 	dec	sp
      000725 15 81            [12] 1417 	dec	sp
      000727 D0 02            [24] 1418 	pop	ar2
      000729 D0 03            [24] 1419 	pop	ar3
      00072B D0 06            [24] 1420 	pop	ar6
      00072D D0 07            [24] 1421 	pop	ar7
      00072F EC               [12] 1422 	mov	a,r4
      000730 4D               [12] 1423 	orl	a,r5
      000731 70 0F            [24] 1424 	jnz	00111$
                                   1425 ;	time.c:191: seconds+= 60*60*24L;
      000733 74 80            [12] 1426 	mov	a,#0x80
      000735 2A               [12] 1427 	add	a,r2
      000736 FA               [12] 1428 	mov	r2,a
      000737 74 51            [12] 1429 	mov	a,#0x51
      000739 3B               [12] 1430 	addc	a,r3
      00073A FB               [12] 1431 	mov	r3,a
      00073B 74 01            [12] 1432 	mov	a,#0x01
      00073D 3E               [12] 1433 	addc	a,r6
      00073E FE               [12] 1434 	mov	r6,a
      00073F E4               [12] 1435 	clr	a
      000740 3F               [12] 1436 	addc	a,r7
      000741 FF               [12] 1437 	mov	r7,a
      000742                       1438 00111$:
                                   1439 ;	time.c:189: for (i=1970; i<year; i++) {
      000742 E5*00            [12] 1440 	mov	a,_bp
      000744 24 06            [12] 1441 	add	a,#0x06
      000746 F8               [12] 1442 	mov	r0,a
      000747 06               [12] 1443 	inc	@r0
      000748 B6 00 02         [24] 1444 	cjne	@r0,#0x00,00142$
      00074B 08               [12] 1445 	inc	r0
      00074C 06               [12] 1446 	inc	@r0
      00074D                       1447 00142$:
      00074D 80 99            [24] 1448 	sjmp	00110$
      00074F                       1449 00124$:
      00074F E5*00            [12] 1450 	mov	a,_bp
      000751 24 08            [12] 1451 	add	a,#0x08
      000753 F8               [12] 1452 	mov	r0,a
      000754 A6 02            [24] 1453 	mov	@r0,ar2
      000756 08               [12] 1454 	inc	r0
      000757 A6 03            [24] 1455 	mov	@r0,ar3
      000759 08               [12] 1456 	inc	r0
      00075A A6 06            [24] 1457 	mov	@r0,ar6
      00075C 08               [12] 1458 	inc	r0
      00075D A6 07            [24] 1459 	mov	@r0,ar7
                                   1460 ;	time.c:196: for (i=0; i<month; i++) {
      00075F 74 04            [12] 1461 	mov	a,#0x04
      000761 C0 E0            [24] 1462 	push	acc
      000763 E4               [12] 1463 	clr	a
      000764 C0 E0            [24] 1464 	push	acc
      000766 E5*00            [12] 1465 	mov	a,_bp
      000768 24 0C            [12] 1466 	add	a,#0x0c
      00076A F8               [12] 1467 	mov	r0,a
      00076B 86 82            [24] 1468 	mov	dpl,@r0
      00076D 08               [12] 1469 	inc	r0
      00076E 86 83            [24] 1470 	mov	dph,@r0
      000770 12r00r00         [24] 1471 	lcall	__modsint
      000773 AE 82            [24] 1472 	mov	r6,dpl
      000775 AF 83            [24] 1473 	mov	r7,dph
      000777 15 81            [12] 1474 	dec	sp
      000779 15 81            [12] 1475 	dec	sp
      00077B 7C 00            [12] 1476 	mov	r4,#0x00
      00077D 7D 00            [12] 1477 	mov	r5,#0x00
      00077F                       1478 00113$:
      00077F E5*00            [12] 1479 	mov	a,_bp
      000781 24 04            [12] 1480 	add	a,#0x04
      000783 F8               [12] 1481 	mov	r0,a
      000784 C3               [12] 1482 	clr	c
      000785 EC               [12] 1483 	mov	a,r4
      000786 96               [12] 1484 	subb	a,@r0
      000787 ED               [12] 1485 	mov	a,r5
      000788 64 80            [12] 1486 	xrl	a,#0x80
      00078A 08               [12] 1487 	inc	r0
      00078B 86 F0            [24] 1488 	mov	b,@r0
      00078D 63 F0 80         [24] 1489 	xrl	b,#0x80
      000790 95 F0            [12] 1490 	subb	a,b
      000792 40 03            [24] 1491 	jc	00143$
      000794 02r08r18         [24] 1492 	ljmp	00108$
      000797                       1493 00143$:
                                   1494 ;	time.c:197: if (i==1 && LEAP_YEAR(year)) { 
      000797 BC 01 20         [24] 1495 	cjne	r4,#0x01,00105$
      00079A BD 00 1D         [24] 1496 	cjne	r5,#0x00,00105$
      00079D EE               [12] 1497 	mov	a,r6
      00079E 4F               [12] 1498 	orl	a,r7
      00079F 70 19            [24] 1499 	jnz	00105$
                                   1500 ;	time.c:198: seconds+= 60*60*24L*29;
      0007A1 E5*00            [12] 1501 	mov	a,_bp
      0007A3 24 08            [12] 1502 	add	a,#0x08
      0007A5 F8               [12] 1503 	mov	r0,a
      0007A6 74 80            [12] 1504 	mov	a,#0x80
      0007A8 26               [12] 1505 	add	a,@r0
      0007A9 F6               [12] 1506 	mov	@r0,a
      0007AA 74 3B            [12] 1507 	mov	a,#0x3B
      0007AC 08               [12] 1508 	inc	r0
      0007AD 36               [12] 1509 	addc	a,@r0
      0007AE F6               [12] 1510 	mov	@r0,a
      0007AF 74 26            [12] 1511 	mov	a,#0x26
      0007B1 08               [12] 1512 	inc	r0
      0007B2 36               [12] 1513 	addc	a,@r0
      0007B3 F6               [12] 1514 	mov	@r0,a
      0007B4 E4               [12] 1515 	clr	a
      0007B5 08               [12] 1516 	inc	r0
      0007B6 36               [12] 1517 	addc	a,@r0
      0007B7 F6               [12] 1518 	mov	@r0,a
      0007B8 80 56            [24] 1519 	sjmp	00114$
      0007BA                       1520 00105$:
                                   1521 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      0007BA C0 06            [24] 1522 	push	ar6
      0007BC C0 07            [24] 1523 	push	ar7
      0007BE EC               [12] 1524 	mov	a,r4
      0007BF 24r00            [12] 1525 	add	a,#_monthDays
      0007C1 F5 82            [12] 1526 	mov	dpl,a
      0007C3 ED               [12] 1527 	mov	a,r5
      0007C4 34s00            [12] 1528 	addc	a,#(_monthDays >> 8)
      0007C6 F5 83            [12] 1529 	mov	dph,a
      0007C8 E4               [12] 1530 	clr	a
      0007C9 93               [24] 1531 	movc	a,@a+dptr
      0007CA FA               [12] 1532 	mov	r2,a
      0007CB 33               [12] 1533 	rlc	a
      0007CC 95 E0            [12] 1534 	subb	a,acc
      0007CE FB               [12] 1535 	mov	r3,a
      0007CF FE               [12] 1536 	mov	r6,a
      0007D0 FF               [12] 1537 	mov	r7,a
      0007D1 C0 05            [24] 1538 	push	ar5
      0007D3 C0 04            [24] 1539 	push	ar4
      0007D5 C0 02            [24] 1540 	push	ar2
      0007D7 C0 03            [24] 1541 	push	ar3
      0007D9 C0 06            [24] 1542 	push	ar6
      0007DB C0 07            [24] 1543 	push	ar7
      0007DD 90 51 80         [24] 1544 	mov	dptr,#0x5180
      0007E0 75 F0 01         [24] 1545 	mov	b,#0x01
      0007E3 E4               [12] 1546 	clr	a
      0007E4 12r00r00         [24] 1547 	lcall	__mullong
      0007E7 AA 82            [24] 1548 	mov	r2,dpl
      0007E9 AB 83            [24] 1549 	mov	r3,dph
      0007EB AE F0            [24] 1550 	mov	r6,b
      0007ED FF               [12] 1551 	mov	r7,a
      0007EE E5 81            [12] 1552 	mov	a,sp
      0007F0 24 FC            [12] 1553 	add	a,#0xfc
      0007F2 F5 81            [12] 1554 	mov	sp,a
      0007F4 D0 04            [24] 1555 	pop	ar4
      0007F6 D0 05            [24] 1556 	pop	ar5
      0007F8 E5*00            [12] 1557 	mov	a,_bp
      0007FA 24 08            [12] 1558 	add	a,#0x08
      0007FC F8               [12] 1559 	mov	r0,a
      0007FD EA               [12] 1560 	mov	a,r2
      0007FE 26               [12] 1561 	add	a,@r0
      0007FF F6               [12] 1562 	mov	@r0,a
      000800 EB               [12] 1563 	mov	a,r3
      000801 08               [12] 1564 	inc	r0
      000802 36               [12] 1565 	addc	a,@r0
      000803 F6               [12] 1566 	mov	@r0,a
      000804 EE               [12] 1567 	mov	a,r6
      000805 08               [12] 1568 	inc	r0
      000806 36               [12] 1569 	addc	a,@r0
      000807 F6               [12] 1570 	mov	@r0,a
      000808 EF               [12] 1571 	mov	a,r7
      000809 08               [12] 1572 	inc	r0
      00080A 36               [12] 1573 	addc	a,@r0
      00080B F6               [12] 1574 	mov	@r0,a
                                   1575 ;	time.c:208: return seconds;
      00080C D0 07            [24] 1576 	pop	ar7
      00080E D0 06            [24] 1577 	pop	ar6
                                   1578 ;	time.c:200: seconds+= 60*60*24L*monthDays[i];
      000810                       1579 00114$:
                                   1580 ;	time.c:196: for (i=0; i<month; i++) {
      000810 0C               [12] 1581 	inc	r4
      000811 BC 00 01         [24] 1582 	cjne	r4,#0x00,00147$
      000814 0D               [12] 1583 	inc	r5
      000815                       1584 00147$:
      000815 02r07r7F         [24] 1585 	ljmp	00113$
      000818                       1586 00108$:
                                   1587 ;	time.c:204: seconds+= (timeptr->tm_mday-1)*60*60*24L;
      000818 A8*00            [24] 1588 	mov	r0,_bp
      00081A 08               [12] 1589 	inc	r0
      00081B 74 03            [12] 1590 	mov	a,#0x03
      00081D 26               [12] 1591 	add	a,@r0
      00081E FD               [12] 1592 	mov	r5,a
      00081F E4               [12] 1593 	clr	a
      000820 08               [12] 1594 	inc	r0
      000821 36               [12] 1595 	addc	a,@r0
      000822 FE               [12] 1596 	mov	r6,a
      000823 08               [12] 1597 	inc	r0
      000824 86 07            [24] 1598 	mov	ar7,@r0
      000826 8D 82            [24] 1599 	mov	dpl,r5
      000828 8E 83            [24] 1600 	mov	dph,r6
      00082A 8F F0            [24] 1601 	mov	b,r7
      00082C 12r00r00         [24] 1602 	lcall	__gptrget
      00082F FD               [12] 1603 	mov	r5,a
      000830 7F 00            [12] 1604 	mov	r7,#0x00
      000832 1D               [12] 1605 	dec	r5
      000833 BD FF 01         [24] 1606 	cjne	r5,#0xFF,00148$
      000836 1F               [12] 1607 	dec	r7
      000837                       1608 00148$:
      000837 EF               [12] 1609 	mov	a,r7
      000838 33               [12] 1610 	rlc	a
      000839 95 E0            [12] 1611 	subb	a,acc
      00083B FE               [12] 1612 	mov	r6,a
      00083C FC               [12] 1613 	mov	r4,a
      00083D C0 05            [24] 1614 	push	ar5
      00083F C0 07            [24] 1615 	push	ar7
      000841 C0 06            [24] 1616 	push	ar6
      000843 C0 04            [24] 1617 	push	ar4
      000845 90 51 80         [24] 1618 	mov	dptr,#0x5180
      000848 75 F0 01         [24] 1619 	mov	b,#0x01
      00084B E4               [12] 1620 	clr	a
      00084C 12r00r00         [24] 1621 	lcall	__mullong
      00084F AC 82            [24] 1622 	mov	r4,dpl
      000851 AD 83            [24] 1623 	mov	r5,dph
      000853 AE F0            [24] 1624 	mov	r6,b
      000855 FF               [12] 1625 	mov	r7,a
      000856 E5 81            [12] 1626 	mov	a,sp
      000858 24 FC            [12] 1627 	add	a,#0xfc
      00085A F5 81            [12] 1628 	mov	sp,a
      00085C E5*00            [12] 1629 	mov	a,_bp
      00085E 24 08            [12] 1630 	add	a,#0x08
      000860 F8               [12] 1631 	mov	r0,a
      000861 EC               [12] 1632 	mov	a,r4
      000862 26               [12] 1633 	add	a,@r0
      000863 F6               [12] 1634 	mov	@r0,a
      000864 ED               [12] 1635 	mov	a,r5
      000865 08               [12] 1636 	inc	r0
      000866 36               [12] 1637 	addc	a,@r0
      000867 F6               [12] 1638 	mov	@r0,a
      000868 EE               [12] 1639 	mov	a,r6
      000869 08               [12] 1640 	inc	r0
      00086A 36               [12] 1641 	addc	a,@r0
      00086B F6               [12] 1642 	mov	@r0,a
      00086C EF               [12] 1643 	mov	a,r7
      00086D 08               [12] 1644 	inc	r0
      00086E 36               [12] 1645 	addc	a,@r0
      00086F F6               [12] 1646 	mov	@r0,a
                                   1647 ;	time.c:205: seconds+= timeptr->tm_hour*60*60L;
      000870 A8*00            [24] 1648 	mov	r0,_bp
      000872 08               [12] 1649 	inc	r0
      000873 74 02            [12] 1650 	mov	a,#0x02
      000875 26               [12] 1651 	add	a,@r0
      000876 FD               [12] 1652 	mov	r5,a
      000877 E4               [12] 1653 	clr	a
      000878 08               [12] 1654 	inc	r0
      000879 36               [12] 1655 	addc	a,@r0
      00087A FE               [12] 1656 	mov	r6,a
      00087B 08               [12] 1657 	inc	r0
      00087C 86 07            [24] 1658 	mov	ar7,@r0
      00087E 8D 82            [24] 1659 	mov	dpl,r5
      000880 8E 83            [24] 1660 	mov	dph,r6
      000882 8F F0            [24] 1661 	mov	b,r7
      000884 12r00r00         [24] 1662 	lcall	__gptrget
      000887 FD               [12] 1663 	mov	r5,a
      000888 7F 00            [12] 1664 	mov	r7,#0x00
      00088A 7E 00            [12] 1665 	mov	r6,#0x00
      00088C 7C 00            [12] 1666 	mov	r4,#0x00
      00088E C0 05            [24] 1667 	push	ar5
      000890 C0 07            [24] 1668 	push	ar7
      000892 C0 06            [24] 1669 	push	ar6
      000894 C0 04            [24] 1670 	push	ar4
      000896 90 0E 10         [24] 1671 	mov	dptr,#0x0E10
      000899 E4               [12] 1672 	clr	a
      00089A F5 F0            [12] 1673 	mov	b,a
      00089C 12r00r00         [24] 1674 	lcall	__mullong
      00089F AC 82            [24] 1675 	mov	r4,dpl
      0008A1 AD 83            [24] 1676 	mov	r5,dph
      0008A3 AE F0            [24] 1677 	mov	r6,b
      0008A5 FF               [12] 1678 	mov	r7,a
      0008A6 E5 81            [12] 1679 	mov	a,sp
      0008A8 24 FC            [12] 1680 	add	a,#0xfc
      0008AA F5 81            [12] 1681 	mov	sp,a
      0008AC E5*00            [12] 1682 	mov	a,_bp
      0008AE 24 08            [12] 1683 	add	a,#0x08
      0008B0 F8               [12] 1684 	mov	r0,a
      0008B1 EC               [12] 1685 	mov	a,r4
      0008B2 26               [12] 1686 	add	a,@r0
      0008B3 F6               [12] 1687 	mov	@r0,a
      0008B4 ED               [12] 1688 	mov	a,r5
      0008B5 08               [12] 1689 	inc	r0
      0008B6 36               [12] 1690 	addc	a,@r0
      0008B7 F6               [12] 1691 	mov	@r0,a
      0008B8 EE               [12] 1692 	mov	a,r6
      0008B9 08               [12] 1693 	inc	r0
      0008BA 36               [12] 1694 	addc	a,@r0
      0008BB F6               [12] 1695 	mov	@r0,a
      0008BC EF               [12] 1696 	mov	a,r7
      0008BD 08               [12] 1697 	inc	r0
      0008BE 36               [12] 1698 	addc	a,@r0
      0008BF F6               [12] 1699 	mov	@r0,a
                                   1700 ;	time.c:206: seconds+= timeptr->tm_min*60;
      0008C0 A8*00            [24] 1701 	mov	r0,_bp
      0008C2 08               [12] 1702 	inc	r0
      0008C3 74 01            [12] 1703 	mov	a,#0x01
      0008C5 26               [12] 1704 	add	a,@r0
      0008C6 FD               [12] 1705 	mov	r5,a
      0008C7 E4               [12] 1706 	clr	a
      0008C8 08               [12] 1707 	inc	r0
      0008C9 36               [12] 1708 	addc	a,@r0
      0008CA FE               [12] 1709 	mov	r6,a
      0008CB 08               [12] 1710 	inc	r0
      0008CC 86 07            [24] 1711 	mov	ar7,@r0
      0008CE 8D 82            [24] 1712 	mov	dpl,r5
      0008D0 8E 83            [24] 1713 	mov	dph,r6
      0008D2 8F F0            [24] 1714 	mov	b,r7
      0008D4 12r00r00         [24] 1715 	lcall	__gptrget
      0008D7 75 F0 3C         [24] 1716 	mov	b,#0x3C
      0008DA A4               [48] 1717 	mul	ab
      0008DB FD               [12] 1718 	mov	r5,a
      0008DC E5 F0            [12] 1719 	mov	a,b
      0008DE FF               [12] 1720 	mov	r7,a
      0008DF 33               [12] 1721 	rlc	a
      0008E0 95 E0            [12] 1722 	subb	a,acc
      0008E2 FE               [12] 1723 	mov	r6,a
      0008E3 FC               [12] 1724 	mov	r4,a
      0008E4 E5*00            [12] 1725 	mov	a,_bp
      0008E6 24 08            [12] 1726 	add	a,#0x08
      0008E8 F8               [12] 1727 	mov	r0,a
      0008E9 ED               [12] 1728 	mov	a,r5
      0008EA 26               [12] 1729 	add	a,@r0
      0008EB F6               [12] 1730 	mov	@r0,a
      0008EC EF               [12] 1731 	mov	a,r7
      0008ED 08               [12] 1732 	inc	r0
      0008EE 36               [12] 1733 	addc	a,@r0
      0008EF F6               [12] 1734 	mov	@r0,a
      0008F0 EE               [12] 1735 	mov	a,r6
      0008F1 08               [12] 1736 	inc	r0
      0008F2 36               [12] 1737 	addc	a,@r0
      0008F3 F6               [12] 1738 	mov	@r0,a
      0008F4 EC               [12] 1739 	mov	a,r4
      0008F5 08               [12] 1740 	inc	r0
      0008F6 36               [12] 1741 	addc	a,@r0
      0008F7 F6               [12] 1742 	mov	@r0,a
                                   1743 ;	time.c:207: seconds+= timeptr->tm_sec;
      0008F8 A8*00            [24] 1744 	mov	r0,_bp
      0008FA 08               [12] 1745 	inc	r0
      0008FB 86 82            [24] 1746 	mov	dpl,@r0
      0008FD 08               [12] 1747 	inc	r0
      0008FE 86 83            [24] 1748 	mov	dph,@r0
      000900 08               [12] 1749 	inc	r0
      000901 86 F0            [24] 1750 	mov	b,@r0
      000903 12r00r00         [24] 1751 	lcall	__gptrget
      000906 FF               [12] 1752 	mov	r7,a
      000907 E4               [12] 1753 	clr	a
      000908 FE               [12] 1754 	mov	r6,a
      000909 33               [12] 1755 	rlc	a
      00090A 95 E0            [12] 1756 	subb	a,acc
      00090C FD               [12] 1757 	mov	r5,a
      00090D FC               [12] 1758 	mov	r4,a
      00090E E5*00            [12] 1759 	mov	a,_bp
      000910 24 08            [12] 1760 	add	a,#0x08
      000912 F8               [12] 1761 	mov	r0,a
      000913 EF               [12] 1762 	mov	a,r7
      000914 26               [12] 1763 	add	a,@r0
      000915 F6               [12] 1764 	mov	@r0,a
      000916 EE               [12] 1765 	mov	a,r6
      000917 08               [12] 1766 	inc	r0
      000918 36               [12] 1767 	addc	a,@r0
      000919 F6               [12] 1768 	mov	@r0,a
      00091A ED               [12] 1769 	mov	a,r5
      00091B 08               [12] 1770 	inc	r0
      00091C 36               [12] 1771 	addc	a,@r0
      00091D F6               [12] 1772 	mov	@r0,a
      00091E EC               [12] 1773 	mov	a,r4
      00091F 08               [12] 1774 	inc	r0
      000920 36               [12] 1775 	addc	a,@r0
      000921 F6               [12] 1776 	mov	@r0,a
                                   1777 ;	time.c:208: return seconds;
      000922 E5*00            [12] 1778 	mov	a,_bp
      000924 24 08            [12] 1779 	add	a,#0x08
      000926 F8               [12] 1780 	mov	r0,a
      000927 86 82            [24] 1781 	mov	dpl,@r0
      000929 08               [12] 1782 	inc	r0
      00092A 86 83            [24] 1783 	mov	dph,@r0
      00092C 08               [12] 1784 	inc	r0
      00092D 86 F0            [24] 1785 	mov	b,@r0
      00092F 08               [12] 1786 	inc	r0
      000930 E6               [12] 1787 	mov	a,@r0
      000931 85*00 81         [24] 1788 	mov	sp,_bp
      000934 D0*00            [24] 1789 	pop	_bp
      000936 22               [24] 1790 	ret
                                   1791 	.area CSEG    (CODE)
                                   1792 	.area CONST   (CODE)
      000000                       1793 _monthDays:
      000000 1F                    1794 	.db #0x1F	;  31
      000001 1C                    1795 	.db #0x1C	;  28
      000002 1F                    1796 	.db #0x1F	;  31
      000003 1E                    1797 	.db #0x1E	;  30
      000004 1F                    1798 	.db #0x1F	;  31
      000005 1E                    1799 	.db #0x1E	;  30
      000006 1F                    1800 	.db #0x1F	;  31
      000007 1F                    1801 	.db #0x1F	;  31
      000008 1E                    1802 	.db #0x1E	;  30
      000009 1F                    1803 	.db #0x1F	;  31
      00000A 1E                    1804 	.db #0x1E	;  30
      00000B 1F                    1805 	.db #0x1F	;  31
      00000C                       1806 ___month:
      00000Cr51s00                 1807 	.byte _str_1,(_str_1 >> 8)
      00000Er55s00                 1808 	.byte _str_2,(_str_2 >> 8)
      000010r59s00                 1809 	.byte _str_3,(_str_3 >> 8)
      000012r5Ds00                 1810 	.byte _str_4,(_str_4 >> 8)
      000014r61s00                 1811 	.byte _str_5,(_str_5 >> 8)
      000016r65s00                 1812 	.byte _str_6,(_str_6 >> 8)
      000018r69s00                 1813 	.byte _str_7,(_str_7 >> 8)
      00001Ar6Ds00                 1814 	.byte _str_8,(_str_8 >> 8)
      00001Cr71s00                 1815 	.byte _str_9,(_str_9 >> 8)
      00001Er75s00                 1816 	.byte _str_10,(_str_10 >> 8)
      000020r79s00                 1817 	.byte _str_11,(_str_11 >> 8)
      000022r7Ds00                 1818 	.byte _str_12,(_str_12 >> 8)
      000024                       1819 ___day:
      000024r81s00                 1820 	.byte _str_13,(_str_13 >> 8)
      000026r85s00                 1821 	.byte _str_14,(_str_14 >> 8)
      000028r89s00                 1822 	.byte _str_15,(_str_15 >> 8)
      00002Ar8Ds00                 1823 	.byte _str_16,(_str_16 >> 8)
      00002Cr91s00                 1824 	.byte _str_17,(_str_17 >> 8)
      00002Er95s00                 1825 	.byte _str_18,(_str_18 >> 8)
      000030r99s00                 1826 	.byte _str_19,(_str_19 >> 8)
      000032                       1827 __str_0:
      000032 25 73 20 25 73 20 25  1828 	.ascii "%s %s %2d %02d:%02d:%02d %04d"
             32 64 20 25 30 32 64
             3A 25 30 32 64 3A 25
             30 32 64 20 25 30 34
             64
      00004F 0A                    1829 	.db 0x0A
      000050 00                    1830 	.db 0x00
      000051                       1831 _str_1:
      000051 4A 61 6E              1832 	.ascii "Jan"
      000054 00                    1833 	.db 0x00
      000055                       1834 _str_2:
      000055 46 65 62              1835 	.ascii "Feb"
      000058 00                    1836 	.db 0x00
      000059                       1837 _str_3:
      000059 4D 61 72              1838 	.ascii "Mar"
      00005C 00                    1839 	.db 0x00
      00005D                       1840 _str_4:
      00005D 41 70 72              1841 	.ascii "Apr"
      000060 00                    1842 	.db 0x00
      000061                       1843 _str_5:
      000061 4D 61 79              1844 	.ascii "May"
      000064 00                    1845 	.db 0x00
      000065                       1846 _str_6:
      000065 4A 75 6E              1847 	.ascii "Jun"
      000068 00                    1848 	.db 0x00
      000069                       1849 _str_7:
      000069 4A 75 6C              1850 	.ascii "Jul"
      00006C 00                    1851 	.db 0x00
      00006D                       1852 _str_8:
      00006D 41 75 67              1853 	.ascii "Aug"
      000070 00                    1854 	.db 0x00
      000071                       1855 _str_9:
      000071 53 65 70              1856 	.ascii "Sep"
      000074 00                    1857 	.db 0x00
      000075                       1858 _str_10:
      000075 4F 63 74              1859 	.ascii "Oct"
      000078 00                    1860 	.db 0x00
      000079                       1861 _str_11:
      000079 4E 6F 76              1862 	.ascii "Nov"
      00007C 00                    1863 	.db 0x00
      00007D                       1864 _str_12:
      00007D 44 65 63              1865 	.ascii "Dec"
      000080 00                    1866 	.db 0x00
      000081                       1867 _str_13:
      000081 53 75 6E              1868 	.ascii "Sun"
      000084 00                    1869 	.db 0x00
      000085                       1870 _str_14:
      000085 4D 6F 6E              1871 	.ascii "Mon"
      000088 00                    1872 	.db 0x00
      000089                       1873 _str_15:
      000089 54 75 65              1874 	.ascii "Tue"
      00008C 00                    1875 	.db 0x00
      00008D                       1876 _str_16:
      00008D 57 65 64              1877 	.ascii "Wed"
      000090 00                    1878 	.db 0x00
      000091                       1879 _str_17:
      000091 54 68 75              1880 	.ascii "Thu"
      000094 00                    1881 	.db 0x00
      000095                       1882 _str_18:
      000095 46 72 69              1883 	.ascii "Fri"
      000098 00                    1884 	.db 0x00
      000099                       1885 _str_19:
      000099 53 61 74              1886 	.ascii "Sat"
      00009C 00                    1887 	.db 0x00
                                   1888 	.area XINIT   (CODE)
                                   1889 	.area CABS    (ABS,CODE)
