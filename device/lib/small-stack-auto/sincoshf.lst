                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.3.1 #8898 (Nov 27 2013) (Linux)
                                      4 ; This file was generated Wed Nov 27 12:28:03 2013
                                      5 ;--------------------------------------------------------
                                      6 	.module sincoshf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _sincoshf
                                     13 	.globl _expf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; overlayable bit register bank
                                     31 ;--------------------------------------------------------
                                     32 	.area BIT_BANK	(REL,OVR,DATA)
      000000                         33 bits:
      000000                         34 	.ds 1
                           008000    35 	b0 = bits[0]
                           008100    36 	b1 = bits[1]
                           008200    37 	b2 = bits[2]
                           008300    38 	b3 = bits[3]
                           008400    39 	b4 = bits[4]
                           008500    40 	b5 = bits[5]
                           008600    41 	b6 = bits[6]
                           008700    42 	b7 = bits[7]
                                     43 ;--------------------------------------------------------
                                     44 ; internal ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DSEG    (DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; overlayable items in internal ram 
                                     49 ;--------------------------------------------------------
                                     50 ;--------------------------------------------------------
                                     51 ; indirectly addressable internal ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area ISEG    (DATA)
                                     54 ;--------------------------------------------------------
                                     55 ; absolute internal ram data
                                     56 ;--------------------------------------------------------
                                     57 	.area IABS    (ABS,DATA)
                                     58 	.area IABS    (ABS,DATA)
                                     59 ;--------------------------------------------------------
                                     60 ; bit data
                                     61 ;--------------------------------------------------------
                                     62 	.area BSEG    (BIT)
                                     63 ;--------------------------------------------------------
                                     64 ; paged external ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area PSEG    (PAG,XDATA)
                                     67 ;--------------------------------------------------------
                                     68 ; external ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area XSEG    (XDATA)
                                     71 ;--------------------------------------------------------
                                     72 ; absolute external ram data
                                     73 ;--------------------------------------------------------
                                     74 	.area XABS    (ABS,XDATA)
                                     75 ;--------------------------------------------------------
                                     76 ; external initialized ram data
                                     77 ;--------------------------------------------------------
                                     78 	.area XISEG   (XDATA)
                                     79 	.area HOME    (CODE)
                                     80 	.area GSINIT0 (CODE)
                                     81 	.area GSINIT1 (CODE)
                                     82 	.area GSINIT2 (CODE)
                                     83 	.area GSINIT3 (CODE)
                                     84 	.area GSINIT4 (CODE)
                                     85 	.area GSINIT5 (CODE)
                                     86 	.area GSINIT  (CODE)
                                     87 	.area GSFINAL (CODE)
                                     88 	.area CSEG    (CODE)
                                     89 ;--------------------------------------------------------
                                     90 ; global & static initialisations
                                     91 ;--------------------------------------------------------
                                     92 	.area HOME    (CODE)
                                     93 	.area GSINIT  (CODE)
                                     94 	.area GSFINAL (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 ;--------------------------------------------------------
                                     97 ; Home
                                     98 ;--------------------------------------------------------
                                     99 	.area HOME    (CODE)
                                    100 	.area HOME    (CODE)
                                    101 ;--------------------------------------------------------
                                    102 ; code
                                    103 ;--------------------------------------------------------
                                    104 	.area CSEG    (CODE)
                                    105 ;------------------------------------------------------------
                                    106 ;Allocation info for local variables in function 'sincoshf'
                                    107 ;------------------------------------------------------------
                                    108 ;iscosh                    Allocated to stack - _bp -4
                                    109 ;x                         Allocated to stack - _bp +1
                                    110 ;y                         Allocated to registers r7 r6 r5 r4 
                                    111 ;w                         Allocated to registers r7 r6 r5 r4 
                                    112 ;z                         Allocated to stack - _bp +9
                                    113 ;sign                      Allocated to registers b0 
                                    114 ;sloc0                     Allocated to stack - _bp +5
                                    115 ;------------------------------------------------------------
                                    116 ;	sincoshf.c:56: float sincoshf(const float x, const int iscosh)
                                    117 ;	-----------------------------------------
                                    118 ;	 function sincoshf
                                    119 ;	-----------------------------------------
      000000                        120 _sincoshf:
                           000007   121 	ar7 = 0x07
                           000006   122 	ar6 = 0x06
                           000005   123 	ar5 = 0x05
                           000004   124 	ar4 = 0x04
                           000003   125 	ar3 = 0x03
                           000002   126 	ar2 = 0x02
                           000001   127 	ar1 = 0x01
                           000000   128 	ar0 = 0x00
      000000 C0*00            [24]  129 	push	_bp
      000002 85 81*00         [24]  130 	mov	_bp,sp
      000005 C0 82            [24]  131 	push	dpl
      000007 C0 83            [24]  132 	push	dph
      000009 C0 F0            [24]  133 	push	b
      00000B C0 E0            [24]  134 	push	acc
      00000D E5 81            [12]  135 	mov	a,sp
      00000F 24 08            [12]  136 	add	a,#0x08
      000011 F5 81            [12]  137 	mov	sp,a
                                    138 ;	sincoshf.c:61: if (x<0.0) { y=-x; sign=1; }
      000013 E4               [12]  139 	clr	a
      000014 C0 E0            [24]  140 	push	acc
      000016 C0 E0            [24]  141 	push	acc
      000018 C0 E0            [24]  142 	push	acc
      00001A C0 E0            [24]  143 	push	acc
      00001C A8*00            [24]  144 	mov	r0,_bp
      00001E 08               [12]  145 	inc	r0
      00001F 86 82            [24]  146 	mov	dpl,@r0
      000021 08               [12]  147 	inc	r0
      000022 86 83            [24]  148 	mov	dph,@r0
      000024 08               [12]  149 	inc	r0
      000025 86 F0            [24]  150 	mov	b,@r0
      000027 08               [12]  151 	inc	r0
      000028 E6               [12]  152 	mov	a,@r0
      000029 12r00r00         [24]  153 	lcall	___fslt
      00002C AB 82            [24]  154 	mov	r3,dpl
      00002E E5 81            [12]  155 	mov	a,sp
      000030 24 FC            [12]  156 	add	a,#0xfc
      000032 F5 81            [12]  157 	mov	sp,a
      000034 EB               [12]  158 	mov	a,r3
      000035 60 14            [24]  159 	jz	00102$
      000037 A8*00            [24]  160 	mov	r0,_bp
      000039 08               [12]  161 	inc	r0
      00003A 86 07            [24]  162 	mov	ar7,@r0
      00003C 08               [12]  163 	inc	r0
      00003D 86 06            [24]  164 	mov	ar6,@r0
      00003F 08               [12]  165 	inc	r0
      000040 86 05            [24]  166 	mov	ar5,@r0
      000042 08               [12]  167 	inc	r0
      000043 E6               [12]  168 	mov	a,@r0
      000044 B2 E7            [12]  169 	cpl	acc.7
      000046 FC               [12]  170 	mov	r4,a
      000047 D2*00            [12]  171 	setb	b0
      000049 80 10            [24]  172 	sjmp	00103$
      00004B                        173 00102$:
                                    174 ;	sincoshf.c:62: else { y=x;  sign=0; }
      00004B A8*00            [24]  175 	mov	r0,_bp
      00004D 08               [12]  176 	inc	r0
      00004E 86 07            [24]  177 	mov	ar7,@r0
      000050 08               [12]  178 	inc	r0
      000051 86 06            [24]  179 	mov	ar6,@r0
      000053 08               [12]  180 	inc	r0
      000054 86 05            [24]  181 	mov	ar5,@r0
      000056 08               [12]  182 	inc	r0
      000057 86 04            [24]  183 	mov	ar4,@r0
      000059 C2*00            [12]  184 	clr	b0
      00005B                        185 00103$:
                                    186 ;	sincoshf.c:64: if ((y>1.0) || iscosh)
      00005B C0 07            [24]  187 	push	ar7
      00005D C0 06            [24]  188 	push	ar6
      00005F C0 05            [24]  189 	push	ar5
      000061 C0 04            [24]  190 	push	ar4
      000063 C0*00            [24]  191 	push	bits
      000065 E4               [12]  192 	clr	a
      000066 C0 E0            [24]  193 	push	acc
      000068 C0 E0            [24]  194 	push	acc
      00006A 74 80            [12]  195 	mov	a,#0x80
      00006C C0 E0            [24]  196 	push	acc
      00006E 74 3F            [12]  197 	mov	a,#0x3F
      000070 C0 E0            [24]  198 	push	acc
      000072 8F 82            [24]  199 	mov	dpl,r7
      000074 8E 83            [24]  200 	mov	dph,r6
      000076 8D F0            [24]  201 	mov	b,r5
      000078 EC               [12]  202 	mov	a,r4
      000079 12r00r00         [24]  203 	lcall	___fsgt
      00007C AB 82            [24]  204 	mov	r3,dpl
      00007E E5 81            [12]  205 	mov	a,sp
      000080 24 FC            [12]  206 	add	a,#0xfc
      000082 F5 81            [12]  207 	mov	sp,a
      000084 D0*00            [24]  208 	pop	bits
      000086 D0 04            [24]  209 	pop	ar4
      000088 D0 05            [24]  210 	pop	ar5
      00008A D0 06            [24]  211 	pop	ar6
      00008C D0 07            [24]  212 	pop	ar7
      00008E EB               [12]  213 	mov	a,r3
      00008F 70 0D            [24]  214 	jnz	00117$
      000091 E5*00            [12]  215 	mov	a,_bp
      000093 24 FC            [12]  216 	add	a,#0xfc
      000095 F8               [12]  217 	mov	r0,a
      000096 E6               [12]  218 	mov	a,@r0
      000097 08               [12]  219 	inc	r0
      000098 46               [12]  220 	orl	a,@r0
      000099 70 03            [24]  221 	jnz	00146$
      00009B 02r02rDC         [24]  222 	ljmp	00118$
      00009E                        223 00146$:
      00009E                        224 00117$:
                                    225 ;	sincoshf.c:66: if(y>YBAR)
      00009E C0 07            [24]  226 	push	ar7
      0000A0 C0 06            [24]  227 	push	ar6
      0000A2 C0 05            [24]  228 	push	ar5
      0000A4 C0 04            [24]  229 	push	ar4
      0000A6 C0*00            [24]  230 	push	bits
      0000A8 E4               [12]  231 	clr	a
      0000A9 C0 E0            [24]  232 	push	acc
      0000AB C0 E0            [24]  233 	push	acc
      0000AD 74 10            [12]  234 	mov	a,#0x10
      0000AF C0 E0            [24]  235 	push	acc
      0000B1 74 41            [12]  236 	mov	a,#0x41
      0000B3 C0 E0            [24]  237 	push	acc
      0000B5 8F 82            [24]  238 	mov	dpl,r7
      0000B7 8E 83            [24]  239 	mov	dph,r6
      0000B9 8D F0            [24]  240 	mov	b,r5
      0000BB EC               [12]  241 	mov	a,r4
      0000BC 12r00r00         [24]  242 	lcall	___fsgt
      0000BF AB 82            [24]  243 	mov	r3,dpl
      0000C1 E5 81            [12]  244 	mov	a,sp
      0000C3 24 FC            [12]  245 	add	a,#0xfc
      0000C5 F5 81            [12]  246 	mov	sp,a
      0000C7 D0*00            [24]  247 	pop	bits
      0000C9 D0 04            [24]  248 	pop	ar4
      0000CB D0 05            [24]  249 	pop	ar5
      0000CD D0 06            [24]  250 	pop	ar6
      0000CF D0 07            [24]  251 	pop	ar7
      0000D1 EB               [12]  252 	mov	a,r3
      0000D2 70 03            [24]  253 	jnz	00147$
      0000D4 02r01rE6         [24]  254 	ljmp	00110$
      0000D7                        255 00147$:
                                    256 ;	sincoshf.c:68: w=y-K1;
      0000D7 C0*00            [24]  257 	push	bits
      0000D9 E4               [12]  258 	clr	a
      0000DA C0 E0            [24]  259 	push	acc
      0000DC 74 73            [12]  260 	mov	a,#0x73
      0000DE C0 E0            [24]  261 	push	acc
      0000E0 74 31            [12]  262 	mov	a,#0x31
      0000E2 C0 E0            [24]  263 	push	acc
      0000E4 74 3F            [12]  264 	mov	a,#0x3F
      0000E6 C0 E0            [24]  265 	push	acc
      0000E8 8F 82            [24]  266 	mov	dpl,r7
      0000EA 8E 83            [24]  267 	mov	dph,r6
      0000EC 8D F0            [24]  268 	mov	b,r5
      0000EE EC               [12]  269 	mov	a,r4
      0000EF 12r00r00         [24]  270 	lcall	___fssub
      0000F2 AF 82            [24]  271 	mov	r7,dpl
      0000F4 AE 83            [24]  272 	mov	r6,dph
      0000F6 AD F0            [24]  273 	mov	r5,b
      0000F8 FC               [12]  274 	mov	r4,a
      0000F9 E5 81            [12]  275 	mov	a,sp
      0000FB 24 FC            [12]  276 	add	a,#0xfc
      0000FD F5 81            [12]  277 	mov	sp,a
      0000FF D0*00            [24]  278 	pop	bits
                                    279 ;	sincoshf.c:69: if (w>WMAX)
      000101 C0 07            [24]  280 	push	ar7
      000103 C0 06            [24]  281 	push	ar6
      000105 C0 05            [24]  282 	push	ar5
      000107 C0 04            [24]  283 	push	ar4
      000109 C0*00            [24]  284 	push	bits
      00010B 74 CF            [12]  285 	mov	a,#0xCF
      00010D C0 E0            [24]  286 	push	acc
      00010F 74 BD            [12]  287 	mov	a,#0xBD
      000111 C0 E0            [24]  288 	push	acc
      000113 74 33            [12]  289 	mov	a,#0x33
      000115 C0 E0            [24]  290 	push	acc
      000117 74 42            [12]  291 	mov	a,#0x42
      000119 C0 E0            [24]  292 	push	acc
      00011B 8F 82            [24]  293 	mov	dpl,r7
      00011D 8E 83            [24]  294 	mov	dph,r6
      00011F 8D F0            [24]  295 	mov	b,r5
      000121 EC               [12]  296 	mov	a,r4
      000122 12r00r00         [24]  297 	lcall	___fsgt
      000125 AB 82            [24]  298 	mov	r3,dpl
      000127 E5 81            [12]  299 	mov	a,sp
      000129 24 FC            [12]  300 	add	a,#0xfc
      00012B F5 81            [12]  301 	mov	sp,a
      00012D D0*00            [24]  302 	pop	bits
      00012F D0 04            [24]  303 	pop	ar4
      000131 D0 05            [24]  304 	pop	ar5
      000133 D0 06            [24]  305 	pop	ar6
      000135 D0 07            [24]  306 	pop	ar7
      000137 EB               [12]  307 	mov	a,r3
      000138 60 19            [24]  308 	jz	00105$
                                    309 ;	sincoshf.c:71: errno=ERANGE;
      00013A 75*00 22         [24]  310 	mov	_errno,#0x22
      00013D 75*01 00         [24]  311 	mov	(_errno + 1),#0x00
                                    312 ;	sincoshf.c:72: z=HUGE_VALF;
      000140 E5*00            [12]  313 	mov	a,_bp
      000142 24 09            [12]  314 	add	a,#0x09
      000144 F8               [12]  315 	mov	r0,a
      000145 76 FF            [12]  316 	mov	@r0,#0xFF
      000147 08               [12]  317 	inc	r0
      000148 76 FF            [12]  318 	mov	@r0,#0xFF
      00014A 08               [12]  319 	inc	r0
      00014B 76 7F            [12]  320 	mov	@r0,#0x7F
      00014D 08               [12]  321 	inc	r0
      00014E 76 7F            [12]  322 	mov	@r0,#0x7F
      000150 02r02rC1         [24]  323 	ljmp	00111$
      000153                        324 00105$:
                                    325 ;	sincoshf.c:76: z=expf(w);
      000153 8F 82            [24]  326 	mov	dpl,r7
      000155 8E 83            [24]  327 	mov	dph,r6
      000157 8D F0            [24]  328 	mov	b,r5
      000159 EC               [12]  329 	mov	a,r4
      00015A C0*00            [24]  330 	push	bits
      00015C 12r00r00         [24]  331 	lcall	_expf
      00015F AF 82            [24]  332 	mov	r7,dpl
      000161 AE 83            [24]  333 	mov	r6,dph
      000163 AD F0            [24]  334 	mov	r5,b
      000165 FC               [12]  335 	mov	r4,a
      000166 D0*00            [24]  336 	pop	bits
      000168 E5*00            [12]  337 	mov	a,_bp
      00016A 24 09            [12]  338 	add	a,#0x09
      00016C F8               [12]  339 	mov	r0,a
      00016D A6 07            [24]  340 	mov	@r0,ar7
      00016F 08               [12]  341 	inc	r0
      000170 A6 06            [24]  342 	mov	@r0,ar6
      000172 08               [12]  343 	inc	r0
      000173 A6 05            [24]  344 	mov	@r0,ar5
      000175 08               [12]  345 	inc	r0
      000176 A6 04            [24]  346 	mov	@r0,ar4
                                    347 ;	sincoshf.c:77: z+=K3*z;
      000178 C0*00            [24]  348 	push	bits
      00017A E5*00            [12]  349 	mov	a,_bp
      00017C 24 09            [12]  350 	add	a,#0x09
      00017E F8               [12]  351 	mov	r0,a
      00017F E6               [12]  352 	mov	a,@r0
      000180 C0 E0            [24]  353 	push	acc
      000182 08               [12]  354 	inc	r0
      000183 E6               [12]  355 	mov	a,@r0
      000184 C0 E0            [24]  356 	push	acc
      000186 08               [12]  357 	inc	r0
      000187 E6               [12]  358 	mov	a,@r0
      000188 C0 E0            [24]  359 	push	acc
      00018A 08               [12]  360 	inc	r0
      00018B E6               [12]  361 	mov	a,@r0
      00018C C0 E0            [24]  362 	push	acc
      00018E 90 08 97         [24]  363 	mov	dptr,#0x0897
      000191 75 F0 68         [24]  364 	mov	b,#0x68
      000194 74 37            [12]  365 	mov	a,#0x37
      000196 12r00r00         [24]  366 	lcall	___fsmul
      000199 AF 82            [24]  367 	mov	r7,dpl
      00019B AE 83            [24]  368 	mov	r6,dph
      00019D AD F0            [24]  369 	mov	r5,b
      00019F FC               [12]  370 	mov	r4,a
      0001A0 E5 81            [12]  371 	mov	a,sp
      0001A2 24 FC            [12]  372 	add	a,#0xfc
      0001A4 F5 81            [12]  373 	mov	sp,a
      0001A6 D0*00            [24]  374 	pop	bits
      0001A8 C0*00            [24]  375 	push	bits
      0001AA C0 07            [24]  376 	push	ar7
      0001AC C0 06            [24]  377 	push	ar6
      0001AE C0 05            [24]  378 	push	ar5
      0001B0 C0 04            [24]  379 	push	ar4
      0001B2 E5*00            [12]  380 	mov	a,_bp
      0001B4 24 09            [12]  381 	add	a,#0x09
      0001B6 F8               [12]  382 	mov	r0,a
      0001B7 86 82            [24]  383 	mov	dpl,@r0
      0001B9 08               [12]  384 	inc	r0
      0001BA 86 83            [24]  385 	mov	dph,@r0
      0001BC 08               [12]  386 	inc	r0
      0001BD 86 F0            [24]  387 	mov	b,@r0
      0001BF 08               [12]  388 	inc	r0
      0001C0 E6               [12]  389 	mov	a,@r0
      0001C1 12r00r00         [24]  390 	lcall	___fsadd
      0001C4 AF 82            [24]  391 	mov	r7,dpl
      0001C6 AE 83            [24]  392 	mov	r6,dph
      0001C8 AD F0            [24]  393 	mov	r5,b
      0001CA FC               [12]  394 	mov	r4,a
      0001CB E5 81            [12]  395 	mov	a,sp
      0001CD 24 FC            [12]  396 	add	a,#0xfc
      0001CF F5 81            [12]  397 	mov	sp,a
      0001D1 D0*00            [24]  398 	pop	bits
      0001D3 E5*00            [12]  399 	mov	a,_bp
      0001D5 24 09            [12]  400 	add	a,#0x09
      0001D7 F8               [12]  401 	mov	r0,a
      0001D8 A6 07            [24]  402 	mov	@r0,ar7
      0001DA 08               [12]  403 	inc	r0
      0001DB A6 06            [24]  404 	mov	@r0,ar6
      0001DD 08               [12]  405 	inc	r0
      0001DE A6 05            [24]  406 	mov	@r0,ar5
      0001E0 08               [12]  407 	inc	r0
      0001E1 A6 04            [24]  408 	mov	@r0,ar4
      0001E3 02r02rC1         [24]  409 	ljmp	00111$
      0001E6                        410 00110$:
                                    411 ;	sincoshf.c:82: z=expf(y);
      0001E6 8F 82            [24]  412 	mov	dpl,r7
      0001E8 8E 83            [24]  413 	mov	dph,r6
      0001EA 8D F0            [24]  414 	mov	b,r5
      0001EC EC               [12]  415 	mov	a,r4
      0001ED C0*00            [24]  416 	push	bits
      0001EF 12r00r00         [24]  417 	lcall	_expf
      0001F2 AF 82            [24]  418 	mov	r7,dpl
      0001F4 AE 83            [24]  419 	mov	r6,dph
      0001F6 AD F0            [24]  420 	mov	r5,b
      0001F8 FC               [12]  421 	mov	r4,a
      0001F9 D0*00            [24]  422 	pop	bits
      0001FB E5*00            [12]  423 	mov	a,_bp
      0001FD 24 09            [12]  424 	add	a,#0x09
      0001FF F8               [12]  425 	mov	r0,a
      000200 A6 07            [24]  426 	mov	@r0,ar7
      000202 08               [12]  427 	inc	r0
      000203 A6 06            [24]  428 	mov	@r0,ar6
      000205 08               [12]  429 	inc	r0
      000206 A6 05            [24]  430 	mov	@r0,ar5
      000208 08               [12]  431 	inc	r0
      000209 A6 04            [24]  432 	mov	@r0,ar4
                                    433 ;	sincoshf.c:83: w=1.0/z;
      00020B C0*00            [24]  434 	push	bits
      00020D E5*00            [12]  435 	mov	a,_bp
      00020F 24 09            [12]  436 	add	a,#0x09
      000211 F8               [12]  437 	mov	r0,a
      000212 E6               [12]  438 	mov	a,@r0
      000213 C0 E0            [24]  439 	push	acc
      000215 08               [12]  440 	inc	r0
      000216 E6               [12]  441 	mov	a,@r0
      000217 C0 E0            [24]  442 	push	acc
      000219 08               [12]  443 	inc	r0
      00021A E6               [12]  444 	mov	a,@r0
      00021B C0 E0            [24]  445 	push	acc
      00021D 08               [12]  446 	inc	r0
      00021E E6               [12]  447 	mov	a,@r0
      00021F C0 E0            [24]  448 	push	acc
      000221 90 00 00         [24]  449 	mov	dptr,#0x0000
      000224 75 F0 80         [24]  450 	mov	b,#0x80
      000227 74 3F            [12]  451 	mov	a,#0x3F
      000229 12r00r00         [24]  452 	lcall	___fsdiv
      00022C C8               [12]  453 	xch	a,r0
      00022D E5*00            [12]  454 	mov	a,_bp
      00022F 24 05            [12]  455 	add	a,#0x05
      000231 C8               [12]  456 	xch	a,r0
      000232 A6 82            [24]  457 	mov	@r0,dpl
      000234 08               [12]  458 	inc	r0
      000235 A6 83            [24]  459 	mov	@r0,dph
      000237 08               [12]  460 	inc	r0
      000238 A6 F0            [24]  461 	mov	@r0,b
      00023A 08               [12]  462 	inc	r0
      00023B F6               [12]  463 	mov	@r0,a
      00023C E5 81            [12]  464 	mov	a,sp
      00023E 24 FC            [12]  465 	add	a,#0xfc
      000240 F5 81            [12]  466 	mov	sp,a
      000242 D0*00            [24]  467 	pop	bits
      000244 E5*00            [12]  468 	mov	a,_bp
      000246 24 05            [12]  469 	add	a,#0x05
      000248 F8               [12]  470 	mov	r0,a
      000249 86 07            [24]  471 	mov	ar7,@r0
      00024B 08               [12]  472 	inc	r0
      00024C 86 06            [24]  473 	mov	ar6,@r0
      00024E 08               [12]  474 	inc	r0
      00024F 86 05            [24]  475 	mov	ar5,@r0
      000251 08               [12]  476 	inc	r0
      000252 86 04            [24]  477 	mov	ar4,@r0
                                    478 ;	sincoshf.c:84: if(!iscosh) w=-w;
      000254 E5*00            [12]  479 	mov	a,_bp
      000256 24 FC            [12]  480 	add	a,#0xfc
      000258 F8               [12]  481 	mov	r0,a
      000259 E6               [12]  482 	mov	a,@r0
      00025A 08               [12]  483 	inc	r0
      00025B 46               [12]  484 	orl	a,@r0
      00025C 70 04            [24]  485 	jnz	00108$
      00025E EC               [12]  486 	mov	a,r4
      00025F B2 E7            [12]  487 	cpl	acc.7
      000261 FC               [12]  488 	mov	r4,a
      000262                        489 00108$:
                                    490 ;	sincoshf.c:85: z=(z+w)*0.5;
      000262 C0*00            [24]  491 	push	bits
      000264 C0 07            [24]  492 	push	ar7
      000266 C0 06            [24]  493 	push	ar6
      000268 C0 05            [24]  494 	push	ar5
      00026A C0 04            [24]  495 	push	ar4
      00026C E5*00            [12]  496 	mov	a,_bp
      00026E 24 09            [12]  497 	add	a,#0x09
      000270 F8               [12]  498 	mov	r0,a
      000271 86 82            [24]  499 	mov	dpl,@r0
      000273 08               [12]  500 	inc	r0
      000274 86 83            [24]  501 	mov	dph,@r0
      000276 08               [12]  502 	inc	r0
      000277 86 F0            [24]  503 	mov	b,@r0
      000279 08               [12]  504 	inc	r0
      00027A E6               [12]  505 	mov	a,@r0
      00027B 12r00r00         [24]  506 	lcall	___fsadd
      00027E AF 82            [24]  507 	mov	r7,dpl
      000280 AE 83            [24]  508 	mov	r6,dph
      000282 AD F0            [24]  509 	mov	r5,b
      000284 FC               [12]  510 	mov	r4,a
      000285 E5 81            [12]  511 	mov	a,sp
      000287 24 FC            [12]  512 	add	a,#0xfc
      000289 F5 81            [12]  513 	mov	sp,a
      00028B D0*00            [24]  514 	pop	bits
      00028D C0*00            [24]  515 	push	bits
      00028F C0 07            [24]  516 	push	ar7
      000291 C0 06            [24]  517 	push	ar6
      000293 C0 05            [24]  518 	push	ar5
      000295 C0 04            [24]  519 	push	ar4
      000297 90 00 00         [24]  520 	mov	dptr,#(0x00&0x00ff)
      00029A E4               [12]  521 	clr	a
      00029B F5 F0            [12]  522 	mov	b,a
      00029D 74 3F            [12]  523 	mov	a,#0x3F
      00029F 12r00r00         [24]  524 	lcall	___fsmul
      0002A2 AF 82            [24]  525 	mov	r7,dpl
      0002A4 AE 83            [24]  526 	mov	r6,dph
      0002A6 AD F0            [24]  527 	mov	r5,b
      0002A8 FC               [12]  528 	mov	r4,a
      0002A9 E5 81            [12]  529 	mov	a,sp
      0002AB 24 FC            [12]  530 	add	a,#0xfc
      0002AD F5 81            [12]  531 	mov	sp,a
      0002AF D0*00            [24]  532 	pop	bits
      0002B1 E5*00            [12]  533 	mov	a,_bp
      0002B3 24 09            [12]  534 	add	a,#0x09
      0002B5 F8               [12]  535 	mov	r0,a
      0002B6 A6 07            [24]  536 	mov	@r0,ar7
      0002B8 08               [12]  537 	inc	r0
      0002B9 A6 06            [24]  538 	mov	@r0,ar6
      0002BB 08               [12]  539 	inc	r0
      0002BC A6 05            [24]  540 	mov	@r0,ar5
      0002BE 08               [12]  541 	inc	r0
      0002BF A6 04            [24]  542 	mov	@r0,ar4
      0002C1                        543 00111$:
                                    544 ;	sincoshf.c:87: if(sign) z=-z;
      0002C1 20*00 03         [24]  545 	jb	b0,00150$
      0002C4 02r04r9E         [24]  546 	ljmp	00119$
      0002C7                        547 00150$:
      0002C7 E5*00            [12]  548 	mov	a,_bp
      0002C9 24 09            [12]  549 	add	a,#0x09
      0002CB F8               [12]  550 	mov	r0,a
      0002CC E6               [12]  551 	mov	a,@r0
      0002CD F6               [12]  552 	mov	@r0,a
      0002CE 08               [12]  553 	inc	r0
      0002CF E6               [12]  554 	mov	a,@r0
      0002D0 F6               [12]  555 	mov	@r0,a
      0002D1 08               [12]  556 	inc	r0
      0002D2 E6               [12]  557 	mov	a,@r0
      0002D3 F6               [12]  558 	mov	@r0,a
      0002D4 08               [12]  559 	inc	r0
      0002D5 E6               [12]  560 	mov	a,@r0
      0002D6 B2 E7            [12]  561 	cpl	acc.7
      0002D8 F6               [12]  562 	mov	@r0,a
      0002D9 02r04r9E         [24]  563 	ljmp	00119$
      0002DC                        564 00118$:
                                    565 ;	sincoshf.c:91: if (y<EPS)
      0002DC E4               [12]  566 	clr	a
      0002DD C0 E0            [24]  567 	push	acc
      0002DF C0 E0            [24]  568 	push	acc
      0002E1 74 80            [12]  569 	mov	a,#0x80
      0002E3 C0 E0            [24]  570 	push	acc
      0002E5 74 39            [12]  571 	mov	a,#0x39
      0002E7 C0 E0            [24]  572 	push	acc
      0002E9 8F 82            [24]  573 	mov	dpl,r7
      0002EB 8E 83            [24]  574 	mov	dph,r6
      0002ED 8D F0            [24]  575 	mov	b,r5
      0002EF EC               [12]  576 	mov	a,r4
      0002F0 12r00r00         [24]  577 	lcall	___fslt
      0002F3 AB 82            [24]  578 	mov	r3,dpl
      0002F5 E5 81            [12]  579 	mov	a,sp
      0002F7 24 FC            [12]  580 	add	a,#0xfc
      0002F9 F5 81            [12]  581 	mov	sp,a
      0002FB EB               [12]  582 	mov	a,r3
      0002FC 60 19            [24]  583 	jz	00115$
                                    584 ;	sincoshf.c:92: z=x;
      0002FE A8*00            [24]  585 	mov	r0,_bp
      000300 08               [12]  586 	inc	r0
      000301 E5*00            [12]  587 	mov	a,_bp
      000303 24 09            [12]  588 	add	a,#0x09
      000305 F9               [12]  589 	mov	r1,a
      000306 E6               [12]  590 	mov	a,@r0
      000307 F7               [12]  591 	mov	@r1,a
      000308 08               [12]  592 	inc	r0
      000309 09               [12]  593 	inc	r1
      00030A E6               [12]  594 	mov	a,@r0
      00030B F7               [12]  595 	mov	@r1,a
      00030C 08               [12]  596 	inc	r0
      00030D 09               [12]  597 	inc	r1
      00030E E6               [12]  598 	mov	a,@r0
      00030F F7               [12]  599 	mov	@r1,a
      000310 08               [12]  600 	inc	r0
      000311 09               [12]  601 	inc	r1
      000312 E6               [12]  602 	mov	a,@r0
      000313 F7               [12]  603 	mov	@r1,a
      000314 02r04r9E         [24]  604 	ljmp	00119$
      000317                        605 00115$:
                                    606 ;	sincoshf.c:95: z=x*x;
      000317 A8*00            [24]  607 	mov	r0,_bp
      000319 08               [12]  608 	inc	r0
      00031A E6               [12]  609 	mov	a,@r0
      00031B C0 E0            [24]  610 	push	acc
      00031D 08               [12]  611 	inc	r0
      00031E E6               [12]  612 	mov	a,@r0
      00031F C0 E0            [24]  613 	push	acc
      000321 08               [12]  614 	inc	r0
      000322 E6               [12]  615 	mov	a,@r0
      000323 C0 E0            [24]  616 	push	acc
      000325 08               [12]  617 	inc	r0
      000326 E6               [12]  618 	mov	a,@r0
      000327 C0 E0            [24]  619 	push	acc
      000329 A8*00            [24]  620 	mov	r0,_bp
      00032B 08               [12]  621 	inc	r0
      00032C 86 82            [24]  622 	mov	dpl,@r0
      00032E 08               [12]  623 	inc	r0
      00032F 86 83            [24]  624 	mov	dph,@r0
      000331 08               [12]  625 	inc	r0
      000332 86 F0            [24]  626 	mov	b,@r0
      000334 08               [12]  627 	inc	r0
      000335 E6               [12]  628 	mov	a,@r0
      000336 12r00r00         [24]  629 	lcall	___fsmul
      000339 AA 82            [24]  630 	mov	r2,dpl
      00033B AB 83            [24]  631 	mov	r3,dph
      00033D AE F0            [24]  632 	mov	r6,b
      00033F FF               [12]  633 	mov	r7,a
      000340 E5 81            [12]  634 	mov	a,sp
      000342 24 FC            [12]  635 	add	a,#0xfc
      000344 F5 81            [12]  636 	mov	sp,a
      000346 E5*00            [12]  637 	mov	a,_bp
      000348 24 09            [12]  638 	add	a,#0x09
      00034A F8               [12]  639 	mov	r0,a
      00034B A6 02            [24]  640 	mov	@r0,ar2
      00034D 08               [12]  641 	inc	r0
      00034E A6 03            [24]  642 	mov	@r0,ar3
      000350 08               [12]  643 	inc	r0
      000351 A6 06            [24]  644 	mov	@r0,ar6
      000353 08               [12]  645 	inc	r0
      000354 A6 07            [24]  646 	mov	@r0,ar7
                                    647 ;	sincoshf.c:96: z=x+x*z*P(z)/Q(z);
      000356 E5*00            [12]  648 	mov	a,_bp
      000358 24 09            [12]  649 	add	a,#0x09
      00035A F8               [12]  650 	mov	r0,a
      00035B E6               [12]  651 	mov	a,@r0
      00035C C0 E0            [24]  652 	push	acc
      00035E 08               [12]  653 	inc	r0
      00035F E6               [12]  654 	mov	a,@r0
      000360 C0 E0            [24]  655 	push	acc
      000362 08               [12]  656 	inc	r0
      000363 E6               [12]  657 	mov	a,@r0
      000364 C0 E0            [24]  658 	push	acc
      000366 08               [12]  659 	inc	r0
      000367 E6               [12]  660 	mov	a,@r0
      000368 C0 E0            [24]  661 	push	acc
      00036A A8*00            [24]  662 	mov	r0,_bp
      00036C 08               [12]  663 	inc	r0
      00036D 86 82            [24]  664 	mov	dpl,@r0
      00036F 08               [12]  665 	inc	r0
      000370 86 83            [24]  666 	mov	dph,@r0
      000372 08               [12]  667 	inc	r0
      000373 86 F0            [24]  668 	mov	b,@r0
      000375 08               [12]  669 	inc	r0
      000376 E6               [12]  670 	mov	a,@r0
      000377 12r00r00         [24]  671 	lcall	___fsmul
      00037A C8               [12]  672 	xch	a,r0
      00037B E5*00            [12]  673 	mov	a,_bp
      00037D 24 05            [12]  674 	add	a,#0x05
      00037F C8               [12]  675 	xch	a,r0
      000380 A6 82            [24]  676 	mov	@r0,dpl
      000382 08               [12]  677 	inc	r0
      000383 A6 83            [24]  678 	mov	@r0,dph
      000385 08               [12]  679 	inc	r0
      000386 A6 F0            [24]  680 	mov	@r0,b
      000388 08               [12]  681 	inc	r0
      000389 F6               [12]  682 	mov	@r0,a
      00038A E5 81            [12]  683 	mov	a,sp
      00038C 24 FC            [12]  684 	add	a,#0xfc
      00038E F5 81            [12]  685 	mov	sp,a
      000390 E5*00            [12]  686 	mov	a,_bp
      000392 24 09            [12]  687 	add	a,#0x09
      000394 F8               [12]  688 	mov	r0,a
      000395 E6               [12]  689 	mov	a,@r0
      000396 C0 E0            [24]  690 	push	acc
      000398 08               [12]  691 	inc	r0
      000399 E6               [12]  692 	mov	a,@r0
      00039A C0 E0            [24]  693 	push	acc
      00039C 08               [12]  694 	inc	r0
      00039D E6               [12]  695 	mov	a,@r0
      00039E C0 E0            [24]  696 	push	acc
      0003A0 08               [12]  697 	inc	r0
      0003A1 E6               [12]  698 	mov	a,@r0
      0003A2 C0 E0            [24]  699 	push	acc
      0003A4 90 E6 EA         [24]  700 	mov	dptr,#0xE6EA
      0003A7 75 F0 42         [24]  701 	mov	b,#0x42
      0003AA 74 BE            [12]  702 	mov	a,#0xBE
      0003AC 12r00r00         [24]  703 	lcall	___fsmul
      0003AF AA 82            [24]  704 	mov	r2,dpl
      0003B1 AB 83            [24]  705 	mov	r3,dph
      0003B3 AE F0            [24]  706 	mov	r6,b
      0003B5 FF               [12]  707 	mov	r7,a
      0003B6 E5 81            [12]  708 	mov	a,sp
      0003B8 24 FC            [12]  709 	add	a,#0xfc
      0003BA F5 81            [12]  710 	mov	sp,a
      0003BC 74 F0            [12]  711 	mov	a,#0xF0
      0003BE C0 E0            [24]  712 	push	acc
      0003C0 74 69            [12]  713 	mov	a,#0x69
      0003C2 C0 E0            [24]  714 	push	acc
      0003C4 74 E4            [12]  715 	mov	a,#0xE4
      0003C6 C0 E0            [24]  716 	push	acc
      0003C8 74 C0            [12]  717 	mov	a,#0xC0
      0003CA C0 E0            [24]  718 	push	acc
      0003CC 8A 82            [24]  719 	mov	dpl,r2
      0003CE 8B 83            [24]  720 	mov	dph,r3
      0003D0 8E F0            [24]  721 	mov	b,r6
      0003D2 EF               [12]  722 	mov	a,r7
      0003D3 12r00r00         [24]  723 	lcall	___fsadd
      0003D6 AC 82            [24]  724 	mov	r4,dpl
      0003D8 AD 83            [24]  725 	mov	r5,dph
      0003DA AE F0            [24]  726 	mov	r6,b
      0003DC FF               [12]  727 	mov	r7,a
      0003DD E5 81            [12]  728 	mov	a,sp
      0003DF 24 FC            [12]  729 	add	a,#0xfc
      0003E1 F5 81            [12]  730 	mov	sp,a
      0003E3 C0 04            [24]  731 	push	ar4
      0003E5 C0 05            [24]  732 	push	ar5
      0003E7 C0 06            [24]  733 	push	ar6
      0003E9 C0 07            [24]  734 	push	ar7
      0003EB E5*00            [12]  735 	mov	a,_bp
      0003ED 24 05            [12]  736 	add	a,#0x05
      0003EF F8               [12]  737 	mov	r0,a
      0003F0 86 82            [24]  738 	mov	dpl,@r0
      0003F2 08               [12]  739 	inc	r0
      0003F3 86 83            [24]  740 	mov	dph,@r0
      0003F5 08               [12]  741 	inc	r0
      0003F6 86 F0            [24]  742 	mov	b,@r0
      0003F8 08               [12]  743 	inc	r0
      0003F9 E6               [12]  744 	mov	a,@r0
      0003FA 12r00r00         [24]  745 	lcall	___fsmul
      0003FD C8               [12]  746 	xch	a,r0
      0003FE E5*00            [12]  747 	mov	a,_bp
      000400 24 05            [12]  748 	add	a,#0x05
      000402 C8               [12]  749 	xch	a,r0
      000403 A6 82            [24]  750 	mov	@r0,dpl
      000405 08               [12]  751 	inc	r0
      000406 A6 83            [24]  752 	mov	@r0,dph
      000408 08               [12]  753 	inc	r0
      000409 A6 F0            [24]  754 	mov	@r0,b
      00040B 08               [12]  755 	inc	r0
      00040C F6               [12]  756 	mov	@r0,a
      00040D E5 81            [12]  757 	mov	a,sp
      00040F 24 FC            [12]  758 	add	a,#0xfc
      000411 F5 81            [12]  759 	mov	sp,a
      000413 74 93            [12]  760 	mov	a,#0x93
      000415 C0 E0            [24]  761 	push	acc
      000417 74 4F            [12]  762 	mov	a,#0x4F
      000419 C0 E0            [24]  763 	push	acc
      00041B 74 2B            [12]  764 	mov	a,#0x2B
      00041D C0 E0            [24]  765 	push	acc
      00041F 74 C2            [12]  766 	mov	a,#0xC2
      000421 C0 E0            [24]  767 	push	acc
      000423 E5*00            [12]  768 	mov	a,_bp
      000425 24 09            [12]  769 	add	a,#0x09
      000427 F8               [12]  770 	mov	r0,a
      000428 86 82            [24]  771 	mov	dpl,@r0
      00042A 08               [12]  772 	inc	r0
      00042B 86 83            [24]  773 	mov	dph,@r0
      00042D 08               [12]  774 	inc	r0
      00042E 86 F0            [24]  775 	mov	b,@r0
      000430 08               [12]  776 	inc	r0
      000431 E6               [12]  777 	mov	a,@r0
      000432 12r00r00         [24]  778 	lcall	___fsadd
      000435 AA 82            [24]  779 	mov	r2,dpl
      000437 AB 83            [24]  780 	mov	r3,dph
      000439 AE F0            [24]  781 	mov	r6,b
      00043B FF               [12]  782 	mov	r7,a
      00043C E5 81            [12]  783 	mov	a,sp
      00043E 24 FC            [12]  784 	add	a,#0xfc
      000440 F5 81            [12]  785 	mov	sp,a
      000442 C0 02            [24]  786 	push	ar2
      000444 C0 03            [24]  787 	push	ar3
      000446 C0 06            [24]  788 	push	ar6
      000448 C0 07            [24]  789 	push	ar7
      00044A E5*00            [12]  790 	mov	a,_bp
      00044C 24 05            [12]  791 	add	a,#0x05
      00044E F8               [12]  792 	mov	r0,a
      00044F 86 82            [24]  793 	mov	dpl,@r0
      000451 08               [12]  794 	inc	r0
      000452 86 83            [24]  795 	mov	dph,@r0
      000454 08               [12]  796 	inc	r0
      000455 86 F0            [24]  797 	mov	b,@r0
      000457 08               [12]  798 	inc	r0
      000458 E6               [12]  799 	mov	a,@r0
      000459 12r00r00         [24]  800 	lcall	___fsdiv
      00045C AC 82            [24]  801 	mov	r4,dpl
      00045E AD 83            [24]  802 	mov	r5,dph
      000460 AE F0            [24]  803 	mov	r6,b
      000462 FF               [12]  804 	mov	r7,a
      000463 E5 81            [12]  805 	mov	a,sp
      000465 24 FC            [12]  806 	add	a,#0xfc
      000467 F5 81            [12]  807 	mov	sp,a
      000469 C0 04            [24]  808 	push	ar4
      00046B C0 05            [24]  809 	push	ar5
      00046D C0 06            [24]  810 	push	ar6
      00046F C0 07            [24]  811 	push	ar7
      000471 A8*00            [24]  812 	mov	r0,_bp
      000473 08               [12]  813 	inc	r0
      000474 86 82            [24]  814 	mov	dpl,@r0
      000476 08               [12]  815 	inc	r0
      000477 86 83            [24]  816 	mov	dph,@r0
      000479 08               [12]  817 	inc	r0
      00047A 86 F0            [24]  818 	mov	b,@r0
      00047C 08               [12]  819 	inc	r0
      00047D E6               [12]  820 	mov	a,@r0
      00047E 12r00r00         [24]  821 	lcall	___fsadd
      000481 AC 82            [24]  822 	mov	r4,dpl
      000483 AD 83            [24]  823 	mov	r5,dph
      000485 AE F0            [24]  824 	mov	r6,b
      000487 FF               [12]  825 	mov	r7,a
      000488 E5 81            [12]  826 	mov	a,sp
      00048A 24 FC            [12]  827 	add	a,#0xfc
      00048C F5 81            [12]  828 	mov	sp,a
      00048E E5*00            [12]  829 	mov	a,_bp
      000490 24 09            [12]  830 	add	a,#0x09
      000492 F8               [12]  831 	mov	r0,a
      000493 A6 04            [24]  832 	mov	@r0,ar4
      000495 08               [12]  833 	inc	r0
      000496 A6 05            [24]  834 	mov	@r0,ar5
      000498 08               [12]  835 	inc	r0
      000499 A6 06            [24]  836 	mov	@r0,ar6
      00049B 08               [12]  837 	inc	r0
      00049C A6 07            [24]  838 	mov	@r0,ar7
      00049E                        839 00119$:
                                    840 ;	sincoshf.c:99: return z;
      00049E E5*00            [12]  841 	mov	a,_bp
      0004A0 24 09            [12]  842 	add	a,#0x09
      0004A2 F8               [12]  843 	mov	r0,a
      0004A3 86 82            [24]  844 	mov	dpl,@r0
      0004A5 08               [12]  845 	inc	r0
      0004A6 86 83            [24]  846 	mov	dph,@r0
      0004A8 08               [12]  847 	inc	r0
      0004A9 86 F0            [24]  848 	mov	b,@r0
      0004AB 08               [12]  849 	inc	r0
      0004AC E6               [12]  850 	mov	a,@r0
      0004AD 85*00 81         [24]  851 	mov	sp,_bp
      0004B0 D0*00            [24]  852 	pop	_bp
      0004B2 22               [24]  853 	ret
                                    854 	.area CSEG    (CODE)
                                    855 	.area CONST   (CODE)
                                    856 	.area XINIT   (CODE)
                                    857 	.area CABS    (ABS,CODE)
